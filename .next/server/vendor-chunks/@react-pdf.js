"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-pdf";
exports.ids = ["vendor-chunks/@react-pdf"];
exports.modules = {

/***/ "(ssr)/./node_modules/@react-pdf/renderer/node_modules/scheduler/cjs/scheduler.development.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@react-pdf/renderer/node_modules/scheduler/cjs/scheduler.development.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/** @license React v0.17.0\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        Object.defineProperty(exports, \"__esModule\", ({\n            value: true\n        }));\n        var enableSchedulerDebugging = false;\n        var enableIsInputPending = false;\n        var enableMessageLoopImplementation = true;\n        var enableProfiling = true;\n        // works by scheduling a requestAnimationFrame, storing the time for the start\n        // of the frame, then scheduling a postMessage which gets scheduled after paint.\n        // Within the postMessage handler do as much work as possible until time + frame\n        // rate. By separating the idle call into a separate event tick we ensure that\n        // layout, paint and other browser work is counted against the available time.\n        // The frame rate is dynamically adjusted.\n        var requestHostCallback;\n        var requestHostTimeout;\n        var cancelHostTimeout;\n        var shouldYieldToHost;\n        var requestPaint;\n        if (// implementation using setTimeout.\n        true) {\n            // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n            // fallback to a naive implementation.\n            var _callback = null;\n            var _timeoutID = null;\n            var _flushCallback = function() {\n                if (_callback !== null) {\n                    try {\n                        var currentTime = exports.unstable_now();\n                        var hasRemainingTime = true;\n                        _callback(hasRemainingTime, currentTime);\n                        _callback = null;\n                    } catch (e) {\n                        setTimeout(_flushCallback, 0);\n                        throw e;\n                    }\n                }\n            };\n            var initialTime = Date.now();\n            exports.unstable_now = function() {\n                return Date.now() - initialTime;\n            };\n            requestHostCallback = function(cb) {\n                if (_callback !== null) {\n                    // Protect against re-entrancy.\n                    setTimeout(requestHostCallback, 0, cb);\n                } else {\n                    _callback = cb;\n                    setTimeout(_flushCallback, 0);\n                }\n            };\n            requestHostTimeout = function(cb, ms) {\n                _timeoutID = setTimeout(cb, ms);\n            };\n            cancelHostTimeout = function() {\n                clearTimeout(_timeoutID);\n            };\n            shouldYieldToHost = function() {\n                return false;\n            };\n            requestPaint = exports.unstable_forceFrameRate = function() {};\n        } else { var onAnimationFrame, port, channel, performWorkUntilDeadline, scheduling, needsPaint, maxFrameLength, fpsLocked, frameDeadline, prevRAFInterval, prevRAFTime, frameLength, taskTimeoutID, rAFTimeoutID, scheduledHostCallback, isMessageLoopRunning, isRAFLoopRunning, _initialTime, cancelAnimationFrame, requestAnimationFrame, _clearTimeout, _setTimeout, _Date, performance; }\n        function push(heap, node) {\n            var index = heap.length;\n            heap.push(node);\n            siftUp(heap, node, index);\n        }\n        function peek(heap) {\n            var first = heap[0];\n            return first === undefined ? null : first;\n        }\n        function pop(heap) {\n            var first = heap[0];\n            if (first !== undefined) {\n                var last = heap.pop();\n                if (last !== first) {\n                    heap[0] = last;\n                    siftDown(heap, last, 0);\n                }\n                return first;\n            } else {\n                return null;\n            }\n        }\n        function siftUp(heap, node, i) {\n            var index = i;\n            while(true){\n                var parentIndex = Math.floor((index - 1) / 2);\n                var parent = heap[parentIndex];\n                if (parent !== undefined && compare(parent, node) > 0) {\n                    // The parent is larger. Swap positions.\n                    heap[parentIndex] = node;\n                    heap[index] = parent;\n                    index = parentIndex;\n                } else {\n                    // The parent is smaller. Exit.\n                    return;\n                }\n            }\n        }\n        function siftDown(heap, node, i) {\n            var index = i;\n            var length = heap.length;\n            while(index < length){\n                var leftIndex = (index + 1) * 2 - 1;\n                var left = heap[leftIndex];\n                var rightIndex = leftIndex + 1;\n                var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n                if (left !== undefined && compare(left, node) < 0) {\n                    if (right !== undefined && compare(right, left) < 0) {\n                        heap[index] = right;\n                        heap[rightIndex] = node;\n                        index = rightIndex;\n                    } else {\n                        heap[index] = left;\n                        heap[leftIndex] = node;\n                        index = leftIndex;\n                    }\n                } else if (right !== undefined && compare(right, node) < 0) {\n                    heap[index] = right;\n                    heap[rightIndex] = node;\n                    index = rightIndex;\n                } else {\n                    // Neither child is smaller. Exit.\n                    return;\n                }\n            }\n        }\n        function compare(a, b) {\n            // Compare sort index first, then task id.\n            var diff = a.sortIndex - b.sortIndex;\n            return diff !== 0 ? diff : a.id - b.id;\n        }\n        // TODO: Use symbols?\n        var NoPriority = 0;\n        var ImmediatePriority = 1;\n        var UserBlockingPriority = 2;\n        var NormalPriority = 3;\n        var LowPriority = 4;\n        var IdlePriority = 5;\n        var runIdCounter = 0;\n        var mainThreadIdCounter = 0;\n        var profilingStateSize = 4;\n        var sharedProfilingBuffer = enableProfiling ? typeof SharedArrayBuffer === \"function\" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === \"function\" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\n         : null;\n        var profilingState = enableProfiling && sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\n        var PRIORITY = 0;\n        var CURRENT_TASK_ID = 1;\n        var CURRENT_RUN_ID = 2;\n        var QUEUE_SIZE = 3;\n        if (enableProfiling) {\n            profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\n            // array might include canceled tasks.\n            profilingState[QUEUE_SIZE] = 0;\n            profilingState[CURRENT_TASK_ID] = 0;\n        } // Bytes per element is 4\n        var INITIAL_EVENT_LOG_SIZE = 131072;\n        var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n        var eventLogSize = 0;\n        var eventLogBuffer = null;\n        var eventLog = null;\n        var eventLogIndex = 0;\n        var TaskStartEvent = 1;\n        var TaskCompleteEvent = 2;\n        var TaskErrorEvent = 3;\n        var TaskCancelEvent = 4;\n        var TaskRunEvent = 5;\n        var TaskYieldEvent = 6;\n        var SchedulerSuspendEvent = 7;\n        var SchedulerResumeEvent = 8;\n        function logEvent(entries) {\n            if (eventLog !== null) {\n                var offset = eventLogIndex;\n                eventLogIndex += entries.length;\n                if (eventLogIndex + 1 > eventLogSize) {\n                    eventLogSize *= 2;\n                    if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n                        console.error(\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + \"forget to call `stopLoggingProfilingEvents()`.\");\n                        stopLoggingProfilingEvents();\n                        return;\n                    }\n                    var newEventLog = new Int32Array(eventLogSize * 4);\n                    newEventLog.set(eventLog);\n                    eventLogBuffer = newEventLog.buffer;\n                    eventLog = newEventLog;\n                }\n                eventLog.set(entries, offset);\n            }\n        }\n        function startLoggingProfilingEvents() {\n            eventLogSize = INITIAL_EVENT_LOG_SIZE;\n            eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n            eventLog = new Int32Array(eventLogBuffer);\n            eventLogIndex = 0;\n        }\n        function stopLoggingProfilingEvents() {\n            var buffer = eventLogBuffer;\n            eventLogSize = 0;\n            eventLogBuffer = null;\n            eventLog = null;\n            eventLogIndex = 0;\n            return buffer;\n        }\n        function markTaskStart(task, ms) {\n            if (enableProfiling) {\n                profilingState[QUEUE_SIZE]++;\n                if (eventLog !== null) {\n                    // performance.now returns a float, representing milliseconds. When the\n                    // event is logged, it's coerced to an int. Convert to microseconds to\n                    // maintain extra degrees of precision.\n                    logEvent([\n                        TaskStartEvent,\n                        ms * 1000,\n                        task.id,\n                        task.priorityLevel\n                    ]);\n                }\n            }\n        }\n        function markTaskCompleted(task, ms) {\n            if (enableProfiling) {\n                profilingState[PRIORITY] = NoPriority;\n                profilingState[CURRENT_TASK_ID] = 0;\n                profilingState[QUEUE_SIZE]--;\n                if (eventLog !== null) {\n                    logEvent([\n                        TaskCompleteEvent,\n                        ms * 1000,\n                        task.id\n                    ]);\n                }\n            }\n        }\n        function markTaskCanceled(task, ms) {\n            if (enableProfiling) {\n                profilingState[QUEUE_SIZE]--;\n                if (eventLog !== null) {\n                    logEvent([\n                        TaskCancelEvent,\n                        ms * 1000,\n                        task.id\n                    ]);\n                }\n            }\n        }\n        function markTaskErrored(task, ms) {\n            if (enableProfiling) {\n                profilingState[PRIORITY] = NoPriority;\n                profilingState[CURRENT_TASK_ID] = 0;\n                profilingState[QUEUE_SIZE]--;\n                if (eventLog !== null) {\n                    logEvent([\n                        TaskErrorEvent,\n                        ms * 1000,\n                        task.id\n                    ]);\n                }\n            }\n        }\n        function markTaskRun(task, ms) {\n            if (enableProfiling) {\n                runIdCounter++;\n                profilingState[PRIORITY] = task.priorityLevel;\n                profilingState[CURRENT_TASK_ID] = task.id;\n                profilingState[CURRENT_RUN_ID] = runIdCounter;\n                if (eventLog !== null) {\n                    logEvent([\n                        TaskRunEvent,\n                        ms * 1000,\n                        task.id,\n                        runIdCounter\n                    ]);\n                }\n            }\n        }\n        function markTaskYield(task, ms) {\n            if (enableProfiling) {\n                profilingState[PRIORITY] = NoPriority;\n                profilingState[CURRENT_TASK_ID] = 0;\n                profilingState[CURRENT_RUN_ID] = 0;\n                if (eventLog !== null) {\n                    logEvent([\n                        TaskYieldEvent,\n                        ms * 1000,\n                        task.id,\n                        runIdCounter\n                    ]);\n                }\n            }\n        }\n        function markSchedulerSuspended(ms) {\n            if (enableProfiling) {\n                mainThreadIdCounter++;\n                if (eventLog !== null) {\n                    logEvent([\n                        SchedulerSuspendEvent,\n                        ms * 1000,\n                        mainThreadIdCounter\n                    ]);\n                }\n            }\n        }\n        function markSchedulerUnsuspended(ms) {\n            if (enableProfiling) {\n                if (eventLog !== null) {\n                    logEvent([\n                        SchedulerResumeEvent,\n                        ms * 1000,\n                        mainThreadIdCounter\n                    ]);\n                }\n            }\n        }\n        /* eslint-disable no-var */ // Math.pow(2, 30) - 1\n        // 0b111111111111111111111111111111\n        var maxSigned31BitInt = 1073741823; // Times out immediately\n        var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n        var USER_BLOCKING_PRIORITY = 250;\n        var NORMAL_PRIORITY_TIMEOUT = 5000;\n        var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n        var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\n        var taskQueue = [];\n        var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n        var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n        var isSchedulerPaused = false;\n        var currentTask = null;\n        var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n        var isPerformingWork = false;\n        var isHostCallbackScheduled = false;\n        var isHostTimeoutScheduled = false;\n        function advanceTimers(currentTime) {\n            // Check for tasks that are no longer delayed and add them to the queue.\n            var timer = peek(timerQueue);\n            while(timer !== null){\n                if (timer.callback === null) {\n                    // Timer was cancelled.\n                    pop(timerQueue);\n                } else if (timer.startTime <= currentTime) {\n                    // Timer fired. Transfer to the task queue.\n                    pop(timerQueue);\n                    timer.sortIndex = timer.expirationTime;\n                    push(taskQueue, timer);\n                    if (enableProfiling) {\n                        markTaskStart(timer, currentTime);\n                        timer.isQueued = true;\n                    }\n                } else {\n                    // Remaining timers are pending.\n                    return;\n                }\n                timer = peek(timerQueue);\n            }\n        }\n        function handleTimeout(currentTime) {\n            isHostTimeoutScheduled = false;\n            advanceTimers(currentTime);\n            if (!isHostCallbackScheduled) {\n                if (peek(taskQueue) !== null) {\n                    isHostCallbackScheduled = true;\n                    requestHostCallback(flushWork);\n                } else {\n                    var firstTimer = peek(timerQueue);\n                    if (firstTimer !== null) {\n                        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n                    }\n                }\n            }\n        }\n        function flushWork(hasTimeRemaining, initialTime) {\n            if (enableProfiling) {\n                markSchedulerUnsuspended(initialTime);\n            } // We'll need a host callback the next time work is scheduled.\n            isHostCallbackScheduled = false;\n            if (isHostTimeoutScheduled) {\n                // We scheduled a timeout but it's no longer needed. Cancel it.\n                isHostTimeoutScheduled = false;\n                cancelHostTimeout();\n            }\n            isPerformingWork = true;\n            var previousPriorityLevel = currentPriorityLevel;\n            try {\n                if (enableProfiling) {\n                    try {\n                        return workLoop(hasTimeRemaining, initialTime);\n                    } catch (error) {\n                        if (currentTask !== null) {\n                            var currentTime = exports.unstable_now();\n                            markTaskErrored(currentTask, currentTime);\n                            currentTask.isQueued = false;\n                        }\n                        throw error;\n                    }\n                } else {\n                    // No catch in prod codepath.\n                    return workLoop(hasTimeRemaining, initialTime);\n                }\n            } finally{\n                currentTask = null;\n                currentPriorityLevel = previousPriorityLevel;\n                isPerformingWork = false;\n                if (enableProfiling) {\n                    var _currentTime = exports.unstable_now();\n                    markSchedulerSuspended(_currentTime);\n                }\n            }\n        }\n        function workLoop(hasTimeRemaining, initialTime) {\n            var currentTime = initialTime;\n            advanceTimers(currentTime);\n            currentTask = peek(taskQueue);\n            while(currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)){\n                if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n                    break;\n                }\n                var callback = currentTask.callback;\n                if (callback !== null) {\n                    currentTask.callback = null;\n                    currentPriorityLevel = currentTask.priorityLevel;\n                    var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n                    markTaskRun(currentTask, currentTime);\n                    var continuationCallback = callback(didUserCallbackTimeout);\n                    currentTime = exports.unstable_now();\n                    if (typeof continuationCallback === \"function\") {\n                        currentTask.callback = continuationCallback;\n                        markTaskYield(currentTask, currentTime);\n                    } else {\n                        if (enableProfiling) {\n                            markTaskCompleted(currentTask, currentTime);\n                            currentTask.isQueued = false;\n                        }\n                        if (currentTask === peek(taskQueue)) {\n                            pop(taskQueue);\n                        }\n                    }\n                    advanceTimers(currentTime);\n                } else {\n                    pop(taskQueue);\n                }\n                currentTask = peek(taskQueue);\n            } // Return whether there's additional work\n            if (currentTask !== null) {\n                return true;\n            } else {\n                var firstTimer = peek(timerQueue);\n                if (firstTimer !== null) {\n                    requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n                }\n                return false;\n            }\n        }\n        function unstable_runWithPriority(priorityLevel, eventHandler) {\n            switch(priorityLevel){\n                case ImmediatePriority:\n                case UserBlockingPriority:\n                case NormalPriority:\n                case LowPriority:\n                case IdlePriority:\n                    break;\n                default:\n                    priorityLevel = NormalPriority;\n            }\n            var previousPriorityLevel = currentPriorityLevel;\n            currentPriorityLevel = priorityLevel;\n            try {\n                return eventHandler();\n            } finally{\n                currentPriorityLevel = previousPriorityLevel;\n            }\n        }\n        function unstable_next(eventHandler) {\n            var priorityLevel;\n            switch(currentPriorityLevel){\n                case ImmediatePriority:\n                case UserBlockingPriority:\n                case NormalPriority:\n                    // Shift down to normal priority\n                    priorityLevel = NormalPriority;\n                    break;\n                default:\n                    // Anything lower than normal priority should remain at the current level.\n                    priorityLevel = currentPriorityLevel;\n                    break;\n            }\n            var previousPriorityLevel = currentPriorityLevel;\n            currentPriorityLevel = priorityLevel;\n            try {\n                return eventHandler();\n            } finally{\n                currentPriorityLevel = previousPriorityLevel;\n            }\n        }\n        function unstable_wrapCallback(callback) {\n            var parentPriorityLevel = currentPriorityLevel;\n            return function() {\n                // This is a fork of runWithPriority, inlined for performance.\n                var previousPriorityLevel = currentPriorityLevel;\n                currentPriorityLevel = parentPriorityLevel;\n                try {\n                    return callback.apply(this, arguments);\n                } finally{\n                    currentPriorityLevel = previousPriorityLevel;\n                }\n            };\n        }\n        function timeoutForPriorityLevel(priorityLevel) {\n            switch(priorityLevel){\n                case ImmediatePriority:\n                    return IMMEDIATE_PRIORITY_TIMEOUT;\n                case UserBlockingPriority:\n                    return USER_BLOCKING_PRIORITY;\n                case IdlePriority:\n                    return IDLE_PRIORITY;\n                case LowPriority:\n                    return LOW_PRIORITY_TIMEOUT;\n                case NormalPriority:\n                default:\n                    return NORMAL_PRIORITY_TIMEOUT;\n            }\n        }\n        function unstable_scheduleCallback(priorityLevel, callback, options) {\n            var currentTime = exports.unstable_now();\n            var startTime;\n            var timeout;\n            if (typeof options === \"object\" && options !== null) {\n                var delay = options.delay;\n                if (typeof delay === \"number\" && delay > 0) {\n                    startTime = currentTime + delay;\n                } else {\n                    startTime = currentTime;\n                }\n                timeout = typeof options.timeout === \"number\" ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n            } else {\n                timeout = timeoutForPriorityLevel(priorityLevel);\n                startTime = currentTime;\n            }\n            var expirationTime = startTime + timeout;\n            var newTask = {\n                id: taskIdCounter++,\n                callback: callback,\n                priorityLevel: priorityLevel,\n                startTime: startTime,\n                expirationTime: expirationTime,\n                sortIndex: -1\n            };\n            if (enableProfiling) {\n                newTask.isQueued = false;\n            }\n            if (startTime > currentTime) {\n                // This is a delayed task.\n                newTask.sortIndex = startTime;\n                push(timerQueue, newTask);\n                if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n                    // All tasks are delayed, and this is the task with the earliest delay.\n                    if (isHostTimeoutScheduled) {\n                        // Cancel an existing timeout.\n                        cancelHostTimeout();\n                    } else {\n                        isHostTimeoutScheduled = true;\n                    } // Schedule a timeout.\n                    requestHostTimeout(handleTimeout, startTime - currentTime);\n                }\n            } else {\n                newTask.sortIndex = expirationTime;\n                push(taskQueue, newTask);\n                if (enableProfiling) {\n                    markTaskStart(newTask, currentTime);\n                    newTask.isQueued = true;\n                } // Schedule a host callback, if needed. If we're already performing work,\n                // wait until the next time we yield.\n                if (!isHostCallbackScheduled && !isPerformingWork) {\n                    isHostCallbackScheduled = true;\n                    requestHostCallback(flushWork);\n                }\n            }\n            return newTask;\n        }\n        function unstable_pauseExecution() {\n            isSchedulerPaused = true;\n        }\n        function unstable_continueExecution() {\n            isSchedulerPaused = false;\n            if (!isHostCallbackScheduled && !isPerformingWork) {\n                isHostCallbackScheduled = true;\n                requestHostCallback(flushWork);\n            }\n        }\n        function unstable_getFirstCallbackNode() {\n            return peek(taskQueue);\n        }\n        function unstable_cancelCallback(task) {\n            if (enableProfiling) {\n                if (task.isQueued) {\n                    var currentTime = exports.unstable_now();\n                    markTaskCanceled(task, currentTime);\n                    task.isQueued = false;\n                }\n            } // Null out the callback to indicate the task has been canceled. (Can't\n            // remove from the queue because you can't remove arbitrary nodes from an\n            // array based heap, only the first one.)\n            task.callback = null;\n        }\n        function unstable_getCurrentPriorityLevel() {\n            return currentPriorityLevel;\n        }\n        function unstable_shouldYield() {\n            var currentTime = exports.unstable_now();\n            advanceTimers(currentTime);\n            var firstTask = peek(taskQueue);\n            return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n        }\n        var unstable_requestPaint = requestPaint;\n        var unstable_Profiling = enableProfiling ? {\n            startLoggingProfilingEvents: startLoggingProfilingEvents,\n            stopLoggingProfilingEvents: stopLoggingProfilingEvents,\n            sharedProfilingBuffer: sharedProfilingBuffer\n        } : null;\n        exports.unstable_ImmediatePriority = ImmediatePriority;\n        exports.unstable_UserBlockingPriority = UserBlockingPriority;\n        exports.unstable_NormalPriority = NormalPriority;\n        exports.unstable_IdlePriority = IdlePriority;\n        exports.unstable_LowPriority = LowPriority;\n        exports.unstable_runWithPriority = unstable_runWithPriority;\n        exports.unstable_next = unstable_next;\n        exports.unstable_scheduleCallback = unstable_scheduleCallback;\n        exports.unstable_cancelCallback = unstable_cancelCallback;\n        exports.unstable_wrapCallback = unstable_wrapCallback;\n        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n        exports.unstable_shouldYield = unstable_shouldYield;\n        exports.unstable_requestPaint = unstable_requestPaint;\n        exports.unstable_continueExecution = unstable_continueExecution;\n        exports.unstable_pauseExecution = unstable_pauseExecution;\n        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n        exports.unstable_Profiling = unstable_Profiling;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/renderer/node_modules/scheduler/cjs/scheduler.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-pdf/renderer/node_modules/scheduler/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@react-pdf/renderer/node_modules/scheduler/index.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ \"(ssr)/./node_modules/@react-pdf/renderer/node_modules/scheduler/cjs/scheduler.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXBkZi9yZW5kZXJlci9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDBLQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2xlYXJucmVhY3RuZXh0Ly4vbm9kZV9tb2R1bGVzL0ByZWFjdC1wZGYvcmVuZGVyZXIvbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcz9kNWU0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/renderer/node_modules/scheduler/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-pdf/fns/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@react-pdf/fns/lib/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adjust: () => (/* binding */ adjust),\n/* harmony export */   asyncCompose: () => (/* binding */ asyncCompose),\n/* harmony export */   capitalize: () => (/* binding */ capitalize),\n/* harmony export */   castArray: () => (/* binding */ castArray),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   dropLast: () => (/* binding */ dropLast),\n/* harmony export */   evolve: () => (/* binding */ evolve),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   isNil: () => (/* binding */ isNil),\n/* harmony export */   last: () => (/* binding */ last),\n/* harmony export */   mapValues: () => (/* binding */ mapValues),\n/* harmony export */   matchPercent: () => (/* binding */ matchPercent),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   repeat: () => (/* binding */ repeat),\n/* harmony export */   reverse: () => (/* binding */ reverse),\n/* harmony export */   upperFirst: () => (/* binding */ upperFirst)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/regeneratorRuntime */ \"(ssr)/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(ssr)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n\n\n/**\n * Applies a function to the value at the given index of an array\n\n * @param {number} index\n * @param {function} fn\n * @param {array} collection\n * @returns copy of the array with the element at the given index replaced with the result of the function application.\n */ var adjust = function adjust(index, fn, collection) {\n    var _Object$assign;\n    if (index >= 0 && index >= collection.length) return collection;\n    if (index < 0 && Math.abs(index) > collection.length) return collection;\n    var i = index < 0 ? collection.length + index : index;\n    return Object.assign([], collection, (_Object$assign = {}, _Object$assign[i] = fn(collection[i]), _Object$assign));\n};\nvar reverse = function reverse(list) {\n    return Array.prototype.slice.call(list, 0).reverse();\n};\n/**\n * @typedef {Function} AsyncCompose\n * @param {any} value\n * @param {...any} args\n * @returns {any} result\n */ /**\n * Performs right-to-left function composition with async functions support\n *\n * @param {...Function} fns functions\n * @returns {AsyncCompose} composed function\n */ var asyncCompose = function asyncCompose() {\n    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){\n        fns[_key] = arguments[_key];\n    }\n    return /*#__PURE__*/ function() {\n        var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().mark(function _callee(value) {\n            var result, reversedFns, _len2, args, _key2, i, fn, _args = arguments;\n            return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().wrap(function _callee$(_context) {\n                while(1)switch(_context.prev = _context.next){\n                    case 0:\n                        result = value;\n                        reversedFns = reverse(fns);\n                        for(_len2 = _args.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                            args[_key2 - 1] = _args[_key2];\n                        }\n                        i = 0;\n                    case 4:\n                        if (!(i < reversedFns.length)) {\n                            _context.next = 12;\n                            break;\n                        }\n                        fn = reversedFns[i];\n                        _context.next = 8;\n                        return fn.apply(void 0, [\n                            result\n                        ].concat(args));\n                    case 8:\n                        result = _context.sent;\n                    case 9:\n                        i += 1;\n                        _context.next = 4;\n                        break;\n                    case 12:\n                        return _context.abrupt(\"return\", result);\n                    case 13:\n                    case \"end\":\n                        return _context.stop();\n                }\n            }, _callee);\n        }));\n        return function(_x) {\n            return _ref.apply(this, arguments);\n        };\n    }();\n};\n/**\n * Capitalize first letter of each word\n *\n * @param {string} value string\n * @returns {string} capitalized string\n */ var capitalize = function capitalize(value) {\n    if (!value) return value;\n    return value.replace(/(^|\\s)\\S/g, function(l) {\n        return l.toUpperCase();\n    });\n};\n/**\n * Casts value to array\n *\n * @template T\n * @param {T|T[]} value value\n * @returns {T[]} array\n */ var castArray = function castArray(value) {\n    return Array.isArray(value) ? value : [\n        value\n    ];\n};\n/* eslint-disable no-await-in-loop */ /**\n * @typedef {Function} Compose\n * @param {any} value\n * @param {...any} args\n * @returns {any} result\n */ /**\n * Performs right-to-left function composition\n *\n * @param {...Function} fns functions\n * @returns {Compose} composed function\n */ var compose = function compose() {\n    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){\n        fns[_key] = arguments[_key];\n    }\n    return function(value) {\n        var result = value;\n        var reversedFns = reverse(fns);\n        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n            args[_key2 - 1] = arguments[_key2];\n        }\n        for(var i = 0; i < reversedFns.length; i += 1){\n            var fn = reversedFns[i];\n            result = fn.apply(void 0, [\n                result\n            ].concat(args));\n        }\n        return result;\n    };\n};\nvar dropLast = function dropLast(array) {\n    return array.slice(0, array.length - 1);\n};\nvar evolve = function evolve(transformations, object) {\n    var result = object instanceof Array ? [] : {};\n    var keys = Object.keys(object);\n    for(var i = 0; i < keys.length; i += 1){\n        var key = keys[i];\n        var transformation = transformations[key];\n        var type = typeof transformation;\n        if (type === \"function\") {\n            result[key] = transformation(object[key]);\n        } else if (transformation && type === \"object\") {\n            result[key] = evolve(transformation, object[key]);\n        } else result[key] = object[key];\n    }\n    return result;\n};\nvar isNil = function isNil(value) {\n    return value === null || value === undefined;\n};\nvar get = function get(target, path, defaultValue) {\n    if (isNil(target)) return defaultValue;\n    var _path = castArray(path);\n    var result = target;\n    for(var i = 0; i < _path.length; i += 1){\n        if (isNil(result)) return undefined;\n        result = result[_path[i]];\n    }\n    return isNil(result) ? defaultValue : result;\n};\nvar last = function last(value) {\n    return value === \"\" ? \"\" : value[value.length - 1];\n};\nvar mapValues = function mapValues(object, fn) {\n    var entries = Object.entries(object);\n    return entries.reduce(function(acc, _ref, index) {\n        var key = _ref[0], value = _ref[1];\n        acc[key] = fn(value, key, index);\n        return acc;\n    }, {});\n};\n/**\n * @param {string | number} value\n * @returns {RegExpExecArray | null} match\n */ var isPercent = function isPercent(value) {\n    return /((-)?\\d+\\.?\\d*)%/g.exec(\"\" + value);\n};\n/**\n * Get percentage value of input\n *\n * @param {string | number} value\n * @returns {{ percent: number, value: number } | null} percent value (if matches)\n */ var matchPercent = function matchPercent(value) {\n    var match = isPercent(value);\n    if (match) {\n        var f = parseFloat(match[1]);\n        var percent = f / 100;\n        return {\n            percent: percent,\n            value: f\n        };\n    }\n    return null;\n};\nvar omit = function omit(keys, object) {\n    var _keys = castArray(keys);\n    var copy = Object.assign({}, object);\n    _keys.forEach(function(key) {\n        delete copy[key];\n    });\n    return copy;\n};\nvar pick = function pick(keys, obj) {\n    var result = {};\n    for(var i = 0; i < keys.length; i += 1){\n        var key = keys[i];\n        if (key in obj) result[key] = obj[key];\n    }\n    return result;\n};\nvar repeat = function repeat(list, length) {\n    if (length === void 0) {\n        length = 0;\n    }\n    var result = new Array(length);\n    for(var i = 0; i < length; i += 1){\n        result[i] = list;\n    }\n    return result;\n};\n/**\n * Capitalize first letter of string\n *\n * @param {string} value string\n * @returns {string} capitalized string\n */ var upperFirst = function upperFirst(value) {\n    if (!value) return value;\n    return value.charAt(0).toUpperCase() + value.slice(1);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/fns/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-pdf/font/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@react-pdf/font/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FontStore)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/regeneratorRuntime */ \"(ssr)/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(ssr)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutPropertiesLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js\");\n/* harmony import */ var is_url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! is-url */ \"(ssr)/./node_modules/is-url/index.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var fontkit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! fontkit */ \"(ssr)/./node_modules/fontkit/dist/module.mjs\");\n\n\n\n\n\n\n\nvar _excluded = [\n    \"src\",\n    \"fontWeight\",\n    \"fontStyle\"\n];\nvar FONT_WEIGHTS = {\n    thin: 100,\n    hairline: 100,\n    ultralight: 200,\n    extralight: 200,\n    light: 300,\n    normal: 400,\n    medium: 500,\n    semibold: 600,\n    demibold: 600,\n    bold: 700,\n    ultrabold: 800,\n    extrabold: 800,\n    heavy: 900,\n    black: 900\n};\nvar fetchFont = /*#__PURE__*/ function() {\n    var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().mark(function _callee(src, options) {\n        var response, data;\n        return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().wrap(function _callee$(_context) {\n            while(1)switch(_context.prev = _context.next){\n                case 0:\n                    _context.next = 2;\n                    return cross_fetch__WEBPACK_IMPORTED_MODULE_5__(src, options);\n                case 2:\n                    response = _context.sent;\n                    _context.next = 5;\n                    return response.arrayBuffer();\n                case 5:\n                    data = _context.sent;\n                    return _context.abrupt(\"return\", new Uint8Array(data));\n                case 7:\n                case \"end\":\n                    return _context.stop();\n            }\n        }, _callee);\n    }));\n    return function fetchFont(_x, _x2) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar isDataUrl = function isDataUrl(dataUrl) {\n    var header = dataUrl.split(\",\")[0];\n    var hasDataPrefix = header.substring(0, 5) === \"data:\";\n    var hasBase64Prefix = header.split(\";\")[1] === \"base64\";\n    return hasDataPrefix && hasBase64Prefix;\n};\nvar resolveFontWeight = function resolveFontWeight(value) {\n    return typeof value === \"string\" ? FONT_WEIGHTS[value] : value;\n};\nvar sortByFontWeight = function sortByFontWeight(a, b) {\n    return a.fontWeight - b.fontWeight;\n};\nvar FontSource = /*#__PURE__*/ function() {\n    function FontSource(src, fontFamily, fontStyle, fontWeight, options) {\n        this.src = src;\n        this.fontFamily = fontFamily;\n        this.fontStyle = fontStyle || \"normal\";\n        this.fontWeight = fontWeight || 400;\n        this.data = null;\n        this.options = options;\n        this.loadResultPromise = null;\n    }\n    var _proto = FontSource.prototype;\n    _proto._load = /*#__PURE__*/ function() {\n        var _load2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().mark(function _callee2() {\n            var postscriptName, raw, uint8Array, _this$options, headers, body, _this$options$method, method, data;\n            return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().wrap(function _callee2$(_context2) {\n                while(1)switch(_context2.prev = _context2.next){\n                    case 0:\n                        postscriptName = this.options.postscriptName;\n                        if (!isDataUrl(this.src)) {\n                            _context2.next = 7;\n                            break;\n                        }\n                        raw = this.src.split(\",\")[1];\n                        uint8Array = new Uint8Array(atob(raw).split(\"\").map(function(c) {\n                            return c.charCodeAt(0);\n                        }));\n                        this.data = fontkit__WEBPACK_IMPORTED_MODULE_6__.create(uint8Array, postscriptName);\n                        _context2.next = 19;\n                        break;\n                    case 7:\n                        if (!is_url__WEBPACK_IMPORTED_MODULE_4__(this.src)) {\n                            _context2.next = 15;\n                            break;\n                        }\n                        _this$options = this.options, headers = _this$options.headers, body = _this$options.body, _this$options$method = _this$options.method, method = _this$options$method === void 0 ? \"GET\" : _this$options$method;\n                        _context2.next = 11;\n                        return fetchFont(this.src, {\n                            method: method,\n                            body: body,\n                            headers: headers\n                        });\n                    case 11:\n                        data = _context2.sent;\n                        this.data = fontkit__WEBPACK_IMPORTED_MODULE_6__.create(data, postscriptName);\n                        _context2.next = 19;\n                        break;\n                    case 15:\n                        _context2.next = 18;\n                        return fontkit__WEBPACK_IMPORTED_MODULE_6__.open(this.src, postscriptName);\n                    case 18:\n                        this.data = _context2.sent;\n                    case 19:\n                    case \"end\":\n                        return _context2.stop();\n                }\n            }, _callee2, this);\n        }));\n        function _load() {\n            return _load2.apply(this, arguments);\n        }\n        return _load;\n    }();\n    _proto.load = /*#__PURE__*/ function() {\n        var _load3 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().mark(function _callee3() {\n            return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().wrap(function _callee3$(_context3) {\n                while(1)switch(_context3.prev = _context3.next){\n                    case 0:\n                        if (this.loadResultPromise === null) {\n                            this.loadResultPromise = this._load();\n                        }\n                        return _context3.abrupt(\"return\", this.loadResultPromise);\n                    case 2:\n                    case \"end\":\n                        return _context3.stop();\n                }\n            }, _callee3, this);\n        }));\n        function load() {\n            return _load3.apply(this, arguments);\n        }\n        return load;\n    }();\n    return FontSource;\n}();\nvar Font = /*#__PURE__*/ function() {\n    Font.create = function create(family) {\n        return new Font(family);\n    };\n    function Font(family) {\n        this.family = family;\n        this.sources = [];\n    }\n    var _proto2 = Font.prototype;\n    _proto2.register = function register(_ref2) {\n        var src = _ref2.src, fontWeight = _ref2.fontWeight, fontStyle = _ref2.fontStyle, options = _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_3__(_ref2, _excluded);\n        var numericFontWeight = resolveFontWeight(fontWeight);\n        this.sources.push(new FontSource(src, this.family, fontStyle, numericFontWeight, options));\n    };\n    _proto2.resolve = function resolve(descriptor) {\n        var _descriptor$fontWeigh = descriptor.fontWeight, fontWeight = _descriptor$fontWeigh === void 0 ? 400 : _descriptor$fontWeigh, _descriptor$fontStyle = descriptor.fontStyle, fontStyle = _descriptor$fontStyle === void 0 ? \"normal\" : _descriptor$fontStyle;\n        var styleSources = this.sources.filter(function(s) {\n            return s.fontStyle === fontStyle;\n        });\n        // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\n        var exactFit = styleSources.find(function(s) {\n            return s.fontWeight === fontWeight;\n        });\n        if (exactFit) return exactFit;\n        var res;\n        if (fontWeight >= 400 && fontWeight <= 500) {\n            var leftOffset = styleSources.filter(function(s) {\n                return s.fontWeight <= fontWeight;\n            });\n            var rightOffset = styleSources.filter(function(s) {\n                return s.fontWeight > 500;\n            });\n            var fit = styleSources.filter(function(s) {\n                return s.fontWeight >= fontWeight && s.fontWeight < 500;\n            });\n            res = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];\n        }\n        var lt = styleSources.filter(function(s) {\n            return s.fontWeight < fontWeight;\n        }).sort(sortByFontWeight);\n        var gt = styleSources.filter(function(s) {\n            return s.fontWeight > fontWeight;\n        }).sort(sortByFontWeight);\n        if (fontWeight < 400) {\n            res = lt[lt.length - 1] || gt[0];\n        }\n        if (fontWeight > 500) {\n            res = gt[0] || lt[lt.length - 1];\n        }\n        if (!res) {\n            throw new Error(\"Could not resolve font for \" + this.family + \", fontWeight \" + fontWeight);\n        }\n        return res;\n    };\n    return Font;\n}();\nvar standard = [\n    \"Courier\",\n    \"Courier-Bold\",\n    \"Courier-Oblique\",\n    \"Courier-BoldOblique\",\n    \"Helvetica\",\n    \"Helvetica-Bold\",\n    \"Helvetica-Oblique\",\n    \"Helvetica-BoldOblique\",\n    \"Times-Roman\",\n    \"Times-Bold\",\n    \"Times-Italic\",\n    \"Times-BoldItalic\"\n];\nfunction FontStore() {\n    var _this = this;\n    var fonts = {};\n    var emojiSource = null;\n    var hyphenationCallback = null;\n    this.register = function(data) {\n        var family = data.family;\n        if (!fonts[family]) {\n            fonts[family] = Font.create(family);\n        }\n        // Bulk loading\n        if (data.fonts) {\n            for(var i = 0; i < data.fonts.length; i += 1){\n                fonts[family].register(_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__({\n                    family: family\n                }, data.fonts[i]));\n            }\n        } else {\n            fonts[family].register(data);\n        }\n    };\n    this.registerEmojiSource = function(_ref) {\n        var url = _ref.url, _ref$format = _ref.format, format = _ref$format === void 0 ? \"png\" : _ref$format, builder = _ref.builder, _ref$withVariationSel = _ref.withVariationSelectors, withVariationSelectors = _ref$withVariationSel === void 0 ? false : _ref$withVariationSel;\n        emojiSource = {\n            url: url,\n            format: format,\n            builder: builder,\n            withVariationSelectors: withVariationSelectors\n        };\n    };\n    this.registerHyphenationCallback = function(callback) {\n        hyphenationCallback = callback;\n    };\n    this.getFont = function(descriptor) {\n        var fontFamily = descriptor.fontFamily;\n        var isStandard = standard.includes(fontFamily);\n        if (isStandard) return null;\n        if (!fonts[fontFamily]) {\n            throw new Error(\"Font family not registered: \" + fontFamily + \". Please register it calling Font.register() method.\");\n        }\n        return fonts[fontFamily].resolve(descriptor);\n    };\n    this.load = /*#__PURE__*/ function() {\n        var _ref2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().mark(function _callee(descriptor) {\n            var fontFamily, fontFamilies, promises, len, i, family, isStandard, f;\n            return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().wrap(function _callee$(_context) {\n                while(1)switch(_context.prev = _context.next){\n                    case 0:\n                        fontFamily = descriptor.fontFamily;\n                        fontFamilies = typeof fontFamily === \"string\" ? [\n                            fontFamily\n                        ] : [].concat(fontFamily || []);\n                        promises = [];\n                        len = fontFamilies.length, i = 0;\n                    case 4:\n                        if (!(i < len)) {\n                            _context.next = 14;\n                            break;\n                        }\n                        family = fontFamilies[i];\n                        isStandard = standard.includes(family);\n                        if (!isStandard) {\n                            _context.next = 9;\n                            break;\n                        }\n                        return _context.abrupt(\"return\");\n                    case 9:\n                        f = _this.getFont(_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__({}, descriptor, {\n                            fontFamily: family\n                        }));\n                        promises.push(f.load());\n                    case 11:\n                        i += 1;\n                        _context.next = 4;\n                        break;\n                    case 14:\n                        _context.next = 16;\n                        return Promise.all(promises);\n                    case 16:\n                    case \"end\":\n                        return _context.stop();\n                }\n            }, _callee);\n        }));\n        return function(_x) {\n            return _ref2.apply(this, arguments);\n        };\n    }();\n    this.reset = function() {\n        var keys = Object.keys(fonts);\n        for(var i = 0; i < keys.length; i += 1){\n            var key = keys[i];\n            fonts[key].data = null;\n        }\n    };\n    this.clear = function() {\n        fonts = {};\n    };\n    this.getRegisteredFonts = function() {\n        return fonts;\n    };\n    this.getEmojiSource = function() {\n        return emojiSource;\n    };\n    this.getHyphenationCallback = function() {\n        return hyphenationCallback;\n    };\n    this.getRegisteredFontFamilies = function() {\n        return Object.keys(fonts);\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/font/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-pdf/image/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@react-pdf/image/lib/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ resolveImage)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/regeneratorRuntime */ \"(ssr)/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(ssr)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var _react_pdf_png_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @react-pdf/png-js */ \"(ssr)/./node_modules/@react-pdf/png-js/lib/png-js.js\");\n/* harmony import */ var jay_peg__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jay-peg */ \"(ssr)/./node_modules/jay-peg/src/index.js\");\n\n\n\n\n\n\n\n\n_react_pdf_png_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].isValid = function isValid(data) {\n    try {\n        return !!new _react_pdf_png_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](data);\n    } catch (e) {\n        return false;\n    }\n};\nvar JPEG = function JPEG(data) {\n    this.data = null;\n    this.width = null;\n    this.height = null;\n    this.data = data;\n    if (data.readUInt16BE(0) !== 0xffd8) {\n        throw new Error(\"SOI not found in JPEG\");\n    }\n    var markers = jay_peg__WEBPACK_IMPORTED_MODULE_7__[\"default\"].decode(this.data);\n    for(var i = 0; i < markers.length; i += 1){\n        var marker = markers[i];\n        if (marker.name === \"EXIF\" && marker.entries.orientation) {\n            this.orientation = marker.entries.orientation;\n        }\n        if (marker.name === \"SOF\") {\n            this.width || (this.width = marker.width);\n            this.height || (this.height = marker.height);\n        }\n    }\n    if (this.orientation > 4) {\n        var _ref = [\n            this.height,\n            this.width\n        ];\n        this.width = _ref[0];\n        this.height = _ref[1];\n    }\n};\nJPEG.isValid = function(data) {\n    return data && Buffer.isBuffer(data) && data.readUInt16BE(0) === 0xffd8;\n};\nvar createCache = function createCache(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp, _ref$limit = _ref.limit, limit = _ref$limit === void 0 ? 100 : _ref$limit;\n    var cache = {};\n    var keys = [];\n    return {\n        get: function get(key) {\n            return cache[key];\n        },\n        set: function set(key, value) {\n            keys.push(key);\n            if (keys.length > limit) {\n                delete cache[keys.shift()];\n            }\n            cache[key] = value;\n        },\n        reset: function reset() {\n            cache = {};\n            keys = [];\n        },\n        length: function length() {\n            return keys.length;\n        }\n    };\n};\nvar IMAGE_CACHE = createCache({\n    limit: 30\n});\nvar getAbsoluteLocalPath = function getAbsoluteLocalPath(src) {\n    var _url$parse = url__WEBPACK_IMPORTED_MODULE_3__.parse(src), protocol = _url$parse.protocol, auth = _url$parse.auth, host = _url$parse.host, port = _url$parse.port, hostname = _url$parse.hostname, pathname = _url$parse.path;\n    var absolutePath = path__WEBPACK_IMPORTED_MODULE_4__.resolve(pathname);\n    if (protocol && protocol !== \"file:\" || auth || host || port || hostname) {\n        return undefined;\n    }\n    return absolutePath;\n};\nvar fetchLocalFile = function fetchLocalFile(src) {\n    return new Promise(function(resolve, reject) {\n        try {\n            if (false) {}\n            var absolutePath = getAbsoluteLocalPath(src);\n            if (!absolutePath) {\n                reject(new Error(\"Cannot fetch non-local path: \" + src));\n                return;\n            }\n            fs__WEBPACK_IMPORTED_MODULE_2__.readFile(absolutePath, function(err, data) {\n                return err ? reject(err) : resolve(data);\n            });\n        } catch (err) {\n            reject(err);\n        }\n    });\n};\nvar fetchRemoteFile = /*#__PURE__*/ function() {\n    var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().mark(function _callee(uri, options) {\n        var response, buffer;\n        return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().wrap(function _callee$(_context) {\n            while(1)switch(_context.prev = _context.next){\n                case 0:\n                    _context.next = 2;\n                    return cross_fetch__WEBPACK_IMPORTED_MODULE_5__(uri, options);\n                case 2:\n                    response = _context.sent;\n                    _context.next = 5;\n                    return response.buffer ? response.buffer() : response.arrayBuffer();\n                case 5:\n                    buffer = _context.sent;\n                    return _context.abrupt(\"return\", buffer.constructor.name === \"Buffer\" ? buffer : Buffer.from(buffer));\n                case 7:\n                case \"end\":\n                    return _context.stop();\n            }\n        }, _callee);\n    }));\n    return function fetchRemoteFile(_x, _x2) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar isValidFormat = function isValidFormat(format) {\n    var lower = format.toLowerCase();\n    return lower === \"jpg\" || lower === \"jpeg\" || lower === \"png\";\n};\nvar guessFormat = function guessFormat(buffer) {\n    var format;\n    if (JPEG.isValid(buffer)) {\n        format = \"jpg\";\n    } else if (_react_pdf_png_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].isValid(buffer)) {\n        format = \"png\";\n    }\n    return format;\n};\nvar isCompatibleBase64 = function isCompatibleBase64(_ref2) {\n    var uri = _ref2.uri;\n    return /^data:image\\/[a-zA-Z]*;base64,[^\"]*/g.test(uri);\n};\nfunction getImage(body, extension) {\n    switch(extension.toLowerCase()){\n        case \"jpg\":\n        case \"jpeg\":\n            return new JPEG(body);\n        case \"png\":\n            return new _react_pdf_png_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](body);\n        default:\n            return null;\n    }\n}\nvar resolveBase64Image = function resolveBase64Image(_ref3) {\n    var uri = _ref3.uri;\n    var match = /^data:image\\/([a-zA-Z]*);base64,([^\"]*)/g.exec(uri);\n    var format = match[1];\n    var data = match[2];\n    if (!isValidFormat(format)) {\n        throw new Error(\"Base64 image invalid format: \" + format);\n    }\n    return new Promise(function(resolve) {\n        return resolve(getImage(Buffer.from(data, \"base64\"), format));\n    });\n};\nvar resolveImageFromData = function resolveImageFromData(src) {\n    if (src.data && src.format) {\n        return new Promise(function(resolve) {\n            return resolve(getImage(src.data, src.format));\n        });\n    }\n    throw new Error(\"Invalid data given for local file: \" + JSON.stringify(src));\n};\nvar resolveBufferImage = function resolveBufferImage(buffer) {\n    var format = guessFormat(buffer);\n    if (format) {\n        return new Promise(function(resolve) {\n            return resolve(getImage(buffer, format));\n        });\n    }\n    return Promise.resolve();\n};\nvar resolveBlobImage = /*#__PURE__*/ function() {\n    var _ref4 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().mark(function _callee2(blob) {\n        var type, arrayBuffer, _buffer, format, buffer;\n        return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().wrap(function _callee2$(_context2) {\n            while(1)switch(_context2.prev = _context2.next){\n                case 0:\n                    type = blob.type;\n                    if (!(!type || type === \"application/octet-stream\")) {\n                        _context2.next = 7;\n                        break;\n                    }\n                    _context2.next = 4;\n                    return blob.arrayBuffer();\n                case 4:\n                    arrayBuffer = _context2.sent;\n                    _buffer = Buffer.from(arrayBuffer);\n                    return _context2.abrupt(\"return\", resolveBufferImage(_buffer));\n                case 7:\n                    if (type.startsWith(\"image/\")) {\n                        _context2.next = 9;\n                        break;\n                    }\n                    throw new Error(\"Invalid blob type: \" + type);\n                case 9:\n                    format = type.replace(\"image/\", \"\");\n                    if (isValidFormat(format)) {\n                        _context2.next = 12;\n                        break;\n                    }\n                    throw new Error(\"Invalid blob type: \" + type);\n                case 12:\n                    _context2.next = 14;\n                    return blob.arrayBuffer();\n                case 14:\n                    buffer = _context2.sent;\n                    return _context2.abrupt(\"return\", getImage(Buffer.from(buffer), format));\n                case 16:\n                case \"end\":\n                    return _context2.stop();\n            }\n        }, _callee2);\n    }));\n    return function resolveBlobImage(_x3) {\n        return _ref4.apply(this, arguments);\n    };\n}();\nvar getImageFormat = function getImageFormat(body) {\n    var isPng = body[0] === 137 && body[1] === 80 && body[2] === 78 && body[3] === 71 && body[4] === 13 && body[5] === 10 && body[6] === 26 && body[7] === 10;\n    var isJpg = body[0] === 255 && body[1] === 216 && body[2] === 255;\n    var extension = \"\";\n    if (isPng) {\n        extension = \"png\";\n    } else if (isJpg) {\n        extension = \"jpg\";\n    } else {\n        throw new Error(\"Not valid image extension\");\n    }\n    return extension;\n};\nvar resolveImageFromUrl = /*#__PURE__*/ function() {\n    var _ref5 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().mark(function _callee3(src) {\n        var uri, body, headers, _src$method, method, credentials, data, extension;\n        return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_0__().wrap(function _callee3$(_context3) {\n            while(1)switch(_context3.prev = _context3.next){\n                case 0:\n                    uri = src.uri, body = src.body, headers = src.headers, _src$method = src.method, method = _src$method === void 0 ? \"GET\" : _src$method, credentials = src.credentials;\n                    if (!getAbsoluteLocalPath(uri)) {\n                        _context3.next = 7;\n                        break;\n                    }\n                    _context3.next = 4;\n                    return fetchLocalFile(uri);\n                case 4:\n                    _context3.t0 = _context3.sent;\n                    _context3.next = 10;\n                    break;\n                case 7:\n                    _context3.next = 9;\n                    return fetchRemoteFile(uri, {\n                        body: body,\n                        headers: headers,\n                        method: method,\n                        credentials: credentials\n                    });\n                case 9:\n                    _context3.t0 = _context3.sent;\n                case 10:\n                    data = _context3.t0;\n                    extension = getImageFormat(data);\n                    return _context3.abrupt(\"return\", getImage(data, extension));\n                case 13:\n                case \"end\":\n                    return _context3.stop();\n            }\n        }, _callee3);\n    }));\n    return function resolveImageFromUrl(_x4) {\n        return _ref5.apply(this, arguments);\n    };\n}();\nvar resolveImage = function resolveImage(src, _temp) {\n    var _ref6 = _temp === void 0 ? {} : _temp, _ref6$cache = _ref6.cache, cache = _ref6$cache === void 0 ? true : _ref6$cache;\n    var image;\n    var cacheKey = src.data ? src.data.toString() : src.uri;\n    if (typeof Blob !== \"undefined\" && src instanceof Blob) {\n        image = resolveBlobImage(src);\n    } else if (Buffer.isBuffer(src)) {\n        image = resolveBufferImage(src);\n    } else if (cache && IMAGE_CACHE.get(cacheKey)) {\n        return IMAGE_CACHE.get(cacheKey);\n    } else if (isCompatibleBase64(src)) {\n        image = resolveBase64Image(src);\n    } else if (typeof src === \"object\" && src.data) {\n        image = resolveImageFromData(src);\n    } else {\n        image = resolveImageFromUrl(src);\n    }\n    if (!image) {\n        throw new Error(\"Cannot resolve image\");\n    }\n    if (cache) {\n        IMAGE_CACHE.set(cacheKey, image);\n    }\n    return image;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/image/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-pdf/layout/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@react-pdf/layout/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ layout)\n/* harmony export */ });\n/* harmony import */ var _react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-pdf/fns */ \"(ssr)/./node_modules/@react-pdf/fns/lib/index.js\");\n/* harmony import */ var _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-pdf/primitives */ \"(ssr)/./node_modules/@react-pdf/primitives/src/index.js\");\n/* harmony import */ var _react_pdf_stylesheet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-pdf/stylesheet */ \"(ssr)/./node_modules/@react-pdf/stylesheet/lib/index.js\");\n/* harmony import */ var _react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-pdf/textkit */ \"(ssr)/./node_modules/@react-pdf/textkit/lib/textkit.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _react_pdf_pdfkit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @react-pdf/pdfkit */ \"(ssr)/./node_modules/@react-pdf/pdfkit/lib/pdfkit.js\");\n/* harmony import */ var _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/regeneratorRuntime */ \"(ssr)/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(ssr)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var yoga_layout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! yoga-layout */ \"(ssr)/./node_modules/yoga-layout/src/entrypoint/wasm-async-node.js\");\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/extends.js\");\n/* harmony import */ var emoji_regex__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! emoji-regex */ \"(ssr)/./node_modules/@react-pdf/layout/node_modules/emoji-regex/index.mjs\");\n/* harmony import */ var _react_pdf_image__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @react-pdf/image */ \"(ssr)/./node_modules/@react-pdf/image/lib/index.js\");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutPropertiesLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create attributed string from text fragments\n *\n * @param {Object[]} fragments fragments\n * @returns {Object} attributed string\n */ var fromFragments = function fromFragments(fragments) {\n    var offset = 0;\n    var string = \"\";\n    var runs = [];\n    fragments.forEach(function(fragment) {\n        string += fragment.string;\n        runs.push({\n            start: offset,\n            end: offset + fragment.string.length,\n            attributes: fragment.attributes || {}\n        });\n        offset += fragment.string.length;\n    });\n    return {\n        string: string,\n        runs: runs\n    };\n};\n/**\n * Apply transformation to text string\n *\n * @param {string} text\n * @param {string} transformation type\n * @returns {string} transformed text\n */ var transformText = function transformText(text, transformation) {\n    switch(transformation){\n        case \"uppercase\":\n            return text.toUpperCase();\n        case \"lowercase\":\n            return text.toLowerCase();\n        case \"capitalize\":\n            return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.capitalize)(text);\n        case \"upperfirst\":\n            return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.upperFirst)(text);\n        default:\n            return text;\n    }\n};\nvar StandardFont = /*#__PURE__*/ function() {\n    function StandardFont(src) {\n        this.name = src;\n        this.src = _react_pdf_pdfkit__WEBPACK_IMPORTED_MODULE_5__.PDFFont.open(null, src);\n    }\n    var _proto = StandardFont.prototype;\n    _proto.encode = function encode(str) {\n        return this.src.encode(str);\n    };\n    _proto.layout = function layout(str) {\n        var _this = this;\n        var _this$encode = this.encode(str), encoded = _this$encode[0], positions = _this$encode[1];\n        return {\n            positions: positions,\n            stringIndices: positions.map(function(_, i) {\n                return i;\n            }),\n            glyphs: encoded.map(function(g, i) {\n                var glyph = _this.getGlyph(parseInt(g, 16));\n                glyph.advanceWidth = positions[i].advanceWidth;\n                return glyph;\n            })\n        };\n    };\n    _proto.glyphForCodePoint = function glyphForCodePoint(codePoint) {\n        var glyph = this.getGlyph(codePoint);\n        glyph.advanceWidth = 400;\n        return glyph;\n    };\n    _proto.getGlyph = function getGlyph(id) {\n        return {\n            id: id,\n            _font: this.src,\n            codePoints: [\n                id\n            ],\n            isLigature: false,\n            name: this.src.font.characterToGlyph(id)\n        };\n    };\n    _proto.hasGlyphForCodePoint = function hasGlyphForCodePoint(codePoint) {\n        return this.src.font.characterToGlyph(codePoint) !== \".notdef\";\n    };\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__(StandardFont, [\n        {\n            key: \"ascent\",\n            get: function get() {\n                return 900;\n            }\n        },\n        {\n            key: \"capHeight\",\n            get: function get() {\n                switch(this.name){\n                    case \"Times-Roman\":\n                    case \"Times-Bold\":\n                    case \"Times-Italic\":\n                    case \"Times-BoldItalic\":\n                        return 650;\n                    case \"Courier\":\n                    case \"Courier-Bold\":\n                    case \"Courier-Oblique\":\n                    case \"Courier-BoldOblique\":\n                        return 550;\n                    default:\n                        return 690;\n                }\n            }\n        },\n        {\n            key: \"xHeight\",\n            get: function get() {\n                switch(this.name){\n                    case \"Times-Roman\":\n                    case \"Times-Bold\":\n                    case \"Times-Italic\":\n                    case \"Times-BoldItalic\":\n                        return 440;\n                    case \"Courier\":\n                    case \"Courier-Bold\":\n                    case \"Courier-Oblique\":\n                    case \"Courier-BoldOblique\":\n                        return 390;\n                    default:\n                        return 490;\n                }\n            }\n        },\n        {\n            key: \"descent\",\n            get: function get() {\n                switch(this.name){\n                    case \"Times-Roman\":\n                    case \"Times-Bold\":\n                    case \"Times-Italic\":\n                    case \"Times-BoldItalic\":\n                        return -220;\n                    case \"Courier\":\n                    case \"Courier-Bold\":\n                    case \"Courier-Oblique\":\n                    case \"Courier-BoldOblique\":\n                        return -230;\n                    default:\n                        return -200;\n                }\n            }\n        },\n        {\n            key: \"lineGap\",\n            get: function get() {\n                return 0;\n            }\n        },\n        {\n            key: \"unitsPerEm\",\n            get: function get() {\n                return 1000;\n            }\n        }\n    ]);\n    return StandardFont;\n}();\nvar fontCache = {};\nvar IGNORED_CODE_POINTS = [\n    173\n];\nvar getFontSize = function getFontSize(node) {\n    return node.attributes.fontSize || 12;\n};\nvar getOrCreateFont = function getOrCreateFont(name) {\n    if (fontCache[name]) return fontCache[name];\n    var font = new StandardFont(name);\n    fontCache[name] = font;\n    return font;\n};\nvar getFallbackFont = function getFallbackFont() {\n    return getOrCreateFont(\"Helvetica\");\n};\nvar pickFontFromFontStack = function pickFontFromFontStack(codePoint, fontStack, lastFont) {\n    var fontStackWithFallback = [].concat(fontStack, [\n        getFallbackFont()\n    ]);\n    if (lastFont) {\n        fontStackWithFallback.unshift(lastFont);\n    }\n    for(var i = 0; i < fontStackWithFallback.length; i += 1){\n        var font = fontStackWithFallback[i];\n        if (!IGNORED_CODE_POINTS.includes(codePoint) && font && font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n            return font;\n        }\n    }\n    return getFallbackFont();\n};\nvar fontSubstitution = function fontSubstitution() {\n    return function(_ref) {\n        var string = _ref.string, runs = _ref.runs;\n        var lastFont = null;\n        var lastFontSize = null;\n        var lastIndex = 0;\n        var index = 0;\n        var res = [];\n        for(var i = 0; i < runs.length; i += 1){\n            var run = runs[i];\n            var defaultFont = typeof run.attributes.font === \"string\" ? getOrCreateFont(run.attributes.font) : run.attributes.font;\n            if (string.length === 0) {\n                res.push({\n                    start: 0,\n                    end: 0,\n                    attributes: {\n                        font: defaultFont\n                    }\n                });\n                break;\n            }\n            var chars = string.slice(run.start, run.end);\n            for(var j = 0; j < chars.length; j += 1){\n                var char = chars[j];\n                var codePoint = char.codePointAt();\n                // If the default font does not have a glyph and the fallback font does, we use it\n                var font = pickFontFromFontStack(codePoint, run.attributes.font, lastFont);\n                var fontSize = getFontSize(run);\n                // If anything that would impact res has changed, update it\n                if (font !== lastFont || fontSize !== lastFontSize || font.unitsPerEm !== lastFont.unitsPerEm) {\n                    if (lastFont) {\n                        res.push({\n                            start: lastIndex,\n                            end: index,\n                            attributes: {\n                                font: lastFont,\n                                scale: lastFontSize / lastFont.unitsPerEm\n                            }\n                        });\n                    }\n                    lastFont = font;\n                    lastFontSize = fontSize;\n                    lastIndex = index;\n                }\n                index += char.length;\n            }\n        }\n        if (lastIndex < string.length) {\n            var _fontSize = getFontSize((0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.last)(runs));\n            res.push({\n                start: lastIndex,\n                end: string.length,\n                attributes: {\n                    font: lastFont,\n                    scale: _fontSize / lastFont.unitsPerEm\n                }\n            });\n        }\n        return {\n            string: string,\n            runs: res\n        };\n    };\n};\nvar isTextInstance$4 = function isTextInstance(node) {\n    return node.type === _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.TextInstance;\n};\nvar engines$1 = {\n    bidi: _react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__.bidi,\n    linebreaker: _react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__.linebreaker,\n    justification: _react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__.justification,\n    textDecoration: _react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__.textDecoration,\n    scriptItemizer: _react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__.scriptItemizer,\n    wordHyphenation: _react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__.wordHyphenation,\n    fontSubstitution: fontSubstitution\n};\nvar engine$1 = (0,_react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(engines$1);\nvar getFragments$1 = function getFragments(fontStore, instance) {\n    if (!instance) return [\n        {\n            string: \"\"\n        }\n    ];\n    var fragments = [];\n    var _instance$props = instance.props, _instance$props$fill = _instance$props.fill, fill = _instance$props$fill === void 0 ? \"black\" : _instance$props$fill, _instance$props$fontF = _instance$props.fontFamily, fontFamily = _instance$props$fontF === void 0 ? \"Helvetica\" : _instance$props$fontF, fontWeight = _instance$props.fontWeight, fontStyle = _instance$props.fontStyle, _instance$props$fontS = _instance$props.fontSize, fontSize = _instance$props$fontS === void 0 ? 18 : _instance$props$fontS, textDecorationColor = _instance$props.textDecorationColor, textDecorationStyle = _instance$props.textDecorationStyle, textTransform = _instance$props.textTransform, opacity = _instance$props.opacity;\n    var _textDecoration = instance.props.textDecoration;\n    var obj = fontStore ? fontStore.getFont({\n        fontFamily: fontFamily,\n        fontWeight: fontWeight,\n        fontStyle: fontStyle\n    }) : null;\n    var font = obj ? obj.data : fontFamily;\n    var attributes = {\n        font: font,\n        opacity: opacity,\n        fontSize: fontSize,\n        color: fill,\n        underlineStyle: textDecorationStyle,\n        underline: _textDecoration === \"underline\" || _textDecoration === \"underline line-through\" || _textDecoration === \"line-through underline\",\n        underlineColor: textDecorationColor || fill,\n        strike: _textDecoration === \"line-through\" || _textDecoration === \"underline line-through\" || _textDecoration === \"line-through underline\",\n        strikeStyle: textDecorationStyle,\n        strikeColor: textDecorationColor || fill\n    };\n    for(var i = 0; i < instance.children.length; i += 1){\n        var child = instance.children[i];\n        if (isTextInstance$4(child)) {\n            fragments.push({\n                string: transformText(child.value, textTransform),\n                attributes: attributes\n            });\n        } else if (child) {\n            fragments.push.apply(fragments, getFragments(child));\n        }\n    }\n    return fragments;\n};\nvar getAttributedString$1 = function getAttributedString(fontStore, instance) {\n    return fromFragments(getFragments$1(fontStore, instance));\n};\nvar AlmostInfinity = 999999999999;\nvar shrinkWhitespaceFactor = {\n    before: -0.5,\n    after: -0.5\n};\nvar layoutTspan = function layoutTspan(fontStore) {\n    return function(node) {\n        var _node$props, _node$props2;\n        var attributedString = getAttributedString$1(fontStore, node);\n        var x = ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.x) || 0;\n        var y = ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.y) || 0;\n        var container = {\n            x: x,\n            y: y,\n            width: AlmostInfinity,\n            height: AlmostInfinity\n        };\n        var hyphenationCallback = node.props.hyphenationCallback || (fontStore === null || fontStore === void 0 ? void 0 : fontStore.getHyphenationCallback()) || null;\n        var layoutOptions = {\n            hyphenationCallback: hyphenationCallback,\n            shrinkWhitespaceFactor: shrinkWhitespaceFactor\n        };\n        var lines = engine$1(attributedString, container, layoutOptions).flat();\n        return Object.assign({}, node, {\n            lines: lines\n        });\n    };\n};\nvar layoutText$1 = function layoutText(fontStore, node) {\n    if (!node.children) return node;\n    var children = node.children.map(layoutTspan(fontStore));\n    return Object.assign({}, node, {\n        children: children\n    });\n};\nvar isDefs = function isDefs(node) {\n    return node.type === _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Defs;\n};\nvar getDefs = function getDefs(node) {\n    var children = node.children || [];\n    var defs = children.find(isDefs) || {};\n    var values = defs.children || [];\n    return values.reduce(function(acc, value) {\n        var _value$props;\n        var id = (_value$props = value.props) === null || _value$props === void 0 ? void 0 : _value$props.id;\n        if (id) acc[id] = value;\n        return acc;\n    }, {});\n};\nvar isNotDefs = function isNotDefs(node) {\n    return node.type !== _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Defs;\n};\nvar detachDefs = function detachDefs(node) {\n    if (!node.children) return node;\n    var children = node.children.filter(isNotDefs);\n    return Object.assign({}, node, {\n        children: children\n    });\n};\nvar URL_REGEX = /url\\(['\"]?#([^'\"]+)['\"]?\\)/;\nvar replaceDef = function replaceDef(defs, value) {\n    if (!value) return undefined;\n    if (!URL_REGEX.test(value)) return value;\n    var match = value.match(URL_REGEX);\n    return defs[match[1]];\n};\nvar parseNodeDefs = function parseNodeDefs(defs) {\n    return function(node) {\n        var _node$props, _node$props2;\n        var fill = replaceDef(defs, (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.fill);\n        var clipPath = replaceDef(defs, (_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.clipPath);\n        var props = Object.assign({}, node.props, {\n            fill: fill,\n            clipPath: clipPath\n        });\n        var children = node.children ? node.children.map(parseNodeDefs(defs)) : undefined;\n        return Object.assign({}, node, {\n            props: props,\n            children: children\n        });\n    };\n};\nvar parseDefs = function parseDefs(root) {\n    if (!root.children) return root;\n    var defs = getDefs(root);\n    var children = root.children.map(parseNodeDefs(defs));\n    return Object.assign({}, root, {\n        children: children\n    });\n};\nvar replaceDefs = function replaceDefs(node) {\n    return detachDefs(parseDefs(node));\n};\nvar parseViewbox = function parseViewbox(value) {\n    if (!value) return null;\n    var values = value.split(/[,\\s]+/).map(parseFloat);\n    if (values.length !== 4) return null;\n    return {\n        minX: values[0],\n        minY: values[1],\n        maxX: values[2],\n        maxY: values[3]\n    };\n};\nvar getContainer$1 = function getContainer(node) {\n    var viewbox = parseViewbox(node.props.viewBox);\n    if (viewbox) {\n        return {\n            width: viewbox.maxX,\n            height: viewbox.maxY\n        };\n    }\n    if (node.props.width && node.props.height) {\n        return {\n            width: parseFloat(node.props.width),\n            height: parseFloat(node.props.height)\n        };\n    }\n    return {\n        width: 0,\n        height: 0\n    };\n};\nvar SVG_INHERITED_PROPS = [\n    \"x\",\n    \"y\",\n    \"clipPath\",\n    \"clipRule\",\n    \"opacity\",\n    \"fill\",\n    \"fillOpacity\",\n    \"fillRule\",\n    \"stroke\",\n    \"strokeLinecap\",\n    \"strokeLinejoin\",\n    \"strokeOpacity\",\n    \"strokeWidth\",\n    \"textAnchor\",\n    \"dominantBaseline\",\n    \"color\",\n    \"fontFamily\",\n    \"fontSize\",\n    \"fontStyle\",\n    \"fontWeight\",\n    \"letterSpacing\",\n    \"opacity\",\n    \"textDecoration\",\n    \"lineHeight\",\n    \"textAlign\",\n    \"visibility\",\n    \"wordSpacing\"\n];\nvar getInheritProps = function getInheritProps(node) {\n    var props = node.props || {};\n    return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.pick)(SVG_INHERITED_PROPS, props);\n};\nvar inheritProps = function inheritProps(node) {\n    if (!node.children) return node;\n    var inheritedProps = getInheritProps(node);\n    var children = node.children.map(function(child) {\n        var props = Object.assign({}, inheritedProps, child.props || {});\n        var newChild = Object.assign({}, child, {\n            props: props\n        });\n        return inheritProps(newChild);\n    });\n    return Object.assign({}, node, {\n        children: children\n    });\n};\nvar parseAspectRatio = function parseAspectRatio(value) {\n    var match = value.replace(/[\\s\\r\\t\\n]+/gm, \" \").replace(/^defer\\s/, \"\").split(\" \");\n    var align = match[0] || \"xMidYMid\";\n    var meetOrSlice = match[1] || \"meet\";\n    return {\n        align: align,\n        meetOrSlice: meetOrSlice\n    };\n};\nvar STYLE_PROPS = [\n    \"width\",\n    \"height\",\n    \"color\",\n    \"stroke\",\n    \"strokeWidth\",\n    \"opacity\",\n    \"fillOpacity\",\n    \"strokeOpacity\",\n    \"fill\",\n    \"fillRule\",\n    \"clipPath\",\n    \"offset\",\n    \"transform\",\n    \"strokeLinejoin\",\n    \"strokeLinecap\",\n    \"strokeDasharray\"\n];\nvar VERTICAL_PROPS = [\n    \"y\",\n    \"y1\",\n    \"y2\",\n    \"height\",\n    \"cy\",\n    \"ry\"\n];\nvar HORIZONTAL_PROPS = [\n    \"x\",\n    \"x1\",\n    \"x2\",\n    \"width\",\n    \"cx\",\n    \"rx\"\n];\nvar isType$3 = function isType(type) {\n    return function(node) {\n        return node.type === type;\n    };\n};\nvar isSvg$3 = isType$3(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Svg);\nvar isText$5 = isType$3(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Text);\nvar isTextInstance$3 = isType$3(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.TextInstance);\nvar transformPercent = function transformPercent(container) {\n    return function(props) {\n        return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.mapValues)(props, function(value, key) {\n            var match = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.matchPercent)(value);\n            if (match && VERTICAL_PROPS.includes(key)) {\n                return match.percent * container.height;\n            }\n            if (match && HORIZONTAL_PROPS.includes(key)) {\n                return match.percent * container.width;\n            }\n            return value;\n        });\n    };\n};\nvar parsePercent = function parsePercent(value) {\n    var match = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.matchPercent)(value);\n    return match ? match.percent : parseFloat(value);\n};\nvar parseProps = function parseProps(container) {\n    return function(node) {\n        var props = transformPercent(container)(node.props);\n        props = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.evolve)({\n            x: parseFloat,\n            x1: parseFloat,\n            x2: parseFloat,\n            y: parseFloat,\n            y1: parseFloat,\n            y2: parseFloat,\n            r: parseFloat,\n            rx: parseFloat,\n            ry: parseFloat,\n            cx: parseFloat,\n            cy: parseFloat,\n            width: parseFloat,\n            height: parseFloat,\n            offset: parsePercent,\n            fill: _react_pdf_stylesheet__WEBPACK_IMPORTED_MODULE_2__.transformColor,\n            opacity: parsePercent,\n            stroke: _react_pdf_stylesheet__WEBPACK_IMPORTED_MODULE_2__.transformColor,\n            stopOpacity: parsePercent,\n            stopColor: _react_pdf_stylesheet__WEBPACK_IMPORTED_MODULE_2__.transformColor,\n            transform: _react_pdf_stylesheet__WEBPACK_IMPORTED_MODULE_2__.processTransform\n        }, props);\n        return Object.assign({}, node, {\n            props: props\n        });\n    };\n};\nvar mergeStyles$1 = function mergeStyles(node) {\n    var style = node.style || {};\n    var props = Object.assign({}, style, node.props);\n    return Object.assign({}, node, {\n        props: props\n    });\n};\nvar removeNoneValues = function removeNoneValues(node) {\n    var removeNone = function removeNone(value) {\n        return value === \"none\" ? null : value;\n    };\n    var props = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.mapValues)(node.props, removeNone);\n    return Object.assign({}, node, {\n        props: props\n    });\n};\nvar pickStyleProps = function pickStyleProps(node) {\n    var props = node.props || {};\n    var styleProps = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.pick)(STYLE_PROPS, props);\n    var style = Object.assign({}, styleProps, node.style || {});\n    return Object.assign({}, node, {\n        style: style\n    });\n};\nvar parseSvgProps = function parseSvgProps(node) {\n    var props = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.evolve)({\n        width: parseFloat,\n        height: parseFloat,\n        viewBox: parseViewbox,\n        preserveAspectRatio: parseAspectRatio\n    }, node.props);\n    return Object.assign({}, node, {\n        props: props\n    });\n};\nvar wrapBetweenTspan = function wrapBetweenTspan(node) {\n    return {\n        type: _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Tspan,\n        props: {},\n        children: [\n            node\n        ]\n    };\n};\nvar addMissingTspan = function addMissingTspan(node) {\n    if (!isText$5(node)) return node;\n    if (!node.children) return node;\n    var resolveChild = function resolveChild(child) {\n        return isTextInstance$3(child) ? wrapBetweenTspan(child) : child;\n    };\n    var children = node.children.map(resolveChild);\n    return Object.assign({}, node, {\n        children: children\n    });\n};\nvar parseText = function parseText(fontStore) {\n    return function(node) {\n        if (isText$5(node)) return layoutText$1(fontStore, node);\n        if (!node.children) return node;\n        var children = node.children.map(parseText(fontStore));\n        return Object.assign({}, node, {\n            children: children\n        });\n    };\n};\nvar resolveSvgNode = function resolveSvgNode(container) {\n    return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(parseProps(container), addMissingTspan, removeNoneValues, mergeStyles$1);\n};\nvar resolveChildren = function resolveChildren(container) {\n    return function(node) {\n        if (!node.children) return node;\n        var resolveChild = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(resolveChildren(container), resolveSvgNode(container));\n        var children = node.children.map(resolveChild);\n        return Object.assign({}, node, {\n            children: children\n        });\n    };\n};\nvar resolveSvgRoot = function resolveSvgRoot(node, fontStore) {\n    var container = getContainer$1(node);\n    return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(replaceDefs, parseText(fontStore), parseSvgProps, pickStyleProps, inheritProps, resolveChildren(container))(node);\n};\n/**\n * Pre-process SVG nodes so they can be rendered in the next steps\n *\n * @param {Object} node root node\n * @param {Object} fontStore font store\n * @returns {Object} root node\n */ var resolveSvg = function resolveSvg(node, fontStore) {\n    if (!node.children) return node;\n    var resolveChild = function resolveChild(child) {\n        return resolveSvg(child, fontStore);\n    };\n    var root = isSvg$3(node) ? resolveSvgRoot(node, fontStore) : node;\n    var children = root.children.map(resolveChild);\n    return Object.assign({}, root, {\n        children: children\n    });\n};\nvar loadYoga = /*#__PURE__*/ function() {\n    var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_7__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_6__().mark(function _callee() {\n        var instance, config, node;\n        return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_6__().wrap(function _callee$(_context) {\n            while(1)switch(_context.prev = _context.next){\n                case 0:\n                    _context.next = 2;\n                    return yoga_layout__WEBPACK_IMPORTED_MODULE_8__.loadYoga();\n                case 2:\n                    instance = _context.sent;\n                    config = instance.Config.create();\n                    config.setPointScaleFactor(0);\n                    node = {\n                        create: function create() {\n                            return instance.Node.createWithConfig(config);\n                        }\n                    };\n                    return _context.abrupt(\"return\", {\n                        node: node\n                    });\n                case 7:\n                case \"end\":\n                    return _context.stop();\n            }\n        }, _callee);\n    }));\n    return function loadYoga() {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar resolveYoga = /*#__PURE__*/ function() {\n    var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_7__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_6__().mark(function _callee(root) {\n        var yoga;\n        return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_6__().wrap(function _callee$(_context) {\n            while(1)switch(_context.prev = _context.next){\n                case 0:\n                    _context.next = 2;\n                    return loadYoga();\n                case 2:\n                    yoga = _context.sent;\n                    return _context.abrupt(\"return\", Object.assign({}, root, {\n                        yoga: yoga\n                    }));\n                case 4:\n                case \"end\":\n                    return _context.stop();\n            }\n        }, _callee);\n    }));\n    return function resolveYoga(_x) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar getZIndex = function getZIndex(node) {\n    return node.style.zIndex;\n};\nvar shouldSort = function shouldSort(node) {\n    return node.type !== _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Document && node.type !== _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Svg;\n};\nvar sortZIndex = function sortZIndex(a, b) {\n    var za = getZIndex(a);\n    var zb = getZIndex(b);\n    if (!za && !zb) return 0;\n    if (!za) return 1;\n    if (!zb) return -1;\n    return zb - za;\n};\n/**\n * Sort children by zIndex value\n *\n * @param {Object} node\n * @returns {Object} node\n */ var resolveZIndex = function resolveZIndex(node) {\n    if (!node.children) return node;\n    var sortedChildren = shouldSort(node) ? node.children.sort(sortZIndex) : node.children;\n    var children = sortedChildren.map(resolveZIndex);\n    return Object.assign({}, node, {\n        children: children\n    });\n};\n// Caches emoji images data\nvar emojis = {};\nvar regex = (0,emoji_regex__WEBPACK_IMPORTED_MODULE_10__[\"default\"])();\nvar reflect = function reflect(promise) {\n    return function() {\n        return promise.apply(void 0, arguments).then(function(v) {\n            return v;\n        }, function(e) {\n            return e;\n        });\n    };\n};\n// Returns a function to be able to mock resolveImage.\nvar makeFetchEmojiImage = function makeFetchEmojiImage() {\n    return reflect(_react_pdf_image__WEBPACK_IMPORTED_MODULE_11__[\"default\"]);\n};\n/**\n * When an emoji as no variations, it might still have 2 parts,\n * the canonical emoji and an empty string.\n * ex.\n *   (no color) Array.from('❤️') => [\"❤\", \"️\"]\n *   (w/ color) Array.from('👍🏿') => [\"👍\", \"🏿\"]\n *\n * The empty string needs to be removed otherwise the generated\n * url will be incorect.\n */ var _removeVariationSelectors = function _removeVariationSelectors(x) {\n    return x !== \"️\";\n};\nvar getCodePoints = function getCodePoints(string, withVariationSelectors) {\n    return Array.from(string).filter(withVariationSelectors ? function() {\n        return true;\n    } : _removeVariationSelectors).map(function(char) {\n        return char.codePointAt(0).toString(16);\n    }).join(\"-\");\n};\nvar buildEmojiUrl = function buildEmojiUrl(emoji, source) {\n    var url = source.url, format = source.format, builder = source.builder, withVariationSelectors = source.withVariationSelectors;\n    if (typeof builder === \"function\") {\n        return builder(getCodePoints(emoji, withVariationSelectors));\n    }\n    return \"\" + url + getCodePoints(emoji, withVariationSelectors) + \".\" + format;\n};\nvar fetchEmojis = function fetchEmojis(string, source) {\n    if (!source || !source.url && !source.builder) return [];\n    var promises = [];\n    Array.from(string.matchAll(regex)).forEach(function(match) {\n        var emoji = match[0];\n        if (!emojis[emoji] || emojis[emoji].loading) {\n            var emojiUrl = buildEmojiUrl(emoji, source);\n            emojis[emoji] = {\n                loading: true\n            };\n            var fetchEmojiImage = makeFetchEmojiImage();\n            promises.push(fetchEmojiImage({\n                uri: emojiUrl\n            }).then(function(image) {\n                emojis[emoji].loading = false;\n                emojis[emoji].data = image.data;\n            }));\n        }\n    });\n    return promises;\n};\nvar specialCases = [\n    \"\\xa9️\",\n    \"\\xae\",\n    \"™\"\n]; // Do not treat these as emojis if emoji not present\nvar embedEmojis = function embedEmojis(fragments) {\n    var result = [];\n    var _loop = function _loop() {\n        var fragment = fragments[i];\n        var lastIndex = 0;\n        Array.from(fragment.string.matchAll(regex)).forEach(function(match) {\n            var index = match.index;\n            var emoji = match[0];\n            var isSpecialCase = specialCases.includes(emoji);\n            var emojiSize = fragment.attributes.fontSize;\n            var chunk = fragment.string.slice(lastIndex, index + match[0].length);\n            // If emoji image was found, we create a new fragment with the\n            // correct attachment and object substitution character;\n            if (emojis[emoji] && emojis[emoji].data) {\n                result.push({\n                    string: chunk.replace(match, String.fromCharCode(0xfffc)),\n                    attributes: _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, fragment.attributes, {\n                        attachment: {\n                            width: emojiSize,\n                            height: emojiSize,\n                            yOffset: Math.floor(emojiSize * 0.1),\n                            image: emojis[emoji].data\n                        }\n                    })\n                });\n            } else if (isSpecialCase) {\n                result.push({\n                    string: chunk,\n                    attributes: fragment.attributes\n                });\n            } else {\n                // If no emoji data, we just replace the emoji with a nodef char\n                result.push({\n                    string: chunk.replace(match, String.fromCharCode(0)),\n                    attributes: fragment.attributes\n                });\n            }\n            lastIndex = index + emoji.length;\n        });\n        if (lastIndex < fragment.string.length) {\n            result.push({\n                string: fragment.string.slice(lastIndex),\n                attributes: fragment.attributes\n            });\n        }\n    };\n    for(var i = 0; i < fragments.length; i += 1){\n        _loop();\n    }\n    return result;\n};\n/**\n * Get image source\n *\n * @param {Object} node image node\n * @returns {string | Object} image src\n */ var getSource = function getSource(node) {\n    var _node$props, _node$props2, _node$props3;\n    return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.src) || ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.source) || ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.href);\n};\n/**\n * Resolves `src` to `@react-pdf/image` interface.\n *\n * Also it handles factories and async sources.\n *\n * @param {string | Object | Function} src\n * @returns {Promise<Object>} resolved src\n */ var resolveSource = /*#__PURE__*/ function() {\n    var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_7__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_6__().mark(function _callee(src) {\n        var source;\n        return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_6__().wrap(function _callee$(_context) {\n            while(1)switch(_context.prev = _context.next){\n                case 0:\n                    if (!(typeof src === \"function\")) {\n                        _context.next = 6;\n                        break;\n                    }\n                    _context.next = 3;\n                    return src();\n                case 3:\n                    _context.t0 = _context.sent;\n                    _context.next = 9;\n                    break;\n                case 6:\n                    _context.next = 8;\n                    return src;\n                case 8:\n                    _context.t0 = _context.sent;\n                case 9:\n                    source = _context.t0;\n                    return _context.abrupt(\"return\", typeof source === \"string\" ? {\n                        uri: source\n                    } : source);\n                case 11:\n                case \"end\":\n                    return _context.stop();\n            }\n        }, _callee);\n    }));\n    return function resolveSource(_x) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/**\n * Fetches image and append data to node\n * Ideally this fn should be immutable.\n *\n * @param {Object} node\n */ var fetchImage = /*#__PURE__*/ function() {\n    var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_7__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_6__().mark(function _callee(node) {\n        var src, cache, source;\n        return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_6__().wrap(function _callee$(_context) {\n            while(1)switch(_context.prev = _context.next){\n                case 0:\n                    src = getSource(node);\n                    cache = node.props.cache;\n                    if (src) {\n                        _context.next = 5;\n                        break;\n                    }\n                    console.warn(false, 'Image should receive either a \"src\" or \"source\" prop');\n                    return _context.abrupt(\"return\");\n                case 5:\n                    _context.prev = 5;\n                    _context.next = 8;\n                    return resolveSource(src);\n                case 8:\n                    source = _context.sent;\n                    if (source) {\n                        _context.next = 11;\n                        break;\n                    }\n                    throw new Error('Image\\'s \"src\" or \"source\" prop returned ' + source);\n                case 11:\n                    _context.next = 13;\n                    return (0,_react_pdf_image__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(source, {\n                        cache: cache\n                    });\n                case 13:\n                    node.image = _context.sent;\n                    node.image.key = source.data ? source.data.toString() : source.uri;\n                    _context.next = 21;\n                    break;\n                case 17:\n                    _context.prev = 17;\n                    _context.t0 = _context[\"catch\"](5);\n                    node.image = {\n                        width: 0,\n                        height: 0,\n                        key: null\n                    };\n                    console.warn(_context.t0.message);\n                case 21:\n                case \"end\":\n                    return _context.stop();\n            }\n        }, _callee, null, [\n            [\n                5,\n                17\n            ]\n        ]);\n    }));\n    return function fetchImage(_x) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar isImage$2 = function isImage(node) {\n    return node.type === _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Image;\n};\n/**\n * Get all asset promises that need to be resolved\n *\n * @param {Object} fontStore font store\n * @param {Object} node root node\n * @returns {Promise<void>[]} asset promises\n */ var fetchAssets = function fetchAssets(fontStore, node) {\n    var _node$children;\n    var promises = [];\n    var listToExplore = ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.slice(0)) || [];\n    var emojiSource = fontStore ? fontStore.getEmojiSource() : null;\n    while(listToExplore.length > 0){\n        var _n$style;\n        var n = listToExplore.shift();\n        if (isImage$2(n)) {\n            promises.push(fetchImage(n));\n        }\n        if (fontStore && (_n$style = n.style) !== null && _n$style !== void 0 && _n$style.fontFamily) {\n            promises.push(fontStore.load(n.style));\n        }\n        if (typeof n === \"string\") {\n            promises.push.apply(promises, fetchEmojis(n, emojiSource));\n        }\n        if (typeof n.value === \"string\") {\n            promises.push.apply(promises, fetchEmojis(n.value, emojiSource));\n        }\n        if (n.children) {\n            n.children.forEach(function(childNode) {\n                listToExplore.push(childNode);\n            });\n        }\n    }\n    return promises;\n};\n/**\n * Fetch image, font and emoji assets in parallel.\n * Layout process will not be resumed until promise resolves.\n *\n * @param {Object} node root node\n * @param {Object} fontStore font store\n * @returns {Promise<Object>} root node\n */ var resolveAssets = /*#__PURE__*/ function() {\n    var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_7__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_6__().mark(function _callee(node, fontStore) {\n        var promises;\n        return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_6__().wrap(function _callee$(_context) {\n            while(1)switch(_context.prev = _context.next){\n                case 0:\n                    promises = fetchAssets(fontStore, node);\n                    _context.next = 3;\n                    return Promise.all(promises);\n                case 3:\n                    return _context.abrupt(\"return\", node);\n                case 4:\n                case \"end\":\n                    return _context.stop();\n            }\n        }, _callee);\n    }));\n    return function resolveAssets(_x, _x2) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar isLink$1 = function isLink(node) {\n    return node.type === _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Link;\n};\nvar DEFAULT_LINK_STYLES = {\n    color: \"blue\",\n    textDecoration: \"underline\"\n};\n/**\n * Computes styles using stylesheet\n *\n * @param {Object} container\n * @param {Object} node document node\n * @returns {Object} computed styles\n */ var computeStyle = function computeStyle(container, node) {\n    var baseStyle = node.style;\n    if (isLink$1(node)) {\n        baseStyle = Array.isArray(node.style) ? [\n            DEFAULT_LINK_STYLES\n        ].concat(node.style) : [\n            DEFAULT_LINK_STYLES,\n            node.style\n        ];\n    }\n    return (0,_react_pdf_stylesheet__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(container, baseStyle);\n};\n/**\n * @typedef {Function} ResolveNodeStyles\n * @param {Object} node document node\n * @returns {Object} node (and subnodes) with resolved styles\n */ /**\n * Resolves node styles\n *\n * @param {Object} container\n * @returns {ResolveNodeStyles} resolve node styles\n */ var resolveNodeStyles = function resolveNodeStyles(container) {\n    return function(node) {\n        var style = computeStyle(container, node);\n        if (!node.children) return Object.assign({}, node, {\n            style: style\n        });\n        var children = node.children.map(resolveNodeStyles(container));\n        return Object.assign({}, node, {\n            style: style,\n            children: children\n        });\n    };\n};\n/**\n * Resolves page styles\n *\n * @param {Object} page document page\n * @returns {Object} document page with resolved styles\n */ var resolvePageStyles = function resolvePageStyles(page) {\n    var _page$props, _page$box, _page$box2, _page$props2;\n    var dpi = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.dpi) || 72;\n    var width = ((_page$box = page.box) === null || _page$box === void 0 ? void 0 : _page$box.width) || page.style.width;\n    var height = ((_page$box2 = page.box) === null || _page$box2 === void 0 ? void 0 : _page$box2.height) || page.style.height;\n    var orientation = ((_page$props2 = page.props) === null || _page$props2 === void 0 ? void 0 : _page$props2.orientation) || \"portrait\";\n    var container = {\n        width: width,\n        height: height,\n        orientation: orientation,\n        dpi: dpi\n    };\n    return resolveNodeStyles(container)(page);\n};\n/**\n * Resolves document styles\n *\n * @param {Object} root document root\n * @returns {Object} document root with resolved styles\n */ var resolveStyles = function resolveStyles(root) {\n    if (!root.children) return root;\n    var children = root.children.map(resolvePageStyles);\n    return Object.assign({}, root, {\n        children: children\n    });\n};\nvar getTransformStyle = function getTransformStyle(s) {\n    return function(node) {\n        var _node$style, _node$style2;\n        return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style[s]) ? \"50%\" : (_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2[s];\n    };\n};\n/**\n * Get node origin\n *\n * @param {Object} node\n * @returns {{ left?: number, top?: number }} node origin\n */ var getOrigin = function getOrigin(node) {\n    if (!node.box) return {};\n    var _node$box = node.box, left = _node$box.left, top = _node$box.top, width = _node$box.width, height = _node$box.height;\n    var transformOriginX = getTransformStyle(\"transformOriginX\")(node);\n    var transformOriginY = getTransformStyle(\"transformOriginY\")(node);\n    var percentX = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.matchPercent)(transformOriginX);\n    var percentY = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.matchPercent)(transformOriginY);\n    var offsetX = percentX ? width * percentX.percent : transformOriginX;\n    var offsetY = percentY ? height * percentY.percent : transformOriginY;\n    return {\n        left: left + offsetX,\n        top: top + offsetY\n    };\n};\n/**\n * Resolve node origin\n *\n * @param {Object} node\n * @returns {Object} node with origin attribute\n */ var resolveNodeOrigin = function resolveNodeOrigin(node) {\n    var origin = getOrigin(node);\n    var newNode = Object.assign({}, node, {\n        origin: origin\n    });\n    if (!node.children) return newNode;\n    var children = node.children.map(resolveNodeOrigin);\n    return Object.assign({}, newNode, {\n        children: children\n    });\n};\n/**\n * Resolve document origins\n *\n * @param {Object} root document root\n * @returns {Object} document root\n */ var resolveOrigin = function resolveOrigin(root) {\n    if (!root.children) return root;\n    var children = root.children.map(resolveNodeOrigin);\n    return Object.assign({}, root, {\n        children: children\n    });\n};\n/* eslint-disable no-plusplus */ /* eslint-disable prefer-const */ /* eslint-disable prefer-destructuring */ var getBookmarkValue = function getBookmarkValue(title) {\n    return typeof title === \"string\" ? {\n        title: title,\n        fit: false,\n        expanded: false\n    } : title;\n};\nvar resolveBookmarks = function resolveBookmarks(node) {\n    var refs = 0;\n    var children = (node.children || []).slice(0);\n    var listToExplore = children.map(function(value) {\n        return {\n            value: value,\n            parent: null\n        };\n    });\n    var _loop = function _loop() {\n        var _child$props;\n        var element = listToExplore.shift();\n        var child = element.value;\n        var parent = element.parent;\n        if ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.bookmark) {\n            var _parent;\n            var bookmark = getBookmarkValue(child.props.bookmark);\n            var ref = refs++;\n            var newHierarchy = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({\n                ref: ref,\n                parent: (_parent = parent) === null || _parent === void 0 ? void 0 : _parent.ref\n            }, bookmark);\n            child.props.bookmark = newHierarchy;\n            parent = newHierarchy;\n        }\n        if (child.children) {\n            child.children.forEach(function(childNode) {\n                listToExplore.push({\n                    value: childNode,\n                    parent: parent\n                });\n            });\n        }\n    };\n    while(listToExplore.length > 0){\n        _loop();\n    }\n    return node;\n};\nvar VALID_ORIENTATIONS = [\n    \"portrait\",\n    \"landscape\"\n];\n/**\n * Get page orientation. Defaults to portrait\n *\n * @param {Object} page object\n * @returns {string} page orientation\n */ var getOrientation = function getOrientation(page) {\n    var _page$props;\n    var value = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.orientation) || \"portrait\";\n    return VALID_ORIENTATIONS.includes(value) ? value : \"portrait\";\n};\n/**\n * Return true if page is landscape\n *\n * @param {Object} page instance\n * @returns {boolean} is page landscape\n */ var isLandscape = function isLandscape(page) {\n    return getOrientation(page) === \"landscape\";\n};\nvar PAGE_SIZES = {\n    \"4A0\": [\n        4767.87,\n        6740.79\n    ],\n    \"2A0\": [\n        3370.39,\n        4767.87\n    ],\n    A0: [\n        2383.94,\n        3370.39\n    ],\n    A1: [\n        1683.78,\n        2383.94\n    ],\n    A2: [\n        1190.55,\n        1683.78\n    ],\n    A3: [\n        841.89,\n        1190.55\n    ],\n    A4: [\n        595.28,\n        841.89\n    ],\n    A5: [\n        419.53,\n        595.28\n    ],\n    A6: [\n        297.64,\n        419.53\n    ],\n    A7: [\n        209.76,\n        297.64\n    ],\n    A8: [\n        147.4,\n        209.76\n    ],\n    A9: [\n        104.88,\n        147.4\n    ],\n    A10: [\n        73.7,\n        104.88\n    ],\n    B0: [\n        2834.65,\n        4008.19\n    ],\n    B1: [\n        2004.09,\n        2834.65\n    ],\n    B2: [\n        1417.32,\n        2004.09\n    ],\n    B3: [\n        1000.63,\n        1417.32\n    ],\n    B4: [\n        708.66,\n        1000.63\n    ],\n    B5: [\n        498.9,\n        708.66\n    ],\n    B6: [\n        354.33,\n        498.9\n    ],\n    B7: [\n        249.45,\n        354.33\n    ],\n    B8: [\n        175.75,\n        249.45\n    ],\n    B9: [\n        124.72,\n        175.75\n    ],\n    B10: [\n        87.87,\n        124.72\n    ],\n    C0: [\n        2599.37,\n        3676.54\n    ],\n    C1: [\n        1836.85,\n        2599.37\n    ],\n    C2: [\n        1298.27,\n        1836.85\n    ],\n    C3: [\n        918.43,\n        1298.27\n    ],\n    C4: [\n        649.13,\n        918.43\n    ],\n    C5: [\n        459.21,\n        649.13\n    ],\n    C6: [\n        323.15,\n        459.21\n    ],\n    C7: [\n        229.61,\n        323.15\n    ],\n    C8: [\n        161.57,\n        229.61\n    ],\n    C9: [\n        113.39,\n        161.57\n    ],\n    C10: [\n        79.37,\n        113.39\n    ],\n    RA0: [\n        2437.8,\n        3458.27\n    ],\n    RA1: [\n        1729.13,\n        2437.8\n    ],\n    RA2: [\n        1218.9,\n        1729.13\n    ],\n    RA3: [\n        864.57,\n        1218.9\n    ],\n    RA4: [\n        609.45,\n        864.57\n    ],\n    SRA0: [\n        2551.18,\n        3628.35\n    ],\n    SRA1: [\n        1814.17,\n        2551.18\n    ],\n    SRA2: [\n        1275.59,\n        1814.17\n    ],\n    SRA3: [\n        907.09,\n        1275.59\n    ],\n    SRA4: [\n        637.8,\n        907.09\n    ],\n    EXECUTIVE: [\n        521.86,\n        756.0\n    ],\n    FOLIO: [\n        612.0,\n        936.0\n    ],\n    LEGAL: [\n        612.0,\n        1008.0\n    ],\n    LETTER: [\n        612.0,\n        792.0\n    ],\n    TABLOID: [\n        792.0,\n        1224.0\n    ],\n    ID1: [\n        153,\n        243\n    ]\n};\n/**\n * Transforms array into size object\n *\n * @param {number[]} v array\n * @returns {{ width: number, height: number }} size object with width and height\n */ var toSizeObject = function toSizeObject(v) {\n    return {\n        width: v[0],\n        height: v[1]\n    };\n};\n/**\n * Flip size object\n *\n * @param {{ width: number, height: number }} v size object\n * @returns {{ width: number, height: number }} flipped size object\n */ var flipSizeObject = function flipSizeObject(v) {\n    return {\n        width: v.height,\n        height: v.width\n    };\n};\n/**\n * Adjust page size to passed DPI\n *\n * @param {{ width: number, height: number }} v size object\n * @param {number} dpi DPI\n * @returns {{ width: number, height: number }} adjusted size object\n */ var adjustDpi = function adjustDpi(v, dpi) {\n    return {\n        width: v.width ? v.width * dpi : v.width,\n        height: v.height ? v.height * dpi : v.height\n    };\n};\n/**\n * Returns size object from a given string\n *\n * @param {string} v page size string\n * @returns {{ width: number, height: number }} size object with width and height\n */ var getStringSize = function getStringSize(v) {\n    return toSizeObject(PAGE_SIZES[v.toUpperCase()]);\n};\n/**\n * Returns size object from a single number\n *\n * @param {number} n page size number\n * @returns {{ width: number, height: number }} size object with width and height\n */ var getNumberSize = function getNumberSize(n) {\n    return toSizeObject([\n        n\n    ]);\n};\n/**\n * Return page size in an object { width, height }\n *\n * @param {Object} page instance\n * @returns {{ width: number, height: number }} size object with width and height\n */ var getSize = function getSize(page) {\n    var _page$props, _page$props2;\n    var value = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.size) || \"A4\";\n    var dpi = parseFloat(((_page$props2 = page.props) === null || _page$props2 === void 0 ? void 0 : _page$props2.dpi) || 72);\n    var type = typeof value;\n    /**\n   * @type {{ width: number, height: number }}\n   */ var size;\n    if (type === \"string\") {\n        size = getStringSize(value);\n    } else if (Array.isArray(value)) {\n        size = toSizeObject(value);\n    } else if (type === \"number\") {\n        size = getNumberSize(value);\n    } else {\n        size = value;\n    }\n    size = adjustDpi(size, dpi / 72);\n    return isLandscape(page) ? flipSizeObject(size) : size;\n};\n/**\n * Resolves page size\n *\n * @param {Object} page\n * @returns {Object} page with resolved size in style attribute\n */ var resolvePageSize = function resolvePageSize(page) {\n    var size = getSize(page);\n    var style = (0,_react_pdf_stylesheet__WEBPACK_IMPORTED_MODULE_2__.flatten)(page.style || {});\n    return _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, page, {\n        style: _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, style, size)\n    });\n};\n/**\n * Resolves page sizes\n *\n * @param {Object} root document root\n * @returns {Object} document root with resolved page sizes\n */ var resolvePageSizes = function resolvePageSizes(root) {\n    if (!root.children) return root;\n    var children = root.children.map(resolvePageSize);\n    return Object.assign({}, root, {\n        children: children\n    });\n};\nvar isFixed = function isFixed(node) {\n    var _node$props;\n    return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.fixed) === true;\n};\n/**\n * Get line index at given height\n *\n * @param {Object} node\n * @param {number} height\n */ var lineIndexAtHeight = function lineIndexAtHeight(node, height) {\n    var y = 0;\n    if (!node.lines) return 0;\n    for(var i = 0; i < node.lines.length; i += 1){\n        var line = node.lines[i];\n        if (y + line.box.height > height) return i;\n        y += line.box.height;\n    }\n    return node.lines.length;\n};\n/**\n * Get height for given text line index\n *\n * @param {Object} node\n * @param {number} index\n */ var heightAtLineIndex = function heightAtLineIndex(node, index) {\n    var counter = 0;\n    if (!node.lines) return counter;\n    for(var i = 0; i < index; i += 1){\n        var line = node.lines[i];\n        if (!line) break;\n        counter += line.box.height;\n    }\n    return counter;\n};\nvar getLineBreak = function getLineBreak(node, height) {\n    var top = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.get)(node, [\n        \"box\",\n        \"top\"\n    ], 0);\n    var widows = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.get)(node, [\n        \"props\",\n        \"widows\"\n    ], 2);\n    var orphans = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.get)(node, [\n        \"props\",\n        \"orphans\"\n    ], 2);\n    var linesQuantity = node.lines.length;\n    var slicedLine = lineIndexAtHeight(node, height - top);\n    if (slicedLine === 0) {\n        return 0;\n    }\n    if (linesQuantity < orphans) {\n        return linesQuantity;\n    }\n    if (slicedLine < orphans || linesQuantity < orphans + widows) {\n        return 0;\n    }\n    if (linesQuantity === orphans + widows) {\n        return orphans;\n    }\n    if (linesQuantity - slicedLine < widows) {\n        return linesQuantity - widows;\n    }\n    return slicedLine;\n};\n// Also receives contentArea in case it's needed\nvar splitText = function splitText(node, height) {\n    var slicedLineIndex = getLineBreak(node, height);\n    var currentHeight = heightAtLineIndex(node, slicedLineIndex);\n    var nextHeight = node.box.height - currentHeight;\n    var current = Object.assign({}, node, {\n        box: _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, node.box, {\n            height: currentHeight,\n            borderBottomWidth: 0\n        }),\n        style: _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, node.style, {\n            marginBottom: 0,\n            paddingBottom: 0,\n            borderBottomWidth: 0,\n            borderBottomLeftRadius: 0,\n            borderBottomRightRadius: 0\n        }),\n        lines: node.lines.slice(0, slicedLineIndex)\n    });\n    var next = Object.assign({}, node, {\n        box: _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, node.box, {\n            top: 0,\n            height: nextHeight,\n            borderTopWidth: 0\n        }),\n        style: _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, node.style, {\n            marginTop: 0,\n            paddingTop: 0,\n            borderTopWidth: 0,\n            borderTopLeftRadius: 0,\n            borderTopRightRadius: 0\n        }),\n        lines: node.lines.slice(slicedLineIndex)\n    });\n    return [\n        current,\n        next\n    ];\n};\nvar getTop$1 = function getTop(node) {\n    var _node$box;\n    return ((_node$box = node.box) === null || _node$box === void 0 ? void 0 : _node$box.top) || 0;\n};\nvar hasFixedHeight = function hasFixedHeight(node) {\n    var _node$style;\n    return !(0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.height);\n};\nvar splitNode = function splitNode(node, height) {\n    if (!node) return [\n        null,\n        null\n    ];\n    var nodeTop = getTop$1(node);\n    var current = Object.assign({}, node, {\n        box: _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, node.box, {\n            borderBottomWidth: 0\n        }),\n        style: _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, node.style, {\n            marginBottom: 0,\n            paddingBottom: 0,\n            borderBottomWidth: 0,\n            borderBottomLeftRadius: 0,\n            borderBottomRightRadius: 0\n        })\n    });\n    current.style.height = height - nodeTop;\n    var nextHeight = hasFixedHeight(node) ? node.box.height - (height - nodeTop) : null;\n    var next = Object.assign({}, node, {\n        box: _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, node.box, {\n            top: 0,\n            borderTopWidth: 0\n        }),\n        style: _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, node.style, {\n            marginTop: 0,\n            paddingTop: 0,\n            borderTopWidth: 0,\n            borderTopLeftRadius: 0,\n            borderTopRightRadius: 0\n        })\n    });\n    if (nextHeight) {\n        next.style.height = nextHeight;\n    }\n    return [\n        current,\n        next\n    ];\n};\nvar NON_WRAP_TYPES = [\n    _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Svg,\n    _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Note,\n    _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Image,\n    _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Canvas\n];\nvar getWrap = function getWrap(node) {\n    var _node$props;\n    if (NON_WRAP_TYPES.includes(node.type)) return false;\n    return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.wrap) ? true : node.props.wrap;\n};\nvar getComputedPadding = function getComputedPadding(node, edge) {\n    var yogaNode = node.yogaNode;\n    return yogaNode ? yogaNode.getComputedPadding(edge) : null;\n};\n/**\n * Get Yoga computed paddings. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ paddingTop: number, paddingRight: number, paddingBottom: number, paddingLeft: number }} paddings\n */ var getPadding = function getPadding(node) {\n    var style = node.style, box = node.box;\n    var paddingTop = getComputedPadding(node, yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Top) || (box === null || box === void 0 ? void 0 : box.paddingTop) || (style === null || style === void 0 ? void 0 : style.paddingTop) || (style === null || style === void 0 ? void 0 : style.paddingVertical) || (style === null || style === void 0 ? void 0 : style.padding) || 0;\n    var paddingRight = getComputedPadding(node, yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Right) || (box === null || box === void 0 ? void 0 : box.paddingRight) || (style === null || style === void 0 ? void 0 : style.paddingRight) || (style === null || style === void 0 ? void 0 : style.paddingHorizontal) || (style === null || style === void 0 ? void 0 : style.padding) || 0;\n    var paddingBottom = getComputedPadding(node, yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Bottom) || (box === null || box === void 0 ? void 0 : box.paddingBottom) || (style === null || style === void 0 ? void 0 : style.paddingBottom) || (style === null || style === void 0 ? void 0 : style.paddingVertical) || (style === null || style === void 0 ? void 0 : style.padding) || 0;\n    var paddingLeft = getComputedPadding(node, yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Left) || (box === null || box === void 0 ? void 0 : box.paddingLeft) || (style === null || style === void 0 ? void 0 : style.paddingLeft) || (style === null || style === void 0 ? void 0 : style.paddingHorizontal) || (style === null || style === void 0 ? void 0 : style.padding) || 0;\n    return {\n        paddingTop: paddingTop,\n        paddingRight: paddingRight,\n        paddingBottom: paddingBottom,\n        paddingLeft: paddingLeft\n    };\n};\nvar getWrapArea = function getWrapArea(page) {\n    var _page$style;\n    var _getPadding = getPadding(page), paddingBottom = _getPadding.paddingBottom;\n    var height = (_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.height;\n    return height - paddingBottom;\n};\nvar getContentArea = function getContentArea(page) {\n    var _page$style;\n    var height = (_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.height;\n    var _getPadding = getPadding(page), paddingTop = _getPadding.paddingTop, paddingBottom = _getPadding.paddingBottom;\n    return height - paddingBottom - paddingTop;\n};\nvar _excluded = [\n    \"style\",\n    \"children\"\n];\nvar isString = function isString(value) {\n    return typeof value === \"string\";\n};\nvar isNumber = function isNumber(value) {\n    return typeof value === \"number\";\n};\nvar isFragment = function isFragment(value) {\n    return value && value.type === Symbol.for(\"react.fragment\");\n};\n/**\n * Transforms a react element instance to internal element format.\n *\n * Can return multiple instances in the case of arrays or fragments.\n *\n * @param {Object} element React element\n * @returns {Object[]} parsed React elements\n */ var createInstances = function createInstances(element) {\n    if (!element) return [];\n    if (isString(element) || isNumber(element)) {\n        return [\n            {\n                type: _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.TextInstance,\n                value: \"\" + element\n            }\n        ];\n    }\n    if (isFragment(element)) {\n        return createInstances(element.props.children);\n    }\n    if (Array.isArray(element)) {\n        return element.reduce(function(acc, el) {\n            return acc.concat(createInstances(el));\n        }, []);\n    }\n    if (!isString(element.type)) {\n        return createInstances(element.type(element.props));\n    }\n    var type = element.type, _element$props = element.props, _element$props$style = _element$props.style, style = _element$props$style === void 0 ? {} : _element$props$style, _element$props$childr = _element$props.children, children = _element$props$childr === void 0 ? [] : _element$props$childr, props = _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_12__(_element$props, _excluded);\n    var nextChildren = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.castArray)(children).reduce(function(acc, child) {\n        return acc.concat(createInstances(child));\n    }, []);\n    return [\n        {\n            type: type,\n            style: style,\n            props: props,\n            box: {},\n            children: nextChildren\n        }\n    ];\n};\n/* eslint-disable no-continue */ var getBreak = function getBreak(node) {\n    var _node$props;\n    return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.break) || false;\n};\nvar getMinPresenceAhead = function getMinPresenceAhead(node) {\n    var _node$props2;\n    return ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.minPresenceAhead) || 0;\n};\nvar getFurthestEnd = function getFurthestEnd(elements) {\n    return Math.max.apply(Math, elements.map(function(node) {\n        return node.box.top + node.box.height;\n    }));\n};\nvar getEndOfMinPresenceAhead = function getEndOfMinPresenceAhead(child) {\n    return child.box.top + child.box.height + child.box.marginBottom + getMinPresenceAhead(child);\n};\nvar getEndOfPresence = function getEndOfPresence(child, futureElements) {\n    var afterMinPresenceAhead = getEndOfMinPresenceAhead(child);\n    var endOfFurthestFutureElement = getFurthestEnd(futureElements.filter(function(node) {\n        var _node$props3;\n        return !((_node$props3 = node.props) !== null && _node$props3 !== void 0 && _node$props3.fixed);\n    }));\n    return Math.min(afterMinPresenceAhead, endOfFurthestFutureElement);\n};\nvar shouldBreak = function shouldBreak(child, futureElements, height) {\n    var _child$props;\n    if ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.fixed) return false;\n    var shouldSplit = height < child.box.top + child.box.height;\n    var canWrap = getWrap(child);\n    // Calculate the y coordinate where the desired presence of the child ends\n    var endOfPresence = getEndOfPresence(child, futureElements);\n    // If the child is already at the top of the page, breaking won't improve its presence\n    // (as long as react-pdf does not support breaking into differently sized containers)\n    var breakingImprovesPresence = child.box.top > child.box.marginTop;\n    return getBreak(child) || shouldSplit && !canWrap || !shouldSplit && endOfPresence > height && breakingImprovesPresence;\n};\nvar IGNORABLE_CODEPOINTS = [\n    8232,\n    // LINE_SEPARATOR\n    8233 // PARAGRAPH_SEPARATOR\n];\nvar buildSubsetForFont = function buildSubsetForFont(font) {\n    return IGNORABLE_CODEPOINTS.reduce(function(acc, codePoint) {\n        if (font && font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n            return acc;\n        }\n        return [].concat(acc, [\n            String.fromCharCode(codePoint)\n        ]);\n    }, []);\n};\nvar ignoreChars = function ignoreChars(fragments) {\n    return fragments.map(function(fragment) {\n        var charSubset = buildSubsetForFont(fragment.attributes.font);\n        var subsetRegex = new RegExp(charSubset.join(\"|\"));\n        return {\n            string: fragment.string.replace(subsetRegex, \"\"),\n            attributes: fragment.attributes\n        };\n    });\n};\nvar PREPROCESSORS = [\n    ignoreChars,\n    embedEmojis\n];\nvar isImage$1 = function isImage(node) {\n    return node.type === _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Image;\n};\nvar isTextInstance$2 = function isTextInstance(node) {\n    return node.type === _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.TextInstance;\n};\n/**\n * Get textkit fragments of given node object\n *\n * @param {Object} fontStore font store\n * @param {Object} instance node\n * @param {string} [parentLink] parent link\n * @param {number} [level] fragment level\n * @returns {Object[]} text fragments\n */ var getFragments = function getFragments(fontStore, instance, parentLink, level) {\n    var _instance$props, _instance$props2;\n    if (level === void 0) {\n        level = 0;\n    }\n    if (!instance) return [\n        {\n            string: \"\"\n        }\n    ];\n    var fragments = [];\n    var _instance$style = instance.style, _instance$style$color = _instance$style.color, color = _instance$style$color === void 0 ? \"black\" : _instance$style$color, _instance$style$direc = _instance$style.direction, direction = _instance$style$direc === void 0 ? \"ltr\" : _instance$style$direc, _instance$style$fontF = _instance$style.fontFamily, fontFamily = _instance$style$fontF === void 0 ? \"Helvetica\" : _instance$style$fontF, fontWeight = _instance$style.fontWeight, fontStyle = _instance$style.fontStyle, _instance$style$fontS = _instance$style.fontSize, fontSize = _instance$style$fontS === void 0 ? 18 : _instance$style$fontS, textAlign = _instance$style.textAlign, lineHeight = _instance$style.lineHeight, textDecoration = _instance$style.textDecoration, textDecorationColor = _instance$style.textDecorationColor, textDecorationStyle = _instance$style.textDecorationStyle, textTransform = _instance$style.textTransform, letterSpacing = _instance$style.letterSpacing, textIndent = _instance$style.textIndent, opacity = _instance$style.opacity, verticalAlign = _instance$style.verticalAlign;\n    var fontFamilies = typeof fontFamily === \"string\" ? [\n        fontFamily\n    ] : [].concat(fontFamily || []);\n    var font = fontFamilies.map(function(fontFamilyName) {\n        if (typeof fontFamilyName !== \"string\") return fontFamilyName;\n        var opts = {\n            fontFamily: fontFamilyName,\n            fontWeight: fontWeight,\n            fontStyle: fontStyle\n        };\n        var obj = fontStore ? fontStore.getFont(opts) : null;\n        return obj ? obj.data : fontFamilyName;\n    });\n    // Don't pass main background color to textkit. Will be rendered by the render package instead\n    var backgroundColor = level === 0 ? null : instance.style.backgroundColor;\n    var attributes = {\n        font: font,\n        color: color,\n        opacity: opacity,\n        fontSize: fontSize,\n        direction: direction,\n        verticalAlign: verticalAlign,\n        backgroundColor: backgroundColor,\n        indent: textIndent,\n        characterSpacing: letterSpacing,\n        strikeStyle: textDecorationStyle,\n        underlineStyle: textDecorationStyle,\n        underline: textDecoration === \"underline\" || textDecoration === \"underline line-through\" || textDecoration === \"line-through underline\",\n        strike: textDecoration === \"line-through\" || textDecoration === \"underline line-through\" || textDecoration === \"line-through underline\",\n        strikeColor: textDecorationColor || color,\n        underlineColor: textDecorationColor || color,\n        link: parentLink || ((_instance$props = instance.props) === null || _instance$props === void 0 ? void 0 : _instance$props.src) || ((_instance$props2 = instance.props) === null || _instance$props2 === void 0 ? void 0 : _instance$props2.href),\n        lineHeight: lineHeight ? lineHeight * fontSize : null,\n        align: textAlign || (direction === \"rtl\" ? \"right\" : \"left\")\n    };\n    for(var i = 0; i < instance.children.length; i += 1){\n        var child = instance.children[i];\n        if (isImage$1(child)) {\n            fragments.push({\n                string: String.fromCharCode(0xfffc),\n                attributes: _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, attributes, {\n                    attachment: {\n                        width: child.style.width || fontSize,\n                        height: child.style.height || fontSize,\n                        image: child.image.data\n                    }\n                })\n            });\n        } else if (isTextInstance$2(child)) {\n            fragments.push({\n                string: transformText(child.value, textTransform),\n                attributes: attributes\n            });\n        } else if (child) {\n            var _fragments;\n            (_fragments = fragments).push.apply(_fragments, getFragments(fontStore, child, attributes.link, level + 1));\n        }\n    }\n    for(var _i = 0; _i < PREPROCESSORS.length; _i += 1){\n        var preprocessor = PREPROCESSORS[_i];\n        fragments = preprocessor(fragments);\n    }\n    return fragments;\n};\n/**\n * Get textkit attributed string from text node\n *\n * @param {Object} fontStore font store\n * @param {Object} instance node\n * @returns {Object} attributed string\n */ var getAttributedString = function getAttributedString(fontStore, instance) {\n    var fragments = getFragments(fontStore, instance);\n    return fromFragments(fragments);\n};\nvar engines = {\n    bidi: _react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__.bidi,\n    linebreaker: _react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__.linebreaker,\n    justification: _react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__.justification,\n    textDecoration: _react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__.textDecoration,\n    scriptItemizer: _react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__.scriptItemizer,\n    wordHyphenation: _react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__.wordHyphenation,\n    fontSubstitution: fontSubstitution\n};\nvar engine = (0,_react_pdf_textkit__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(engines);\nvar getMaxLines = function getMaxLines(node) {\n    var _node$style;\n    return (_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.maxLines;\n};\nvar getTextOverflow = function getTextOverflow(node) {\n    var _node$style2;\n    return (_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2.textOverflow;\n};\n/**\n * Get layout container for specific text node\n *\n * @param {number} width\n * @param {number} height\n * @param {Object} node\n * @returns {Object} layout container\n */ var getContainer = function getContainer(width, height, node) {\n    var maxLines = getMaxLines(node);\n    var textOverflow = getTextOverflow(node);\n    return {\n        x: 0,\n        y: 0,\n        width: width,\n        maxLines: maxLines,\n        height: height || Infinity,\n        truncateMode: textOverflow\n    };\n};\n/**\n * Get text layout options for specific text node\n *\n * @param {Object} node instance\n * @returns {Object} layout options\n */ var getLayoutOptions = function getLayoutOptions(fontStore, node) {\n    return {\n        hyphenationPenalty: node.props.hyphenationPenalty,\n        shrinkWhitespaceFactor: {\n            before: -0.5,\n            after: -0.5\n        },\n        hyphenationCallback: node.props.hyphenationCallback || (fontStore === null || fontStore === void 0 ? void 0 : fontStore.getHyphenationCallback()) || null\n    };\n};\n/**\n * Get text lines for given node\n *\n * @param {Object} node node\n * @param {number} width container width\n * @param {number} height container height\n * @param {number} fontStore font store\n * @returns {Object[]} layout lines\n */ var layoutText = function layoutText(node, width, height, fontStore) {\n    var attributedString = getAttributedString(fontStore, node);\n    var container = getContainer(width, height, node);\n    var options = getLayoutOptions(fontStore, node);\n    var lines = engine(attributedString, container, options);\n    return lines.reduce(function(acc, line) {\n        return [].concat(acc, line);\n    }, []);\n};\nvar isType$2 = function isType(type) {\n    return function(node) {\n        return node.type === type;\n    };\n};\nvar isSvg$2 = isType$2(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Svg);\nvar isText$4 = isType$2(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Text);\nvar shouldIterate = function shouldIterate(node) {\n    return !isSvg$2(node) && !isText$4(node);\n};\nvar shouldLayoutText = function shouldLayoutText(node) {\n    return isText$4(node) && !node.lines;\n};\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layout node\n */ var resolveTextLayout = function resolveTextLayout(node, fontStore) {\n    if (shouldLayoutText(node)) {\n        var width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);\n        var height = node.box.height - (node.box.paddingTop + node.box.paddingBottom);\n        // eslint-disable-next-line no-param-reassign\n        node.lines = layoutText(node, width, height, fontStore);\n    }\n    if (shouldIterate(node)) {\n        if (!node.children) return node;\n        var mapChild = function mapChild(child) {\n            return resolveTextLayout(child, fontStore);\n        };\n        var children = node.children.map(mapChild);\n        return Object.assign({}, node, {\n            children: children\n        });\n    }\n    return node;\n};\nvar BASE_INHERITABLE_PROPERTIES = [\n    \"color\",\n    \"fontFamily\",\n    \"fontSize\",\n    \"fontStyle\",\n    \"fontWeight\",\n    \"letterSpacing\",\n    \"opacity\",\n    \"textDecoration\",\n    \"textTransform\",\n    \"lineHeight\",\n    \"textAlign\",\n    \"visibility\",\n    \"wordSpacing\"\n];\nvar TEXT_INHERITABLE_PROPERTIES = [].concat(BASE_INHERITABLE_PROPERTIES, [\n    \"backgroundColor\"\n]);\nvar isSvg$1 = function isSvg(node) {\n    return node.type === _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Svg;\n};\nvar isText$3 = function isText(node) {\n    return node.type === _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Text;\n};\n// Merge style values\nvar mergeValues = function mergeValues(styleName, value, inheritedValue) {\n    switch(styleName){\n        case \"textDecoration\":\n            {\n                // merge not none and not false textDecoration values to one rule\n                return [\n                    inheritedValue,\n                    value\n                ].filter(function(v) {\n                    return v && v !== \"none\";\n                }).join(\" \");\n            }\n        default:\n            return value;\n    }\n};\n// Merge inherited and node styles\nvar merge = function merge(inheritedStyles, style) {\n    var mergedStyles = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, inheritedStyles);\n    Object.entries(style).forEach(function(_ref) {\n        var styleName = _ref[0], value = _ref[1];\n        mergedStyles[styleName] = mergeValues(styleName, value, inheritedStyles[styleName]);\n    });\n    return mergedStyles;\n};\n/**\n * @typedef {Function} MergeStyles\n * @param {Object} node\n * @returns {Object} node with styles merged\n */ /**\n * Merges styles with node\n *\n * @param {Object} inheritedStyles style object\n * @returns {MergeStyles} merge styles function\n */ var mergeStyles = function mergeStyles(inheritedStyles) {\n    return function(node) {\n        var style = merge(inheritedStyles, node.style || {});\n        return Object.assign({}, node, {\n            style: style\n        });\n    };\n};\n/**\n * Inherit style values from the root to the leafs\n *\n * @param {Object} node document root\n * @returns {Object} document root with inheritance\n *\n */ var resolveInheritance = function resolveInheritance(node) {\n    if (isSvg$1(node)) return node;\n    if (!node.children) return node;\n    var inheritableProperties = isText$3(node) ? TEXT_INHERITABLE_PROPERTIES : BASE_INHERITABLE_PROPERTIES;\n    var inheritStyles = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.pick)(inheritableProperties, node.style || {});\n    var resolveChild = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(resolveInheritance, mergeStyles(inheritStyles));\n    var children = node.children.map(resolveChild);\n    return Object.assign({}, node, {\n        children: children\n    });\n};\nvar getComputedMargin = function getComputedMargin(node, edge) {\n    var yogaNode = node.yogaNode;\n    return yogaNode ? yogaNode.getComputedMargin(edge) : null;\n};\n/**\n * Get Yoga computed magins. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ marginTop: number, marginRight: number, marginBottom: number, marginLeft: number }} margins\n */ var getMargin = function getMargin(node) {\n    var style = node.style, box = node.box;\n    var marginTop = getComputedMargin(node, yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Top) || (box === null || box === void 0 ? void 0 : box.marginTop) || (style === null || style === void 0 ? void 0 : style.marginTop) || (style === null || style === void 0 ? void 0 : style.marginVertical) || (style === null || style === void 0 ? void 0 : style.margin) || 0;\n    var marginRight = getComputedMargin(node, yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Right) || (box === null || box === void 0 ? void 0 : box.marginRight) || (style === null || style === void 0 ? void 0 : style.marginRight) || (style === null || style === void 0 ? void 0 : style.marginHorizontal) || (style === null || style === void 0 ? void 0 : style.margin) || 0;\n    var marginBottom = getComputedMargin(node, yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Bottom) || (box === null || box === void 0 ? void 0 : box.marginBottom) || (style === null || style === void 0 ? void 0 : style.marginBottom) || (style === null || style === void 0 ? void 0 : style.marginVertical) || (style === null || style === void 0 ? void 0 : style.margin) || 0;\n    var marginLeft = getComputedMargin(node, yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Left) || (box === null || box === void 0 ? void 0 : box.marginLeft) || (style === null || style === void 0 ? void 0 : style.marginLeft) || (style === null || style === void 0 ? void 0 : style.marginHorizontal) || (style === null || style === void 0 ? void 0 : style.margin) || 0;\n    return {\n        marginTop: marginTop,\n        marginRight: marginRight,\n        marginBottom: marginBottom,\n        marginLeft: marginLeft\n    };\n};\n/**\n * Get Yoga computed position. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ top: number, right: number, bottom: number, left: number }} position\n */ var getPosition = function getPosition(node) {\n    var yogaNode = node.yogaNode;\n    return {\n        top: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedTop()) || 0,\n        right: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedRight()) || 0,\n        bottom: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedBottom()) || 0,\n        left: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedLeft()) || 0\n    };\n};\nvar DEFAULT_DIMENSION = {\n    width: 0,\n    height: 0\n};\n/**\n * Get Yoga computed dimensions. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ width: number, height: number }} dimensions\n */ var getDimension = function getDimension(node) {\n    var yogaNode = node.yogaNode;\n    if (!yogaNode) return DEFAULT_DIMENSION;\n    return {\n        width: yogaNode.getComputedWidth(),\n        height: yogaNode.getComputedHeight()\n    };\n};\nvar getComputedBorder = function getComputedBorder(yogaNode, edge) {\n    return yogaNode ? yogaNode.getComputedBorder(edge) : 0;\n};\n/**\n * Get Yoga computed border width. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ borderTopWidth: number, borderRightWidth: number, borderBottomWidth: number, borderLeftWidth: number }} border widths\n */ var getBorderWidth = function getBorderWidth(node) {\n    var yogaNode = node.yogaNode;\n    return {\n        borderTopWidth: getComputedBorder(yogaNode, yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Top),\n        borderRightWidth: getComputedBorder(yogaNode, yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Right),\n        borderBottomWidth: getComputedBorder(yogaNode, yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Bottom),\n        borderLeftWidth: getComputedBorder(yogaNode, yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Left)\n    };\n};\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Set display attribute to node's Yoga instance\n *\n * @param {string} value display\n * @returns {NodeInstanceWrapper} node instance wrapper\n */ var setDisplay = function setDisplay(value) {\n    return function(node) {\n        var yogaNode = node.yogaNode;\n        if (yogaNode) {\n            yogaNode.setDisplay(value === \"none\" ? yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Display.None : yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Display.Flex);\n        }\n        return node;\n    };\n};\nvar OVERFLOW = {\n    hidden: yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Overflow.Hidden,\n    scroll: yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Overflow.Scroll\n};\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Set overflow attribute to node's Yoga instance\n *\n * @param {string} value overflow value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */ var setOverflow = function setOverflow(value) {\n    return function(node) {\n        var yogaNode = node.yogaNode;\n        if (!(0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(value) && yogaNode) {\n            var overflow = OVERFLOW[value] || yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Overflow.Visible;\n            yogaNode.setOverflow(overflow);\n        }\n        return node;\n    };\n};\nvar FLEX_WRAP = {\n    wrap: yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Wrap.Wrap,\n    \"wrap-reverse\": yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Wrap.WrapReverse\n};\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Set flex wrap attribute to node's Yoga instance\n *\n * @param {string} value flex wrap value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */ var setFlexWrap = function setFlexWrap(value) {\n    return function(node) {\n        var yogaNode = node.yogaNode;\n        if (yogaNode) {\n            var flexWrap = FLEX_WRAP[value] || yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Wrap.NoWrap;\n            yogaNode.setFlexWrap(flexWrap);\n        }\n        return node;\n    };\n};\n/* eslint-disable no-unused-expressions */ /**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * @typedef {Function} YogaValueSetter\n * @param {any} value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */ /**\n * Set generic yoga attribute to node's Yoga instance, handing `auto`, edges and percentage cases\n *\n * @param {string} attr property\n * @param {number} [edge] edge\n * @returns {YogaValueSetter} node instance wrapper\n */ var setYogaValue = function setYogaValue(attr, edge) {\n    return function(value) {\n        return function(node) {\n            var yogaNode = node.yogaNode;\n            if (!(0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(value) && yogaNode) {\n                var hasEdge = !(0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(edge);\n                var fixedMethod = \"set\" + (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.upperFirst)(attr);\n                var autoMethod = fixedMethod + \"Auto\";\n                var percentMethod = fixedMethod + \"Percent\";\n                var percent = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.matchPercent)(value);\n                if (percent && !yogaNode[percentMethod]) {\n                    throw new Error(\"You can't pass percentage values to \" + attr + \" property\");\n                }\n                if (percent) {\n                    if (hasEdge) {\n                        var _yogaNode$percentMeth;\n                        (_yogaNode$percentMeth = yogaNode[percentMethod]) === null || _yogaNode$percentMeth === void 0 ? void 0 : _yogaNode$percentMeth.call(yogaNode, edge, percent.value);\n                    } else {\n                        var _yogaNode$percentMeth2;\n                        (_yogaNode$percentMeth2 = yogaNode[percentMethod]) === null || _yogaNode$percentMeth2 === void 0 ? void 0 : _yogaNode$percentMeth2.call(yogaNode, percent.value);\n                    }\n                } else if (value === \"auto\") {\n                    if (hasEdge) {\n                        var _yogaNode$autoMethod;\n                        (_yogaNode$autoMethod = yogaNode[autoMethod]) === null || _yogaNode$autoMethod === void 0 ? void 0 : _yogaNode$autoMethod.call(yogaNode, edge);\n                    } else {\n                        var _yogaNode$autoMethod2;\n                        (_yogaNode$autoMethod2 = yogaNode[autoMethod]) === null || _yogaNode$autoMethod2 === void 0 ? void 0 : _yogaNode$autoMethod2.call(yogaNode);\n                    }\n                } else if (hasEdge) {\n                    var _yogaNode$fixedMethod;\n                    (_yogaNode$fixedMethod = yogaNode[fixedMethod]) === null || _yogaNode$fixedMethod === void 0 ? void 0 : _yogaNode$fixedMethod.call(yogaNode, edge, value);\n                } else {\n                    var _yogaNode$fixedMethod2;\n                    (_yogaNode$fixedMethod2 = yogaNode[fixedMethod]) === null || _yogaNode$fixedMethod2 === void 0 ? void 0 : _yogaNode$fixedMethod2.call(yogaNode, value);\n                }\n            }\n            return node;\n        };\n    };\n};\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Set flex grow attribute to node's Yoga instance\n *\n * @param {number} value flex grow value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */ var setFlexGrow = function setFlexGrow(value) {\n    return function(node) {\n        return setYogaValue(\"flexGrow\")(value || 0)(node);\n    };\n};\n/**\n * Set flex basis attribute to node's Yoga instance\n *\n * @param {number} flex basis value\n * @param {Object} node instance\n * @returns {Object} node instance\n */ var setFlexBasis = setYogaValue(\"flexBasis\");\nvar ALIGN = {\n    \"flex-start\": yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Align.FlexStart,\n    center: yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Align.Center,\n    \"flex-end\": yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Align.FlexEnd,\n    stretch: yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Align.Stretch,\n    baseline: yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Align.Baseline,\n    \"space-between\": yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Align.SpaceBetween,\n    \"space-around\": yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Align.SpaceAround\n};\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * @typedef {Function} AlignSetter\n * @param {string} value align value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */ /**\n * Set generic align attribute to node's Yoga instance\n *\n * @param {string} attr specific align property\n * @returns {AlignSetter} align setter\n */ var setAlign = function setAlign(attr) {\n    return function(value) {\n        return function(node) {\n            var yogaNode = node.yogaNode;\n            var defaultValue = attr === \"items\" ? yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Align.Stretch : yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Align.Auto;\n            if (yogaNode) {\n                var align = ALIGN[value] || defaultValue;\n                yogaNode[\"setAlign\" + (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.upperFirst)(attr)](align);\n            }\n            return node;\n        };\n    };\n};\n/**\n * Set align self attribute to node's Yoga instance\n *\n * @param {string} align value\n * @param {Object} node instance\n * @returns {Object} node instance\n */ var setAlignSelf = setAlign(\"self\");\n/**\n * Set align items attribute to node's Yoga instance\n *\n * @param {string} align value\n * @param {Object} node instance\n * @returns {Object} node instance\n */ var setAlignItems = setAlign(\"items\");\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Set flex shrink attribute to node's Yoga instance\n *\n * @param {number} value flex shrink value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */ var setFlexShrink = function setFlexShrink(value) {\n    return function(node) {\n        return setYogaValue(\"flexShrink\")(value || 1)(node);\n    };\n};\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Set aspect ratio attribute to node's Yoga instance\n *\n * @param {number} value ratio\n * @returns {NodeInstanceWrapper} node instance wrapper\n */ var setAspectRatio = function setAspectRatio(value) {\n    return function(node) {\n        var yogaNode = node.yogaNode;\n        if (!(0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(value) && yogaNode) {\n            yogaNode.setAspectRatio(value);\n        }\n        return node;\n    };\n};\n/**\n * Set align content attribute to node's Yoga instance\n *\n * @param {string} align value\n * @param {Object} node instance\n * @returns {Object} node instance\n */ var setAlignContent = setAlign(\"content\");\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Set position type attribute to node's Yoga instance\n *\n * @param {string} value position position type\n * @returns {NodeInstanceWrapper} node instance wrapper\n */ var setPositionType = function setPositionType(value) {\n    return function(node) {\n        var yogaNode = node.yogaNode;\n        if (!(0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(value) && yogaNode) {\n            yogaNode.setPositionType(value === \"absolute\" ? yoga_layout__WEBPACK_IMPORTED_MODULE_8__.PositionType.Absolute : yoga_layout__WEBPACK_IMPORTED_MODULE_8__.PositionType.Relative);\n        }\n        return node;\n    };\n};\nvar FLEX_DIRECTIONS = {\n    row: yoga_layout__WEBPACK_IMPORTED_MODULE_8__.FlexDirection.Row,\n    \"row-reverse\": yoga_layout__WEBPACK_IMPORTED_MODULE_8__.FlexDirection.RowReverse,\n    \"column-reverse\": yoga_layout__WEBPACK_IMPORTED_MODULE_8__.FlexDirection.ColumnReverse\n};\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Set flex direction attribute to node's Yoga instance\n *\n * @param {string} value flex direction value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */ var setFlexDirection = function setFlexDirection(value) {\n    return function(node) {\n        var yogaNode = node.yogaNode;\n        if (yogaNode) {\n            var flexDirection = FLEX_DIRECTIONS[value] || yoga_layout__WEBPACK_IMPORTED_MODULE_8__.FlexDirection.Column;\n            yogaNode.setFlexDirection(flexDirection);\n        }\n        return node;\n    };\n};\nvar JUSTIFY_CONTENT = {\n    center: yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Justify.Center,\n    \"flex-end\": yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Justify.FlexEnd,\n    \"space-between\": yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Justify.SpaceBetween,\n    \"space-around\": yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Justify.SpaceAround,\n    \"space-evenly\": yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Justify.SpaceEvenly\n};\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Set justify content attribute to node's Yoga instance\n *\n * @param {string} value justify content value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */ var setJustifyContent = function setJustifyContent(value) {\n    return function(node) {\n        var yogaNode = node.yogaNode;\n        if (!(0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(value) && yogaNode) {\n            var justifyContent = JUSTIFY_CONTENT[value] || yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Justify.FlexStart;\n            yogaNode.setJustifyContent(justifyContent);\n        }\n        return node;\n    };\n};\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Set margin top attribute to node's Yoga instance\n *\n * @param {number} margin margin top\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setMarginTop = setYogaValue(\"margin\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Top);\n/**\n * Set margin right attribute to node's Yoga instance\n *\n * @param {number} margin margin right\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setMarginRight = setYogaValue(\"margin\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Right);\n/**\n * Set margin bottom attribute to node's Yoga instance\n *\n * @param {number} margin margin bottom\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setMarginBottom = setYogaValue(\"margin\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Bottom);\n/**\n * Set margin left attribute to node's Yoga instance\n *\n * @param {number} margin margin left\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setMarginLeft = setYogaValue(\"margin\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Left);\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Set padding top attribute to node's Yoga instance\n *\n * @param {number} padding padding top\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setPaddingTop = setYogaValue(\"padding\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Top);\n/**\n * Set padding right attribute to node's Yoga instance\n *\n * @param {number} padding padding right\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setPaddingRight = setYogaValue(\"padding\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Right);\n/**\n * Set padding bottom attribute to node's Yoga instance\n *\n * @param {number} padding padding bottom\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setPaddingBottom = setYogaValue(\"padding\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Bottom);\n/**\n * Set padding left attribute to node's Yoga instance\n *\n * @param {number} padding padding left\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setPaddingLeft = setYogaValue(\"padding\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Left);\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Set border top attribute to node's Yoga instance\n *\n * @param {number} border border top width\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setBorderTop = setYogaValue(\"border\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Top);\n/**\n * Set border right attribute to node's Yoga instance\n *\n * @param {number} border border right width\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setBorderRight = setYogaValue(\"border\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Right);\n/**\n * Set border bottom attribute to node's Yoga instance\n *\n * @param {number} border border bottom width\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setBorderBottom = setYogaValue(\"border\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Bottom);\n/**\n * Set border left attribute to node's Yoga instance\n *\n * @param {number} border border left width\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setBorderLeft = setYogaValue(\"border\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Left);\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Set position top attribute to node's Yoga instance\n *\n * @param {number} position position top\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setPositionTop = setYogaValue(\"position\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Top);\n/**\n * Set position right attribute to node's Yoga instance\n *\n * @param {number} position position right\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setPositionRight = setYogaValue(\"position\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Right);\n/**\n * Set position bottom attribute to node's Yoga instance\n *\n * @param {number} position position bottom\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setPositionBottom = setYogaValue(\"position\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Bottom);\n/**\n * Set position left attribute to node's Yoga instance\n *\n * @param {number} position position left\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ var setPositionLeft = setYogaValue(\"position\", yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Edge.Left);\n/**\n * Set width to node's Yoga instance\n *\n * @param {number} width\n * @param {Object} node instance\n * @returns {Object} node instance\n */ var setWidth = setYogaValue(\"width\");\n/**\n * Set min width to node's Yoga instance\n *\n * @param {number} min width\n * @param {Object} node instance\n * @returns {Object} node instance\n */ var setMinWidth = setYogaValue(\"minWidth\");\n/**\n * Set max width to node's Yoga instance\n *\n * @param {number} max width\n * @param {Object} node instance\n * @returns {Object} node instance\n */ var setMaxWidth = setYogaValue(\"maxWidth\");\n/**\n * Set height to node's Yoga instance\n *\n * @param {number} height\n * @param {Object} node instance\n * @returns {Object} node instance\n */ var setHeight = setYogaValue(\"height\");\n/**\n * Set min height to node's Yoga instance\n *\n * @param {number} min height\n * @param {Object} node instance\n * @returns {Object} node instance\n */ var setMinHeight = setYogaValue(\"minHeight\");\n/**\n * Set max height to node's Yoga instance\n *\n * @param {number} max height\n * @param {Object} node instance\n * @returns {Object} node instance\n */ var setMaxHeight = setYogaValue(\"maxHeight\");\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */ /**\n * Check if value is a percentage and throw error if so\n *\n * @param {string} attr property\n * @param {unknown} value\n * @returns {void}\n */ var checkPercents = function checkPercents(attr, value) {\n    var percent = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.matchPercent)(value);\n    if (percent) {\n        throw new Error(\"You can't pass percentage values to \" + attr + \" property\");\n    }\n};\n/**\n * Set rowGap value to node's Yoga instance\n *\n * @param {number} value gap value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */ var setRowGap = function setRowGap(value) {\n    return function(node) {\n        var yogaNode = node.yogaNode;\n        if (!(0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(value) && yogaNode) {\n            checkPercents(\"rowGap\", value);\n            yogaNode.setGap(yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Gutter.Row, value);\n        }\n        return node;\n    };\n};\n/**\n * Set columnGap value to node's Yoga instance\n *\n * @param {number} value gap value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */ var setColumnGap = function setColumnGap(value) {\n    return function(node) {\n        var yogaNode = node.yogaNode;\n        if (!(0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(value) && yogaNode) {\n            checkPercents(\"columnGap\", value);\n            yogaNode.setGap(yoga_layout__WEBPACK_IMPORTED_MODULE_8__.Gutter.Column, value);\n        }\n        return node;\n    };\n};\nvar getAspectRatio = function getAspectRatio(viewbox) {\n    if (!viewbox) return null;\n    return (viewbox.maxX - viewbox.minX) / (viewbox.maxY - viewbox.minY);\n};\n/**\n * @typedef {Function} MeasureSvg\n * @param {number} width\n * @param {number} widthMode\n * @param {number} height\n * @param {number} heightMode\n * @returns {{ width: number, height: number }} svg width and height\n */ /**\n * Yoga svg measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @returns {MeasureSvg} measure svg\n */ var measureCanvas$1 = function measureCanvas(page, node) {\n    return function(width, widthMode, height, heightMode) {\n        var aspectRatio = getAspectRatio(node.props.viewBox) || 1;\n        if (widthMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.Exactly || widthMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.AtMost) {\n            return {\n                width: width,\n                height: width / aspectRatio\n            };\n        }\n        if (heightMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.Exactly) {\n            return {\n                width: height * aspectRatio\n            };\n        }\n        return {};\n    };\n};\n/**\n * Get lines width (if any)\n *\n * @param {Object} node\n * @returns {number} lines width\n */ var linesWidth = function linesWidth(node) {\n    if (!node.lines) return 0;\n    return Math.max.apply(Math, [\n        0\n    ].concat(node.lines.map(function(line) {\n        return line.xAdvance;\n    })));\n};\n/**\n * Get lines height (if any)\n *\n * @param {Object} node\n * @returns {number} lines height\n */ var linesHeight = function linesHeight(node) {\n    if (!node.lines) return -1;\n    return node.lines.reduce(function(acc, line) {\n        return acc + line.box.height;\n    }, 0);\n};\n/* eslint-disable no-param-reassign */ var ALIGNMENT_FACTORS = {\n    center: 0.5,\n    right: 1\n};\n/**\n * @typedef {Function} MeasureText\n * @param {number} width\n * @param {number} widthMode\n * @param {number} height\n * @returns {{ width: number, height: number }} text width and height\n */ /**\n * Yoga text measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Object} fontStore\n * @returns {MeasureText} measure text function\n */ var measureText = function measureText(page, node, fontStore) {\n    return function(width, widthMode, height) {\n        if (widthMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.Exactly) {\n            if (!node.lines) node.lines = layoutText(node, width, height, fontStore);\n            return {\n                height: linesHeight(node)\n            };\n        }\n        if (widthMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.AtMost) {\n            var _node$style;\n            var alignFactor = ALIGNMENT_FACTORS[(_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.textAlign] || 0;\n            if (!node.lines) {\n                node.lines = layoutText(node, width, height, fontStore);\n                node.alignOffset = (width - linesWidth(node)) * alignFactor; // Compensate align in variable width containers\n            }\n            return {\n                height: linesHeight(node),\n                width: Math.min(width, linesWidth(node))\n            };\n        }\n        return {};\n    };\n};\n/**\n * Get image ratio\n *\n * @param {Object} node image node\n * @returns {number} image ratio\n */ var getRatio = function getRatio(node) {\n    var _node$image;\n    return (_node$image = node.image) !== null && _node$image !== void 0 && _node$image.data ? node.image.width / node.image.height : 1;\n};\n/**\n * Checks if page has auto height\n *\n * @param {Object} page\n * @returns {boolean} is page height auto\n */ var isHeightAuto = function isHeightAuto(page) {\n    var _page$box;\n    return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)((_page$box = page.box) === null || _page$box === void 0 ? void 0 : _page$box.height);\n};\nvar SAFETY_HEIGHT$1 = 10;\n/**\n * @typedef {Function} MeasureImage\n * @param {number} width\n * @param {number} widthMode\n * @param {number} height\n * @param {number} heightMode\n * @returns {{ width: number, height: number }} image width and height\n */ /**\n * Yoga image measure function\n *\n * @param {Object} page page\n * @param {Object} node node\n * @returns {MeasureImage} measure image\n */ var measureImage = function measureImage(page, node) {\n    return function(width, widthMode, height, heightMode) {\n        var imageRatio = getRatio(node);\n        var imageMargin = getMargin(node);\n        var pagePadding = getPadding(page);\n        var pageArea = isHeightAuto(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT$1;\n        // Skip measure if image data not present yet\n        if (!node.image) return {\n            width: 0,\n            height: 0\n        };\n        if (widthMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.Exactly && heightMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.Undefined) {\n            var scaledHeight = width / imageRatio;\n            return {\n                height: Math.min(pageArea, scaledHeight)\n            };\n        }\n        if (heightMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.Exactly && (widthMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.AtMost || widthMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.Undefined)) {\n            return {\n                width: Math.min(height * imageRatio, width)\n            };\n        }\n        if (widthMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.Exactly && heightMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.AtMost) {\n            var _scaledHeight = width / imageRatio;\n            return {\n                height: Math.min(height, pageArea, _scaledHeight)\n            };\n        }\n        if (widthMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.AtMost && heightMode === yoga_layout__WEBPACK_IMPORTED_MODULE_8__.MeasureMode.AtMost) {\n            if (imageRatio > 1) {\n                return {\n                    width: width,\n                    height: Math.min(width / imageRatio, height)\n                };\n            }\n            return {\n                height: height,\n                width: Math.min(height * imageRatio, width)\n            };\n        }\n        return {\n            height: height,\n            width: width\n        };\n    };\n};\n/* eslint-disable no-param-reassign */ var SAFETY_HEIGHT = 10;\nvar getMax = function getMax(values) {\n    return Math.max.apply(Math, [\n        -Infinity\n    ].concat(values));\n};\n/**\n * Helper object to predict canvas size\n * TODO: Implement remaining functions (as close as possible);\n */ var measureCtx = function measureCtx() {\n    var ctx = {};\n    var points = [];\n    var nil = function nil() {\n        return ctx;\n    };\n    var addPoint = function addPoint(x, y) {\n        return points.push([\n            x,\n            y\n        ]);\n    };\n    var moveTo = function moveTo() {\n        addPoint.apply(void 0, arguments);\n        return ctx;\n    };\n    var rect = function rect(x, y, w, h) {\n        addPoint(x, y);\n        addPoint(x + w, y);\n        addPoint(x, y + h);\n        addPoint(x + w, y + h);\n        return ctx;\n    };\n    var ellipse = function ellipse(x, y, rx, ry) {\n        ry = ry || rx;\n        addPoint(x - rx, y - ry);\n        addPoint(x + rx, y - ry);\n        addPoint(x + rx, y + ry);\n        addPoint(x - rx, y + ry);\n        return ctx;\n    };\n    var polygon = function polygon() {\n        points.push.apply(points, arguments);\n        return ctx;\n    };\n    // Change dimensions\n    ctx.rect = rect;\n    ctx.moveTo = moveTo;\n    ctx.lineTo = moveTo;\n    ctx.circle = ellipse;\n    ctx.polygon = polygon;\n    ctx.ellipse = ellipse;\n    ctx.roundedRect = rect;\n    // To be implemented\n    ctx.text = nil;\n    ctx.path = nil;\n    ctx.lineWidth = nil;\n    ctx.bezierCurveTo = nil;\n    ctx.quadraticCurveTo = nil;\n    ctx.scale = nil;\n    ctx.rotate = nil;\n    ctx.translate = nil;\n    // These don't change dimensions\n    ctx.dash = nil;\n    ctx.clip = nil;\n    ctx.save = nil;\n    ctx.fill = nil;\n    ctx.font = nil;\n    ctx.stroke = nil;\n    ctx.lineCap = nil;\n    ctx.opacity = nil;\n    ctx.restore = nil;\n    ctx.lineJoin = nil;\n    ctx.fontSize = nil;\n    ctx.fillColor = nil;\n    ctx.miterLimit = nil;\n    ctx.strokeColor = nil;\n    ctx.fillOpacity = nil;\n    ctx.strokeOpacity = nil;\n    ctx.linearGradient = nil;\n    ctx.radialGradient = nil;\n    ctx.getWidth = function() {\n        return getMax(points.map(function(p) {\n            return p[0];\n        }));\n    };\n    ctx.getHeight = function() {\n        return getMax(points.map(function(p) {\n            return p[1];\n        }));\n    };\n    return ctx;\n};\n/**\n * @typedef {Function} MeasureCanvas\n * @returns {{ width: number, height: number }} canvas width and height\n */ /**\n * Yoga canvas measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @returns {MeasureCanvas} measure canvas\n */ var measureCanvas = function measureCanvas(page, node) {\n    return function() {\n        var imageMargin = getMargin(node);\n        var pagePadding = getPadding(page);\n        var pageArea = isHeightAuto(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT;\n        var ctx = measureCtx();\n        node.props.paint(ctx);\n        var width = ctx.getWidth();\n        var height = Math.min(pageArea, ctx.getHeight());\n        return {\n            width: width,\n            height: height\n        };\n    };\n};\nvar isType$1 = function isType(type) {\n    return function(node) {\n        return node.type === type;\n    };\n};\nvar isSvg = isType$1(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Svg);\nvar isText$2 = isType$1(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Text);\nvar isNote = isType$1(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Note);\nvar isPage = isType$1(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Page);\nvar isImage = isType$1(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Image);\nvar isCanvas = isType$1(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Canvas);\nvar isTextInstance$1 = isType$1(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.TextInstance);\nvar setNodeHeight = function setNodeHeight(node) {\n    var value = isPage(node) ? node.box.height : node.style.height;\n    return setHeight(value);\n};\n/**\n * Set styles valeus into yoga node before layout calculation\n *\n * @param {Object} node\n * @returns {Object} node\n */ var setYogaValues = function setYogaValues(node) {\n    (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(setNodeHeight(node), setWidth(node.style.width), setMinWidth(node.style.minWidth), setMaxWidth(node.style.maxWidth), setMinHeight(node.style.minHeight), setMaxHeight(node.style.maxHeight), setMarginTop(node.style.marginTop), setMarginRight(node.style.marginRight), setMarginBottom(node.style.marginBottom), setMarginLeft(node.style.marginLeft), setPaddingTop(node.style.paddingTop), setPaddingRight(node.style.paddingRight), setPaddingBottom(node.style.paddingBottom), setPaddingLeft(node.style.paddingLeft), setPositionType(node.style.position), setPositionTop(node.style.top), setPositionRight(node.style.right), setPositionBottom(node.style.bottom), setPositionLeft(node.style.left), setBorderTop(node.style.borderTopWidth), setBorderRight(node.style.borderRightWidth), setBorderBottom(node.style.borderBottomWidth), setBorderLeft(node.style.borderLeftWidth), setDisplay(node.style.display), setFlexDirection(node.style.flexDirection), setAlignSelf(node.style.alignSelf), setAlignContent(node.style.alignContent), setAlignItems(node.style.alignItems), setJustifyContent(node.style.justifyContent), setFlexWrap(node.style.flexWrap), setOverflow(node.style.overflow), setAspectRatio(node.style.aspectRatio), setFlexBasis(node.style.flexBasis), setFlexGrow(node.style.flexGrow), setFlexShrink(node.style.flexShrink), setRowGap(node.style.rowGap), setColumnGap(node.style.columnGap))(node);\n};\n/**\n * @typedef {Function} InsertYogaNodes\n * @param {Object} child child node\n * @returns {Object} node\n */ /**\n * Inserts child into parent' yoga node\n *\n * @param {Object} parent parent\n * @returns {InsertYogaNodes} insert yoga nodes\n */ var insertYogaNodes = function insertYogaNodes(parent) {\n    return function(child) {\n        parent.insertChild(child.yogaNode, parent.getChildCount());\n        return child;\n    };\n};\nvar setMeasureFunc = function setMeasureFunc(node, page, fontStore) {\n    var yogaNode = node.yogaNode;\n    if (isText$2(node)) {\n        yogaNode.setMeasureFunc(measureText(page, node, fontStore));\n    }\n    if (isImage(node)) {\n        yogaNode.setMeasureFunc(measureImage(page, node));\n    }\n    if (isCanvas(node)) {\n        yogaNode.setMeasureFunc(measureCanvas(page, node));\n    }\n    if (isSvg(node)) {\n        yogaNode.setMeasureFunc(measureCanvas$1(page, node));\n    }\n    return node;\n};\nvar isLayoutElement = function isLayoutElement(node) {\n    return !isText$2(node) && !isNote(node) && !isSvg(node);\n};\n/**\n * @typedef {Function} CreateYogaNodes\n * @param {Object} node\n * @returns {Object} node with appended yoga node\n */ /**\n * Creates and add yoga node to document tree\n * Handles measure function for text and image nodes\n *\n * @returns {CreateYogaNodes} create yoga nodes\n */ var createYogaNodes = function createYogaNodes(page, fontStore, yoga) {\n    return function(node) {\n        var yogaNode = yoga.node.create();\n        var result = Object.assign({}, node, {\n            yogaNode: yogaNode\n        });\n        setYogaValues(result);\n        if (isLayoutElement(node) && node.children) {\n            var resolveChild = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(insertYogaNodes(yogaNode), createYogaNodes(page, fontStore, yoga));\n            result.children = node.children.map(resolveChild);\n        }\n        setMeasureFunc(result, page, fontStore);\n        return result;\n    };\n};\n/**\n * Performs yoga calculation\n *\n * @param {Object} page page node\n * @returns {Object} page node\n */ var calculateLayout = function calculateLayout(page) {\n    page.yogaNode.calculateLayout();\n    return page;\n};\n/**\n * Saves Yoga layout result into 'box' attribute of node\n *\n * @param {Object} node\n * @returns {Object} node with box data\n */ var persistDimensions = function persistDimensions(node) {\n    if (isTextInstance$1(node)) return node;\n    var box = Object.assign(getPadding(node), getMargin(node), getBorderWidth(node), getPosition(node), getDimension(node));\n    var newNode = Object.assign({}, node, {\n        box: box\n    });\n    if (!node.children) return newNode;\n    var children = node.children.map(persistDimensions);\n    return Object.assign({}, newNode, {\n        children: children\n    });\n};\n/**\n * Removes yoga node from document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */ var destroyYogaNodes = function destroyYogaNodes(node) {\n    var newNode = Object.assign({}, node);\n    delete newNode.yogaNode;\n    if (!node.children) return newNode;\n    var children = node.children.map(destroyYogaNodes);\n    return Object.assign({}, newNode, {\n        children: children\n    });\n};\n/**\n * Free yoga node from document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */ var freeYogaNodes = function freeYogaNodes(node) {\n    if (node.yogaNode) node.yogaNode.freeRecursive();\n    return node;\n};\n/**\n * Calculates page object layout using Yoga.\n * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'\n * Destroy yoga values at the end.\n *\n * @param {Object} page object\n * @returns {Object} page object with correct 'box' layout attributes\n */ var resolvePageDimensions = function resolvePageDimensions(page, fontStore, yoga) {\n    if ((0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(page)) return null;\n    return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(destroyYogaNodes, freeYogaNodes, persistDimensions, calculateLayout, createYogaNodes(page, fontStore, yoga))(page);\n};\n/**\n * Calculates root object layout using Yoga.\n *\n * @param {Object} node root object\n * @param {Object} fontStore font store\n * @returns {Object} root object with correct 'box' layout attributes\n */ var resolveDimensions = function resolveDimensions(node, fontStore) {\n    if (!node.children) return node;\n    var resolveChild = function resolveChild(child) {\n        return resolvePageDimensions(child, fontStore, node.yoga);\n    };\n    var children = node.children.map(resolveChild);\n    return Object.assign({}, node, {\n        children: children\n    });\n};\nvar isText$1 = function isText(node) {\n    return node.type === _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Text;\n};\n// Prevent splitting elements by low decimal numbers\nvar SAFETY_THRESHOLD = 0.001;\nvar assingChildren = function assingChildren(children, node) {\n    return Object.assign({}, node, {\n        children: children\n    });\n};\nvar getTop = function getTop(node) {\n    var _node$box;\n    return ((_node$box = node.box) === null || _node$box === void 0 ? void 0 : _node$box.top) || 0;\n};\nvar allFixed = function allFixed(nodes) {\n    return nodes.every(isFixed);\n};\nvar isDynamic = function isDynamic(node) {\n    var _node$props;\n    return !(0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.render);\n};\nvar relayoutPage = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(resolveTextLayout, resolvePageDimensions, resolveInheritance, resolvePageStyles);\nvar warnUnavailableSpace = function warnUnavailableSpace(node) {\n    console.warn(\"Node of type \" + node.type + \" can't wrap between pages and it's bigger than available page height\");\n};\nvar splitNodes = function splitNodes(height, contentArea, nodes) {\n    var currentChildren = [];\n    var nextChildren = [];\n    for(var i = 0; i < nodes.length; i += 1){\n        var child = nodes[i];\n        var futureNodes = nodes.slice(i + 1);\n        var futureFixedNodes = futureNodes.filter(isFixed);\n        var nodeTop = getTop(child);\n        var nodeHeight = child.box.height;\n        var isOutside = height <= nodeTop;\n        var shouldBreak$1 = shouldBreak(child, futureNodes, height);\n        var shouldSplit = height + SAFETY_THRESHOLD < nodeTop + nodeHeight;\n        var canWrap = getWrap(child);\n        var fitsInsidePage = nodeHeight <= contentArea;\n        if (isFixed(child)) {\n            nextChildren.push(child);\n            currentChildren.push(child);\n            continue;\n        }\n        if (isOutside) {\n            var box = Object.assign({}, child.box, {\n                top: child.box.top - height\n            });\n            var next = Object.assign({}, child, {\n                box: box\n            });\n            nextChildren.push(next);\n            continue;\n        }\n        if (!fitsInsidePage && !canWrap) {\n            currentChildren.push(child);\n            nextChildren.push.apply(nextChildren, futureNodes);\n            warnUnavailableSpace(child);\n            break;\n        }\n        if (shouldBreak$1) {\n            var _box = Object.assign({}, child.box, {\n                top: child.box.top - height\n            });\n            var props = Object.assign({}, child.props, {\n                wrap: true,\n                break: false\n            });\n            var _next = Object.assign({}, child, {\n                box: _box,\n                props: props\n            });\n            currentChildren.push.apply(currentChildren, futureFixedNodes);\n            nextChildren.push.apply(nextChildren, [\n                _next\n            ].concat(futureNodes));\n            break;\n        }\n        if (shouldSplit) {\n            var _split = split(child, height, contentArea), currentChild = _split[0], nextChild = _split[1];\n            // All children are moved to the next page, it doesn't make sense to show the parent on the current page\n            if (child.children.length > 0 && currentChild.children.length === 0) {\n                var _box2 = Object.assign({}, child.box, {\n                    top: child.box.top - height\n                });\n                var _next2 = Object.assign({}, child, {\n                    box: _box2\n                });\n                currentChildren.push.apply(currentChildren, futureFixedNodes);\n                nextChildren.push.apply(nextChildren, [\n                    _next2\n                ].concat(futureNodes));\n                break;\n            }\n            if (currentChild) currentChildren.push(currentChild);\n            if (nextChild) nextChildren.push(nextChild);\n            continue;\n        }\n        currentChildren.push(child);\n    }\n    return [\n        currentChildren,\n        nextChildren\n    ];\n};\nvar splitChildren = function splitChildren(height, contentArea, node) {\n    var children = node.children || [];\n    var availableHeight = height - getTop(node);\n    return splitNodes(availableHeight, contentArea, children);\n};\nvar splitView = function splitView(node, height, contentArea) {\n    var _splitNode = splitNode(node, height), currentNode = _splitNode[0], nextNode = _splitNode[1];\n    var _splitChildren = splitChildren(height, contentArea, node), currentChilds = _splitChildren[0], nextChildren = _splitChildren[1];\n    return [\n        assingChildren(currentChilds, currentNode),\n        assingChildren(nextChildren, nextNode)\n    ];\n};\nvar split = function split(node, height, contentArea) {\n    return isText$1(node) ? splitText(node, height) : splitView(node, height, contentArea);\n};\nvar shouldResolveDynamicNodes = function shouldResolveDynamicNodes(node) {\n    var children = node.children || [];\n    return isDynamic(node) || children.some(shouldResolveDynamicNodes);\n};\nvar resolveDynamicNodes = function resolveDynamicNodes(props, node) {\n    var isNodeDynamic = isDynamic(node);\n    // Call render prop on dynamic nodes and append result to children\n    var resolveChildren = function resolveChildren(children) {\n        if (children === void 0) {\n            children = [];\n        }\n        if (isNodeDynamic) {\n            var res = node.props.render(props);\n            return createInstances(res).filter(Boolean).map(function(n) {\n                return resolveDynamicNodes(props, n);\n            });\n        }\n        return children.map(function(c) {\n            return resolveDynamicNodes(props, c);\n        });\n    };\n    // We reset dynamic text box so it can be computed again later on\n    var resetHeight = isNodeDynamic && isText$1(node);\n    var box = resetHeight ? _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, node.box, {\n        height: 0\n    }) : node.box;\n    var children = resolveChildren(node.children);\n    var lines = isNodeDynamic ? null : node.lines;\n    return Object.assign({}, node, {\n        box: box,\n        lines: lines,\n        children: children\n    });\n};\nvar resolveDynamicPage = function resolveDynamicPage(props, page, fontStore, yoga) {\n    if (shouldResolveDynamicNodes(page)) {\n        var resolvedPage = resolveDynamicNodes(props, page);\n        return relayoutPage(resolvedPage, fontStore, yoga);\n    }\n    return page;\n};\nvar splitPage = function splitPage(page, pageNumber, fontStore, yoga) {\n    var wrapArea = getWrapArea(page);\n    var contentArea = getContentArea(page);\n    var dynamicPage = resolveDynamicPage({\n        pageNumber: pageNumber\n    }, page, fontStore, yoga);\n    var height = page.style.height;\n    var _splitNodes = splitNodes(wrapArea, contentArea, dynamicPage.children), currentChilds = _splitNodes[0], nextChilds = _splitNodes[1];\n    var relayout = function relayout(node) {\n        return relayoutPage(node, fontStore, yoga);\n    };\n    var currentBox = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, page.box, {\n        height: height\n    });\n    var currentPage = relayout(Object.assign({}, page, {\n        box: currentBox,\n        children: currentChilds\n    }));\n    if (nextChilds.length === 0 || allFixed(nextChilds)) return [\n        currentPage,\n        null\n    ];\n    var nextBox = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.omit)(\"height\", page.box);\n    var nextProps = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.omit)(\"bookmark\", page.props);\n    var nextPage = relayout(Object.assign({}, page, {\n        props: nextProps,\n        box: nextBox,\n        children: nextChilds\n    }));\n    return [\n        currentPage,\n        nextPage\n    ];\n};\nvar resolvePageIndices = function resolvePageIndices(fontStore, yoga, page, pageNumber, pages) {\n    var totalPages = pages.length;\n    var props = {\n        totalPages: totalPages,\n        pageNumber: pageNumber + 1,\n        subPageNumber: page.subPageNumber + 1,\n        subPageTotalPages: page.subPageTotalPages\n    };\n    return resolveDynamicPage(props, page, fontStore, yoga);\n};\nvar assocSubPageData = function assocSubPageData(subpages) {\n    return subpages.map(function(page, i) {\n        return _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_9__({}, page, {\n            subPageNumber: i,\n            subPageTotalPages: subpages.length\n        });\n    });\n};\nvar dissocSubPageData = function dissocSubPageData(page) {\n    return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.omit)([\n        \"subPageNumber\",\n        \"subPageTotalPages\"\n    ], page);\n};\nvar paginate = function paginate(page, pageNumber, fontStore, yoga) {\n    var _page$props;\n    if (!page) return [];\n    if (((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.wrap) === false) return [\n        page\n    ];\n    var splittedPage = splitPage(page, pageNumber, fontStore, yoga);\n    var pages = [\n        splittedPage[0]\n    ];\n    var nextPage = splittedPage[1];\n    while(nextPage !== null){\n        splittedPage = splitPage(nextPage, pageNumber + pages.length, fontStore, yoga);\n        pages.push(splittedPage[0]);\n        nextPage = splittedPage[1];\n    }\n    return pages;\n};\n/**\n * Performs pagination. This is the step responsible of breaking the whole document\n * into pages following pagiation rules, such as `fixed`, `break` and dynamic nodes.\n *\n * @param {Object} doc node\n * @param {Object} fontStore font store\n * @returns {Object} layout node\n */ var resolvePagination = function resolvePagination(doc, fontStore) {\n    var pages = [];\n    var pageNumber = 1;\n    for(var i = 0; i < doc.children.length; i += 1){\n        var page = doc.children[i];\n        var subpages = paginate(page, pageNumber, fontStore, doc.yoga);\n        subpages = assocSubPageData(subpages);\n        pageNumber += subpages.length;\n        pages = pages.concat(subpages);\n    }\n    pages = pages.map(function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return dissocSubPageData(resolvePageIndices.apply(void 0, [\n            fontStore,\n            doc.yoga\n        ].concat(args)));\n    });\n    return assingChildren(pages, doc);\n};\n/**\n * @typedef {Function} ResolvePageHorizontalPadding\n * @param {string} value padding value\n * @returns {Object} translated padding value\n */ /**\n * Translates page percentage horizontal paddings in fixed ones\n *\n * @param {Object} container page container\n * @returns {ResolvePageHorizontalPadding} resolve page horizontal padding\n */ var resolvePageHorizontalPadding = function resolvePageHorizontalPadding(container) {\n    return function(value) {\n        var match = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.matchPercent)(value);\n        return match ? match.percent * container.width : value;\n    };\n};\n/**\n * @typedef {Function} ResolvePageVerticalPadding\n * @param {string} padding value\n * @returns {Object} translated padding value\n */ /**\n * Translates page percentage vertical paddings in fixed ones\n *\n * @param {Object} container page container\n * @returns {ResolvePageVerticalPadding} resolve page vertical padding\n */ var resolvePageVerticalPadding = function resolvePageVerticalPadding(container) {\n    return function(value) {\n        var match = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.matchPercent)(value);\n        return match ? match.percent * container.height : value;\n    };\n};\n/**\n * Translates page percentage paddings in fixed ones\n *\n * @param {Object} page\n * @returns {Object} page with fixed paddings\n */ var resolvePagePaddings = function resolvePagePaddings(page) {\n    var container = page.style;\n    var style = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.evolve)({\n        paddingTop: resolvePageVerticalPadding(container),\n        paddingLeft: resolvePageHorizontalPadding(container),\n        paddingRight: resolvePageHorizontalPadding(container),\n        paddingBottom: resolvePageVerticalPadding(container)\n    }, page.style);\n    return Object.assign({}, page, {\n        style: style\n    });\n};\n/**\n * Translates all pages percentage paddings in fixed ones\n * This has to be computed from pages calculated size and not by Yoga\n * because at this point we didn't performed pagination yet.\n *\n * @param {Object} root document root\n * @returns {Object} document root with translated page paddings\n */ var resolvePagesPaddings = function resolvePagesPaddings(root) {\n    if (!root.children) return root;\n    var children = root.children.map(resolvePagePaddings);\n    return Object.assign({}, root, {\n        children: children\n    });\n};\n/**\n * @typedef {Function} ResolveRadius\n * @param {string | number} value border radius value\n * @returns {number} resolved radius value\n */ /**\n *\n * @param {{ width: number, height: number }} container width and height\n * @returns {ResolveRadius} resolve radius function\n */ var resolveRadius = function resolveRadius(container) {\n    return function(value) {\n        if (!value) return undefined;\n        var match = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.matchPercent)(value);\n        return match ? match.percent * Math.min(container.width, container.height) : value;\n    };\n};\n/**\n * Transforms percent border radius into fixed values\n *\n * @param {Object} node\n * @returns {Object} node\n */ var resolvePercentRadius = function resolvePercentRadius(node) {\n    var style = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.evolve)({\n        borderTopLeftRadius: resolveRadius(node.box),\n        borderTopRightRadius: resolveRadius(node.box),\n        borderBottomRightRadius: resolveRadius(node.box),\n        borderBottomLeftRadius: resolveRadius(node.box)\n    }, node.style || {});\n    var newNode = Object.assign({}, node, {\n        style: style\n    });\n    if (!node.children) return newNode;\n    var children = node.children.map(resolvePercentRadius);\n    return Object.assign({}, newNode, {\n        children: children\n    });\n};\n/**\n * Transform percent height into fixed\n *\n * @param {number} height\n * @returns {number} height\n */ var transformHeight = function transformHeight(pageArea, height) {\n    var match = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.matchPercent)(height);\n    return match ? match.percent * pageArea : height;\n};\n/**\n * Get page area (height minus paddings)\n *\n * @param {Object} page\n * @returns {number} page area\n */ var getPageArea = function getPageArea(page) {\n    var _page$style, _page$style2;\n    var pageHeight = page.style.height;\n    var pagePaddingTop = ((_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.paddingTop) || 0;\n    var pagePaddingBottom = ((_page$style2 = page.style) === null || _page$style2 === void 0 ? void 0 : _page$style2.paddingBottom) || 0;\n    return pageHeight - pagePaddingTop - pagePaddingBottom;\n};\n/**\n * Transform node percent height to fixed\n *\n * @param {Object} page\n * @param {Object} node\n * @returns {Object} transformed node\n */ var resolveNodePercentHeight = function resolveNodePercentHeight(page, node) {\n    var _page$style3, _node$style;\n    if ((0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)((_page$style3 = page.style) === null || _page$style3 === void 0 ? void 0 : _page$style3.height)) return node;\n    if ((0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.height)) return node;\n    var pageArea = getPageArea(page);\n    var height = transformHeight(pageArea, node.style.height);\n    var style = Object.assign({}, node.style, {\n        height: height\n    });\n    return Object.assign({}, node, {\n        style: style\n    });\n};\n/**\n * Transform page immediate children with percent height to fixed\n *\n * @param {Object} page\n * @returns {Object} transformed page\n */ var resolvePagePercentHeight = function resolvePagePercentHeight(page) {\n    if (!page.children) return page;\n    var resolveChild = function resolveChild(child) {\n        return resolveNodePercentHeight(page, child);\n    };\n    var children = page.children.map(resolveChild);\n    return Object.assign({}, page, {\n        children: children\n    });\n};\n/**\n * Transform all page immediate children with percent height to fixed.\n * This is needed for computing correct dimensions on pre-pagination layout.\n *\n * @param {Object} root document root\n * @returns {Object} transformed document root\n */ var resolvePercentHeight = function resolvePercentHeight(root) {\n    if (!root.children) return root;\n    var children = root.children.map(resolvePagePercentHeight);\n    return Object.assign({}, root, {\n        children: children\n    });\n};\nvar isType = function isType(type) {\n    return function(node) {\n        return node.type === type;\n    };\n};\nvar isLink = isType(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Link);\nvar isText = isType(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Text);\nvar isTextInstance = isType(_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.TextInstance);\n/**\n * Checks if node has render prop\n *\n * @param {Object} node\n * @returns {boolean} has render prop?\n */ var hasRenderProp = function hasRenderProp(node) {\n    var _node$props;\n    return !!((_node$props = node.props) !== null && _node$props !== void 0 && _node$props.render);\n};\n/**\n * Checks if node is text type (Text or TextInstance)\n *\n * @param {Object} node\n * @returns {boolean} are all children text instances?\n */ var isTextType = function isTextType(node) {\n    return isText(node) || isTextInstance(node);\n};\n/**\n * Checks if is tet link that needs to be wrapped in Text\n *\n * @param {Object} node\n * @returns {boolean} are all children text instances?\n */ var isTextLink = function isTextLink(node) {\n    var children = node.children || [];\n    // Text string inside a Link\n    if (children.every(isTextInstance)) return true;\n    // Text node inside a Link\n    if (children.every(isText)) return false;\n    return children.every(isTextType);\n};\n/**\n * Wraps node children inside Text node\n *\n * @param {Object} node\n * @returns {boolean} node with intermediate Text child\n */ var wrapText = function wrapText(node) {\n    var textElement = {\n        type: _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Text,\n        props: {},\n        style: {},\n        box: {},\n        children: node.children\n    };\n    return Object.assign({}, node, {\n        children: [\n            textElement\n        ]\n    });\n};\nvar transformLink = function transformLink(node) {\n    if (!isLink(node)) return node;\n    // If has render prop substitute the instance by a Text, that will\n    // ultimately render the inline Link via the textkit PDF renderer.\n    if (hasRenderProp(node)) return Object.assign({}, node, {\n        type: _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Text\n    });\n    // If is a text link (either contains Text or TextInstalce), wrap it\n    // inside a Text element so styles are applied correctly\n    if (isTextLink(node)) return wrapText(node);\n    return node;\n};\n/**\n * Transforms Link layout to correctly render text and dynamic rendered links\n *\n * @param {Object} node\n * @returns {Object} node with link substitution\n */ var resolveLinkSubstitution = function resolveLinkSubstitution(node) {\n    if (!node.children) return node;\n    var resolveChild = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(transformLink, resolveLinkSubstitution);\n    var children = node.children.map(resolveChild);\n    return Object.assign({}, node, {\n        children: children\n    });\n};\nvar layout = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.asyncCompose)(resolveZIndex, resolveOrigin, resolveAssets, resolvePagination, resolveTextLayout, resolvePercentRadius, resolveDimensions, resolveSvg, resolveAssets, resolveInheritance, resolvePercentHeight, resolvePagesPaddings, resolveStyles, resolveLinkSubstitution, resolveBookmarks, resolvePageSizes, resolveYoga);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/layout/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-pdf/layout/node_modules/emoji-regex/index.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@react-pdf/layout/node_modules/emoji-regex/index.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (()=>{\n    // https://mths.be/emoji\n    return /[#*0-9]\\uFE0F?\\u20E3|[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23ED-\\u23EF\\u23F1\\u23F2\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB\\u25FC\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692\\u2694-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A7\\u26AA\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C8\\u26CF\\u26D1\\u26E9\\u26F0-\\u26F5\\u26F7\\u26F8\\u26FA\\u2702\\u2708\\u2709\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u27A1\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B55\\u3030\\u303D\\u3297\\u3299]\\uFE0F?|[\\u261D\\u270C\\u270D](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\u270A\\u270B](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u2693\\u26A1\\u26AB\\u26C5\\u26CE\\u26D4\\u26EA\\u26FD\\u2705\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2795-\\u2797\\u27B0\\u27BF\\u2B50]|\\u26D3\\uFE0F?(?:\\u200D\\uD83D\\uDCA5)?|\\u26F9(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\u2764\\uFE0F?(?:\\u200D(?:\\uD83D\\uDD25|\\uD83E\\uDE79))?|\\uD83C(?:[\\uDC04\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDE02\\uDE37\\uDF21\\uDF24-\\uDF2C\\uDF36\\uDF7D\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E\\uDF9F\\uDFCD\\uDFCE\\uDFD4-\\uDFDF\\uDFF5\\uDFF7]\\uFE0F?|[\\uDF85\\uDFC2\\uDFC7](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDFC4\\uDFCA](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDFCB\\uDFCC](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF43\\uDF45-\\uDF4A\\uDF4C-\\uDF7C\\uDF7E-\\uDF84\\uDF86-\\uDF93\\uDFA0-\\uDFC1\\uDFC5\\uDFC6\\uDFC8\\uDFC9\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF8-\\uDFFF]|\\uDDE6\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF]|\\uDDE7\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF]|\\uDDE8\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF]|\\uDDE9\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF]|\\uDDEA\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA]|\\uDDEB\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7]|\\uDDEC\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE]|\\uDDED\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA]|\\uDDEE\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9]|\\uDDEF\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5]|\\uDDF0\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF]|\\uDDF1\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE]|\\uDDF2\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF]|\\uDDF3\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF]|\\uDDF4\\uD83C\\uDDF2|\\uDDF5\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE]|\\uDDF6\\uD83C\\uDDE6|\\uDDF7\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC]|\\uDDF8\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF]|\\uDDF9\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF]|\\uDDFA\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF]|\\uDDFB\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA]|\\uDDFC\\uD83C[\\uDDEB\\uDDF8]|\\uDDFD\\uD83C\\uDDF0|\\uDDFE\\uD83C[\\uDDEA\\uDDF9]|\\uDDFF\\uD83C[\\uDDE6\\uDDF2\\uDDFC]|\\uDF44(?:\\u200D\\uD83D\\uDFEB)?|\\uDF4B(?:\\u200D\\uD83D\\uDFE9)?|\\uDFC3(?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D(?:[\\u2640\\u2642]\\uFE0F?(?:\\u200D\\u27A1\\uFE0F?)?|\\u27A1\\uFE0F?))?|\\uDFF3\\uFE0F?(?:\\u200D(?:\\u26A7\\uFE0F?|\\uD83C\\uDF08))?|\\uDFF4(?:\\u200D\\u2620\\uFE0F?|\\uDB40\\uDC67\\uDB40\\uDC62\\uDB40(?:\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F)?)|\\uD83D(?:[\\uDC3F\\uDCFD\\uDD49\\uDD4A\\uDD6F\\uDD70\\uDD73\\uDD76-\\uDD79\\uDD87\\uDD8A-\\uDD8D\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA\\uDECB\\uDECD-\\uDECF\\uDEE0-\\uDEE5\\uDEE9\\uDEF0\\uDEF3]\\uFE0F?|[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDC8F\\uDC91\\uDCAA\\uDD7A\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4\\uDEB5](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD74\\uDD90](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC00-\\uDC07\\uDC09-\\uDC14\\uDC16-\\uDC25\\uDC27-\\uDC3A\\uDC3C-\\uDC3E\\uDC40\\uDC44\\uDC45\\uDC51-\\uDC65\\uDC6A\\uDC79-\\uDC7B\\uDC7D-\\uDC80\\uDC84\\uDC88-\\uDC8E\\uDC90\\uDC92-\\uDCA9\\uDCAB-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDDA4\\uDDFB-\\uDE2D\\uDE2F-\\uDE34\\uDE37-\\uDE41\\uDE43\\uDE44\\uDE48-\\uDE4A\\uDE80-\\uDEA2\\uDEA4-\\uDEB3\\uDEB7-\\uDEBF\\uDEC1-\\uDEC5\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEDC-\\uDEDF\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB\\uDFF0]|\\uDC08(?:\\u200D\\u2B1B)?|\\uDC15(?:\\u200D\\uD83E\\uDDBA)?|\\uDC26(?:\\u200D(?:\\u2B1B|\\uD83D\\uDD25))?|\\uDC3B(?:\\u200D\\u2744\\uFE0F?)?|\\uDC41\\uFE0F?(?:\\u200D\\uD83D\\uDDE8\\uFE0F?)?|\\uDC68(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDC68\\uDC69]\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]))|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC69(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?[\\uDC68\\uDC69]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?|\\uDC69\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?))|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]))|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC6F(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDD75(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDE2E(?:\\u200D\\uD83D\\uDCA8)?|\\uDE35(?:\\u200D\\uD83D\\uDCAB)?|\\uDE36(?:\\u200D\\uD83C\\uDF2B\\uFE0F?)?|\\uDE42(?:\\u200D[\\u2194\\u2195]\\uFE0F?)?|\\uDEB6(?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D(?:[\\u2640\\u2642]\\uFE0F?(?:\\u200D\\u27A1\\uFE0F?)?|\\u27A1\\uFE0F?))?)|\\uD83E(?:[\\uDD0C\\uDD0F\\uDD18-\\uDD1F\\uDD30-\\uDD34\\uDD36\\uDD77\\uDDB5\\uDDB6\\uDDBB\\uDDD2\\uDDD3\\uDDD5\\uDEC3-\\uDEC5\\uDEF0\\uDEF2-\\uDEF8](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD\\uDDCF\\uDDD4\\uDDD6-\\uDDDD](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDDDE\\uDDDF](?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD0D\\uDD0E\\uDD10-\\uDD17\\uDD20-\\uDD25\\uDD27-\\uDD2F\\uDD3A\\uDD3F-\\uDD45\\uDD47-\\uDD76\\uDD78-\\uDDB4\\uDDB7\\uDDBA\\uDDBC-\\uDDCC\\uDDD0\\uDDE0-\\uDDFF\\uDE70-\\uDE7C\\uDE80-\\uDE88\\uDE90-\\uDEBD\\uDEBF-\\uDEC2\\uDECE-\\uDEDB\\uDEE0-\\uDEE8]|\\uDD3C(?:\\u200D[\\u2640\\u2642]\\uFE0F?|\\uD83C[\\uDFFB-\\uDFFF])?|\\uDDCE(?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D(?:[\\u2640\\u2642]\\uFE0F?(?:\\u200D\\u27A1\\uFE0F?)?|\\u27A1\\uFE0F?))?|\\uDDD1(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83E\\uDDD1|\\uDDD1\\u200D\\uD83E\\uDDD2(?:\\u200D\\uD83E\\uDDD2)?|\\uDDD2(?:\\u200D\\uD83E\\uDDD2)?))|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFC-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFD-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFD\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFE]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF\\uDDBC\\uDDBD](?:\\u200D\\u27A1\\uFE0F?)?|[\\uDDB0-\\uDDB3]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?))?|\\uDEF1(?:\\uD83C(?:\\uDFFB(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFC-\\uDFFF])?|\\uDFFC(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])?|\\uDFFD(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])?|\\uDFFE(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])?|\\uDFFF(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFE])?))?)/g;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/layout/node_modules/emoji-regex/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-pdf/pdfkit/lib/pdfkit.js":
/*!******************************************************!*\
  !*** ./node_modules/@react-pdf/pdfkit/lib/pdfkit.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmbeddedFont: () => (/* binding */ EmbeddedFont),\n/* harmony export */   PDFFont: () => (/* binding */ PDFFont),\n/* harmony export */   StandardFont: () => (/* binding */ StandardFont),\n/* harmony export */   \"default\": () => (/* binding */ PDFDocument)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/inheritsLoose.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ \"(ssr)/./node_modules/@babel/runtime/helpers/assertThisInitialized.js\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zlib */ \"zlib\");\n/* harmony import */ var _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/createForOfIteratorHelperLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/createForOfIteratorHelperLoose.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var crypto_js_md5_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! crypto-js/md5.js */ \"(ssr)/./node_modules/crypto-js/md5.js\");\n/* harmony import */ var fontkit__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! fontkit */ \"(ssr)/./node_modules/fontkit/dist/module.mjs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var jay_peg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! jay-peg */ \"(ssr)/./node_modules/jay-peg/src/index.js\");\n/* harmony import */ var _react_pdf_png_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @react-pdf/png-js */ \"(ssr)/./node_modules/@react-pdf/png-js/lib/png-js.js\");\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/extends.js\");\n/* harmony import */ var crypto_js_core_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! crypto-js/core.js */ \"(ssr)/./node_modules/crypto-js/core.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar PDFReference = /*#__PURE__*/ function(_stream$Writable) {\n    _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__(PDFReference, _stream$Writable);\n    function PDFReference(document, id, data) {\n        var _this;\n        _this = _stream$Writable.call(this, {\n            decodeStrings: false\n        }) || this;\n        _this.finalize = _this.finalize.bind(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__(_this));\n        _this.document = document;\n        _this.id = id;\n        if (data == null) {\n            data = {};\n        }\n        _this.data = data;\n        _this.gen = 0;\n        _this.deflate = null;\n        _this.compress = _this.document.compress && !_this.data.Filter;\n        _this.uncompressedLength = 0;\n        _this.chunks = [];\n        return _this;\n    }\n    var _proto = PDFReference.prototype;\n    _proto.initDeflate = function initDeflate() {\n        var _this2 = this;\n        this.data.Filter = \"FlateDecode\";\n        this.deflate = zlib__WEBPACK_IMPORTED_MODULE_3__.createDeflate();\n        this.deflate.on(\"data\", function(chunk) {\n            _this2.chunks.push(chunk);\n            return _this2.data.Length += chunk.length;\n        });\n        return this.deflate.on(\"end\", this.finalize);\n    };\n    _proto._write = function _write(chunk, encoding, callback) {\n        if (!(chunk instanceof Uint8Array)) {\n            chunk = Buffer.from(chunk + \"\\n\", \"binary\");\n        }\n        this.uncompressedLength += chunk.length;\n        if (this.data.Length == null) {\n            this.data.Length = 0;\n        }\n        if (this.compress) {\n            if (!this.deflate) {\n                this.initDeflate();\n            }\n            this.deflate.write(chunk);\n        } else {\n            this.chunks.push(chunk);\n            this.data.Length += chunk.length;\n        }\n        return callback();\n    };\n    _proto.end = function end() {\n        _stream$Writable.prototype.end.apply(this, arguments);\n        if (this.deflate) {\n            return this.deflate.end();\n        }\n        return this.finalize();\n    };\n    _proto.finalize = function finalize() {\n        this.offset = this.document._offset;\n        this.document._write(this.id + \" \" + this.gen + \" obj\");\n        this.document._write(PDFObject$1.convert(this.data));\n        if (this.chunks.length) {\n            this.document._write(\"stream\");\n            for(var _i = 0, _Array$from = Array.from(this.chunks); _i < _Array$from.length; _i++){\n                var chunk = _Array$from[_i];\n                this.document._write(chunk);\n            }\n            this.chunks.length = 0; // free up memory\n            this.document._write(\"\\nendstream\");\n        }\n        this.document._write(\"endobj\");\n        return this.document._refEnd(this);\n    };\n    _proto.toString = function toString() {\n        return this.id + \" \" + this.gen + \" R\";\n    };\n    return PDFReference;\n}(stream__WEBPACK_IMPORTED_MODULE_1__.Writable);\nvar PDFTree = /*#__PURE__*/ function() {\n    function PDFTree(options) {\n        if (options === void 0) {\n            options = {};\n        }\n        this._items = {};\n        // disable /Limits output for this tree\n        this.limits = typeof options.limits === \"boolean\" ? options.limits : true;\n    }\n    var _proto = PDFTree.prototype;\n    _proto.add = function add(key, val) {\n        return this._items[key] = val;\n    };\n    _proto.get = function get(key) {\n        return this._items[key];\n    };\n    _proto.toString = function toString() {\n        var _this = this;\n        // Needs to be sorted by key\n        var sortedKeys = Object.keys(this._items).sort(function(a, b) {\n            return _this._compareKeys(a, b);\n        });\n        var out = [\n            \"<<\"\n        ];\n        if (this.limits && sortedKeys.length > 1) {\n            var first = sortedKeys[0], last = sortedKeys[sortedKeys.length - 1];\n            out.push(\"  /Limits \" + PDFObject$1.convert([\n                this._dataForKey(first),\n                this._dataForKey(last)\n            ]));\n        }\n        out.push(\"  /\" + this._keysName() + \" [\");\n        for(var _iterator = _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__(sortedKeys), _step; !(_step = _iterator()).done;){\n            var key = _step.value;\n            out.push(\"    \" + PDFObject$1.convert(this._dataForKey(key)) + \" \" + PDFObject$1.convert(this._items[key]));\n        }\n        out.push(\"]\");\n        out.push(\">>\");\n        return out.join(\"\\n\");\n    };\n    _proto._compareKeys = function _compareKeys() {\n        throw new Error(\"Must be implemented by subclasses\");\n    };\n    _proto._keysName = function _keysName() {\n        throw new Error(\"Must be implemented by subclasses\");\n    };\n    _proto._dataForKey = function _dataForKey() {\n        throw new Error(\"Must be implemented by subclasses\");\n    };\n    return PDFTree;\n}();\nvar PDFNameTree = /*#__PURE__*/ function(_PDFTree) {\n    _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__(PDFNameTree, _PDFTree);\n    function PDFNameTree() {\n        return _PDFTree.apply(this, arguments) || this;\n    }\n    var _proto = PDFNameTree.prototype;\n    _proto._compareKeys = function _compareKeys(a, b) {\n        return a.localeCompare(b);\n    };\n    _proto._keysName = function _keysName() {\n        return \"Names\";\n    };\n    _proto._dataForKey = function _dataForKey(k) {\n        return new String(k);\n    };\n    return PDFNameTree;\n}(PDFTree);\nvar escapableRe = /[\\n\\r\\t\\b\\f\\(\\)\\\\]/g;\nvar escapable = {\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\t\": \"\\\\t\",\n    \"\\b\": \"\\\\b\",\n    \"\\f\": \"\\\\f\",\n    \"\\\\\": \"\\\\\\\\\",\n    \"(\": \"\\\\(\",\n    \")\": \"\\\\)\"\n};\nvar pad = function pad(str, length) {\n    return (Array(length + 1).join(\"0\") + str).slice(-length);\n};\n// Convert little endian UTF-16 to big endian\nvar swapBytes = function swapBytes(buff) {\n    var l = buff.length;\n    if (l & 0x01) {\n        throw new Error(\"Buffer length must be even\");\n    } else {\n        for(var i = 0, end = l - 1; i < end; i += 2){\n            var a = buff[i];\n            buff[i] = buff[i + 1];\n            buff[i + 1] = a;\n        }\n    }\n    return buff;\n};\nvar PDFObject = /*#__PURE__*/ function() {\n    function PDFObject() {}\n    PDFObject.convert = function convert(object) {\n        // String literals are converted to the PDF name type\n        if (typeof object === \"string\") {\n            return \"/\" + object;\n        }\n        // String objects are converted to PDF strings (UTF-16)\n        if (object instanceof String) {\n            var string = object;\n            // Detect if this is a unicode string\n            var isUnicode = false;\n            for(var i = 0, end = string.length; i < end; i++){\n                if (string.charCodeAt(i) > 0x7f) {\n                    isUnicode = true;\n                    break;\n                }\n            }\n            // If so, encode it as big endian UTF-16\n            if (isUnicode) {\n                string = swapBytes(Buffer.from(\"\\uFEFF\" + string, \"utf16le\")).toString(\"binary\");\n            }\n            // Escape characters as required by the spec\n            string = string.replace(escapableRe, function(c) {\n                return escapable[c];\n            });\n            return \"(\" + string + \")\";\n        // Buffers are converted to PDF hex strings\n        }\n        if (Buffer.isBuffer(object)) {\n            return \"<\" + object.toString(\"hex\") + \">\";\n        }\n        if (object instanceof PDFReference || object instanceof PDFNameTree) {\n            return object.toString();\n        }\n        if (object instanceof Date) {\n            return \"(D:\" + pad(object.getUTCFullYear(), 4) + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + \"Z)\";\n        }\n        if (Array.isArray(object)) {\n            var items = Array.from(object).map(function(e) {\n                return PDFObject.convert(e);\n            }).join(\" \");\n            return \"[\" + items + \"]\";\n        }\n        if (({}).toString.call(object) === \"[object Object]\") {\n            var out = [\n                \"<<\"\n            ];\n            for(var key in object){\n                var val = object[key];\n                out.push(\"/\" + key + \" \" + PDFObject.convert(val));\n            }\n            out.push(\">>\");\n            return out.join(\"\\n\");\n        }\n        if (typeof object === \"number\") {\n            return PDFObject.number(object);\n        }\n        return \"\" + object;\n    };\n    PDFObject.number = function number(n) {\n        if (n > -1e21 && n < 1e21) {\n            return Math.round(n * 1e6) / 1e6;\n        }\n        throw new Error(\"unsupported number: \" + n);\n    };\n    return PDFObject;\n}();\nvar PDFObject$1 = PDFObject;\n/*\nPDFPage - represents a single page in the PDF document\nBy Devon Govett\n*/ var DEFAULT_MARGINS = {\n    top: 72,\n    left: 72,\n    bottom: 72,\n    right: 72\n};\nvar SIZES = {\n    \"4A0\": [\n        4767.87,\n        6740.79\n    ],\n    \"2A0\": [\n        3370.39,\n        4767.87\n    ],\n    A0: [\n        2383.94,\n        3370.39\n    ],\n    A1: [\n        1683.78,\n        2383.94\n    ],\n    A2: [\n        1190.55,\n        1683.78\n    ],\n    A3: [\n        841.89,\n        1190.55\n    ],\n    A4: [\n        595.28,\n        841.89\n    ],\n    A5: [\n        419.53,\n        595.28\n    ],\n    A6: [\n        297.64,\n        419.53\n    ],\n    A7: [\n        209.76,\n        297.64\n    ],\n    A8: [\n        147.4,\n        209.76\n    ],\n    A9: [\n        104.88,\n        147.4\n    ],\n    A10: [\n        73.7,\n        104.88\n    ],\n    B0: [\n        2834.65,\n        4008.19\n    ],\n    B1: [\n        2004.09,\n        2834.65\n    ],\n    B2: [\n        1417.32,\n        2004.09\n    ],\n    B3: [\n        1000.63,\n        1417.32\n    ],\n    B4: [\n        708.66,\n        1000.63\n    ],\n    B5: [\n        498.9,\n        708.66\n    ],\n    B6: [\n        354.33,\n        498.9\n    ],\n    B7: [\n        249.45,\n        354.33\n    ],\n    B8: [\n        175.75,\n        249.45\n    ],\n    B9: [\n        124.72,\n        175.75\n    ],\n    B10: [\n        87.87,\n        124.72\n    ],\n    C0: [\n        2599.37,\n        3676.54\n    ],\n    C1: [\n        1836.85,\n        2599.37\n    ],\n    C2: [\n        1298.27,\n        1836.85\n    ],\n    C3: [\n        918.43,\n        1298.27\n    ],\n    C4: [\n        649.13,\n        918.43\n    ],\n    C5: [\n        459.21,\n        649.13\n    ],\n    C6: [\n        323.15,\n        459.21\n    ],\n    C7: [\n        229.61,\n        323.15\n    ],\n    C8: [\n        161.57,\n        229.61\n    ],\n    C9: [\n        113.39,\n        161.57\n    ],\n    C10: [\n        79.37,\n        113.39\n    ],\n    RA0: [\n        2437.8,\n        3458.27\n    ],\n    RA1: [\n        1729.13,\n        2437.8\n    ],\n    RA2: [\n        1218.9,\n        1729.13\n    ],\n    RA3: [\n        864.57,\n        1218.9\n    ],\n    RA4: [\n        609.45,\n        864.57\n    ],\n    SRA0: [\n        2551.18,\n        3628.35\n    ],\n    SRA1: [\n        1814.17,\n        2551.18\n    ],\n    SRA2: [\n        1275.59,\n        1814.17\n    ],\n    SRA3: [\n        907.09,\n        1275.59\n    ],\n    SRA4: [\n        637.8,\n        907.09\n    ],\n    EXECUTIVE: [\n        521.86,\n        756.0\n    ],\n    FOLIO: [\n        612.0,\n        936.0\n    ],\n    LEGAL: [\n        612.0,\n        1008.0\n    ],\n    LETTER: [\n        612.0,\n        792.0\n    ],\n    TABLOID: [\n        792.0,\n        1224.0\n    ]\n};\nvar PDFPage = /*#__PURE__*/ function() {\n    function PDFPage(document, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        this.document = document;\n        this.size = options.size || \"letter\";\n        this.layout = options.layout || \"portrait\";\n        this.userUnit = options.userUnit || 1.0;\n        // process margins\n        if (typeof options.margin === \"number\") {\n            this.margins = {\n                top: options.margin,\n                left: options.margin,\n                bottom: options.margin,\n                right: options.margin\n            };\n        // default to 1 inch margins\n        } else {\n            this.margins = options.margins || DEFAULT_MARGINS;\n        }\n        // calculate page dimensions\n        var dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];\n        this.width = dimensions[this.layout === \"portrait\" ? 0 : 1];\n        this.height = dimensions[this.layout === \"portrait\" ? 1 : 0];\n        this.content = this.document.ref();\n        // Initialize the Font, XObject, and ExtGState dictionaries\n        this.resources = this.document.ref({\n            ProcSet: [\n                \"PDF\",\n                \"Text\",\n                \"ImageB\",\n                \"ImageC\",\n                \"ImageI\"\n            ]\n        });\n        // The page dictionary\n        this.dictionary = this.document.ref({\n            Type: \"Page\",\n            Parent: this.document._root.data.Pages,\n            MediaBox: [\n                0,\n                0,\n                this.width,\n                this.height\n            ],\n            Contents: this.content,\n            Resources: this.resources,\n            UserUnit: this.userUnit\n        });\n        this.markings = [];\n    }\n    // Lazily create these objects\n    var _proto = PDFPage.prototype;\n    _proto.maxY = function maxY() {\n        return this.height - this.margins.bottom;\n    };\n    _proto.write = function write(chunk) {\n        return this.content.write(chunk);\n    };\n    _proto.end = function end() {\n        this.dictionary.end();\n        this.resources.end();\n        return this.content.end();\n    };\n    _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__(PDFPage, [\n        {\n            key: \"fonts\",\n            get: function get() {\n                var data = this.resources.data;\n                return data.Font != null ? data.Font : data.Font = {};\n            }\n        },\n        {\n            key: \"xobjects\",\n            get: function get() {\n                var data = this.resources.data;\n                return data.XObject != null ? data.XObject : data.XObject = {};\n            }\n        },\n        {\n            key: \"ext_gstates\",\n            get: function get() {\n                var data = this.resources.data;\n                return data.ExtGState != null ? data.ExtGState : data.ExtGState = {};\n            }\n        },\n        {\n            key: \"patterns\",\n            get: function get() {\n                var data = this.resources.data;\n                return data.Pattern != null ? data.Pattern : data.Pattern = {};\n            }\n        },\n        {\n            key: \"colorSpaces\",\n            get: function get() {\n                var data = this.resources.data;\n                return data.ColorSpace || (data.ColorSpace = {});\n            }\n        },\n        {\n            key: \"annotations\",\n            get: function get() {\n                var data = this.dictionary.data;\n                return data.Annots != null ? data.Annots : data.Annots = [];\n            }\n        },\n        {\n            key: \"structParentTreeKey\",\n            get: function get() {\n                var data = this.dictionary.data;\n                return data.StructParents != null ? data.StructParents : data.StructParents = this.document.createStructParentTreeNextKey();\n            }\n        }\n    ]);\n    return PDFPage;\n}();\n/* eslint-disable no-prototype-builtins */ var wordArrayToBuffer = function wordArrayToBuffer(wordArray) {\n    var byteArray = [];\n    for(var i = 0; i < wordArray.sigBytes; i++){\n        byteArray.push(wordArray.words[Math.floor(i / 4)] >> 8 * (3 - i % 4) & 0xff);\n    }\n    return Buffer.from(byteArray);\n};\nvar PDFSecurity = /*#__PURE__*/ function() {\n    function PDFSecurity() {}\n    PDFSecurity.generateFileID = function generateFileID(info) {\n        if (info === void 0) {\n            info = {};\n        }\n        var infoStr = info.CreationDate.getTime() + \"\\n\";\n        for(var key in info){\n            if (!info.hasOwnProperty(key)) continue;\n            infoStr += key + \": \" + info[key].valueOf() + \"\\n\";\n        }\n        return wordArrayToBuffer(crypto_js_md5_js__WEBPACK_IMPORTED_MODULE_6__(infoStr));\n    };\n    return PDFSecurity;\n}();\nvar number$2 = PDFObject$1.number;\nvar PDFGradient$1 = /*#__PURE__*/ function() {\n    function PDFGradient(doc) {\n        this.doc = doc;\n        this.stops = [];\n        this.embedded = false;\n        this.transform = [\n            1,\n            0,\n            0,\n            1,\n            0,\n            0\n        ];\n    }\n    var _proto = PDFGradient.prototype;\n    _proto.stop = function stop(pos, color, opacity) {\n        if (opacity == null) {\n            opacity = 1;\n        }\n        color = this.doc._normalizeColor(color);\n        if (this.stops.length === 0) {\n            if (color.length === 3) {\n                this._colorSpace = \"DeviceRGB\";\n            } else if (color.length === 4) {\n                this._colorSpace = \"DeviceCMYK\";\n            } else if (color.length === 1) {\n                this._colorSpace = \"DeviceGray\";\n            } else {\n                throw new Error(\"Unknown color space\");\n            }\n        } else if (this._colorSpace === \"DeviceRGB\" && color.length !== 3 || this._colorSpace === \"DeviceCMYK\" && color.length !== 4 || this._colorSpace === \"DeviceGray\" && color.length !== 1) {\n            throw new Error(\"All gradient stops must use the same color space\");\n        }\n        opacity = Math.max(0, Math.min(1, opacity));\n        this.stops.push([\n            pos,\n            color,\n            opacity\n        ]);\n        return this;\n    };\n    _proto.setTransform = function setTransform(m11, m12, m21, m22, dx, dy) {\n        this.transform = [\n            m11,\n            m12,\n            m21,\n            m22,\n            dx,\n            dy\n        ];\n        return this;\n    };\n    _proto.embed = function embed(m) {\n        var fn;\n        var stopsLength = this.stops.length;\n        if (stopsLength === 0) {\n            return;\n        }\n        this.embedded = true;\n        this.matrix = m;\n        // if the last stop comes before 100%, add a copy at 100%\n        var last = this.stops[stopsLength - 1];\n        if (last[0] < 1) {\n            this.stops.push([\n                1,\n                last[1],\n                last[2]\n            ]);\n        }\n        var bounds = [];\n        var encode = [];\n        var stops = [];\n        for(var i = 0; i < stopsLength - 1; i++){\n            encode.push(0, 1);\n            if (i + 2 !== stopsLength) {\n                bounds.push(this.stops[i + 1][0]);\n            }\n            fn = this.doc.ref({\n                FunctionType: 2,\n                Domain: [\n                    0,\n                    1\n                ],\n                C0: this.stops[i + 0][1],\n                C1: this.stops[i + 1][1],\n                N: 1\n            });\n            stops.push(fn);\n            fn.end();\n        }\n        // if there are only two stops, we don't need a stitching function\n        if (stopsLength === 1) {\n            fn = stops[0];\n        } else {\n            fn = this.doc.ref({\n                FunctionType: 3,\n                // stitching function\n                Domain: [\n                    0,\n                    1\n                ],\n                Functions: stops,\n                Bounds: bounds,\n                Encode: encode\n            });\n            fn.end();\n        }\n        this.id = \"Sh\" + ++this.doc._gradCount;\n        var shader = this.shader(fn);\n        shader.end();\n        var pattern = this.doc.ref({\n            Type: \"Pattern\",\n            PatternType: 2,\n            Shading: shader,\n            Matrix: this.matrix.map(number$2)\n        });\n        pattern.end();\n        if (this.stops.some(function(stop) {\n            return stop[2] < 1;\n        })) {\n            var grad = this.opacityGradient();\n            grad._colorSpace = \"DeviceGray\";\n            for(var _iterator = _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__(this.stops), _step; !(_step = _iterator()).done;){\n                var stop = _step.value;\n                grad.stop(stop[0], [\n                    stop[2]\n                ]);\n            }\n            grad = grad.embed(this.matrix);\n            var pageBBox = [\n                0,\n                0,\n                this.doc.page.width,\n                this.doc.page.height\n            ];\n            var form = this.doc.ref({\n                Type: \"XObject\",\n                Subtype: \"Form\",\n                FormType: 1,\n                BBox: pageBBox,\n                Group: {\n                    Type: \"Group\",\n                    S: \"Transparency\",\n                    CS: \"DeviceGray\"\n                },\n                Resources: {\n                    ProcSet: [\n                        \"PDF\",\n                        \"Text\",\n                        \"ImageB\",\n                        \"ImageC\",\n                        \"ImageI\"\n                    ],\n                    Pattern: {\n                        Sh1: grad\n                    }\n                }\n            });\n            form.write(\"/Pattern cs /Sh1 scn\");\n            form.end(pageBBox.join(\" \") + \" re f\");\n            var gstate = this.doc.ref({\n                Type: \"ExtGState\",\n                SMask: {\n                    Type: \"Mask\",\n                    S: \"Luminosity\",\n                    G: form\n                }\n            });\n            gstate.end();\n            var opacityPattern = this.doc.ref({\n                Type: \"Pattern\",\n                PatternType: 1,\n                PaintType: 1,\n                TilingType: 2,\n                BBox: pageBBox,\n                XStep: pageBBox[2],\n                YStep: pageBBox[3],\n                Resources: {\n                    ProcSet: [\n                        \"PDF\",\n                        \"Text\",\n                        \"ImageB\",\n                        \"ImageC\",\n                        \"ImageI\"\n                    ],\n                    Pattern: {\n                        Sh1: pattern\n                    },\n                    ExtGState: {\n                        Gs1: gstate\n                    }\n                }\n            });\n            opacityPattern.write(\"/Gs1 gs /Pattern cs /Sh1 scn\");\n            opacityPattern.end(pageBBox.join(\" \") + \" re f\");\n            this.doc.page.patterns[this.id] = opacityPattern;\n        } else {\n            this.doc.page.patterns[this.id] = pattern;\n        }\n        return pattern;\n    };\n    _proto.apply = function apply(stroke) {\n        // apply gradient transform to existing document ctm\n        var _this$doc$_ctm = this.doc._ctm, m0 = _this$doc$_ctm[0], m1 = _this$doc$_ctm[1], m2 = _this$doc$_ctm[2], m3 = _this$doc$_ctm[3], m4 = _this$doc$_ctm[4], m5 = _this$doc$_ctm[5];\n        var _this$transform = this.transform, m11 = _this$transform[0], m12 = _this$transform[1], m21 = _this$transform[2], m22 = _this$transform[3], dx = _this$transform[4], dy = _this$transform[5];\n        var m = [\n            m0 * m11 + m2 * m12,\n            m1 * m11 + m3 * m12,\n            m0 * m21 + m2 * m22,\n            m1 * m21 + m3 * m22,\n            m0 * dx + m2 * dy + m4,\n            m1 * dx + m3 * dy + m5\n        ];\n        if (!this.embedded || m.join(\" \") !== this.matrix.join(\" \")) {\n            this.embed(m);\n        }\n        this.doc._setColorSpace(\"Pattern\", stroke);\n        var op = stroke ? \"SCN\" : \"scn\";\n        return this.doc.addContent(\"/\" + this.id + \" \" + op);\n    };\n    return PDFGradient;\n}();\nvar PDFLinearGradient$1 = /*#__PURE__*/ function(_PDFGradient) {\n    _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__(PDFLinearGradient, _PDFGradient);\n    function PDFLinearGradient(doc, x1, y1, x2, y2) {\n        var _this;\n        _this = _PDFGradient.call(this, doc) || this;\n        _this.x1 = x1;\n        _this.y1 = y1;\n        _this.x2 = x2;\n        _this.y2 = y2;\n        return _this;\n    }\n    var _proto2 = PDFLinearGradient.prototype;\n    _proto2.shader = function shader(fn) {\n        return this.doc.ref({\n            ShadingType: 2,\n            ColorSpace: this._colorSpace,\n            Coords: [\n                this.x1,\n                this.y1,\n                this.x2,\n                this.y2\n            ],\n            Function: fn,\n            Extend: [\n                true,\n                true\n            ]\n        });\n    };\n    _proto2.opacityGradient = function opacityGradient() {\n        return new PDFLinearGradient(this.doc, this.x1, this.y1, this.x2, this.y2);\n    };\n    return PDFLinearGradient;\n}(PDFGradient$1);\nvar PDFRadialGradient$1 = /*#__PURE__*/ function(_PDFGradient2) {\n    _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__(PDFRadialGradient, _PDFGradient2);\n    function PDFRadialGradient(doc, x1, y1, r1, x2, y2, r2) {\n        var _this2;\n        _this2 = _PDFGradient2.call(this, doc) || this;\n        _this2.doc = doc;\n        _this2.x1 = x1;\n        _this2.y1 = y1;\n        _this2.r1 = r1;\n        _this2.x2 = x2;\n        _this2.y2 = y2;\n        _this2.r2 = r2;\n        return _this2;\n    }\n    var _proto3 = PDFRadialGradient.prototype;\n    _proto3.shader = function shader(fn) {\n        return this.doc.ref({\n            ShadingType: 3,\n            ColorSpace: this._colorSpace,\n            Coords: [\n                this.x1,\n                this.y1,\n                this.r1,\n                this.x2,\n                this.y2,\n                this.r2\n            ],\n            Function: fn,\n            Extend: [\n                true,\n                true\n            ]\n        });\n    };\n    _proto3.opacityGradient = function opacityGradient() {\n        return new PDFRadialGradient(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);\n    };\n    return PDFRadialGradient;\n}(PDFGradient$1);\nvar Gradient = {\n    PDFGradient: PDFGradient$1,\n    PDFLinearGradient: PDFLinearGradient$1,\n    PDFRadialGradient: PDFRadialGradient$1\n};\n/*\nPDF tiling pattern support. Uncolored only.\n */ var underlyingColorSpaces = [\n    \"DeviceCMYK\",\n    \"DeviceRGB\"\n];\nvar PDFTilingPattern$1 = /*#__PURE__*/ function() {\n    function PDFTilingPattern(doc, bBox, xStep, yStep, stream) {\n        this.doc = doc;\n        this.bBox = bBox;\n        this.xStep = xStep;\n        this.yStep = yStep;\n        this.stream = stream;\n    }\n    var _proto = PDFTilingPattern.prototype;\n    _proto.createPattern = function createPattern() {\n        // no resources needed for our current usage\n        // required entry\n        var resources = this.doc.ref();\n        resources.end();\n        // apply default transform matrix (flipped in the default doc._ctm)\n        // see document.js & gradient.js\n        var _this$doc$_ctm = this.doc._ctm, m0 = _this$doc$_ctm[0], m1 = _this$doc$_ctm[1], m2 = _this$doc$_ctm[2], m3 = _this$doc$_ctm[3], m4 = _this$doc$_ctm[4], m5 = _this$doc$_ctm[5];\n        var m11 = 1, m12 = 0, m21 = 0, m22 = 1, dx = 0, dy = 0;\n        var m = [\n            m0 * m11 + m2 * m12,\n            m1 * m11 + m3 * m12,\n            m0 * m21 + m2 * m22,\n            m1 * m21 + m3 * m22,\n            m0 * dx + m2 * dy + m4,\n            m1 * dx + m3 * dy + m5\n        ];\n        var pattern = this.doc.ref({\n            Type: \"Pattern\",\n            PatternType: 1,\n            // tiling\n            PaintType: 2,\n            // 1-colored, 2-uncolored\n            TilingType: 2,\n            // 2-no distortion\n            BBox: this.bBox,\n            XStep: this.xStep,\n            YStep: this.yStep,\n            Matrix: m.map(function(v) {\n                return +v.toFixed(5);\n            }),\n            Resources: resources\n        });\n        pattern.end(this.stream);\n        return pattern;\n    };\n    _proto.embedPatternColorSpaces = function embedPatternColorSpaces() {\n        var _this = this;\n        // map each pattern to an underlying color space\n        // and embed on each page\n        underlyingColorSpaces.forEach(function(csName) {\n            var csId = _this.getPatternColorSpaceId(csName);\n            if (_this.doc.page.colorSpaces[csId]) return;\n            var cs = _this.doc.ref([\n                \"Pattern\",\n                csName\n            ]);\n            cs.end();\n            _this.doc.page.colorSpaces[csId] = cs;\n        });\n    };\n    _proto.getPatternColorSpaceId = function getPatternColorSpaceId(underlyingColorspace) {\n        return \"CsP\" + underlyingColorspace;\n    };\n    _proto.embed = function embed() {\n        if (!this.id) {\n            this.doc._patternCount = this.doc._patternCount + 1;\n            this.id = \"P\" + this.doc._patternCount;\n            this.pattern = this.createPattern();\n        }\n        // patterns are embedded in each page\n        if (!this.doc.page.patterns[this.id]) {\n            this.doc.page.patterns[this.id] = this.pattern;\n        }\n    };\n    _proto.apply = function apply(stroke, patternColor) {\n        // do any embedding/creating that might be needed\n        this.embedPatternColorSpaces();\n        this.embed();\n        var normalizedColor = this.doc._normalizeColor(patternColor);\n        if (!normalizedColor) throw Error(\"invalid pattern color. (value: \" + patternColor + \")\");\n        // select one of the pattern color spaces\n        var csId = this.getPatternColorSpaceId(this.doc._getColorSpace(normalizedColor));\n        this.doc._setColorSpace(csId, stroke);\n        // stroke/fill using the pattern and color (in the above underlying color space)\n        var op = stroke ? \"SCN\" : \"scn\";\n        return this.doc.addContent(normalizedColor.join(\" \") + \" /\" + this.id + \" \" + op);\n    };\n    return PDFTilingPattern;\n}();\nvar pattern = {\n    PDFTilingPattern: PDFTilingPattern$1\n};\nvar PDFGradient = Gradient.PDFGradient, PDFLinearGradient = Gradient.PDFLinearGradient, PDFRadialGradient = Gradient.PDFRadialGradient;\nvar PDFTilingPattern = pattern.PDFTilingPattern;\nvar ColorMixin = {\n    initColor: function initColor() {\n        // The opacity dictionaries\n        this._opacityRegistry = {};\n        this._opacityCount = 0;\n        this._patternCount = 0;\n        return this._gradCount = 0;\n    },\n    _normalizeColor: function _normalizeColor(color) {\n        if (typeof color === \"string\") {\n            if (color.charAt(0) === \"#\") {\n                if (color.length === 4) {\n                    color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, \"#$1$1$2$2$3$3\");\n                }\n                var hex = parseInt(color.slice(1), 16);\n                color = [\n                    hex >> 16,\n                    hex >> 8 & 0xff,\n                    hex & 0xff\n                ];\n            } else if (namedColors[color]) {\n                color = namedColors[color];\n            }\n        }\n        if (Array.isArray(color)) {\n            // RGB\n            if (color.length === 3) {\n                color = color.map(function(part) {\n                    return part / 255;\n                });\n            // CMYK\n            } else if (color.length === 4) {\n                color = color.map(function(part) {\n                    return part / 100;\n                });\n            }\n            return color;\n        }\n        return null;\n    },\n    _setColor: function _setColor(color, stroke) {\n        if (color instanceof PDFGradient) {\n            color.apply(stroke);\n            return true;\n        // see if tiling pattern, decode & apply it it\n        } else if (Array.isArray(color) && color[0] instanceof PDFTilingPattern) {\n            color[0].apply(stroke, color[1]);\n            return true;\n        }\n        // any other case should be a normal color and not a pattern\n        return this._setColorCore(color, stroke);\n    },\n    _setColorCore: function _setColorCore(color, stroke) {\n        color = this._normalizeColor(color);\n        if (!color) {\n            return false;\n        }\n        var op = stroke ? \"SCN\" : \"scn\";\n        var space = this._getColorSpace(color);\n        this._setColorSpace(space, stroke);\n        color = color.join(\" \");\n        this.addContent(color + \" \" + op);\n        return true;\n    },\n    _setColorSpace: function _setColorSpace(space, stroke) {\n        var op = stroke ? \"CS\" : \"cs\";\n        return this.addContent(\"/\" + space + \" \" + op);\n    },\n    _getColorSpace: function _getColorSpace(color) {\n        return color.length === 4 ? \"DeviceCMYK\" : \"DeviceRGB\";\n    },\n    fillColor: function fillColor(color, opacity) {\n        var set = this._setColor(color, false);\n        if (set) {\n            this.fillOpacity(opacity);\n        }\n        // save this for text wrapper, which needs to reset\n        // the fill color on new pages\n        this._fillColor = [\n            color,\n            opacity\n        ];\n        return this;\n    },\n    strokeColor: function strokeColor(color, opacity) {\n        var set = this._setColor(color, true);\n        if (set) {\n            this.strokeOpacity(opacity);\n        }\n        return this;\n    },\n    opacity: function opacity(_opacity) {\n        this._doOpacity(_opacity, _opacity);\n        return this;\n    },\n    fillOpacity: function fillOpacity(opacity) {\n        this._doOpacity(opacity, null);\n        return this;\n    },\n    strokeOpacity: function strokeOpacity(opacity) {\n        this._doOpacity(null, opacity);\n        return this;\n    },\n    _doOpacity: function _doOpacity(fillOpacity, strokeOpacity) {\n        var dictionary, name;\n        if (fillOpacity == null && strokeOpacity == null) {\n            return;\n        }\n        if (fillOpacity != null) {\n            fillOpacity = Math.max(0, Math.min(1, fillOpacity));\n        }\n        if (strokeOpacity != null) {\n            strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));\n        }\n        var key = fillOpacity + \"_\" + strokeOpacity;\n        if (this._opacityRegistry[key]) {\n            var _this$_opacityRegistr = this._opacityRegistry[key];\n            dictionary = _this$_opacityRegistr[0];\n            name = _this$_opacityRegistr[1];\n        } else {\n            dictionary = {\n                Type: \"ExtGState\"\n            };\n            if (fillOpacity != null) {\n                dictionary.ca = fillOpacity;\n            }\n            if (strokeOpacity != null) {\n                dictionary.CA = strokeOpacity;\n            }\n            dictionary = this.ref(dictionary);\n            dictionary.end();\n            var id = ++this._opacityCount;\n            name = \"Gs\" + id;\n            this._opacityRegistry[key] = [\n                dictionary,\n                name\n            ];\n        }\n        this.page.ext_gstates[name] = dictionary;\n        return this.addContent(\"/\" + name + \" gs\");\n    },\n    linearGradient: function linearGradient(x1, y1, x2, y2) {\n        return new PDFLinearGradient(this, x1, y1, x2, y2);\n    },\n    radialGradient: function radialGradient(x1, y1, r1, x2, y2, r2) {\n        return new PDFRadialGradient(this, x1, y1, r1, x2, y2, r2);\n    },\n    pattern: function pattern(bbox, xStep, yStep, stream) {\n        return new PDFTilingPattern(this, bbox, xStep, yStep, stream);\n    }\n};\nvar namedColors = {\n    aliceblue: [\n        240,\n        248,\n        255\n    ],\n    antiquewhite: [\n        250,\n        235,\n        215\n    ],\n    aqua: [\n        0,\n        255,\n        255\n    ],\n    aquamarine: [\n        127,\n        255,\n        212\n    ],\n    azure: [\n        240,\n        255,\n        255\n    ],\n    beige: [\n        245,\n        245,\n        220\n    ],\n    bisque: [\n        255,\n        228,\n        196\n    ],\n    black: [\n        0,\n        0,\n        0\n    ],\n    blanchedalmond: [\n        255,\n        235,\n        205\n    ],\n    blue: [\n        0,\n        0,\n        255\n    ],\n    blueviolet: [\n        138,\n        43,\n        226\n    ],\n    brown: [\n        165,\n        42,\n        42\n    ],\n    burlywood: [\n        222,\n        184,\n        135\n    ],\n    cadetblue: [\n        95,\n        158,\n        160\n    ],\n    chartreuse: [\n        127,\n        255,\n        0\n    ],\n    chocolate: [\n        210,\n        105,\n        30\n    ],\n    coral: [\n        255,\n        127,\n        80\n    ],\n    cornflowerblue: [\n        100,\n        149,\n        237\n    ],\n    cornsilk: [\n        255,\n        248,\n        220\n    ],\n    crimson: [\n        220,\n        20,\n        60\n    ],\n    cyan: [\n        0,\n        255,\n        255\n    ],\n    darkblue: [\n        0,\n        0,\n        139\n    ],\n    darkcyan: [\n        0,\n        139,\n        139\n    ],\n    darkgoldenrod: [\n        184,\n        134,\n        11\n    ],\n    darkgray: [\n        169,\n        169,\n        169\n    ],\n    darkgreen: [\n        0,\n        100,\n        0\n    ],\n    darkgrey: [\n        169,\n        169,\n        169\n    ],\n    darkkhaki: [\n        189,\n        183,\n        107\n    ],\n    darkmagenta: [\n        139,\n        0,\n        139\n    ],\n    darkolivegreen: [\n        85,\n        107,\n        47\n    ],\n    darkorange: [\n        255,\n        140,\n        0\n    ],\n    darkorchid: [\n        153,\n        50,\n        204\n    ],\n    darkred: [\n        139,\n        0,\n        0\n    ],\n    darksalmon: [\n        233,\n        150,\n        122\n    ],\n    darkseagreen: [\n        143,\n        188,\n        143\n    ],\n    darkslateblue: [\n        72,\n        61,\n        139\n    ],\n    darkslategray: [\n        47,\n        79,\n        79\n    ],\n    darkslategrey: [\n        47,\n        79,\n        79\n    ],\n    darkturquoise: [\n        0,\n        206,\n        209\n    ],\n    darkviolet: [\n        148,\n        0,\n        211\n    ],\n    deeppink: [\n        255,\n        20,\n        147\n    ],\n    deepskyblue: [\n        0,\n        191,\n        255\n    ],\n    dimgray: [\n        105,\n        105,\n        105\n    ],\n    dimgrey: [\n        105,\n        105,\n        105\n    ],\n    dodgerblue: [\n        30,\n        144,\n        255\n    ],\n    firebrick: [\n        178,\n        34,\n        34\n    ],\n    floralwhite: [\n        255,\n        250,\n        240\n    ],\n    forestgreen: [\n        34,\n        139,\n        34\n    ],\n    fuchsia: [\n        255,\n        0,\n        255\n    ],\n    gainsboro: [\n        220,\n        220,\n        220\n    ],\n    ghostwhite: [\n        248,\n        248,\n        255\n    ],\n    gold: [\n        255,\n        215,\n        0\n    ],\n    goldenrod: [\n        218,\n        165,\n        32\n    ],\n    gray: [\n        128,\n        128,\n        128\n    ],\n    grey: [\n        128,\n        128,\n        128\n    ],\n    green: [\n        0,\n        128,\n        0\n    ],\n    greenyellow: [\n        173,\n        255,\n        47\n    ],\n    honeydew: [\n        240,\n        255,\n        240\n    ],\n    hotpink: [\n        255,\n        105,\n        180\n    ],\n    indianred: [\n        205,\n        92,\n        92\n    ],\n    indigo: [\n        75,\n        0,\n        130\n    ],\n    ivory: [\n        255,\n        255,\n        240\n    ],\n    khaki: [\n        240,\n        230,\n        140\n    ],\n    lavender: [\n        230,\n        230,\n        250\n    ],\n    lavenderblush: [\n        255,\n        240,\n        245\n    ],\n    lawngreen: [\n        124,\n        252,\n        0\n    ],\n    lemonchiffon: [\n        255,\n        250,\n        205\n    ],\n    lightblue: [\n        173,\n        216,\n        230\n    ],\n    lightcoral: [\n        240,\n        128,\n        128\n    ],\n    lightcyan: [\n        224,\n        255,\n        255\n    ],\n    lightgoldenrodyellow: [\n        250,\n        250,\n        210\n    ],\n    lightgray: [\n        211,\n        211,\n        211\n    ],\n    lightgreen: [\n        144,\n        238,\n        144\n    ],\n    lightgrey: [\n        211,\n        211,\n        211\n    ],\n    lightpink: [\n        255,\n        182,\n        193\n    ],\n    lightsalmon: [\n        255,\n        160,\n        122\n    ],\n    lightseagreen: [\n        32,\n        178,\n        170\n    ],\n    lightskyblue: [\n        135,\n        206,\n        250\n    ],\n    lightslategray: [\n        119,\n        136,\n        153\n    ],\n    lightslategrey: [\n        119,\n        136,\n        153\n    ],\n    lightsteelblue: [\n        176,\n        196,\n        222\n    ],\n    lightyellow: [\n        255,\n        255,\n        224\n    ],\n    lime: [\n        0,\n        255,\n        0\n    ],\n    limegreen: [\n        50,\n        205,\n        50\n    ],\n    linen: [\n        250,\n        240,\n        230\n    ],\n    magenta: [\n        255,\n        0,\n        255\n    ],\n    maroon: [\n        128,\n        0,\n        0\n    ],\n    mediumaquamarine: [\n        102,\n        205,\n        170\n    ],\n    mediumblue: [\n        0,\n        0,\n        205\n    ],\n    mediumorchid: [\n        186,\n        85,\n        211\n    ],\n    mediumpurple: [\n        147,\n        112,\n        219\n    ],\n    mediumseagreen: [\n        60,\n        179,\n        113\n    ],\n    mediumslateblue: [\n        123,\n        104,\n        238\n    ],\n    mediumspringgreen: [\n        0,\n        250,\n        154\n    ],\n    mediumturquoise: [\n        72,\n        209,\n        204\n    ],\n    mediumvioletred: [\n        199,\n        21,\n        133\n    ],\n    midnightblue: [\n        25,\n        25,\n        112\n    ],\n    mintcream: [\n        245,\n        255,\n        250\n    ],\n    mistyrose: [\n        255,\n        228,\n        225\n    ],\n    moccasin: [\n        255,\n        228,\n        181\n    ],\n    navajowhite: [\n        255,\n        222,\n        173\n    ],\n    navy: [\n        0,\n        0,\n        128\n    ],\n    oldlace: [\n        253,\n        245,\n        230\n    ],\n    olive: [\n        128,\n        128,\n        0\n    ],\n    olivedrab: [\n        107,\n        142,\n        35\n    ],\n    orange: [\n        255,\n        165,\n        0\n    ],\n    orangered: [\n        255,\n        69,\n        0\n    ],\n    orchid: [\n        218,\n        112,\n        214\n    ],\n    palegoldenrod: [\n        238,\n        232,\n        170\n    ],\n    palegreen: [\n        152,\n        251,\n        152\n    ],\n    paleturquoise: [\n        175,\n        238,\n        238\n    ],\n    palevioletred: [\n        219,\n        112,\n        147\n    ],\n    papayawhip: [\n        255,\n        239,\n        213\n    ],\n    peachpuff: [\n        255,\n        218,\n        185\n    ],\n    peru: [\n        205,\n        133,\n        63\n    ],\n    pink: [\n        255,\n        192,\n        203\n    ],\n    plum: [\n        221,\n        160,\n        221\n    ],\n    powderblue: [\n        176,\n        224,\n        230\n    ],\n    purple: [\n        128,\n        0,\n        128\n    ],\n    red: [\n        255,\n        0,\n        0\n    ],\n    rosybrown: [\n        188,\n        143,\n        143\n    ],\n    royalblue: [\n        65,\n        105,\n        225\n    ],\n    saddlebrown: [\n        139,\n        69,\n        19\n    ],\n    salmon: [\n        250,\n        128,\n        114\n    ],\n    sandybrown: [\n        244,\n        164,\n        96\n    ],\n    seagreen: [\n        46,\n        139,\n        87\n    ],\n    seashell: [\n        255,\n        245,\n        238\n    ],\n    sienna: [\n        160,\n        82,\n        45\n    ],\n    silver: [\n        192,\n        192,\n        192\n    ],\n    skyblue: [\n        135,\n        206,\n        235\n    ],\n    slateblue: [\n        106,\n        90,\n        205\n    ],\n    slategray: [\n        112,\n        128,\n        144\n    ],\n    slategrey: [\n        112,\n        128,\n        144\n    ],\n    snow: [\n        255,\n        250,\n        250\n    ],\n    springgreen: [\n        0,\n        255,\n        127\n    ],\n    steelblue: [\n        70,\n        130,\n        180\n    ],\n    tan: [\n        210,\n        180,\n        140\n    ],\n    teal: [\n        0,\n        128,\n        128\n    ],\n    thistle: [\n        216,\n        191,\n        216\n    ],\n    tomato: [\n        255,\n        99,\n        71\n    ],\n    turquoise: [\n        64,\n        224,\n        208\n    ],\n    violet: [\n        238,\n        130,\n        238\n    ],\n    wheat: [\n        245,\n        222,\n        179\n    ],\n    white: [\n        255,\n        255,\n        255\n    ],\n    whitesmoke: [\n        245,\n        245,\n        245\n    ],\n    yellow: [\n        255,\n        255,\n        0\n    ],\n    yellowgreen: [\n        154,\n        205,\n        50\n    ]\n};\n/* eslint-disable no-lonely-if */ var cx;\nvar cy;\nvar px;\nvar py;\nvar sx;\nvar sy;\ncx = cy = px = py = sx = sy = 0;\n// parseDataPath copy pasted from svgo\n// https://github.com/svg/svgo/blob/e4918ccdd1a2b5831defe0f00c1286744b479448/lib/path.js\n/**\n * @typedef {'M' | 'm' | 'Z' | 'z' | 'L' | 'l' | 'H' | 'h' | 'V' | 'v' | 'C' | 'c' | 'S' | 's' | 'Q' | 'q' | 'T' | 't' | 'A' | 'a'} PathDataCommand\n */ /**\n * @typedef {Object} PathDataItem\n * @property {PathDataCommand} command\n * @property {number[]} args\n */ var argsCountPerCommand = {\n    M: 2,\n    m: 2,\n    Z: 0,\n    z: 0,\n    L: 2,\n    l: 2,\n    H: 1,\n    h: 1,\n    V: 1,\n    v: 1,\n    C: 6,\n    c: 6,\n    S: 4,\n    s: 4,\n    Q: 4,\n    q: 4,\n    T: 2,\n    t: 2,\n    A: 7,\n    a: 7\n};\n/**\n * @type {(c: string) => c is PathDataCommand}\n */ var isCommand = function isCommand(c) {\n    return c in argsCountPerCommand;\n};\n/**\n * @type {(c: string) => boolean}\n */ var isWsp = function isWsp(c) {\n    var codePoint = c.codePointAt(0);\n    return codePoint === 0x20 || codePoint === 0x9 || codePoint === 0xd || codePoint === 0xa;\n};\n/**\n * @type {(c: string) => boolean}\n */ var isDigit = function isDigit(c) {\n    var codePoint = c.codePointAt(0);\n    if (codePoint == null) {\n        return false;\n    }\n    return 48 <= codePoint && codePoint <= 57;\n};\n/**\n * @typedef {'none' | 'sign' | 'whole' | 'decimal_point' | 'decimal' | 'e' | 'exponent_sign' | 'exponent'} ReadNumberState\n */ /**\n * @type {(string: string, cursor: number) => [number, number | null]}\n */ var readNumber = function readNumber(string, cursor) {\n    var i = cursor;\n    var value = \"\";\n    var state = /** @type {ReadNumberState} */ \"none\";\n    for(; i < string.length; i += 1){\n        var c = string[i];\n        if (c === \"+\" || c === \"-\") {\n            if (state === \"none\") {\n                state = \"sign\";\n                value += c;\n                continue;\n            }\n            if (state === \"e\") {\n                state = \"exponent_sign\";\n                value += c;\n                continue;\n            }\n        }\n        if (isDigit(c)) {\n            if (state === \"none\" || state === \"sign\" || state === \"whole\") {\n                state = \"whole\";\n                value += c;\n                continue;\n            }\n            if (state === \"decimal_point\" || state === \"decimal\") {\n                state = \"decimal\";\n                value += c;\n                continue;\n            }\n            if (state === \"e\" || state === \"exponent_sign\" || state === \"exponent\") {\n                state = \"exponent\";\n                value += c;\n                continue;\n            }\n        }\n        if (c === \".\") {\n            if (state === \"none\" || state === \"sign\" || state === \"whole\") {\n                state = \"decimal_point\";\n                value += c;\n                continue;\n            }\n        }\n        if (c === \"E\" || c === \"e\") {\n            if (state === \"whole\" || state === \"decimal_point\" || state === \"decimal\") {\n                state = \"e\";\n                value += c;\n                continue;\n            }\n        }\n        break;\n    }\n    var number = Number.parseFloat(value);\n    if (Number.isNaN(number)) {\n        return [\n            cursor,\n            null\n        ];\n    }\n    // step back to delegate iteration to parent loop\n    return [\n        i - 1,\n        number\n    ];\n};\n/**\n * @type {(string: string) => Array<PathDataItem>}\n */ var parsePathData = function parsePathData(string) {\n    /**\n   * @type {Array<PathDataItem>}\n   */ var pathData = [];\n    /**\n   * @type {null | PathDataCommand}\n   */ var command = null;\n    var args = /** @type {number[]} */ [];\n    var argsCount = 0;\n    var canHaveComma = false;\n    var hadComma = false;\n    for(var i = 0; i < string.length; i += 1){\n        var c = string.charAt(i);\n        if (isWsp(c)) {\n            continue;\n        }\n        // allow comma only between arguments\n        if (canHaveComma && c === \",\") {\n            if (hadComma) {\n                break;\n            }\n            hadComma = true;\n            continue;\n        }\n        if (isCommand(c)) {\n            if (hadComma) {\n                return pathData;\n            }\n            if (command == null) {\n                // moveto should be leading command\n                if (c !== \"M\" && c !== \"m\") {\n                    return pathData;\n                }\n            } else {\n                // stop if previous command arguments are not flushed\n                if (args.length !== 0) {\n                    return pathData;\n                }\n            }\n            command = c;\n            args = [];\n            argsCount = argsCountPerCommand[command];\n            canHaveComma = false;\n            // flush command without arguments\n            if (argsCount === 0) {\n                pathData.push({\n                    command: command,\n                    args: args\n                });\n            }\n            continue;\n        }\n        // avoid parsing arguments if no command detected\n        if (command == null) {\n            return pathData;\n        }\n        // read next argument\n        var newCursor = i;\n        var number = null;\n        if (command === \"A\" || command === \"a\") {\n            var position = args.length;\n            if (position === 0 || position === 1) {\n                // allow only positive number without sign as first two arguments\n                if (c !== \"+\" && c !== \"-\") {\n                    var _readNumber = readNumber(string, i);\n                    newCursor = _readNumber[0];\n                    number = _readNumber[1];\n                }\n            }\n            if (position === 2 || position === 5 || position === 6) {\n                var _readNumber2 = readNumber(string, i);\n                newCursor = _readNumber2[0];\n                number = _readNumber2[1];\n            }\n            if (position === 3 || position === 4) {\n                // read flags\n                if (c === \"0\") {\n                    number = 0;\n                }\n                if (c === \"1\") {\n                    number = 1;\n                }\n            }\n        } else {\n            var _readNumber3 = readNumber(string, i);\n            newCursor = _readNumber3[0];\n            number = _readNumber3[1];\n        }\n        if (number == null) {\n            return pathData;\n        }\n        args.push(number);\n        canHaveComma = true;\n        hadComma = false;\n        i = newCursor;\n        // flush arguments when necessary count is reached\n        if (args.length === argsCount) {\n            pathData.push({\n                command: command,\n                args: args\n            });\n            // subsequent moveto coordinates are threated as implicit lineto commands\n            if (command === \"M\") {\n                command = \"L\";\n            }\n            if (command === \"m\") {\n                command = \"l\";\n            }\n            args = [];\n        }\n    }\n    return pathData;\n};\nvar _apply = function apply(commands, doc) {\n    // current point, control point, and subpath starting point\n    cx = cy = px = py = sx = sy = 0;\n    // run the commands\n    for(var i = 0; i < commands.length; i++){\n        var _commands$i = commands[i], command = _commands$i.command, args = _commands$i.args;\n        if (typeof runners[command] === \"function\") {\n            runners[command](doc, args);\n        }\n    }\n};\nvar runners = {\n    M: function M(doc, a) {\n        cx = a[0];\n        cy = a[1];\n        px = py = null;\n        sx = cx;\n        sy = cy;\n        return doc.moveTo(cx, cy);\n    },\n    m: function m(doc, a) {\n        cx += a[0];\n        cy += a[1];\n        px = py = null;\n        sx = cx;\n        sy = cy;\n        return doc.moveTo(cx, cy);\n    },\n    C: function C(doc, a) {\n        cx = a[4];\n        cy = a[5];\n        px = a[2];\n        py = a[3];\n        return doc.bezierCurveTo.apply(doc, a);\n    },\n    c: function c(doc, a) {\n        doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);\n        px = cx + a[2];\n        py = cy + a[3];\n        cx += a[4];\n        return cy += a[5];\n    },\n    S: function S(doc, a) {\n        if (px === null) {\n            px = cx;\n            py = cy;\n        }\n        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);\n        px = a[0];\n        py = a[1];\n        cx = a[2];\n        return cy = a[3];\n    },\n    s: function s(doc, a) {\n        if (px === null) {\n            px = cx;\n            py = cy;\n        }\n        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);\n        px = cx + a[0];\n        py = cy + a[1];\n        cx += a[2];\n        return cy += a[3];\n    },\n    Q: function Q(doc, a) {\n        px = a[0];\n        py = a[1];\n        cx = a[2];\n        cy = a[3];\n        return doc.quadraticCurveTo(a[0], a[1], cx, cy);\n    },\n    q: function q(doc, a) {\n        doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);\n        px = cx + a[0];\n        py = cy + a[1];\n        cx += a[2];\n        return cy += a[3];\n    },\n    T: function T(doc, a) {\n        if (px === null) {\n            px = cx;\n            py = cy;\n        } else {\n            px = cx - (px - cx);\n            py = cy - (py - cy);\n        }\n        doc.quadraticCurveTo(px, py, a[0], a[1]);\n        px = cx - (px - cx);\n        py = cy - (py - cy);\n        cx = a[0];\n        return cy = a[1];\n    },\n    t: function t(doc, a) {\n        if (px === null) {\n            px = cx;\n            py = cy;\n        } else {\n            px = cx - (px - cx);\n            py = cy - (py - cy);\n        }\n        doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);\n        cx += a[0];\n        return cy += a[1];\n    },\n    A: function A(doc, a) {\n        solveArc(doc, cx, cy, a);\n        cx = a[5];\n        return cy = a[6];\n    },\n    a: function a(doc, _a) {\n        _a[5] += cx;\n        _a[6] += cy;\n        solveArc(doc, cx, cy, _a);\n        cx = _a[5];\n        return cy = _a[6];\n    },\n    L: function L(doc, a) {\n        cx = a[0];\n        cy = a[1];\n        px = py = null;\n        return doc.lineTo(cx, cy);\n    },\n    l: function l(doc, a) {\n        cx += a[0];\n        cy += a[1];\n        px = py = null;\n        return doc.lineTo(cx, cy);\n    },\n    H: function H(doc, a) {\n        cx = a[0];\n        px = py = null;\n        return doc.lineTo(cx, cy);\n    },\n    h: function h(doc, a) {\n        cx += a[0];\n        px = py = null;\n        return doc.lineTo(cx, cy);\n    },\n    V: function V(doc, a) {\n        cy = a[0];\n        px = py = null;\n        return doc.lineTo(cx, cy);\n    },\n    v: function v(doc, a) {\n        cy += a[0];\n        px = py = null;\n        return doc.lineTo(cx, cy);\n    },\n    Z: function Z(doc) {\n        doc.closePath();\n        cx = sx;\n        return cy = sy;\n    },\n    z: function z(doc) {\n        doc.closePath();\n        cx = sx;\n        return cy = sy;\n    }\n};\nvar solveArc = function solveArc(doc, x, y, coords) {\n    var rx = coords[0], ry = coords[1], rot = coords[2], large = coords[3], sweep = coords[4], ex = coords[5], ey = coords[6];\n    var segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);\n    for(var _iterator = _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__(segs), _step; !(_step = _iterator()).done;){\n        var seg = _step.value;\n        var bez = segmentToBezier.apply(void 0, seg);\n        doc.bezierCurveTo.apply(doc, bez);\n    }\n};\n// from Inkscape svgtopdf, thanks!\nvar arcToSegments = function arcToSegments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {\n    var th = rotateX * (Math.PI / 180);\n    var sin_th = Math.sin(th);\n    var cos_th = Math.cos(th);\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n    px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;\n    py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;\n    var pl = px * px / (rx * rx) + py * py / (ry * ry);\n    if (pl > 1) {\n        pl = Math.sqrt(pl);\n        rx *= pl;\n        ry *= pl;\n    }\n    var a00 = cos_th / rx;\n    var a01 = sin_th / rx;\n    var a10 = -sin_th / ry;\n    var a11 = cos_th / ry;\n    var x0 = a00 * ox + a01 * oy;\n    var y0 = a10 * ox + a11 * oy;\n    var x1 = a00 * x + a01 * y;\n    var y1 = a10 * x + a11 * y;\n    var d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);\n    var sfactor_sq = 1 / d - 0.25;\n    if (sfactor_sq < 0) {\n        sfactor_sq = 0;\n    }\n    var sfactor = Math.sqrt(sfactor_sq);\n    if (sweep === large) {\n        sfactor = -sfactor;\n    }\n    var xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);\n    var yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);\n    var th0 = Math.atan2(y0 - yc, x0 - xc);\n    var th1 = Math.atan2(y1 - yc, x1 - xc);\n    var th_arc = th1 - th0;\n    if (th_arc < 0 && sweep === 1) {\n        th_arc += 2 * Math.PI;\n    } else if (th_arc > 0 && sweep === 0) {\n        th_arc -= 2 * Math.PI;\n    }\n    var segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));\n    var result = [];\n    for(var i = 0; i < segments; i++){\n        var th2 = th0 + i * th_arc / segments;\n        var th3 = th0 + (i + 1) * th_arc / segments;\n        result[i] = [\n            xc,\n            yc,\n            th2,\n            th3,\n            rx,\n            ry,\n            sin_th,\n            cos_th\n        ];\n    }\n    return result;\n};\nvar segmentToBezier = function segmentToBezier(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {\n    var a00 = cos_th * rx;\n    var a01 = -sin_th * ry;\n    var a10 = sin_th * rx;\n    var a11 = cos_th * ry;\n    var th_half = 0.5 * (th1 - th0);\n    var t = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);\n    var x1 = cx + Math.cos(th0) - t * Math.sin(th0);\n    var y1 = cy + Math.sin(th0) + t * Math.cos(th0);\n    var x3 = cx + Math.cos(th1);\n    var y3 = cy + Math.sin(th1);\n    var x2 = x3 + t * Math.sin(th1);\n    var y2 = y3 - t * Math.cos(th1);\n    return [\n        a00 * x1 + a01 * y1,\n        a10 * x1 + a11 * y1,\n        a00 * x2 + a01 * y2,\n        a10 * x2 + a11 * y2,\n        a00 * x3 + a01 * y3,\n        a10 * x3 + a11 * y3\n    ];\n};\nvar SVGPath = /*#__PURE__*/ function() {\n    function SVGPath() {}\n    SVGPath.apply = function apply(doc, path) {\n        var commands = parsePathData(path);\n        _apply(commands, doc);\n    };\n    return SVGPath;\n}();\nvar number$1 = PDFObject$1.number;\n// This constant is used to approximate a symmetrical arc using a cubic\n// Bezier curve.\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nvar VectorMixin = {\n    initVector: function initVector() {\n        this._ctm = [\n            1,\n            0,\n            0,\n            1,\n            0,\n            0\n        ]; // current transformation matrix\n        return this._ctmStack = [];\n    },\n    save: function save() {\n        this._ctmStack.push(this._ctm.slice());\n        // TODO: save/restore colorspace and styles so not setting it unnessesarily all the time?\n        return this.addContent(\"q\");\n    },\n    restore: function restore() {\n        this._ctm = this._ctmStack.pop() || [\n            1,\n            0,\n            0,\n            1,\n            0,\n            0\n        ];\n        return this.addContent(\"Q\");\n    },\n    closePath: function closePath() {\n        return this.addContent(\"h\");\n    },\n    lineWidth: function lineWidth(w) {\n        return this.addContent(number$1(w) + \" w\");\n    },\n    _CAP_STYLES: {\n        BUTT: 0,\n        ROUND: 1,\n        SQUARE: 2\n    },\n    lineCap: function lineCap(c) {\n        if (typeof c === \"string\") {\n            c = this._CAP_STYLES[c.toUpperCase()];\n        }\n        return this.addContent(c + \" J\");\n    },\n    _JOIN_STYLES: {\n        MITER: 0,\n        ROUND: 1,\n        BEVEL: 2\n    },\n    lineJoin: function lineJoin(j) {\n        if (typeof j === \"string\") {\n            j = this._JOIN_STYLES[j.toUpperCase()];\n        }\n        return this.addContent(j + \" j\");\n    },\n    miterLimit: function miterLimit(m) {\n        return this.addContent(number$1(m) + \" M\");\n    },\n    dash: function dash(length, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var originalLength = length;\n        if (!Array.isArray(length)) {\n            length = [\n                length,\n                options.space || length\n            ];\n        }\n        var valid = length.every(function(x) {\n            return Number.isFinite(x) && x >= 0;\n        });\n        if (!valid) {\n            throw new Error(\"dash(\" + JSON.stringify(originalLength) + \", \" + JSON.stringify(options) + \") invalid, lengths must be numeric and greater than or equal to zero\");\n        }\n        length = length.map(number$1).join(\" \");\n        return this.addContent(\"[\" + length + \"] \" + number$1(options.phase || 0) + \" d\");\n    },\n    undash: function undash() {\n        return this.addContent(\"[] 0 d\");\n    },\n    moveTo: function moveTo(x, y) {\n        return this.addContent(number$1(x) + \" \" + number$1(y) + \" m\");\n    },\n    lineTo: function lineTo(x, y) {\n        return this.addContent(number$1(x) + \" \" + number$1(y) + \" l\");\n    },\n    bezierCurveTo: function bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        return this.addContent(number$1(cp1x) + \" \" + number$1(cp1y) + \" \" + number$1(cp2x) + \" \" + number$1(cp2y) + \" \" + number$1(x) + \" \" + number$1(y) + \" c\");\n    },\n    quadraticCurveTo: function quadraticCurveTo(cpx, cpy, x, y) {\n        return this.addContent(number$1(cpx) + \" \" + number$1(cpy) + \" \" + number$1(x) + \" \" + number$1(y) + \" v\");\n    },\n    rect: function rect(x, y, w, h) {\n        return this.addContent(number$1(x) + \" \" + number$1(y) + \" \" + number$1(w) + \" \" + number$1(h) + \" re\");\n    },\n    roundedRect: function roundedRect(x, y, w, h, r) {\n        if (r == null) {\n            r = 0;\n        }\n        r = Math.min(r, 0.5 * w, 0.5 * h);\n        // amount to inset control points from corners (see `ellipse`)\n        var c = r * (1.0 - KAPPA);\n        this.moveTo(x + r, y);\n        this.lineTo(x + w - r, y);\n        this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r);\n        this.lineTo(x + w, y + h - r);\n        this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h);\n        this.lineTo(x + r, y + h);\n        this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r);\n        this.lineTo(x, y + r);\n        this.bezierCurveTo(x, y + c, x + c, y, x + r, y);\n        return this.closePath();\n    },\n    ellipse: function ellipse(x, y, r1, r2) {\n        // based on http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas/2173084#2173084\n        if (r2 == null) {\n            r2 = r1;\n        }\n        x -= r1;\n        y -= r2;\n        var ox = r1 * KAPPA;\n        var oy = r2 * KAPPA;\n        var xe = x + r1 * 2;\n        var ye = y + r2 * 2;\n        var xm = x + r1;\n        var ym = y + r2;\n        this.moveTo(x, ym);\n        this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n        this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n        this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n        this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n        return this.closePath();\n    },\n    circle: function circle(x, y, radius) {\n        return this.ellipse(x, y, radius);\n    },\n    arc: function arc(x, y, radius, startAngle, endAngle, anticlockwise) {\n        if (anticlockwise == null) {\n            anticlockwise = false;\n        }\n        var TWO_PI = 2.0 * Math.PI;\n        var HALF_PI = 0.5 * Math.PI;\n        var deltaAng = endAngle - startAngle;\n        if (Math.abs(deltaAng) > TWO_PI) {\n            // draw only full circle if more than that is specified\n            deltaAng = TWO_PI;\n        } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {\n            // necessary to flip direction of rendering\n            var dir = anticlockwise ? -1 : 1;\n            deltaAng = dir * TWO_PI + deltaAng;\n        }\n        var numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);\n        var segAng = deltaAng / numSegs;\n        var handleLen = segAng / HALF_PI * KAPPA * radius;\n        var curAng = startAngle;\n        // component distances between anchor point and control point\n        var deltaCx = -Math.sin(curAng) * handleLen;\n        var deltaCy = Math.cos(curAng) * handleLen;\n        // anchor point\n        var ax = x + Math.cos(curAng) * radius;\n        var ay = y + Math.sin(curAng) * radius;\n        // calculate and render segments\n        this.moveTo(ax, ay);\n        for(var segIdx = 0; segIdx < numSegs; segIdx++){\n            // starting control point\n            var cp1x = ax + deltaCx;\n            var cp1y = ay + deltaCy;\n            // step angle\n            curAng += segAng;\n            // next anchor point\n            ax = x + Math.cos(curAng) * radius;\n            ay = y + Math.sin(curAng) * radius;\n            // next control point delta\n            deltaCx = -Math.sin(curAng) * handleLen;\n            deltaCy = Math.cos(curAng) * handleLen;\n            // ending control point\n            var cp2x = ax - deltaCx;\n            var cp2y = ay - deltaCy;\n            // render segment\n            this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);\n        }\n        return this;\n    },\n    polygon: function polygon() {\n        for(var _len = arguments.length, points = new Array(_len), _key = 0; _key < _len; _key++){\n            points[_key] = arguments[_key];\n        }\n        this.moveTo.apply(this, points.shift() || []);\n        for(var _i = 0, _points = points; _i < _points.length; _i++){\n            var point = _points[_i];\n            this.lineTo.apply(this, point || []);\n        }\n        return this.closePath();\n    },\n    path: function path(_path) {\n        SVGPath.apply(this, _path);\n        return this;\n    },\n    _windingRule: function _windingRule(rule) {\n        if (/even-?odd/.test(rule)) {\n            return \"*\";\n        }\n        return \"\";\n    },\n    fill: function fill(color, rule) {\n        if (/(even-?odd)|(non-?zero)/.test(color)) {\n            rule = color;\n            color = null;\n        }\n        if (color) {\n            this.fillColor(color);\n        }\n        return this.addContent(\"f\" + this._windingRule(rule));\n    },\n    stroke: function stroke(color) {\n        if (color) {\n            this.strokeColor(color);\n        }\n        return this.addContent(\"S\");\n    },\n    fillAndStroke: function fillAndStroke(fillColor, strokeColor, rule) {\n        if (strokeColor == null) {\n            strokeColor = fillColor;\n        }\n        var isFillRule = /(even-?odd)|(non-?zero)/;\n        if (isFillRule.test(fillColor)) {\n            rule = fillColor;\n            fillColor = null;\n        }\n        if (isFillRule.test(strokeColor)) {\n            rule = strokeColor;\n            strokeColor = fillColor;\n        }\n        if (fillColor) {\n            this.fillColor(fillColor);\n            this.strokeColor(strokeColor);\n        }\n        return this.addContent(\"B\" + this._windingRule(rule));\n    },\n    clip: function clip(rule) {\n        return this.addContent(\"W\" + this._windingRule(rule) + \" n\");\n    },\n    transform: function transform(m11, m12, m21, m22, dx, dy) {\n        // keep track of the current transformation matrix\n        if (m11 === 1 && m12 === 0 && m21 === 0 && m22 === 1 && dx === 0 && dy === 0) {\n            // Ignore identity transforms\n            return this;\n        }\n        var m = this._ctm;\n        var m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3], m4 = m[4], m5 = m[5];\n        m[0] = m0 * m11 + m2 * m12;\n        m[1] = m1 * m11 + m3 * m12;\n        m[2] = m0 * m21 + m2 * m22;\n        m[3] = m1 * m21 + m3 * m22;\n        m[4] = m0 * dx + m2 * dy + m4;\n        m[5] = m1 * dx + m3 * dy + m5;\n        var values = [\n            m11,\n            m12,\n            m21,\n            m22,\n            dx,\n            dy\n        ].map(function(v) {\n            return number$1(v);\n        }).join(\" \");\n        return this.addContent(values + \" cm\");\n    },\n    translate: function translate(x, y) {\n        return this.transform(1, 0, 0, 1, x, y);\n    },\n    rotate: function rotate(angle, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var y;\n        var rad = angle * Math.PI / 180;\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n        var x = y = 0;\n        if (options.origin != null) {\n            var _options$origin = options.origin;\n            x = _options$origin[0];\n            y = _options$origin[1];\n            var x1 = x * cos - y * sin;\n            var y1 = x * sin + y * cos;\n            x -= x1;\n            y -= y1;\n        }\n        return this.transform(cos, sin, -sin, cos, x, y);\n    },\n    scale: function scale(xFactor, yFactor, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var y;\n        if (yFactor == null) {\n            yFactor = xFactor;\n        }\n        if (typeof yFactor === \"object\") {\n            options = yFactor;\n            yFactor = xFactor;\n        }\n        var x = y = 0;\n        if (options.origin != null) {\n            var _options$origin2 = options.origin;\n            x = _options$origin2[0];\n            y = _options$origin2[1];\n            x -= xFactor * x;\n            y -= yFactor * y;\n        }\n        return this.transform(xFactor, 0, 0, yFactor, x, y);\n    }\n};\nvar range = function range(left, right, inclusive) {\n    var range = [];\n    var ascending = left < right;\n    var end = !inclusive ? right : ascending ? right + 1 : right - 1;\n    for(var i = left; ascending ? i < end : i > end; ascending ? i++ : i--){\n        range.push(i);\n    }\n    return range;\n};\nvar WIN_ANSI_MAP = {\n    402: 131,\n    8211: 150,\n    8212: 151,\n    8216: 145,\n    8217: 146,\n    8218: 130,\n    8220: 147,\n    8221: 148,\n    8222: 132,\n    8224: 134,\n    8225: 135,\n    8226: 149,\n    8230: 133,\n    8364: 128,\n    8240: 137,\n    8249: 139,\n    8250: 155,\n    710: 136,\n    8482: 153,\n    338: 140,\n    339: 156,\n    732: 152,\n    352: 138,\n    353: 154,\n    376: 159,\n    381: 142,\n    382: 158\n};\nvar characters = \".notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n.notdef       .notdef        .notdef        .notdef\\n\\nspace         exclam         quotedbl       numbersign\\ndollar        percent        ampersand      quotesingle\\nparenleft     parenright     asterisk       plus\\ncomma         hyphen         period         slash\\nzero          one            two            three\\nfour          five           six            seven\\neight         nine           colon          semicolon\\nless          equal          greater        question\\n\\nat            A              B              C\\nD             E              F              G\\nH             I              J              K\\nL             M              N              O\\nP             Q              R              S\\nT             U              V              W\\nX             Y              Z              bracketleft\\nbackslash     bracketright   asciicircum    underscore\\n\\ngrave         a              b              c\\nd             e              f              g\\nh             i              j              k\\nl             m              n              o\\np             q              r              s\\nt             u              v              w\\nx             y              z              braceleft\\nbar           braceright     asciitilde     .notdef\\n\\nEuro          .notdef        quotesinglbase florin\\nquotedblbase  ellipsis       dagger         daggerdbl\\ncircumflex    perthousand    Scaron         guilsinglleft\\nOE            .notdef        Zcaron         .notdef\\n.notdef       quoteleft      quoteright     quotedblleft\\nquotedblright bullet         endash         emdash\\ntilde         trademark      scaron         guilsinglright\\noe            .notdef        zcaron         ydieresis\\n\\nspace         exclamdown     cent           sterling\\ncurrency      yen            brokenbar      section\\ndieresis      copyright      ordfeminine    guillemotleft\\nlogicalnot    hyphen         registered     macron\\ndegree        plusminus      twosuperior    threesuperior\\nacute         mu             paragraph      periodcentered\\ncedilla       onesuperior    ordmasculine   guillemotright\\nonequarter    onehalf        threequarters  questiondown\\n\\nAgrave        Aacute         Acircumflex    Atilde\\nAdieresis     Aring          AE             Ccedilla\\nEgrave        Eacute         Ecircumflex    Edieresis\\nIgrave        Iacute         Icircumflex    Idieresis\\nEth           Ntilde         Ograve         Oacute\\nOcircumflex   Otilde         Odieresis      multiply\\nOslash        Ugrave         Uacute         Ucircumflex\\nUdieresis     Yacute         Thorn          germandbls\\n\\nagrave        aacute         acircumflex    atilde\\nadieresis     aring          ae             ccedilla\\negrave        eacute         ecircumflex    edieresis\\nigrave        iacute         icircumflex    idieresis\\neth           ntilde         ograve         oacute\\nocircumflex   otilde         odieresis      divide\\noslash        ugrave         uacute         ucircumflex\\nudieresis     yacute         thorn          ydieresis\".split(/\\s+/);\nfunction _parse(contents) {\n    var obj = {\n        attributes: {},\n        glyphWidths: {},\n        kernPairs: {}\n    };\n    var section = \"\";\n    for(var _iterator = _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__(contents.split(\"\\n\")), _step; !(_step = _iterator()).done;){\n        var line = _step.value;\n        var match;\n        var a;\n        if (match = line.match(/^Start(\\w+)/)) {\n            section = match[1];\n            continue;\n        } else if (match = line.match(/^End(\\w+)/)) {\n            section = \"\";\n            continue;\n        }\n        switch(section){\n            case \"FontMetrics\":\n                match = line.match(/(^\\w+)\\s+(.*)/);\n                var key = match[1];\n                var value = match[2];\n                if (a = obj.attributes[key]) {\n                    if (!Array.isArray(a)) {\n                        a = obj.attributes[key] = [\n                            a\n                        ];\n                    }\n                    a.push(value);\n                } else {\n                    obj.attributes[key] = value;\n                }\n                break;\n            case \"CharMetrics\":\n                if (!/^CH?\\s/.test(line)) {\n                    continue;\n                }\n                var name = line.match(/\\bN\\s+(\\.?\\w+)\\s*;/)[1];\n                obj.glyphWidths[name] = +line.match(/\\bWX\\s+(\\d+)\\s*;/)[1];\n                break;\n            case \"KernPairs\":\n                match = line.match(/^KPX\\s+(\\.?\\w+)\\s+(\\.?\\w+)\\s+(-?\\d+)/);\n                if (match) {\n                    obj.kernPairs[match[1] + match[2]] = parseInt(match[3]);\n                }\n                break;\n        }\n    }\n    return obj;\n}\nvar AFMFont = /*#__PURE__*/ function() {\n    AFMFont.open = function open(filename) {\n        return new AFMFont(fs__WEBPACK_IMPORTED_MODULE_8__.readFileSync(filename, \"utf8\"));\n    };\n    AFMFont.fromJson = function fromJson(json) {\n        return new AFMFont(json);\n    };\n    function AFMFont(contents) {\n        var _this = this;\n        if (typeof contents === \"string\") {\n            this.contents = contents;\n            this.parse();\n        } else {\n            this.attributes = contents.attributes;\n            this.glyphWidths = contents.glyphWidths;\n            this.kernPairs = contents.kernPairs;\n        }\n        this.charWidths = range(0, 255, true).map(function(i) {\n            return _this.glyphWidths[characters[i]];\n        });\n        this.bbox = Array.from(this.attributes.FontBBox.split(/\\s+/)).map(function(e) {\n            return +e;\n        });\n        this.ascender = +(this.attributes.Ascender || 0);\n        this.descender = +(this.attributes.Descender || 0);\n        this.xHeight = +(this.attributes.XHeight || 0);\n        this.capHeight = +(this.attributes.CapHeight || 0);\n        this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);\n    }\n    var _proto = AFMFont.prototype;\n    _proto.parse = function parse() {\n        var parsed = _parse(this.contents);\n        this.attributes = parsed.attributes;\n        this.glyphWidths = parsed.glyphWidths;\n        this.kernPairs = parsed.kernPairs;\n    };\n    _proto.encodeText = function encodeText(text) {\n        var res = [];\n        for(var i = 0, end = text.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--){\n            var char = text.charCodeAt(i);\n            char = WIN_ANSI_MAP[char] || char;\n            res.push(char.toString(16));\n        }\n        return res;\n    };\n    _proto.glyphsForString = function glyphsForString(string) {\n        var glyphs = [];\n        for(var i = 0, end = string.length, asc = 0 <= end; asc ? i < end : i > end; asc ? i++ : i--){\n            var charCode = string.charCodeAt(i);\n            glyphs.push(this.characterToGlyph(charCode));\n        }\n        return glyphs;\n    };\n    _proto.characterToGlyph = function characterToGlyph(character) {\n        return characters[WIN_ANSI_MAP[character] || character] || \".notdef\";\n    };\n    _proto.widthOfGlyph = function widthOfGlyph(glyph) {\n        return this.glyphWidths[glyph] || 0;\n    };\n    _proto.getKernPair = function getKernPair(left, right) {\n        return this.kernPairs[left + right] || 0;\n    };\n    _proto.advancesForGlyphs = function advancesForGlyphs(glyphs) {\n        var advances = [];\n        for(var index = 0; index < glyphs.length; index++){\n            var left = glyphs[index];\n            var right = glyphs[index + 1];\n            advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));\n        }\n        return advances;\n    };\n    return AFMFont;\n}();\nvar attributes = [\n    {\n        Comment: [\n            \"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n            \"Creation Date: Thu May  1 12:43:52 1997\",\n            \"UniqueID 43052\",\n            \"VMusage 37169 48194\"\n        ],\n        FontName: \"Helvetica-Bold\",\n        FullName: \"Helvetica Bold\",\n        FamilyName: \"Helvetica\",\n        Weight: \"Bold\",\n        ItalicAngle: \"0\",\n        IsFixedPitch: \"false\",\n        CharacterSet: \"ExtendedRoman\",\n        FontBBox: \"-170 -228 1003 962 \",\n        UnderlinePosition: \"-100\",\n        UnderlineThickness: \"50\",\n        Version: \"002.000\",\n        Notice: \"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.\",\n        EncodingScheme: \"AdobeStandardEncoding\",\n        CapHeight: \"718\",\n        XHeight: \"532\",\n        Ascender: \"718\",\n        Descender: \"-207\",\n        StdHW: \"118\",\n        StdVW: \"140\"\n    },\n    {\n        Comment: [\n            \"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n            \"Creation Date: Thu May  1 12:45:12 1997\",\n            \"UniqueID 43053\",\n            \"VMusage 14482 68586\"\n        ],\n        FontName: \"Helvetica-BoldOblique\",\n        FullName: \"Helvetica Bold Oblique\",\n        FamilyName: \"Helvetica\",\n        Weight: \"Bold\",\n        ItalicAngle: \"-12\",\n        IsFixedPitch: \"false\",\n        CharacterSet: \"ExtendedRoman\",\n        FontBBox: \"-174 -228 1114 962\",\n        UnderlinePosition: \"-100\",\n        UnderlineThickness: \"50\",\n        Version: \"002.000\",\n        Notice: \"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.\",\n        EncodingScheme: \"AdobeStandardEncoding\",\n        CapHeight: \"718\",\n        XHeight: \"532\",\n        Ascender: \"718\",\n        Descender: \"-207\",\n        StdHW: \"118\",\n        StdVW: \"140\"\n    },\n    {\n        Comment: [\n            \"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n            \"Creation Date: Thu May  1 12:44:31 1997\",\n            \"UniqueID 43055\",\n            \"VMusage 14960 69346\"\n        ],\n        FontName: \"Helvetica-Oblique\",\n        FullName: \"Helvetica Oblique\",\n        FamilyName: \"Helvetica\",\n        Weight: \"Medium\",\n        ItalicAngle: \"-12\",\n        IsFixedPitch: \"false\",\n        CharacterSet: \"ExtendedRoman\",\n        FontBBox: \"-170 -225 1116 931 \",\n        UnderlinePosition: \"-100\",\n        UnderlineThickness: \"50\",\n        Version: \"002.000\",\n        Notice: \"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.\",\n        EncodingScheme: \"AdobeStandardEncoding\",\n        CapHeight: \"718\",\n        XHeight: \"523\",\n        Ascender: \"718\",\n        Descender: \"-207\",\n        StdHW: \"76\",\n        StdVW: \"88\"\n    },\n    {\n        Comment: [\n            \"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n            \"Creation Date: Thu May  1 12:38:23 1997\",\n            \"UniqueID 43054\",\n            \"VMusage 37069 48094\"\n        ],\n        FontName: \"Helvetica\",\n        FullName: \"Helvetica\",\n        FamilyName: \"Helvetica\",\n        Weight: \"Medium\",\n        ItalicAngle: \"0\",\n        IsFixedPitch: \"false\",\n        CharacterSet: \"ExtendedRoman\",\n        FontBBox: \"-166 -225 1000 931 \",\n        UnderlinePosition: \"-100\",\n        UnderlineThickness: \"50\",\n        Version: \"002.000\",\n        Notice: \"Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.\",\n        EncodingScheme: \"AdobeStandardEncoding\",\n        CapHeight: \"718\",\n        XHeight: \"523\",\n        Ascender: \"718\",\n        Descender: \"-207\",\n        StdHW: \"76\",\n        StdVW: \"88\"\n    },\n    {\n        Comment: [\n            \"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n            \"Creation Date: Thu May  1 12:52:56 1997\",\n            \"UniqueID 43065\",\n            \"VMusage 41636 52661\"\n        ],\n        FontName: \"Times-Bold\",\n        FullName: \"Times Bold\",\n        FamilyName: \"Times\",\n        Weight: \"Bold\",\n        ItalicAngle: \"0\",\n        IsFixedPitch: \"false\",\n        CharacterSet: \"ExtendedRoman\",\n        FontBBox: \"-168 -218 1000 935 \",\n        UnderlinePosition: \"-100\",\n        UnderlineThickness: \"50\",\n        Version: \"002.000\",\n        Notice: \"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.\",\n        EncodingScheme: \"AdobeStandardEncoding\",\n        CapHeight: \"676\",\n        XHeight: \"461\",\n        Ascender: \"683\",\n        Descender: \"-217\",\n        StdHW: \"44\",\n        StdVW: \"139\"\n    },\n    {\n        Comment: [\n            \"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n            \"Creation Date: Thu May  1 13:04:06 1997\",\n            \"UniqueID 43066\",\n            \"VMusage 45874 56899\"\n        ],\n        FontName: \"Times-BoldItalic\",\n        FullName: \"Times Bold Italic\",\n        FamilyName: \"Times\",\n        Weight: \"Bold\",\n        ItalicAngle: \"-15\",\n        IsFixedPitch: \"false\",\n        CharacterSet: \"ExtendedRoman\",\n        FontBBox: \"-200 -218 996 921\",\n        UnderlinePosition: \"-100\",\n        UnderlineThickness: \"50\",\n        Version: \"002.000\",\n        Notice: \"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.\",\n        EncodingScheme: \"AdobeStandardEncoding\",\n        CapHeight: \"669\",\n        XHeight: \"462\",\n        Ascender: \"683\",\n        Descender: \"-217\",\n        StdHW: \"42\",\n        StdVW: \"121\"\n    },\n    {\n        Comment: [\n            \"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n            \"Creation Date: Thu May  1 12:56:55 1997\",\n            \"UniqueID 43067\",\n            \"VMusage 47727 58752\"\n        ],\n        FontName: \"Times-Italic\",\n        FullName: \"Times Italic\",\n        FamilyName: \"Times\",\n        Weight: \"Medium\",\n        ItalicAngle: \"-15.5\",\n        IsFixedPitch: \"false\",\n        CharacterSet: \"ExtendedRoman\",\n        FontBBox: \"-169 -217 1010 883 \",\n        UnderlinePosition: \"-100\",\n        UnderlineThickness: \"50\",\n        Version: \"002.000\",\n        Notice: \"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.\",\n        EncodingScheme: \"AdobeStandardEncoding\",\n        CapHeight: \"653\",\n        XHeight: \"441\",\n        Ascender: \"683\",\n        Descender: \"-217\",\n        StdHW: \"32\",\n        StdVW: \"76\"\n    },\n    {\n        Comment: [\n            \"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n            \"Creation Date: Thu May  1 12:49:17 1997\",\n            \"UniqueID 43068\",\n            \"VMusage 43909 54934\"\n        ],\n        FontName: \"Times-Roman\",\n        FullName: \"Times Roman\",\n        FamilyName: \"Times\",\n        Weight: \"Roman\",\n        ItalicAngle: \"0\",\n        IsFixedPitch: \"false\",\n        CharacterSet: \"ExtendedRoman\",\n        FontBBox: \"-168 -218 1000 898 \",\n        UnderlinePosition: \"-100\",\n        UnderlineThickness: \"50\",\n        Version: \"002.000\",\n        Notice: \"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.\",\n        EncodingScheme: \"AdobeStandardEncoding\",\n        CapHeight: \"662\",\n        XHeight: \"450\",\n        Ascender: \"683\",\n        Descender: \"-217\",\n        StdHW: \"28\",\n        StdVW: \"84\"\n    },\n    {\n        Comment: [\n            \"Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n            \"Creation Date: Mon Jun 23 16:28:00 1997\",\n            \"UniqueID 43048\",\n            \"VMusage 41139 52164\"\n        ],\n        FontName: \"Courier-Bold\",\n        FullName: \"Courier Bold\",\n        FamilyName: \"Courier\",\n        Weight: \"Bold\",\n        ItalicAngle: \"0\",\n        IsFixedPitch: \"true\",\n        CharacterSet: \"ExtendedRoman\",\n        FontBBox: \"-113 -250 749 801 \",\n        UnderlinePosition: \"-100\",\n        UnderlineThickness: \"50\",\n        Version: \"003.000\",\n        Notice: \"Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n        EncodingScheme: \"AdobeStandardEncoding\",\n        CapHeight: \"562\",\n        XHeight: \"439\",\n        Ascender: \"629\",\n        Descender: \"-157\",\n        StdHW: \"84\",\n        StdVW: \"106\"\n    },\n    {\n        Comment: [\n            \"Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n            \"Creation Date: Mon Jun 23 16:28:46 1997\",\n            \"UniqueID 43049\",\n            \"VMusage 17529 79244\"\n        ],\n        FontName: \"Courier-BoldOblique\",\n        FullName: \"Courier Bold Oblique\",\n        FamilyName: \"Courier\",\n        Weight: \"Bold\",\n        ItalicAngle: \"-12\",\n        IsFixedPitch: \"true\",\n        CharacterSet: \"ExtendedRoman\",\n        FontBBox: \"-57 -250 869 801\",\n        UnderlinePosition: \"-100\",\n        UnderlineThickness: \"50\",\n        Version: \"003.000\",\n        Notice: \"Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n        EncodingScheme: \"AdobeStandardEncoding\",\n        CapHeight: \"562\",\n        XHeight: \"439\",\n        Ascender: \"629\",\n        Descender: \"-157\",\n        StdHW: \"84\",\n        StdVW: \"106\"\n    },\n    {\n        Comment: [\n            \"Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n            \"Creation Date: Thu May  1 17:37:52 1997\",\n            \"UniqueID 43051\",\n            \"VMusage 16248 75829\"\n        ],\n        FontName: \"Courier-Oblique\",\n        FullName: \"Courier Oblique\",\n        FamilyName: \"Courier\",\n        Weight: \"Medium\",\n        ItalicAngle: \"-12\",\n        IsFixedPitch: \"true\",\n        CharacterSet: \"ExtendedRoman\",\n        FontBBox: \"-27 -250 849 805 \",\n        UnderlinePosition: \"-100\",\n        UnderlineThickness: \"50\",\n        Version: \"003.000\",\n        Notice: \"Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n        EncodingScheme: \"AdobeStandardEncoding\",\n        CapHeight: \"562\",\n        XHeight: \"426\",\n        Ascender: \"629\",\n        Descender: \"-157\",\n        StdHW: \"51\",\n        StdVW: \"51\"\n    },\n    {\n        Comment: [\n            \"Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n            \"Creation Date: Thu May  1 17:27:09 1997\",\n            \"UniqueID 43050\",\n            \"VMusage 39754 50779\"\n        ],\n        FontName: \"Courier\",\n        FullName: \"Courier\",\n        FamilyName: \"Courier\",\n        Weight: \"Medium\",\n        ItalicAngle: \"0\",\n        IsFixedPitch: \"true\",\n        CharacterSet: \"ExtendedRoman\",\n        FontBBox: \"-23 -250 715 805 \",\n        UnderlinePosition: \"-100\",\n        UnderlineThickness: \"50\",\n        Version: \"003.000\",\n        Notice: \"Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.\",\n        EncodingScheme: \"AdobeStandardEncoding\",\n        CapHeight: \"562\",\n        XHeight: \"426\",\n        Ascender: \"629\",\n        Descender: \"-157\",\n        StdHW: \"51\",\n        StdVW: \"51\"\n    }\n];\nvar glyphWidths = {\n    space: [\n        278,\n        278,\n        278,\n        278,\n        250,\n        250,\n        250,\n        250,\n        600,\n        600,\n        600,\n        600\n    ],\n    exclam: [\n        333,\n        333,\n        278,\n        278,\n        333,\n        389,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    quotedbl: [\n        474,\n        474,\n        355,\n        355,\n        555,\n        555,\n        420,\n        408,\n        600,\n        600,\n        600,\n        600\n    ],\n    numbersign: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    dollar: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    percent: [\n        889,\n        889,\n        889,\n        889,\n        1000,\n        833,\n        833,\n        833,\n        600,\n        600,\n        600,\n        600\n    ],\n    ampersand: [\n        722,\n        722,\n        667,\n        667,\n        833,\n        778,\n        778,\n        778,\n        600,\n        600,\n        600,\n        600\n    ],\n    quoteright: [\n        278,\n        278,\n        222,\n        222,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    parenleft: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    parenright: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    asterisk: [\n        389,\n        389,\n        389,\n        389,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    plus: [\n        584,\n        584,\n        584,\n        584,\n        570,\n        570,\n        675,\n        564,\n        600,\n        600,\n        600,\n        600\n    ],\n    comma: [\n        278,\n        278,\n        278,\n        278,\n        250,\n        250,\n        250,\n        250,\n        600,\n        600,\n        600,\n        600\n    ],\n    hyphen: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    period: [\n        278,\n        278,\n        278,\n        278,\n        250,\n        250,\n        250,\n        250,\n        600,\n        600,\n        600,\n        600\n    ],\n    slash: [\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    zero: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    one: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    two: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    three: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    four: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    five: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    six: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    seven: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    eight: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    nine: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    colon: [\n        333,\n        333,\n        278,\n        278,\n        333,\n        333,\n        333,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    semicolon: [\n        333,\n        333,\n        278,\n        278,\n        333,\n        333,\n        333,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    less: [\n        584,\n        584,\n        584,\n        584,\n        570,\n        570,\n        675,\n        564,\n        600,\n        600,\n        600,\n        600\n    ],\n    equal: [\n        584,\n        584,\n        584,\n        584,\n        570,\n        570,\n        675,\n        564,\n        600,\n        600,\n        600,\n        600\n    ],\n    greater: [\n        584,\n        584,\n        584,\n        584,\n        570,\n        570,\n        675,\n        564,\n        600,\n        600,\n        600,\n        600\n    ],\n    question: [\n        611,\n        611,\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    at: [\n        975,\n        975,\n        1015,\n        1015,\n        930,\n        832,\n        920,\n        921,\n        600,\n        600,\n        600,\n        600\n    ],\n    A: [\n        722,\n        722,\n        667,\n        667,\n        722,\n        667,\n        611,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    B: [\n        722,\n        722,\n        667,\n        667,\n        667,\n        667,\n        611,\n        667,\n        600,\n        600,\n        600,\n        600\n    ],\n    C: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        667,\n        667,\n        667,\n        600,\n        600,\n        600,\n        600\n    ],\n    D: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    E: [\n        667,\n        667,\n        667,\n        667,\n        667,\n        667,\n        611,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    F: [\n        611,\n        611,\n        611,\n        611,\n        611,\n        667,\n        611,\n        556,\n        600,\n        600,\n        600,\n        600\n    ],\n    G: [\n        778,\n        778,\n        778,\n        778,\n        778,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    H: [\n        722,\n        722,\n        722,\n        722,\n        778,\n        778,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    I: [\n        278,\n        278,\n        278,\n        278,\n        389,\n        389,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    J: [\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        444,\n        389,\n        600,\n        600,\n        600,\n        600\n    ],\n    K: [\n        722,\n        722,\n        667,\n        667,\n        778,\n        667,\n        667,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    L: [\n        611,\n        611,\n        556,\n        556,\n        667,\n        611,\n        556,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    M: [\n        833,\n        833,\n        833,\n        833,\n        944,\n        889,\n        833,\n        889,\n        600,\n        600,\n        600,\n        600\n    ],\n    N: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        667,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    O: [\n        778,\n        778,\n        778,\n        778,\n        778,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    P: [\n        667,\n        667,\n        667,\n        667,\n        611,\n        611,\n        611,\n        556,\n        600,\n        600,\n        600,\n        600\n    ],\n    Q: [\n        778,\n        778,\n        778,\n        778,\n        778,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    R: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        667,\n        611,\n        667,\n        600,\n        600,\n        600,\n        600\n    ],\n    S: [\n        667,\n        667,\n        667,\n        667,\n        556,\n        556,\n        500,\n        556,\n        600,\n        600,\n        600,\n        600\n    ],\n    T: [\n        611,\n        611,\n        611,\n        611,\n        667,\n        611,\n        556,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    U: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    V: [\n        667,\n        667,\n        667,\n        667,\n        722,\n        667,\n        611,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    W: [\n        944,\n        944,\n        944,\n        944,\n        1000,\n        889,\n        833,\n        944,\n        600,\n        600,\n        600,\n        600\n    ],\n    X: [\n        667,\n        667,\n        667,\n        667,\n        722,\n        667,\n        611,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Y: [\n        667,\n        667,\n        667,\n        667,\n        722,\n        611,\n        556,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Z: [\n        611,\n        611,\n        611,\n        611,\n        667,\n        611,\n        556,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    bracketleft: [\n        333,\n        333,\n        278,\n        278,\n        333,\n        333,\n        389,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    backslash: [\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    bracketright: [\n        333,\n        333,\n        278,\n        278,\n        333,\n        333,\n        389,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    asciicircum: [\n        584,\n        584,\n        469,\n        469,\n        581,\n        570,\n        422,\n        469,\n        600,\n        600,\n        600,\n        600\n    ],\n    underscore: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    quoteleft: [\n        278,\n        278,\n        222,\n        222,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    a: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    b: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    c: [\n        556,\n        556,\n        500,\n        500,\n        444,\n        444,\n        444,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    d: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    e: [\n        556,\n        556,\n        556,\n        556,\n        444,\n        444,\n        444,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    f: [\n        333,\n        333,\n        278,\n        278,\n        333,\n        333,\n        278,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    g: [\n        611,\n        611,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    h: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    i: [\n        278,\n        278,\n        222,\n        222,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    j: [\n        278,\n        278,\n        222,\n        222,\n        333,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    k: [\n        556,\n        556,\n        500,\n        500,\n        556,\n        500,\n        444,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    l: [\n        278,\n        278,\n        222,\n        222,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    m: [\n        889,\n        889,\n        833,\n        833,\n        833,\n        778,\n        722,\n        778,\n        600,\n        600,\n        600,\n        600\n    ],\n    n: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    o: [\n        611,\n        611,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    p: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    q: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    r: [\n        389,\n        389,\n        333,\n        333,\n        444,\n        389,\n        389,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    s: [\n        556,\n        556,\n        500,\n        500,\n        389,\n        389,\n        389,\n        389,\n        600,\n        600,\n        600,\n        600\n    ],\n    t: [\n        333,\n        333,\n        278,\n        278,\n        333,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    u: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    v: [\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        444,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    w: [\n        778,\n        778,\n        722,\n        722,\n        722,\n        667,\n        667,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    x: [\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        444,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    y: [\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        444,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    z: [\n        500,\n        500,\n        500,\n        500,\n        444,\n        389,\n        389,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    braceleft: [\n        389,\n        389,\n        334,\n        334,\n        394,\n        348,\n        400,\n        480,\n        600,\n        600,\n        600,\n        600\n    ],\n    bar: [\n        280,\n        280,\n        260,\n        260,\n        220,\n        220,\n        275,\n        200,\n        600,\n        600,\n        600,\n        600\n    ],\n    braceright: [\n        389,\n        389,\n        334,\n        334,\n        394,\n        348,\n        400,\n        480,\n        600,\n        600,\n        600,\n        600\n    ],\n    asciitilde: [\n        584,\n        584,\n        584,\n        584,\n        520,\n        570,\n        541,\n        541,\n        600,\n        600,\n        600,\n        600\n    ],\n    exclamdown: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        389,\n        389,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    cent: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    sterling: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    fraction: [\n        167,\n        167,\n        167,\n        167,\n        167,\n        167,\n        167,\n        167,\n        600,\n        600,\n        600,\n        600\n    ],\n    yen: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    florin: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    section: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    currency: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    quotesingle: [\n        238,\n        238,\n        191,\n        191,\n        278,\n        278,\n        214,\n        180,\n        600,\n        600,\n        600,\n        600\n    ],\n    quotedblleft: [\n        500,\n        500,\n        333,\n        333,\n        500,\n        500,\n        556,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    guillemotleft: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    guilsinglleft: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    guilsinglright: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    fi: [\n        611,\n        611,\n        500,\n        500,\n        556,\n        556,\n        500,\n        556,\n        600,\n        600,\n        600,\n        600\n    ],\n    fl: [\n        611,\n        611,\n        500,\n        500,\n        556,\n        556,\n        500,\n        556,\n        600,\n        600,\n        600,\n        600\n    ],\n    endash: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    dagger: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    daggerdbl: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    periodcentered: [\n        278,\n        278,\n        278,\n        278,\n        250,\n        250,\n        250,\n        250,\n        600,\n        600,\n        600,\n        600\n    ],\n    paragraph: [\n        556,\n        556,\n        537,\n        537,\n        540,\n        500,\n        523,\n        453,\n        600,\n        600,\n        600,\n        600\n    ],\n    bullet: [\n        350,\n        350,\n        350,\n        350,\n        350,\n        350,\n        350,\n        350,\n        600,\n        600,\n        600,\n        600\n    ],\n    quotesinglbase: [\n        278,\n        278,\n        222,\n        222,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    quotedblbase: [\n        500,\n        500,\n        333,\n        333,\n        500,\n        500,\n        556,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    quotedblright: [\n        500,\n        500,\n        333,\n        333,\n        500,\n        500,\n        556,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    guillemotright: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    ellipsis: [\n        1000,\n        1000,\n        1000,\n        1000,\n        1000,\n        1000,\n        889,\n        1000,\n        600,\n        600,\n        600,\n        600\n    ],\n    perthousand: [\n        1000,\n        1000,\n        1000,\n        1000,\n        1000,\n        1000,\n        1000,\n        1000,\n        600,\n        600,\n        600,\n        600\n    ],\n    questiondown: [\n        611,\n        611,\n        611,\n        611,\n        500,\n        500,\n        500,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    grave: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    acute: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    circumflex: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    tilde: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    macron: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    breve: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    dotaccent: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    dieresis: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    ring: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    cedilla: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    hungarumlaut: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    ogonek: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    caron: [\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    emdash: [\n        1000,\n        1000,\n        1000,\n        1000,\n        1000,\n        1000,\n        889,\n        1000,\n        600,\n        600,\n        600,\n        600\n    ],\n    AE: [\n        1000,\n        1000,\n        1000,\n        1000,\n        1000,\n        944,\n        889,\n        889,\n        600,\n        600,\n        600,\n        600\n    ],\n    ordfeminine: [\n        370,\n        370,\n        370,\n        370,\n        300,\n        266,\n        276,\n        276,\n        600,\n        600,\n        600,\n        600\n    ],\n    Lslash: [\n        611,\n        611,\n        556,\n        556,\n        667,\n        611,\n        556,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    Oslash: [\n        778,\n        778,\n        778,\n        778,\n        778,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    OE: [\n        1000,\n        1000,\n        1000,\n        1000,\n        1000,\n        944,\n        944,\n        889,\n        600,\n        600,\n        600,\n        600\n    ],\n    ordmasculine: [\n        365,\n        365,\n        365,\n        365,\n        330,\n        300,\n        310,\n        310,\n        600,\n        600,\n        600,\n        600\n    ],\n    ae: [\n        889,\n        889,\n        889,\n        889,\n        722,\n        722,\n        667,\n        667,\n        600,\n        600,\n        600,\n        600\n    ],\n    dotlessi: [\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    lslash: [\n        278,\n        278,\n        222,\n        222,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    oslash: [\n        611,\n        611,\n        611,\n        611,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    oe: [\n        944,\n        944,\n        944,\n        944,\n        722,\n        722,\n        667,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    germandbls: [\n        611,\n        611,\n        611,\n        611,\n        556,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    Idieresis: [\n        278,\n        278,\n        278,\n        278,\n        389,\n        389,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    eacute: [\n        556,\n        556,\n        556,\n        556,\n        444,\n        444,\n        444,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    abreve: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    uhungarumlaut: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    ecaron: [\n        556,\n        556,\n        556,\n        556,\n        444,\n        444,\n        444,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    Ydieresis: [\n        667,\n        667,\n        667,\n        667,\n        722,\n        611,\n        556,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    divide: [\n        584,\n        584,\n        584,\n        584,\n        570,\n        570,\n        675,\n        564,\n        600,\n        600,\n        600,\n        600\n    ],\n    Yacute: [\n        667,\n        667,\n        667,\n        667,\n        722,\n        611,\n        556,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Acircumflex: [\n        722,\n        722,\n        667,\n        667,\n        722,\n        667,\n        611,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    aacute: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    Ucircumflex: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    yacute: [\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        444,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    scommaaccent: [\n        556,\n        556,\n        500,\n        500,\n        389,\n        389,\n        389,\n        389,\n        600,\n        600,\n        600,\n        600\n    ],\n    ecircumflex: [\n        556,\n        556,\n        556,\n        556,\n        444,\n        444,\n        444,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    Uring: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Udieresis: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    aogonek: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    Uacute: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    uogonek: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    Edieresis: [\n        667,\n        667,\n        667,\n        667,\n        667,\n        667,\n        611,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    Dcroat: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    commaaccent: [\n        250,\n        250,\n        250,\n        250,\n        250,\n        250,\n        250,\n        250,\n        600,\n        600,\n        600,\n        600\n    ],\n    copyright: [\n        737,\n        737,\n        737,\n        737,\n        747,\n        747,\n        760,\n        760,\n        600,\n        600,\n        600,\n        600\n    ],\n    Emacron: [\n        667,\n        667,\n        667,\n        667,\n        667,\n        667,\n        611,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    ccaron: [\n        556,\n        556,\n        500,\n        500,\n        444,\n        444,\n        444,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    aring: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    Ncommaaccent: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        667,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    lacute: [\n        278,\n        278,\n        222,\n        222,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    agrave: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    Tcommaaccent: [\n        611,\n        611,\n        611,\n        611,\n        667,\n        611,\n        556,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    Cacute: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        667,\n        667,\n        667,\n        600,\n        600,\n        600,\n        600\n    ],\n    atilde: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    Edotaccent: [\n        667,\n        667,\n        667,\n        667,\n        667,\n        667,\n        611,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    scaron: [\n        556,\n        556,\n        500,\n        500,\n        389,\n        389,\n        389,\n        389,\n        600,\n        600,\n        600,\n        600\n    ],\n    scedilla: [\n        556,\n        556,\n        500,\n        500,\n        389,\n        389,\n        389,\n        389,\n        600,\n        600,\n        600,\n        600\n    ],\n    iacute: [\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    lozenge: [\n        494,\n        494,\n        471,\n        471,\n        494,\n        494,\n        471,\n        471,\n        600,\n        600,\n        600,\n        600\n    ],\n    Rcaron: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        667,\n        611,\n        667,\n        600,\n        600,\n        600,\n        600\n    ],\n    Gcommaaccent: [\n        778,\n        778,\n        778,\n        778,\n        778,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    ucircumflex: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    acircumflex: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    Amacron: [\n        722,\n        722,\n        667,\n        667,\n        722,\n        667,\n        611,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    rcaron: [\n        389,\n        389,\n        333,\n        333,\n        444,\n        389,\n        389,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    ccedilla: [\n        556,\n        556,\n        500,\n        500,\n        444,\n        444,\n        444,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    Zdotaccent: [\n        611,\n        611,\n        611,\n        611,\n        667,\n        611,\n        556,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    Thorn: [\n        667,\n        667,\n        667,\n        667,\n        611,\n        611,\n        611,\n        556,\n        600,\n        600,\n        600,\n        600\n    ],\n    Omacron: [\n        778,\n        778,\n        778,\n        778,\n        778,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Racute: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        667,\n        611,\n        667,\n        600,\n        600,\n        600,\n        600\n    ],\n    Sacute: [\n        667,\n        667,\n        667,\n        667,\n        556,\n        556,\n        500,\n        556,\n        600,\n        600,\n        600,\n        600\n    ],\n    dcaron: [\n        743,\n        743,\n        643,\n        643,\n        672,\n        608,\n        544,\n        588,\n        600,\n        600,\n        600,\n        600\n    ],\n    Umacron: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    uring: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    threesuperior: [\n        333,\n        333,\n        333,\n        333,\n        300,\n        300,\n        300,\n        300,\n        600,\n        600,\n        600,\n        600\n    ],\n    Ograve: [\n        778,\n        778,\n        778,\n        778,\n        778,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Agrave: [\n        722,\n        722,\n        667,\n        667,\n        722,\n        667,\n        611,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Abreve: [\n        722,\n        722,\n        667,\n        667,\n        722,\n        667,\n        611,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    multiply: [\n        584,\n        584,\n        584,\n        584,\n        570,\n        570,\n        675,\n        564,\n        600,\n        600,\n        600,\n        600\n    ],\n    uacute: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    Tcaron: [\n        611,\n        611,\n        611,\n        611,\n        667,\n        611,\n        556,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    partialdiff: [\n        494,\n        494,\n        476,\n        476,\n        494,\n        494,\n        476,\n        476,\n        600,\n        600,\n        600,\n        600\n    ],\n    ydieresis: [\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        444,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    Nacute: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        667,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    icircumflex: [\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    Ecircumflex: [\n        667,\n        667,\n        667,\n        667,\n        667,\n        667,\n        611,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    adieresis: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    edieresis: [\n        556,\n        556,\n        556,\n        556,\n        444,\n        444,\n        444,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    cacute: [\n        556,\n        556,\n        500,\n        500,\n        444,\n        444,\n        444,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    nacute: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    umacron: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    Ncaron: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        667,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Iacute: [\n        278,\n        278,\n        278,\n        278,\n        389,\n        389,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    plusminus: [\n        584,\n        584,\n        584,\n        584,\n        570,\n        570,\n        675,\n        564,\n        600,\n        600,\n        600,\n        600\n    ],\n    brokenbar: [\n        280,\n        280,\n        260,\n        260,\n        220,\n        220,\n        275,\n        200,\n        600,\n        600,\n        600,\n        600\n    ],\n    registered: [\n        737,\n        737,\n        737,\n        737,\n        747,\n        747,\n        760,\n        760,\n        600,\n        600,\n        600,\n        600\n    ],\n    Gbreve: [\n        778,\n        778,\n        778,\n        778,\n        778,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Idotaccent: [\n        278,\n        278,\n        278,\n        278,\n        389,\n        389,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    summation: [\n        600,\n        600,\n        600,\n        600,\n        600,\n        600,\n        600,\n        600,\n        600,\n        600,\n        600,\n        600\n    ],\n    Egrave: [\n        667,\n        667,\n        667,\n        667,\n        667,\n        667,\n        611,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    racute: [\n        389,\n        389,\n        333,\n        333,\n        444,\n        389,\n        389,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    omacron: [\n        611,\n        611,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    Zacute: [\n        611,\n        611,\n        611,\n        611,\n        667,\n        611,\n        556,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    Zcaron: [\n        611,\n        611,\n        611,\n        611,\n        667,\n        611,\n        556,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    greaterequal: [\n        549,\n        549,\n        549,\n        549,\n        549,\n        549,\n        549,\n        549,\n        600,\n        600,\n        600,\n        600\n    ],\n    Eth: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Ccedilla: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        667,\n        667,\n        667,\n        600,\n        600,\n        600,\n        600\n    ],\n    lcommaaccent: [\n        278,\n        278,\n        222,\n        222,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    tcaron: [\n        389,\n        389,\n        317,\n        317,\n        416,\n        366,\n        300,\n        326,\n        600,\n        600,\n        600,\n        600\n    ],\n    eogonek: [\n        556,\n        556,\n        556,\n        556,\n        444,\n        444,\n        444,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    Uogonek: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Aacute: [\n        722,\n        722,\n        667,\n        667,\n        722,\n        667,\n        611,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Adieresis: [\n        722,\n        722,\n        667,\n        667,\n        722,\n        667,\n        611,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    egrave: [\n        556,\n        556,\n        556,\n        556,\n        444,\n        444,\n        444,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    zacute: [\n        500,\n        500,\n        500,\n        500,\n        444,\n        389,\n        389,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    iogonek: [\n        278,\n        278,\n        222,\n        222,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    Oacute: [\n        778,\n        778,\n        778,\n        778,\n        778,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    oacute: [\n        611,\n        611,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    amacron: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    sacute: [\n        556,\n        556,\n        500,\n        500,\n        389,\n        389,\n        389,\n        389,\n        600,\n        600,\n        600,\n        600\n    ],\n    idieresis: [\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    Ocircumflex: [\n        778,\n        778,\n        778,\n        778,\n        778,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Ugrave: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Delta: [\n        612,\n        612,\n        612,\n        612,\n        612,\n        612,\n        612,\n        612,\n        600,\n        600,\n        600,\n        600\n    ],\n    thorn: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    twosuperior: [\n        333,\n        333,\n        333,\n        333,\n        300,\n        300,\n        300,\n        300,\n        600,\n        600,\n        600,\n        600\n    ],\n    Odieresis: [\n        778,\n        778,\n        778,\n        778,\n        778,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    mu: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        576,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    igrave: [\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    ohungarumlaut: [\n        611,\n        611,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    Eogonek: [\n        667,\n        667,\n        667,\n        667,\n        667,\n        667,\n        611,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    dcroat: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    threequarters: [\n        834,\n        834,\n        834,\n        834,\n        750,\n        750,\n        750,\n        750,\n        600,\n        600,\n        600,\n        600\n    ],\n    Scedilla: [\n        667,\n        667,\n        667,\n        667,\n        556,\n        556,\n        500,\n        556,\n        600,\n        600,\n        600,\n        600\n    ],\n    lcaron: [\n        400,\n        400,\n        299,\n        299,\n        394,\n        382,\n        300,\n        344,\n        600,\n        600,\n        600,\n        600\n    ],\n    Kcommaaccent: [\n        722,\n        722,\n        667,\n        667,\n        778,\n        667,\n        667,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Lacute: [\n        611,\n        611,\n        556,\n        556,\n        667,\n        611,\n        556,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    trademark: [\n        1000,\n        1000,\n        1000,\n        1000,\n        1000,\n        1000,\n        980,\n        980,\n        600,\n        600,\n        600,\n        600\n    ],\n    edotaccent: [\n        556,\n        556,\n        556,\n        556,\n        444,\n        444,\n        444,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    Igrave: [\n        278,\n        278,\n        278,\n        278,\n        389,\n        389,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    Imacron: [\n        278,\n        278,\n        278,\n        278,\n        389,\n        389,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    Lcaron: [\n        611,\n        611,\n        556,\n        556,\n        667,\n        611,\n        611,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    onehalf: [\n        834,\n        834,\n        834,\n        834,\n        750,\n        750,\n        750,\n        750,\n        600,\n        600,\n        600,\n        600\n    ],\n    lessequal: [\n        549,\n        549,\n        549,\n        549,\n        549,\n        549,\n        549,\n        549,\n        600,\n        600,\n        600,\n        600\n    ],\n    ocircumflex: [\n        611,\n        611,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    ntilde: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    Uhungarumlaut: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Eacute: [\n        667,\n        667,\n        667,\n        667,\n        667,\n        667,\n        611,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    emacron: [\n        556,\n        556,\n        556,\n        556,\n        444,\n        444,\n        444,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    gbreve: [\n        611,\n        611,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    onequarter: [\n        834,\n        834,\n        834,\n        834,\n        750,\n        750,\n        750,\n        750,\n        600,\n        600,\n        600,\n        600\n    ],\n    Scaron: [\n        667,\n        667,\n        667,\n        667,\n        556,\n        556,\n        500,\n        556,\n        600,\n        600,\n        600,\n        600\n    ],\n    Scommaaccent: [\n        667,\n        667,\n        667,\n        667,\n        556,\n        556,\n        500,\n        556,\n        600,\n        600,\n        600,\n        600\n    ],\n    Ohungarumlaut: [\n        778,\n        778,\n        778,\n        778,\n        778,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    degree: [\n        400,\n        400,\n        400,\n        400,\n        400,\n        400,\n        400,\n        400,\n        600,\n        600,\n        600,\n        600\n    ],\n    ograve: [\n        611,\n        611,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    Ccaron: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        667,\n        667,\n        667,\n        600,\n        600,\n        600,\n        600\n    ],\n    ugrave: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    radical: [\n        549,\n        549,\n        453,\n        453,\n        549,\n        549,\n        453,\n        453,\n        600,\n        600,\n        600,\n        600\n    ],\n    Dcaron: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    rcommaaccent: [\n        389,\n        389,\n        333,\n        333,\n        444,\n        389,\n        389,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    Ntilde: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        722,\n        667,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    otilde: [\n        611,\n        611,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    Rcommaaccent: [\n        722,\n        722,\n        722,\n        722,\n        722,\n        667,\n        611,\n        667,\n        600,\n        600,\n        600,\n        600\n    ],\n    Lcommaaccent: [\n        611,\n        611,\n        556,\n        556,\n        667,\n        611,\n        556,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    Atilde: [\n        722,\n        722,\n        667,\n        667,\n        722,\n        667,\n        611,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Aogonek: [\n        722,\n        722,\n        667,\n        667,\n        722,\n        667,\n        611,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Aring: [\n        722,\n        722,\n        667,\n        667,\n        722,\n        667,\n        611,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    Otilde: [\n        778,\n        778,\n        778,\n        778,\n        778,\n        722,\n        722,\n        722,\n        600,\n        600,\n        600,\n        600\n    ],\n    zdotaccent: [\n        500,\n        500,\n        500,\n        500,\n        444,\n        389,\n        389,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    Ecaron: [\n        667,\n        667,\n        667,\n        667,\n        667,\n        667,\n        611,\n        611,\n        600,\n        600,\n        600,\n        600\n    ],\n    Iogonek: [\n        278,\n        278,\n        278,\n        278,\n        389,\n        389,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    kcommaaccent: [\n        556,\n        556,\n        500,\n        500,\n        556,\n        500,\n        444,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    minus: [\n        584,\n        584,\n        584,\n        584,\n        570,\n        606,\n        675,\n        564,\n        600,\n        600,\n        600,\n        600\n    ],\n    Icircumflex: [\n        278,\n        278,\n        278,\n        278,\n        389,\n        389,\n        333,\n        333,\n        600,\n        600,\n        600,\n        600\n    ],\n    ncaron: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    tcommaaccent: [\n        333,\n        333,\n        278,\n        278,\n        333,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    logicalnot: [\n        584,\n        584,\n        584,\n        584,\n        570,\n        606,\n        675,\n        564,\n        600,\n        600,\n        600,\n        600\n    ],\n    odieresis: [\n        611,\n        611,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    udieresis: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    notequal: [\n        549,\n        549,\n        549,\n        549,\n        549,\n        549,\n        549,\n        549,\n        600,\n        600,\n        600,\n        600\n    ],\n    gcommaaccent: [\n        611,\n        611,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    eth: [\n        611,\n        611,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    zcaron: [\n        500,\n        500,\n        500,\n        500,\n        444,\n        389,\n        389,\n        444,\n        600,\n        600,\n        600,\n        600\n    ],\n    ncommaaccent: [\n        611,\n        611,\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ],\n    onesuperior: [\n        333,\n        333,\n        333,\n        333,\n        300,\n        300,\n        300,\n        300,\n        600,\n        600,\n        600,\n        600\n    ],\n    imacron: [\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        278,\n        600,\n        600,\n        600,\n        600\n    ],\n    Euro: [\n        556,\n        556,\n        556,\n        556,\n        500,\n        500,\n        500,\n        500,\n        600,\n        600,\n        600,\n        600\n    ]\n};\nvar kernPairs = {\n    AC: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    ACacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    ACcaron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    ACcedilla: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AG: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AGbreve: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AGcommaaccent: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AO: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AOacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AOcircumflex: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AOdieresis: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AOgrave: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AOhungarumlaut: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AOmacron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AOslash: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AOtilde: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AQ: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -55,\n        -40,\n        -55\n    ],\n    AT: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    ATcaron: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    ATcommaaccent: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AU: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AUacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AUcircumflex: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AUdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AUgrave: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AUhungarumlaut: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AUmacron: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AUogonek: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AUring: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AV: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -145,\n        -95,\n        -105,\n        -135\n    ],\n    AW: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -130,\n        -100,\n        -95,\n        -90\n    ],\n    AY: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AYacute: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AYdieresis: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    Au: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Auacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aucircumflex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Audieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Augrave: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Auhungarumlaut: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aumacron: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Auogonek: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Auring: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Av: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -100,\n        -74,\n        -55,\n        -74\n    ],\n    Aw: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -90,\n        -74,\n        -55,\n        -92\n    ],\n    Ay: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Ayacute: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Aydieresis: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    AacuteC: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AacuteCacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AacuteCcaron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AacuteCcedilla: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AacuteG: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AacuteGbreve: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AacuteGcommaaccent: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AacuteO: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AacuteOacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AacuteOcircumflex: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AacuteOdieresis: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AacuteOgrave: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AacuteOhungarumlaut: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AacuteOmacron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AacuteOslash: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AacuteOtilde: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AacuteQ: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -55,\n        -40,\n        -55\n    ],\n    AacuteT: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AacuteTcaron: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AacuteTcommaaccent: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AacuteU: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AacuteUacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AacuteUcircumflex: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AacuteUdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AacuteUgrave: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AacuteUhungarumlaut: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AacuteUmacron: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AacuteUogonek: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AacuteUring: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AacuteV: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -145,\n        -95,\n        -105,\n        -135\n    ],\n    AacuteW: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -130,\n        -100,\n        -95,\n        -90\n    ],\n    AacuteY: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AacuteYacute: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AacuteYdieresis: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    Aacuteu: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aacuteuacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aacuteucircumflex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aacuteudieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aacuteugrave: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aacuteuhungarumlaut: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aacuteumacron: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aacuteuogonek: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aacuteuring: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aacutev: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -100,\n        -74,\n        -55,\n        -74\n    ],\n    Aacutew: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -90,\n        -74,\n        -55,\n        -92\n    ],\n    Aacutey: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Aacuteyacute: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Aacuteydieresis: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    AbreveC: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AbreveCacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AbreveCcaron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AbreveCcedilla: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AbreveG: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AbreveGbreve: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AbreveGcommaaccent: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AbreveO: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AbreveOacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AbreveOcircumflex: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AbreveOdieresis: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AbreveOgrave: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AbreveOhungarumlaut: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AbreveOmacron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AbreveOslash: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AbreveOtilde: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AbreveQ: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -55,\n        -40,\n        -55\n    ],\n    AbreveT: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AbreveTcaron: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AbreveTcommaaccent: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AbreveU: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AbreveUacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AbreveUcircumflex: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AbreveUdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AbreveUgrave: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AbreveUhungarumlaut: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AbreveUmacron: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AbreveUogonek: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AbreveUring: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AbreveV: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -145,\n        -95,\n        -105,\n        -135\n    ],\n    AbreveW: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -130,\n        -100,\n        -95,\n        -90\n    ],\n    AbreveY: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AbreveYacute: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AbreveYdieresis: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    Abreveu: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Abreveuacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Abreveucircumflex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Abreveudieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Abreveugrave: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Abreveuhungarumlaut: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Abreveumacron: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Abreveuogonek: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Abreveuring: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Abrevev: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -100,\n        -74,\n        -55,\n        -74\n    ],\n    Abrevew: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -90,\n        -74,\n        -55,\n        -92\n    ],\n    Abrevey: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Abreveyacute: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Abreveydieresis: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    AcircumflexC: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AcircumflexCacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AcircumflexCcaron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AcircumflexCcedilla: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AcircumflexG: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AcircumflexGbreve: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AcircumflexGcommaaccent: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AcircumflexO: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AcircumflexOacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AcircumflexOcircumflex: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AcircumflexOdieresis: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AcircumflexOgrave: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AcircumflexOhungarumlaut: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AcircumflexOmacron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AcircumflexOslash: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AcircumflexOtilde: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AcircumflexQ: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -55,\n        -40,\n        -55\n    ],\n    AcircumflexT: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AcircumflexTcaron: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AcircumflexTcommaaccent: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AcircumflexU: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AcircumflexUacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AcircumflexUcircumflex: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AcircumflexUdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AcircumflexUgrave: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AcircumflexUhungarumlaut: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AcircumflexUmacron: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AcircumflexUogonek: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AcircumflexUring: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AcircumflexV: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -145,\n        -95,\n        -105,\n        -135\n    ],\n    AcircumflexW: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -130,\n        -100,\n        -95,\n        -90\n    ],\n    AcircumflexY: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AcircumflexYacute: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AcircumflexYdieresis: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    Acircumflexu: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Acircumflexuacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Acircumflexucircumflex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Acircumflexudieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Acircumflexugrave: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Acircumflexuhungarumlaut: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Acircumflexumacron: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Acircumflexuogonek: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Acircumflexuring: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Acircumflexv: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -100,\n        -74,\n        -55,\n        -74\n    ],\n    Acircumflexw: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -90,\n        -74,\n        -55,\n        -92\n    ],\n    Acircumflexy: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Acircumflexyacute: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Acircumflexydieresis: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    AdieresisC: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AdieresisCacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AdieresisCcaron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AdieresisCcedilla: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AdieresisG: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AdieresisGbreve: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AdieresisGcommaaccent: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AdieresisO: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AdieresisOacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AdieresisOcircumflex: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AdieresisOdieresis: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AdieresisOgrave: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AdieresisOhungarumlaut: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AdieresisOmacron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AdieresisOslash: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AdieresisOtilde: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AdieresisQ: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -55,\n        -40,\n        -55\n    ],\n    AdieresisT: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AdieresisTcaron: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AdieresisTcommaaccent: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AdieresisU: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AdieresisUacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AdieresisUcircumflex: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AdieresisUdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AdieresisUgrave: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AdieresisUhungarumlaut: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AdieresisUmacron: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AdieresisUogonek: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AdieresisUring: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AdieresisV: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -145,\n        -95,\n        -105,\n        -135\n    ],\n    AdieresisW: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -130,\n        -100,\n        -95,\n        -90\n    ],\n    AdieresisY: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AdieresisYacute: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AdieresisYdieresis: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    Adieresisu: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Adieresisuacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Adieresisucircumflex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Adieresisudieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Adieresisugrave: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Adieresisuhungarumlaut: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Adieresisumacron: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Adieresisuogonek: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Adieresisuring: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Adieresisv: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -100,\n        -74,\n        -55,\n        -74\n    ],\n    Adieresisw: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -90,\n        -74,\n        -55,\n        -92\n    ],\n    Adieresisy: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Adieresisyacute: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Adieresisydieresis: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    AgraveC: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AgraveCacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AgraveCcaron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AgraveCcedilla: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AgraveG: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AgraveGbreve: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AgraveGcommaaccent: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AgraveO: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AgraveOacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AgraveOcircumflex: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AgraveOdieresis: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AgraveOgrave: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AgraveOhungarumlaut: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AgraveOmacron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AgraveOslash: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AgraveOtilde: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AgraveQ: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -55,\n        -40,\n        -55\n    ],\n    AgraveT: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AgraveTcaron: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AgraveTcommaaccent: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AgraveU: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AgraveUacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AgraveUcircumflex: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AgraveUdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AgraveUgrave: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AgraveUhungarumlaut: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AgraveUmacron: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AgraveUogonek: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AgraveUring: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AgraveV: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -145,\n        -95,\n        -105,\n        -135\n    ],\n    AgraveW: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -130,\n        -100,\n        -95,\n        -90\n    ],\n    AgraveY: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AgraveYacute: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AgraveYdieresis: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    Agraveu: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Agraveuacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Agraveucircumflex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Agraveudieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Agraveugrave: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Agraveuhungarumlaut: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Agraveumacron: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Agraveuogonek: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Agraveuring: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Agravev: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -100,\n        -74,\n        -55,\n        -74\n    ],\n    Agravew: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -90,\n        -74,\n        -55,\n        -92\n    ],\n    Agravey: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Agraveyacute: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Agraveydieresis: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    AmacronC: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AmacronCacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AmacronCcaron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AmacronCcedilla: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AmacronG: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AmacronGbreve: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AmacronGcommaaccent: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AmacronO: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AmacronOacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AmacronOcircumflex: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AmacronOdieresis: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AmacronOgrave: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AmacronOhungarumlaut: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AmacronOmacron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AmacronOslash: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AmacronOtilde: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AmacronQ: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -55,\n        -40,\n        -55\n    ],\n    AmacronT: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AmacronTcaron: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AmacronTcommaaccent: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AmacronU: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AmacronUacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AmacronUcircumflex: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AmacronUdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AmacronUgrave: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AmacronUhungarumlaut: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AmacronUmacron: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AmacronUogonek: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AmacronUring: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AmacronV: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -145,\n        -95,\n        -105,\n        -135\n    ],\n    AmacronW: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -130,\n        -100,\n        -95,\n        -90\n    ],\n    AmacronY: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AmacronYacute: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AmacronYdieresis: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    Amacronu: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Amacronuacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Amacronucircumflex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Amacronudieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Amacronugrave: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Amacronuhungarumlaut: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Amacronumacron: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Amacronuogonek: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Amacronuring: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Amacronv: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -100,\n        -74,\n        -55,\n        -74\n    ],\n    Amacronw: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -90,\n        -74,\n        -55,\n        -92\n    ],\n    Amacrony: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Amacronyacute: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Amacronydieresis: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    AogonekC: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AogonekCacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AogonekCcaron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AogonekCcedilla: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AogonekG: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AogonekGbreve: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AogonekGcommaaccent: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AogonekO: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AogonekOacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AogonekOcircumflex: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AogonekOdieresis: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AogonekOgrave: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AogonekOhungarumlaut: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AogonekOmacron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AogonekOslash: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AogonekOtilde: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AogonekQ: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -55,\n        -40,\n        -55\n    ],\n    AogonekT: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AogonekTcaron: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AogonekTcommaaccent: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AogonekU: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AogonekUacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AogonekUcircumflex: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AogonekUdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AogonekUgrave: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AogonekUhungarumlaut: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AogonekUmacron: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AogonekUogonek: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AogonekUring: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AogonekV: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -145,\n        -95,\n        -105,\n        -135\n    ],\n    AogonekW: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -130,\n        -100,\n        -95,\n        -90\n    ],\n    AogonekY: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AogonekYacute: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AogonekYdieresis: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    Aogoneku: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aogonekuacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aogonekucircumflex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aogonekudieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aogonekugrave: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aogonekuhungarumlaut: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aogonekumacron: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aogonekuogonek: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aogonekuring: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aogonekv: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -100,\n        -74,\n        -55,\n        -74\n    ],\n    Aogonekw: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -90,\n        -74,\n        -55,\n        -52\n    ],\n    Aogoneky: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -34,\n        -34,\n        -55,\n        -52\n    ],\n    Aogonekyacute: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -34,\n        -34,\n        -55,\n        -52\n    ],\n    Aogonekydieresis: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -34,\n        -34,\n        -55,\n        -52\n    ],\n    AringC: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AringCacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AringCcaron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AringCcedilla: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AringG: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AringGbreve: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AringGcommaaccent: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AringO: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AringOacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AringOcircumflex: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AringOdieresis: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AringOgrave: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AringOhungarumlaut: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AringOmacron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AringOslash: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AringOtilde: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AringQ: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -55,\n        -40,\n        -55\n    ],\n    AringT: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AringTcaron: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AringTcommaaccent: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AringU: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AringUacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AringUcircumflex: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AringUdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AringUgrave: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AringUhungarumlaut: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AringUmacron: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AringUogonek: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AringUring: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AringV: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -145,\n        -95,\n        -105,\n        -135\n    ],\n    AringW: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -130,\n        -100,\n        -95,\n        -90\n    ],\n    AringY: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AringYacute: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AringYdieresis: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    Aringu: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aringuacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aringucircumflex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aringudieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aringugrave: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aringuhungarumlaut: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aringumacron: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aringuogonek: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aringuring: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Aringv: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -100,\n        -74,\n        -55,\n        -74\n    ],\n    Aringw: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -90,\n        -74,\n        -55,\n        -92\n    ],\n    Aringy: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Aringyacute: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Aringydieresis: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    AtildeC: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AtildeCacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AtildeCcaron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AtildeCcedilla: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -55,\n        -65,\n        -30,\n        -40\n    ],\n    AtildeG: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AtildeGbreve: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AtildeGcommaaccent: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -55,\n        -60,\n        -35,\n        -40\n    ],\n    AtildeO: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AtildeOacute: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AtildeOcircumflex: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AtildeOdieresis: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AtildeOgrave: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AtildeOhungarumlaut: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AtildeOmacron: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AtildeOslash: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AtildeOtilde: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -50,\n        -40,\n        -55\n    ],\n    AtildeQ: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -45,\n        -55,\n        -40,\n        -55\n    ],\n    AtildeT: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AtildeTcaron: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AtildeTcommaaccent: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -95,\n        -55,\n        -37,\n        -111\n    ],\n    AtildeU: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AtildeUacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AtildeUcircumflex: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AtildeUdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AtildeUgrave: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AtildeUhungarumlaut: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AtildeUmacron: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AtildeUogonek: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AtildeUring: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -55\n    ],\n    AtildeV: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -145,\n        -95,\n        -105,\n        -135\n    ],\n    AtildeW: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -130,\n        -100,\n        -95,\n        -90\n    ],\n    AtildeY: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AtildeYacute: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    AtildeYdieresis: [\n        -110,\n        -110,\n        -100,\n        -100,\n        -100,\n        -70,\n        -55,\n        -105\n    ],\n    Atildeu: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Atildeuacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Atildeucircumflex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Atildeudieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Atildeugrave: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Atildeuhungarumlaut: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Atildeumacron: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Atildeuogonek: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Atildeuring: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -50,\n        -30,\n        -20\n    ],\n    Atildev: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -100,\n        -74,\n        -55,\n        -74\n    ],\n    Atildew: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -90,\n        -74,\n        -55,\n        -92\n    ],\n    Atildey: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Atildeyacute: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    Atildeydieresis: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -74,\n        -74,\n        -55,\n        -92\n    ],\n    BA: [\n        -30,\n        -30,\n        0,\n        0,\n        -30,\n        -25,\n        -25,\n        -35\n    ],\n    BAacute: [\n        -30,\n        -30,\n        0,\n        0,\n        -30,\n        -25,\n        -25,\n        -35\n    ],\n    BAbreve: [\n        -30,\n        -30,\n        0,\n        0,\n        -30,\n        -25,\n        -25,\n        -35\n    ],\n    BAcircumflex: [\n        -30,\n        -30,\n        0,\n        0,\n        -30,\n        -25,\n        -25,\n        -35\n    ],\n    BAdieresis: [\n        -30,\n        -30,\n        0,\n        0,\n        -30,\n        -25,\n        -25,\n        -35\n    ],\n    BAgrave: [\n        -30,\n        -30,\n        0,\n        0,\n        -30,\n        -25,\n        -25,\n        -35\n    ],\n    BAmacron: [\n        -30,\n        -30,\n        0,\n        0,\n        -30,\n        -25,\n        -25,\n        -35\n    ],\n    BAogonek: [\n        -30,\n        -30,\n        0,\n        0,\n        -30,\n        -25,\n        -25,\n        -35\n    ],\n    BAring: [\n        -30,\n        -30,\n        0,\n        0,\n        -30,\n        -25,\n        -25,\n        -35\n    ],\n    BAtilde: [\n        -30,\n        -30,\n        0,\n        0,\n        -30,\n        -25,\n        -25,\n        -35\n    ],\n    BU: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    BUacute: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    BUcircumflex: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    BUdieresis: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    BUgrave: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    BUhungarumlaut: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    BUmacron: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    BUogonek: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    BUring: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    DA: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DAacute: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DAbreve: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DAcircumflex: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DAdieresis: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DAgrave: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DAmacron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DAogonek: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DAring: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DAtilde: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DV: [\n        -40,\n        -40,\n        -70,\n        -70,\n        -40,\n        -50,\n        -40,\n        -40\n    ],\n    DW: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -30\n    ],\n    DY: [\n        -70,\n        -70,\n        -90,\n        -90,\n        -40,\n        -50,\n        -40,\n        -55\n    ],\n    DYacute: [\n        -70,\n        -70,\n        -90,\n        -90,\n        -40,\n        -50,\n        -40,\n        -55\n    ],\n    DYdieresis: [\n        -70,\n        -70,\n        -90,\n        -90,\n        -40,\n        -50,\n        -40,\n        -55\n    ],\n    Dcomma: [\n        -30,\n        -30,\n        -70,\n        -70\n    ],\n    Dperiod: [\n        -30,\n        -30,\n        -70,\n        -70,\n        -20\n    ],\n    DcaronA: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcaronAacute: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcaronAbreve: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcaronAcircumflex: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcaronAdieresis: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcaronAgrave: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcaronAmacron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcaronAogonek: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcaronAring: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcaronAtilde: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcaronV: [\n        -40,\n        -40,\n        -70,\n        -70,\n        -40,\n        -50,\n        -40,\n        -40\n    ],\n    DcaronW: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -30\n    ],\n    DcaronY: [\n        -70,\n        -70,\n        -90,\n        -90,\n        -40,\n        -50,\n        -40,\n        -55\n    ],\n    DcaronYacute: [\n        -70,\n        -70,\n        -90,\n        -90,\n        -40,\n        -50,\n        -40,\n        -55\n    ],\n    DcaronYdieresis: [\n        -70,\n        -70,\n        -90,\n        -90,\n        -40,\n        -50,\n        -40,\n        -55\n    ],\n    Dcaroncomma: [\n        -30,\n        -30,\n        -70,\n        -70\n    ],\n    Dcaronperiod: [\n        -30,\n        -30,\n        -70,\n        -70,\n        -20\n    ],\n    DcroatA: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcroatAacute: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcroatAbreve: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcroatAcircumflex: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcroatAdieresis: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcroatAgrave: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcroatAmacron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcroatAogonek: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcroatAring: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcroatAtilde: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -35,\n        -25,\n        -35,\n        -40\n    ],\n    DcroatV: [\n        -40,\n        -40,\n        -70,\n        -70,\n        -40,\n        -50,\n        -40,\n        -40\n    ],\n    DcroatW: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -30\n    ],\n    DcroatY: [\n        -70,\n        -70,\n        -90,\n        -90,\n        -40,\n        -50,\n        -40,\n        -55\n    ],\n    DcroatYacute: [\n        -70,\n        -70,\n        -90,\n        -90,\n        -40,\n        -50,\n        -40,\n        -55\n    ],\n    DcroatYdieresis: [\n        -70,\n        -70,\n        -90,\n        -90,\n        -40,\n        -50,\n        -40,\n        -55\n    ],\n    Dcroatcomma: [\n        -30,\n        -30,\n        -70,\n        -70\n    ],\n    Dcroatperiod: [\n        -30,\n        -30,\n        -70,\n        -70,\n        -20\n    ],\n    FA: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -90,\n        -100,\n        -115,\n        -74\n    ],\n    FAacute: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -90,\n        -100,\n        -115,\n        -74\n    ],\n    FAbreve: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -90,\n        -100,\n        -115,\n        -74\n    ],\n    FAcircumflex: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -90,\n        -100,\n        -115,\n        -74\n    ],\n    FAdieresis: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -90,\n        -100,\n        -115,\n        -74\n    ],\n    FAgrave: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -90,\n        -100,\n        -115,\n        -74\n    ],\n    FAmacron: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -90,\n        -100,\n        -115,\n        -74\n    ],\n    FAogonek: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -90,\n        -100,\n        -115,\n        -74\n    ],\n    FAring: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -90,\n        -100,\n        -115,\n        -74\n    ],\n    FAtilde: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -90,\n        -100,\n        -115,\n        -74\n    ],\n    Fa: [\n        -20,\n        -20,\n        -50,\n        -50,\n        -25,\n        -95,\n        -75,\n        -15\n    ],\n    Faacute: [\n        -20,\n        -20,\n        -50,\n        -50,\n        -25,\n        -95,\n        -75,\n        -15\n    ],\n    Fabreve: [\n        -20,\n        -20,\n        -50,\n        -50,\n        -25,\n        -95,\n        -75,\n        -15\n    ],\n    Facircumflex: [\n        -20,\n        -20,\n        -50,\n        -50,\n        -25,\n        -95,\n        -75,\n        -15\n    ],\n    Fadieresis: [\n        -20,\n        -20,\n        -50,\n        -50,\n        -25,\n        -95,\n        -75,\n        -15\n    ],\n    Fagrave: [\n        -20,\n        -20,\n        -50,\n        -50,\n        -25,\n        -95,\n        -75,\n        -15\n    ],\n    Famacron: [\n        -20,\n        -20,\n        -50,\n        -50,\n        -25,\n        -95,\n        -75,\n        -15\n    ],\n    Faogonek: [\n        -20,\n        -20,\n        -50,\n        -50,\n        -25,\n        -95,\n        -75,\n        -15\n    ],\n    Faring: [\n        -20,\n        -20,\n        -50,\n        -50,\n        -25,\n        -95,\n        -75,\n        -15\n    ],\n    Fatilde: [\n        -20,\n        -20,\n        -50,\n        -50,\n        -25,\n        -95,\n        -75,\n        -15\n    ],\n    Fcomma: [\n        -100,\n        -100,\n        -150,\n        -150,\n        -92,\n        -129,\n        -135,\n        -80\n    ],\n    Fperiod: [\n        -100,\n        -100,\n        -150,\n        -150,\n        -110,\n        -129,\n        -135,\n        -80\n    ],\n    JA: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -25,\n        -40,\n        -60\n    ],\n    JAacute: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -25,\n        -40,\n        -60\n    ],\n    JAbreve: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -25,\n        -40,\n        -60\n    ],\n    JAcircumflex: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -25,\n        -40,\n        -60\n    ],\n    JAdieresis: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -25,\n        -40,\n        -60\n    ],\n    JAgrave: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -25,\n        -40,\n        -60\n    ],\n    JAmacron: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -25,\n        -40,\n        -60\n    ],\n    JAogonek: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -25,\n        -40,\n        -60\n    ],\n    JAring: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -25,\n        -40,\n        -60\n    ],\n    JAtilde: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -25,\n        -40,\n        -60\n    ],\n    Jcomma: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        -25\n    ],\n    Jperiod: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -20,\n        -10,\n        -25\n    ],\n    Ju: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Juacute: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Jucircumflex: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Judieresis: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Jugrave: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Juhungarumlaut: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Jumacron: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Juogonek: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Juring: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    KO: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KOacute: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KOcircumflex: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KOdieresis: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KOgrave: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KOhungarumlaut: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KOmacron: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KOslash: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KOtilde: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    Ke: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Keacute: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kecaron: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kecircumflex: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kedieresis: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kedotaccent: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kegrave: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kemacron: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Keogonek: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Ko: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Koacute: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kocircumflex: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kodieresis: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kograve: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kohungarumlaut: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Komacron: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Koslash: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kotilde: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Ku: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kuacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kucircumflex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kudieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kugrave: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kuhungarumlaut: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kumacron: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kuogonek: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kuring: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Ky: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -45,\n        -20,\n        -40,\n        -25\n    ],\n    Kyacute: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -45,\n        -20,\n        -40,\n        -25\n    ],\n    Kydieresis: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -45,\n        -20,\n        -40,\n        -25\n    ],\n    KcommaaccentO: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KcommaaccentOacute: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KcommaaccentOcircumflex: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KcommaaccentOdieresis: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KcommaaccentOgrave: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KcommaaccentOhungarumlaut: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KcommaaccentOmacron: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KcommaaccentOslash: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    KcommaaccentOtilde: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -30\n    ],\n    Kcommaaccente: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kcommaaccenteacute: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kcommaaccentecaron: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kcommaaccentecircumflex: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kcommaaccentedieresis: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kcommaaccentedotaccent: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kcommaaccentegrave: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kcommaaccentemacron: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kcommaaccenteogonek: [\n        -15,\n        -15,\n        -40,\n        -40,\n        -25,\n        -25,\n        -35,\n        -25\n    ],\n    Kcommaaccento: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kcommaaccentoacute: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kcommaaccentocircumflex: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kcommaaccentodieresis: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kcommaaccentograve: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kcommaaccentohungarumlaut: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kcommaaccentomacron: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kcommaaccentoslash: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kcommaaccentotilde: [\n        -35,\n        -35,\n        -40,\n        -40,\n        -25,\n        -25,\n        -40,\n        -35\n    ],\n    Kcommaaccentu: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kcommaaccentuacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kcommaaccentucircumflex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kcommaaccentudieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kcommaaccentugrave: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kcommaaccentuhungarumlaut: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kcommaaccentumacron: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kcommaaccentuogonek: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kcommaaccenturing: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -15,\n        -20,\n        -40,\n        -15\n    ],\n    Kcommaaccenty: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -45,\n        -20,\n        -40,\n        -25\n    ],\n    Kcommaaccentyacute: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -45,\n        -20,\n        -40,\n        -25\n    ],\n    Kcommaaccentydieresis: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -45,\n        -20,\n        -40,\n        -25\n    ],\n    LT: [\n        -90,\n        -90,\n        -110,\n        -110,\n        -92,\n        -18,\n        -20,\n        -92\n    ],\n    LTcaron: [\n        -90,\n        -90,\n        -110,\n        -110,\n        -92,\n        -18,\n        -20,\n        -92\n    ],\n    LTcommaaccent: [\n        -90,\n        -90,\n        -110,\n        -110,\n        -92,\n        -18,\n        -20,\n        -92\n    ],\n    LV: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -92,\n        -37,\n        -55,\n        -100\n    ],\n    LW: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -92,\n        -37,\n        -55,\n        -74\n    ],\n    LY: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -37,\n        -20,\n        -100\n    ],\n    LYacute: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -37,\n        -20,\n        -100\n    ],\n    LYdieresis: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -37,\n        -20,\n        -100\n    ],\n    Lquotedblright: [\n        -140,\n        -140,\n        -140,\n        -140,\n        -20\n    ],\n    Lquoteright: [\n        -140,\n        -140,\n        -160,\n        -160,\n        -110,\n        -55,\n        -37,\n        -92\n    ],\n    Ly: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -55,\n        -37,\n        -30,\n        -55\n    ],\n    Lyacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -55,\n        -37,\n        -30,\n        -55\n    ],\n    Lydieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -55,\n        -37,\n        -30,\n        -55\n    ],\n    LacuteT: [\n        -90,\n        -90,\n        -110,\n        -110,\n        -92,\n        -18,\n        -20,\n        -92\n    ],\n    LacuteTcaron: [\n        -90,\n        -90,\n        -110,\n        -110,\n        -92,\n        -18,\n        -20,\n        -92\n    ],\n    LacuteTcommaaccent: [\n        -90,\n        -90,\n        -110,\n        -110,\n        -92,\n        -18,\n        -20,\n        -92\n    ],\n    LacuteV: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -92,\n        -37,\n        -55,\n        -100\n    ],\n    LacuteW: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -92,\n        -37,\n        -55,\n        -74\n    ],\n    LacuteY: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -37,\n        -20,\n        -100\n    ],\n    LacuteYacute: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -37,\n        -20,\n        -100\n    ],\n    LacuteYdieresis: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -37,\n        -20,\n        -100\n    ],\n    Lacutequotedblright: [\n        -140,\n        -140,\n        -140,\n        -140,\n        -20\n    ],\n    Lacutequoteright: [\n        -140,\n        -140,\n        -160,\n        -160,\n        -110,\n        -55,\n        -37,\n        -92\n    ],\n    Lacutey: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -55,\n        -37,\n        -30,\n        -55\n    ],\n    Lacuteyacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -55,\n        -37,\n        -30,\n        -55\n    ],\n    Lacuteydieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -55,\n        -37,\n        -30,\n        -55\n    ],\n    LcommaaccentT: [\n        -90,\n        -90,\n        -110,\n        -110,\n        -92,\n        -18,\n        -20,\n        -92\n    ],\n    LcommaaccentTcaron: [\n        -90,\n        -90,\n        -110,\n        -110,\n        -92,\n        -18,\n        -20,\n        -92\n    ],\n    LcommaaccentTcommaaccent: [\n        -90,\n        -90,\n        -110,\n        -110,\n        -92,\n        -18,\n        -20,\n        -92\n    ],\n    LcommaaccentV: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -92,\n        -37,\n        -55,\n        -100\n    ],\n    LcommaaccentW: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -92,\n        -37,\n        -55,\n        -74\n    ],\n    LcommaaccentY: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -37,\n        -20,\n        -100\n    ],\n    LcommaaccentYacute: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -37,\n        -20,\n        -100\n    ],\n    LcommaaccentYdieresis: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -37,\n        -20,\n        -100\n    ],\n    Lcommaaccentquotedblright: [\n        -140,\n        -140,\n        -140,\n        -140,\n        -20\n    ],\n    Lcommaaccentquoteright: [\n        -140,\n        -140,\n        -160,\n        -160,\n        -110,\n        -55,\n        -37,\n        -92\n    ],\n    Lcommaaccenty: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -55,\n        -37,\n        -30,\n        -55\n    ],\n    Lcommaaccentyacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -55,\n        -37,\n        -30,\n        -55\n    ],\n    Lcommaaccentydieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -55,\n        -37,\n        -30,\n        -55\n    ],\n    LslashT: [\n        -90,\n        -90,\n        -110,\n        -110,\n        -92,\n        -18,\n        -20,\n        -92\n    ],\n    LslashTcaron: [\n        -90,\n        -90,\n        -110,\n        -110,\n        -92,\n        -18,\n        -20,\n        -92\n    ],\n    LslashTcommaaccent: [\n        -90,\n        -90,\n        -110,\n        -110,\n        -92,\n        -18,\n        -20,\n        -92\n    ],\n    LslashV: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -92,\n        -37,\n        -55,\n        -100\n    ],\n    LslashW: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -92,\n        -37,\n        -55,\n        -74\n    ],\n    LslashY: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -37,\n        -20,\n        -100\n    ],\n    LslashYacute: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -37,\n        -20,\n        -100\n    ],\n    LslashYdieresis: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -37,\n        -20,\n        -100\n    ],\n    Lslashquotedblright: [\n        -140,\n        -140,\n        -140,\n        -140,\n        -20\n    ],\n    Lslashquoteright: [\n        -140,\n        -140,\n        -160,\n        -160,\n        -110,\n        -55,\n        -37,\n        -92\n    ],\n    Lslashy: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -55,\n        -37,\n        -30,\n        -55\n    ],\n    Lslashyacute: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -55,\n        -37,\n        -30,\n        -55\n    ],\n    Lslashydieresis: [\n        -30,\n        -30,\n        -30,\n        -30,\n        -55,\n        -37,\n        -30,\n        -55\n    ],\n    OA: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OAacute: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OAbreve: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OAcircumflex: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OAdieresis: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OAgrave: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OAmacron: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OAogonek: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OAring: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OAtilde: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OT: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OTcaron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OTcommaaccent: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OV: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OW: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -50,\n        -50,\n        -35\n    ],\n    OX: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OY: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OYacute: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OYdieresis: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    Ocomma: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    Operiod: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OacuteA: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OacuteAacute: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OacuteAbreve: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OacuteAcircumflex: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OacuteAdieresis: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OacuteAgrave: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OacuteAmacron: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OacuteAogonek: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OacuteAring: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OacuteAtilde: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OacuteT: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OacuteTcaron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OacuteTcommaaccent: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OacuteV: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OacuteW: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -50,\n        -50,\n        -35\n    ],\n    OacuteX: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OacuteY: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OacuteYacute: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OacuteYdieresis: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    Oacutecomma: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    Oacuteperiod: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OcircumflexA: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OcircumflexAacute: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OcircumflexAbreve: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OcircumflexAcircumflex: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OcircumflexAdieresis: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OcircumflexAgrave: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OcircumflexAmacron: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OcircumflexAogonek: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OcircumflexAring: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OcircumflexAtilde: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OcircumflexT: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OcircumflexTcaron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OcircumflexTcommaaccent: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OcircumflexV: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OcircumflexW: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -50,\n        -50,\n        -35\n    ],\n    OcircumflexX: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OcircumflexY: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OcircumflexYacute: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OcircumflexYdieresis: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    Ocircumflexcomma: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    Ocircumflexperiod: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OdieresisA: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OdieresisAacute: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OdieresisAbreve: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OdieresisAcircumflex: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OdieresisAdieresis: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OdieresisAgrave: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OdieresisAmacron: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OdieresisAogonek: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OdieresisAring: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OdieresisAtilde: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OdieresisT: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OdieresisTcaron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OdieresisTcommaaccent: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OdieresisV: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OdieresisW: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -50,\n        -50,\n        -35\n    ],\n    OdieresisX: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OdieresisY: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OdieresisYacute: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OdieresisYdieresis: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    Odieresiscomma: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    Odieresisperiod: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OgraveA: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OgraveAacute: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OgraveAbreve: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OgraveAcircumflex: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OgraveAdieresis: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OgraveAgrave: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OgraveAmacron: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OgraveAogonek: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OgraveAring: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OgraveAtilde: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OgraveT: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OgraveTcaron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OgraveTcommaaccent: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OgraveV: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OgraveW: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -50,\n        -50,\n        -35\n    ],\n    OgraveX: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OgraveY: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OgraveYacute: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OgraveYdieresis: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    Ogravecomma: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    Ograveperiod: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OhungarumlautA: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OhungarumlautAacute: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OhungarumlautAbreve: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OhungarumlautAcircumflex: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OhungarumlautAdieresis: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OhungarumlautAgrave: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OhungarumlautAmacron: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OhungarumlautAogonek: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OhungarumlautAring: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OhungarumlautAtilde: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OhungarumlautT: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OhungarumlautTcaron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OhungarumlautTcommaaccent: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OhungarumlautV: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OhungarumlautW: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -50,\n        -50,\n        -35\n    ],\n    OhungarumlautX: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OhungarumlautY: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OhungarumlautYacute: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OhungarumlautYdieresis: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    Ohungarumlautcomma: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    Ohungarumlautperiod: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OmacronA: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OmacronAacute: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OmacronAbreve: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OmacronAcircumflex: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OmacronAdieresis: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OmacronAgrave: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OmacronAmacron: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OmacronAogonek: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OmacronAring: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OmacronAtilde: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OmacronT: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OmacronTcaron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OmacronTcommaaccent: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OmacronV: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OmacronW: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -50,\n        -50,\n        -35\n    ],\n    OmacronX: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OmacronY: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OmacronYacute: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OmacronYdieresis: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    Omacroncomma: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    Omacronperiod: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OslashA: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OslashAacute: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OslashAbreve: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OslashAcircumflex: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OslashAdieresis: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OslashAgrave: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OslashAmacron: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OslashAogonek: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OslashAring: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OslashAtilde: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OslashT: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OslashTcaron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OslashTcommaaccent: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OslashV: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OslashW: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -50,\n        -50,\n        -35\n    ],\n    OslashX: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OslashY: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OslashYacute: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OslashYdieresis: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    Oslashcomma: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    Oslashperiod: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OtildeA: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OtildeAacute: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OtildeAbreve: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OtildeAcircumflex: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OtildeAdieresis: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OtildeAgrave: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OtildeAmacron: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OtildeAogonek: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OtildeAring: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OtildeAtilde: [\n        -50,\n        -50,\n        -20,\n        -20,\n        -40,\n        -40,\n        -55,\n        -35\n    ],\n    OtildeT: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OtildeTcaron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OtildeTcommaaccent: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OtildeV: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OtildeW: [\n        -50,\n        -50,\n        -30,\n        -30,\n        -50,\n        -50,\n        -50,\n        -35\n    ],\n    OtildeX: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    OtildeY: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OtildeYacute: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    OtildeYdieresis: [\n        -70,\n        -70,\n        -70,\n        -70,\n        -50,\n        -50,\n        -50,\n        -50\n    ],\n    Otildecomma: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    Otildeperiod: [\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    PA: [\n        -100,\n        -100,\n        -120,\n        -120,\n        -74,\n        -85,\n        -90,\n        -92\n    ],\n    PAacute: [\n        -100,\n        -100,\n        -120,\n        -120,\n        -74,\n        -85,\n        -90,\n        -92\n    ],\n    PAbreve: [\n        -100,\n        -100,\n        -120,\n        -120,\n        -74,\n        -85,\n        -90,\n        -92\n    ],\n    PAcircumflex: [\n        -100,\n        -100,\n        -120,\n        -120,\n        -74,\n        -85,\n        -90,\n        -92\n    ],\n    PAdieresis: [\n        -100,\n        -100,\n        -120,\n        -120,\n        -74,\n        -85,\n        -90,\n        -92\n    ],\n    PAgrave: [\n        -100,\n        -100,\n        -120,\n        -120,\n        -74,\n        -85,\n        -90,\n        -92\n    ],\n    PAmacron: [\n        -100,\n        -100,\n        -120,\n        -120,\n        -74,\n        -85,\n        -90,\n        -92\n    ],\n    PAogonek: [\n        -100,\n        -100,\n        -120,\n        -120,\n        -74,\n        -85,\n        -90,\n        -92\n    ],\n    PAring: [\n        -100,\n        -100,\n        -120,\n        -120,\n        -74,\n        -85,\n        -90,\n        -92\n    ],\n    PAtilde: [\n        -100,\n        -100,\n        -120,\n        -120,\n        -74,\n        -85,\n        -90,\n        -92\n    ],\n    Pa: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -10,\n        -40,\n        -80,\n        -15\n    ],\n    Paacute: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -10,\n        -40,\n        -80,\n        -15\n    ],\n    Pabreve: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -10,\n        -40,\n        -80,\n        -15\n    ],\n    Pacircumflex: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -10,\n        -40,\n        -80,\n        -15\n    ],\n    Padieresis: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -10,\n        -40,\n        -80,\n        -15\n    ],\n    Pagrave: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -10,\n        -40,\n        -80,\n        -15\n    ],\n    Pamacron: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -10,\n        -40,\n        -80,\n        -15\n    ],\n    Paogonek: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -10,\n        -40,\n        -80,\n        -15\n    ],\n    Paring: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -10,\n        -40,\n        -80,\n        -15\n    ],\n    Patilde: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -10,\n        -40,\n        -80,\n        -15\n    ],\n    Pcomma: [\n        -120,\n        -120,\n        -180,\n        -180,\n        -92,\n        -129,\n        -135,\n        -111\n    ],\n    Pe: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -20,\n        -50,\n        -80\n    ],\n    Peacute: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -20,\n        -50,\n        -80\n    ],\n    Pecaron: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -20,\n        -50,\n        -80\n    ],\n    Pecircumflex: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -20,\n        -50,\n        -80\n    ],\n    Pedieresis: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -20,\n        -50,\n        -80\n    ],\n    Pedotaccent: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -20,\n        -50,\n        -80\n    ],\n    Pegrave: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -20,\n        -50,\n        -80\n    ],\n    Pemacron: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -20,\n        -50,\n        -80\n    ],\n    Peogonek: [\n        -30,\n        -30,\n        -50,\n        -50,\n        -20,\n        -50,\n        -80\n    ],\n    Po: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -20,\n        -55,\n        -80\n    ],\n    Poacute: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -20,\n        -55,\n        -80\n    ],\n    Pocircumflex: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -20,\n        -55,\n        -80\n    ],\n    Podieresis: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -20,\n        -55,\n        -80\n    ],\n    Pograve: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -20,\n        -55,\n        -80\n    ],\n    Pohungarumlaut: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -20,\n        -55,\n        -80\n    ],\n    Pomacron: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -20,\n        -55,\n        -80\n    ],\n    Poslash: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -20,\n        -55,\n        -80\n    ],\n    Potilde: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -20,\n        -55,\n        -80\n    ],\n    Pperiod: [\n        -120,\n        -120,\n        -180,\n        -180,\n        -110,\n        -129,\n        -135,\n        -111\n    ],\n    QU: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    QUacute: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    QUcircumflex: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    QUdieresis: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    QUgrave: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    QUhungarumlaut: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    QUmacron: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    QUogonek: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    QUring: [\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    Qcomma: [\n        20,\n        20\n    ],\n    Qperiod: [\n        20,\n        20,\n        0,\n        0,\n        -20\n    ],\n    RO: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    ROacute: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    ROcircumflex: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    ROdieresis: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    ROgrave: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    ROhungarumlaut: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    ROmacron: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    ROslash: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    ROtilde: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RT: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -40,\n        -30,\n        0,\n        -60\n    ],\n    RTcaron: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -40,\n        -30,\n        0,\n        -60\n    ],\n    RTcommaaccent: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -40,\n        -30,\n        0,\n        -60\n    ],\n    RU: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RUacute: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RUcircumflex: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RUdieresis: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RUgrave: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RUhungarumlaut: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RUmacron: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RUogonek: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RUring: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RV: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -55,\n        -18,\n        -18,\n        -80\n    ],\n    RW: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -35,\n        -18,\n        -18,\n        -55\n    ],\n    RY: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -35,\n        -18,\n        -18,\n        -65\n    ],\n    RYacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -35,\n        -18,\n        -18,\n        -65\n    ],\n    RYdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -35,\n        -18,\n        -18,\n        -65\n    ],\n    RacuteO: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteOacute: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteOcircumflex: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteOdieresis: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteOgrave: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteOhungarumlaut: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteOmacron: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteOslash: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteOtilde: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteT: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -40,\n        -30,\n        0,\n        -60\n    ],\n    RacuteTcaron: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -40,\n        -30,\n        0,\n        -60\n    ],\n    RacuteTcommaaccent: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -40,\n        -30,\n        0,\n        -60\n    ],\n    RacuteU: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteUacute: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteUcircumflex: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteUdieresis: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteUgrave: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteUhungarumlaut: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteUmacron: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteUogonek: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteUring: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RacuteV: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -55,\n        -18,\n        -18,\n        -80\n    ],\n    RacuteW: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -35,\n        -18,\n        -18,\n        -55\n    ],\n    RacuteY: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -35,\n        -18,\n        -18,\n        -65\n    ],\n    RacuteYacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -35,\n        -18,\n        -18,\n        -65\n    ],\n    RacuteYdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -35,\n        -18,\n        -18,\n        -65\n    ],\n    RcaronO: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronOacute: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronOcircumflex: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronOdieresis: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronOgrave: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronOhungarumlaut: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronOmacron: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronOslash: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronOtilde: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronT: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -40,\n        -30,\n        0,\n        -60\n    ],\n    RcaronTcaron: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -40,\n        -30,\n        0,\n        -60\n    ],\n    RcaronTcommaaccent: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -40,\n        -30,\n        0,\n        -60\n    ],\n    RcaronU: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronUacute: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronUcircumflex: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronUdieresis: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronUgrave: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronUhungarumlaut: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronUmacron: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronUogonek: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronUring: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcaronV: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -55,\n        -18,\n        -18,\n        -80\n    ],\n    RcaronW: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -35,\n        -18,\n        -18,\n        -55\n    ],\n    RcaronY: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -35,\n        -18,\n        -18,\n        -65\n    ],\n    RcaronYacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -35,\n        -18,\n        -18,\n        -65\n    ],\n    RcaronYdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -35,\n        -18,\n        -18,\n        -65\n    ],\n    RcommaaccentO: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentOacute: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentOcircumflex: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentOdieresis: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentOgrave: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentOhungarumlaut: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentOmacron: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentOslash: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentOtilde: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentT: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -40,\n        -30,\n        0,\n        -60\n    ],\n    RcommaaccentTcaron: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -40,\n        -30,\n        0,\n        -60\n    ],\n    RcommaaccentTcommaaccent: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -40,\n        -30,\n        0,\n        -60\n    ],\n    RcommaaccentU: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentUacute: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentUcircumflex: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentUdieresis: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentUgrave: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentUhungarumlaut: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentUmacron: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentUogonek: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentUring: [\n        -20,\n        -20,\n        -40,\n        -40,\n        -30,\n        -40,\n        -40,\n        -40\n    ],\n    RcommaaccentV: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -55,\n        -18,\n        -18,\n        -80\n    ],\n    RcommaaccentW: [\n        -40,\n        -40,\n        -30,\n        -30,\n        -35,\n        -18,\n        -18,\n        -55\n    ],\n    RcommaaccentY: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -35,\n        -18,\n        -18,\n        -65\n    ],\n    RcommaaccentYacute: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -35,\n        -18,\n        -18,\n        -65\n    ],\n    RcommaaccentYdieresis: [\n        -50,\n        -50,\n        -50,\n        -50,\n        -35,\n        -18,\n        -18,\n        -65\n    ],\n    TA: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TAacute: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TAbreve: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TAcircumflex: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TAdieresis: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TAgrave: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TAmacron: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TAogonek: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TAring: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TAtilde: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TO: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TOacute: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TOcircumflex: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TOdieresis: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TOgrave: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TOhungarumlaut: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TOmacron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TOslash: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TOtilde: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    Ta: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -80\n    ],\n    Taacute: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -80\n    ],\n    Tabreve: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -52,\n        -92,\n        -92,\n        -80\n    ],\n    Tacircumflex: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -52,\n        -92,\n        -92,\n        -80\n    ],\n    Tadieresis: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -52,\n        -92,\n        -92,\n        -40\n    ],\n    Tagrave: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -52,\n        -92,\n        -92,\n        -40\n    ],\n    Tamacron: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -52,\n        -92,\n        -92,\n        -40\n    ],\n    Taogonek: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -80\n    ],\n    Taring: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -80\n    ],\n    Tatilde: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -52,\n        -92,\n        -92,\n        -40\n    ],\n    Tcolon: [\n        -40,\n        -40,\n        -20,\n        -20,\n        -74,\n        -74,\n        -55,\n        -50\n    ],\n    Tcomma: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -74,\n        -92,\n        -74,\n        -74\n    ],\n    Te: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Teacute: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Tecaron: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Tecircumflex: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -52,\n        -70\n    ],\n    Tedieresis: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -52,\n        -52,\n        -52,\n        -30\n    ],\n    Tedotaccent: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Tegrave: [\n        -60,\n        -60,\n        -60,\n        -60,\n        -52,\n        -52,\n        -52,\n        -70\n    ],\n    Temacron: [\n        -60,\n        -60,\n        -60,\n        -60,\n        -52,\n        -52,\n        -52,\n        -30\n    ],\n    Teogonek: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Thyphen: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -92,\n        -74,\n        -92\n    ],\n    To: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Toacute: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tocircumflex: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Todieresis: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tograve: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tohungarumlaut: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tomacron: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Toslash: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Totilde: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tperiod: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -90,\n        -92,\n        -74,\n        -74\n    ],\n    Tr: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -74,\n        -37,\n        -55,\n        -35\n    ],\n    Tracute: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -74,\n        -37,\n        -55,\n        -35\n    ],\n    Trcommaaccent: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -74,\n        -37,\n        -55,\n        -35\n    ],\n    Tsemicolon: [\n        -40,\n        -40,\n        -20,\n        -20,\n        -74,\n        -74,\n        -65,\n        -55\n    ],\n    Tu: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tuacute: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tucircumflex: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tudieresis: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tugrave: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tuhungarumlaut: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tumacron: [\n        -90,\n        -90,\n        -60,\n        -60,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tuogonek: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Turing: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tw: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -74,\n        -37,\n        -74,\n        -80\n    ],\n    Ty: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -34,\n        -37,\n        -74,\n        -80\n    ],\n    Tyacute: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -34,\n        -37,\n        -74,\n        -80\n    ],\n    Tydieresis: [\n        -60,\n        -60,\n        -60,\n        -60,\n        -34,\n        -37,\n        -34,\n        -80\n    ],\n    TcaronA: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcaronAacute: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcaronAbreve: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcaronAcircumflex: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcaronAdieresis: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcaronAgrave: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcaronAmacron: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcaronAogonek: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcaronAring: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcaronAtilde: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcaronO: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcaronOacute: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcaronOcircumflex: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcaronOdieresis: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcaronOgrave: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcaronOhungarumlaut: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcaronOmacron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcaronOslash: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcaronOtilde: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    Tcarona: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -80\n    ],\n    Tcaronaacute: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -80\n    ],\n    Tcaronabreve: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -52,\n        -92,\n        -92,\n        -80\n    ],\n    Tcaronacircumflex: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -52,\n        -92,\n        -92,\n        -80\n    ],\n    Tcaronadieresis: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -52,\n        -92,\n        -92,\n        -40\n    ],\n    Tcaronagrave: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -52,\n        -92,\n        -92,\n        -40\n    ],\n    Tcaronamacron: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -52,\n        -92,\n        -92,\n        -40\n    ],\n    Tcaronaogonek: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -80\n    ],\n    Tcaronaring: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -80\n    ],\n    Tcaronatilde: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -52,\n        -92,\n        -92,\n        -40\n    ],\n    Tcaroncolon: [\n        -40,\n        -40,\n        -20,\n        -20,\n        -74,\n        -74,\n        -55,\n        -50\n    ],\n    Tcaroncomma: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -74,\n        -92,\n        -74,\n        -74\n    ],\n    Tcarone: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Tcaroneacute: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Tcaronecaron: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Tcaronecircumflex: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -52,\n        -30\n    ],\n    Tcaronedieresis: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -52,\n        -52,\n        -52,\n        -30\n    ],\n    Tcaronedotaccent: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Tcaronegrave: [\n        -60,\n        -60,\n        -60,\n        -60,\n        -52,\n        -52,\n        -52,\n        -70\n    ],\n    Tcaronemacron: [\n        -60,\n        -60,\n        -60,\n        -60,\n        -52,\n        -52,\n        -52,\n        -30\n    ],\n    Tcaroneogonek: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Tcaronhyphen: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -92,\n        -74,\n        -92\n    ],\n    Tcarono: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcaronoacute: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcaronocircumflex: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcaronodieresis: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcaronograve: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcaronohungarumlaut: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcaronomacron: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcaronoslash: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcaronotilde: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcaronperiod: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -90,\n        -92,\n        -74,\n        -74\n    ],\n    Tcaronr: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -74,\n        -37,\n        -55,\n        -35\n    ],\n    Tcaronracute: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -74,\n        -37,\n        -55,\n        -35\n    ],\n    Tcaronrcommaaccent: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -74,\n        -37,\n        -55,\n        -35\n    ],\n    Tcaronsemicolon: [\n        -40,\n        -40,\n        -20,\n        -20,\n        -74,\n        -74,\n        -65,\n        -55\n    ],\n    Tcaronu: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcaronuacute: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcaronucircumflex: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcaronudieresis: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcaronugrave: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcaronuhungarumlaut: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcaronumacron: [\n        -90,\n        -90,\n        -60,\n        -60,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcaronuogonek: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcaronuring: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcaronw: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -74,\n        -37,\n        -74,\n        -80\n    ],\n    Tcarony: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -34,\n        -37,\n        -74,\n        -80\n    ],\n    Tcaronyacute: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -34,\n        -37,\n        -74,\n        -80\n    ],\n    Tcaronydieresis: [\n        -60,\n        -60,\n        -60,\n        -60,\n        -34,\n        -37,\n        -34,\n        -80\n    ],\n    TcommaaccentA: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcommaaccentAacute: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcommaaccentAbreve: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcommaaccentAcircumflex: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcommaaccentAdieresis: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcommaaccentAgrave: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcommaaccentAmacron: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcommaaccentAogonek: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcommaaccentAring: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcommaaccentAtilde: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -90,\n        -55,\n        -50,\n        -93\n    ],\n    TcommaaccentO: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcommaaccentOacute: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcommaaccentOcircumflex: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcommaaccentOdieresis: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcommaaccentOgrave: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcommaaccentOhungarumlaut: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcommaaccentOmacron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcommaaccentOslash: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    TcommaaccentOtilde: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -18,\n        -18,\n        -18,\n        -18\n    ],\n    Tcommaaccenta: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -80\n    ],\n    Tcommaaccentaacute: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -80\n    ],\n    Tcommaaccentabreve: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -52,\n        -92,\n        -92,\n        -80\n    ],\n    Tcommaaccentacircumflex: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -52,\n        -92,\n        -92,\n        -80\n    ],\n    Tcommaaccentadieresis: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -52,\n        -92,\n        -92,\n        -40\n    ],\n    Tcommaaccentagrave: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -52,\n        -92,\n        -92,\n        -40\n    ],\n    Tcommaaccentamacron: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -52,\n        -92,\n        -92,\n        -40\n    ],\n    Tcommaaccentaogonek: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -80\n    ],\n    Tcommaaccentaring: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -80\n    ],\n    Tcommaaccentatilde: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -52,\n        -92,\n        -92,\n        -40\n    ],\n    Tcommaaccentcolon: [\n        -40,\n        -40,\n        -20,\n        -20,\n        -74,\n        -74,\n        -55,\n        -50\n    ],\n    Tcommaaccentcomma: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -74,\n        -92,\n        -74,\n        -74\n    ],\n    Tcommaaccente: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Tcommaaccenteacute: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Tcommaaccentecaron: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Tcommaaccentecircumflex: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -52,\n        -30\n    ],\n    Tcommaaccentedieresis: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -52,\n        -52,\n        -52,\n        -30\n    ],\n    Tcommaaccentedotaccent: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Tcommaaccentegrave: [\n        -60,\n        -60,\n        -60,\n        -60,\n        -52,\n        -52,\n        -52,\n        -30\n    ],\n    Tcommaaccentemacron: [\n        -60,\n        -60,\n        -60,\n        -60,\n        -52,\n        -52,\n        -52,\n        -70\n    ],\n    Tcommaaccenteogonek: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -92,\n        -92,\n        -92,\n        -70\n    ],\n    Tcommaaccenthyphen: [\n        -120,\n        -120,\n        -140,\n        -140,\n        -92,\n        -92,\n        -74,\n        -92\n    ],\n    Tcommaaccento: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcommaaccentoacute: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcommaaccentocircumflex: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcommaaccentodieresis: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcommaaccentograve: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcommaaccentohungarumlaut: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcommaaccentomacron: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcommaaccentoslash: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcommaaccentotilde: [\n        -80,\n        -80,\n        -60,\n        -60,\n        -92,\n        -95,\n        -92,\n        -80\n    ],\n    Tcommaaccentperiod: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -90,\n        -92,\n        -74,\n        -74\n    ],\n    Tcommaaccentr: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -74,\n        -37,\n        -55,\n        -35\n    ],\n    Tcommaaccentracute: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -74,\n        -37,\n        -55,\n        -35\n    ],\n    Tcommaaccentrcommaaccent: [\n        -80,\n        -80,\n        -120,\n        -120,\n        -74,\n        -37,\n        -55,\n        -35\n    ],\n    Tcommaaccentsemicolon: [\n        -40,\n        -40,\n        -20,\n        -20,\n        -74,\n        -74,\n        -65,\n        -55\n    ],\n    Tcommaaccentu: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcommaaccentuacute: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcommaaccentucircumflex: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcommaaccentudieresis: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcommaaccentugrave: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcommaaccentuhungarumlaut: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcommaaccentumacron: [\n        -90,\n        -90,\n        -60,\n        -60,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcommaaccentuogonek: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcommaaccenturing: [\n        -90,\n        -90,\n        -120,\n        -120,\n        -92,\n        -37,\n        -55,\n        -45\n    ],\n    Tcommaaccentw: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -74,\n        -37,\n        -74,\n        -80\n    ],\n    Tcommaaccenty: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -34,\n        -37,\n        -74,\n        -80\n    ],\n    Tcommaaccentyacute: [\n        -60,\n        -60,\n        -120,\n        -120,\n        -34,\n        -37,\n        -74,\n        -80\n    ],\n    Tcommaaccentydieresis: [\n        -60,\n        -60,\n        -60,\n        -60,\n        -34,\n        -37,\n        -34,\n        -80\n    ],\n    UA: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UAacute: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UAbreve: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UAcircumflex: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UAdieresis: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UAgrave: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UAmacron: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UAogonek: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UAring: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UAtilde: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    Ucomma: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    Uperiod: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    UacuteA: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UacuteAacute: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UacuteAbreve: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UacuteAcircumflex: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UacuteAdieresis: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UacuteAgrave: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UacuteAmacron: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UacuteAogonek: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UacuteAring: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UacuteAtilde: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    Uacutecomma: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    Uacuteperiod: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    UcircumflexA: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UcircumflexAacute: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UcircumflexAbreve: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UcircumflexAcircumflex: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UcircumflexAdieresis: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UcircumflexAgrave: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UcircumflexAmacron: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UcircumflexAogonek: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UcircumflexAring: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UcircumflexAtilde: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    Ucircumflexcomma: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    Ucircumflexperiod: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    UdieresisA: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UdieresisAacute: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UdieresisAbreve: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UdieresisAcircumflex: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UdieresisAdieresis: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UdieresisAgrave: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UdieresisAmacron: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UdieresisAogonek: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UdieresisAring: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UdieresisAtilde: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    Udieresiscomma: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    Udieresisperiod: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    UgraveA: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UgraveAacute: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UgraveAbreve: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UgraveAcircumflex: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UgraveAdieresis: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UgraveAgrave: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UgraveAmacron: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UgraveAogonek: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UgraveAring: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UgraveAtilde: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    Ugravecomma: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    Ugraveperiod: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    UhungarumlautA: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UhungarumlautAacute: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UhungarumlautAbreve: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UhungarumlautAcircumflex: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UhungarumlautAdieresis: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UhungarumlautAgrave: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UhungarumlautAmacron: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UhungarumlautAogonek: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UhungarumlautAring: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UhungarumlautAtilde: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    Uhungarumlautcomma: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    Uhungarumlautperiod: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    UmacronA: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UmacronAacute: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UmacronAbreve: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UmacronAcircumflex: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UmacronAdieresis: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UmacronAgrave: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UmacronAmacron: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UmacronAogonek: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UmacronAring: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UmacronAtilde: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    Umacroncomma: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    Umacronperiod: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    UogonekA: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UogonekAacute: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UogonekAbreve: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UogonekAcircumflex: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UogonekAdieresis: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UogonekAgrave: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UogonekAmacron: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UogonekAogonek: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UogonekAring: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UogonekAtilde: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    Uogonekcomma: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    Uogonekperiod: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    UringA: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UringAacute: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UringAbreve: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UringAcircumflex: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UringAdieresis: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UringAgrave: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UringAmacron: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UringAogonek: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UringAring: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    UringAtilde: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -60,\n        -45,\n        -40,\n        -40\n    ],\n    Uringcomma: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    Uringperiod: [\n        -30,\n        -30,\n        -40,\n        -40,\n        -50,\n        0,\n        -25\n    ],\n    VA: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -135,\n        -85,\n        -60,\n        -135\n    ],\n    VAacute: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -135,\n        -85,\n        -60,\n        -135\n    ],\n    VAbreve: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -135,\n        -85,\n        -60,\n        -135\n    ],\n    VAcircumflex: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -135,\n        -85,\n        -60,\n        -135\n    ],\n    VAdieresis: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -135,\n        -85,\n        -60,\n        -135\n    ],\n    VAgrave: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -135,\n        -85,\n        -60,\n        -135\n    ],\n    VAmacron: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -135,\n        -85,\n        -60,\n        -135\n    ],\n    VAogonek: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -135,\n        -85,\n        -60,\n        -135\n    ],\n    VAring: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -135,\n        -85,\n        -60,\n        -135\n    ],\n    VAtilde: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -135,\n        -85,\n        -60,\n        -135\n    ],\n    VG: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -30,\n        -10,\n        0,\n        -15\n    ],\n    VGbreve: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -30,\n        -10,\n        0,\n        -15\n    ],\n    VGcommaaccent: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -30,\n        -10,\n        0,\n        -15\n    ],\n    VO: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -45,\n        -30,\n        -30,\n        -40\n    ],\n    VOacute: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -45,\n        -30,\n        -30,\n        -40\n    ],\n    VOcircumflex: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -45,\n        -30,\n        -30,\n        -40\n    ],\n    VOdieresis: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -45,\n        -30,\n        -30,\n        -40\n    ],\n    VOgrave: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -45,\n        -30,\n        -30,\n        -40\n    ],\n    VOhungarumlaut: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -45,\n        -30,\n        -30,\n        -40\n    ],\n    VOmacron: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -45,\n        -30,\n        -30,\n        -40\n    ],\n    VOslash: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -45,\n        -30,\n        -30,\n        -40\n    ],\n    VOtilde: [\n        -50,\n        -50,\n        -40,\n        -40,\n        -45,\n        -30,\n        -30,\n        -40\n    ],\n    Va: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -111,\n        -111,\n        -111\n    ],\n    Vaacute: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -111,\n        -111,\n        -111\n    ],\n    Vabreve: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -111,\n        -111,\n        -111\n    ],\n    Vacircumflex: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -111,\n        -111,\n        -71\n    ],\n    Vadieresis: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -111,\n        -111,\n        -71\n    ],\n    Vagrave: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -111,\n        -111,\n        -71\n    ],\n    Vamacron: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -111,\n        -111,\n        -71\n    ],\n    Vaogonek: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -111,\n        -111,\n        -111\n    ],\n    Varing: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -111,\n        -111,\n        -111\n    ],\n    Vatilde: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -111,\n        -111,\n        -71\n    ],\n    Vcolon: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -92,\n        -74,\n        -65,\n        -74\n    ],\n    Vcomma: [\n        -120,\n        -120,\n        -125,\n        -125,\n        -129,\n        -129,\n        -129,\n        -129\n    ],\n    Ve: [\n        -50,\n        -50,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -111\n    ],\n    Veacute: [\n        -50,\n        -50,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -111\n    ],\n    Vecaron: [\n        -50,\n        -50,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -71\n    ],\n    Vecircumflex: [\n        -50,\n        -50,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -71\n    ],\n    Vedieresis: [\n        -50,\n        -50,\n        -80,\n        -80,\n        -100,\n        -71,\n        -71,\n        -71\n    ],\n    Vedotaccent: [\n        -50,\n        -50,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -111\n    ],\n    Vegrave: [\n        -50,\n        -50,\n        -80,\n        -80,\n        -100,\n        -71,\n        -71,\n        -71\n    ],\n    Vemacron: [\n        -50,\n        -50,\n        -80,\n        -80,\n        -100,\n        -71,\n        -71,\n        -71\n    ],\n    Veogonek: [\n        -50,\n        -50,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -111\n    ],\n    Vhyphen: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -74,\n        -70,\n        -55,\n        -100\n    ],\n    Vo: [\n        -90,\n        -90,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -129\n    ],\n    Voacute: [\n        -90,\n        -90,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -129\n    ],\n    Vocircumflex: [\n        -90,\n        -90,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -129\n    ],\n    Vodieresis: [\n        -90,\n        -90,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -89\n    ],\n    Vograve: [\n        -90,\n        -90,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -89\n    ],\n    Vohungarumlaut: [\n        -90,\n        -90,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -129\n    ],\n    Vomacron: [\n        -90,\n        -90,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -89\n    ],\n    Voslash: [\n        -90,\n        -90,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -129\n    ],\n    Votilde: [\n        -90,\n        -90,\n        -80,\n        -80,\n        -100,\n        -111,\n        -111,\n        -89\n    ],\n    Vperiod: [\n        -120,\n        -120,\n        -125,\n        -125,\n        -145,\n        -129,\n        -129,\n        -129\n    ],\n    Vsemicolon: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -92,\n        -74,\n        -74,\n        -74\n    ],\n    Vu: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -55,\n        -74,\n        -75\n    ],\n    Vuacute: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -55,\n        -74,\n        -75\n    ],\n    Vucircumflex: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -55,\n        -74,\n        -75\n    ],\n    Vudieresis: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -55,\n        -74,\n        -75\n    ],\n    Vugrave: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -55,\n        -74,\n        -75\n    ],\n    Vuhungarumlaut: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -55,\n        -74,\n        -75\n    ],\n    Vumacron: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -55,\n        -74,\n        -75\n    ],\n    Vuogonek: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -55,\n        -74,\n        -75\n    ],\n    Vuring: [\n        -60,\n        -60,\n        -70,\n        -70,\n        -92,\n        -55,\n        -74,\n        -75\n    ],\n    WA: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -120,\n        -74,\n        -60,\n        -120\n    ],\n    WAacute: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -120,\n        -74,\n        -60,\n        -120\n    ],\n    WAbreve: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -120,\n        -74,\n        -60,\n        -120\n    ],\n    WAcircumflex: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -120,\n        -74,\n        -60,\n        -120\n    ],\n    WAdieresis: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -120,\n        -74,\n        -60,\n        -120\n    ],\n    WAgrave: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -120,\n        -74,\n        -60,\n        -120\n    ],\n    WAmacron: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -120,\n        -74,\n        -60,\n        -120\n    ],\n    WAogonek: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -120,\n        -74,\n        -60,\n        -120\n    ],\n    WAring: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -120,\n        -74,\n        -60,\n        -120\n    ],\n    WAtilde: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -120,\n        -74,\n        -60,\n        -120\n    ],\n    WO: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -10,\n        -15,\n        -25,\n        -10\n    ],\n    WOacute: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -10,\n        -15,\n        -25,\n        -10\n    ],\n    WOcircumflex: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -10,\n        -15,\n        -25,\n        -10\n    ],\n    WOdieresis: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -10,\n        -15,\n        -25,\n        -10\n    ],\n    WOgrave: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -10,\n        -15,\n        -25,\n        -10\n    ],\n    WOhungarumlaut: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -10,\n        -15,\n        -25,\n        -10\n    ],\n    WOmacron: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -10,\n        -15,\n        -25,\n        -10\n    ],\n    WOslash: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -10,\n        -15,\n        -25,\n        -10\n    ],\n    WOtilde: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -10,\n        -15,\n        -25,\n        -10\n    ],\n    Wa: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -65,\n        -85,\n        -92,\n        -80\n    ],\n    Waacute: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -65,\n        -85,\n        -92,\n        -80\n    ],\n    Wabreve: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -65,\n        -85,\n        -92,\n        -80\n    ],\n    Wacircumflex: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -65,\n        -85,\n        -92,\n        -80\n    ],\n    Wadieresis: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -65,\n        -85,\n        -92,\n        -80\n    ],\n    Wagrave: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -65,\n        -85,\n        -92,\n        -80\n    ],\n    Wamacron: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -65,\n        -85,\n        -92,\n        -80\n    ],\n    Waogonek: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -65,\n        -85,\n        -92,\n        -80\n    ],\n    Waring: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -65,\n        -85,\n        -92,\n        -80\n    ],\n    Watilde: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -65,\n        -85,\n        -92,\n        -80\n    ],\n    Wcolon: [\n        -10,\n        -10,\n        0,\n        0,\n        -55,\n        -55,\n        -65,\n        -37\n    ],\n    Wcomma: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -92,\n        -74,\n        -92,\n        -92\n    ],\n    We: [\n        -35,\n        -35,\n        -30,\n        -30,\n        -65,\n        -90,\n        -92,\n        -80\n    ],\n    Weacute: [\n        -35,\n        -35,\n        -30,\n        -30,\n        -65,\n        -90,\n        -92,\n        -80\n    ],\n    Wecaron: [\n        -35,\n        -35,\n        -30,\n        -30,\n        -65,\n        -90,\n        -92,\n        -80\n    ],\n    Wecircumflex: [\n        -35,\n        -35,\n        -30,\n        -30,\n        -65,\n        -90,\n        -92,\n        -80\n    ],\n    Wedieresis: [\n        -35,\n        -35,\n        -30,\n        -30,\n        -65,\n        -50,\n        -52,\n        -40\n    ],\n    Wedotaccent: [\n        -35,\n        -35,\n        -30,\n        -30,\n        -65,\n        -90,\n        -92,\n        -80\n    ],\n    Wegrave: [\n        -35,\n        -35,\n        -30,\n        -30,\n        -65,\n        -50,\n        -52,\n        -40\n    ],\n    Wemacron: [\n        -35,\n        -35,\n        -30,\n        -30,\n        -65,\n        -50,\n        -52,\n        -40\n    ],\n    Weogonek: [\n        -35,\n        -35,\n        -30,\n        -30,\n        -65,\n        -90,\n        -92,\n        -80\n    ],\n    Whyphen: [\n        -40,\n        -40,\n        -40,\n        -40,\n        -37,\n        -50,\n        -37,\n        -65\n    ],\n    Wo: [\n        -60,\n        -60,\n        -30,\n        -30,\n        -75,\n        -80,\n        -92,\n        -80\n    ],\n    Woacute: [\n        -60,\n        -60,\n        -30,\n        -30,\n        -75,\n        -80,\n        -92,\n        -80\n    ],\n    Wocircumflex: [\n        -60,\n        -60,\n        -30,\n        -30,\n        -75,\n        -80,\n        -92,\n        -80\n    ],\n    Wodieresis: [\n        -60,\n        -60,\n        -30,\n        -30,\n        -75,\n        -80,\n        -92,\n        -80\n    ],\n    Wograve: [\n        -60,\n        -60,\n        -30,\n        -30,\n        -75,\n        -80,\n        -92,\n        -80\n    ],\n    Wohungarumlaut: [\n        -60,\n        -60,\n        -30,\n        -30,\n        -75,\n        -80,\n        -92,\n        -80\n    ],\n    Womacron: [\n        -60,\n        -60,\n        -30,\n        -30,\n        -75,\n        -80,\n        -92,\n        -80\n    ],\n    Woslash: [\n        -60,\n        -60,\n        -30,\n        -30,\n        -75,\n        -80,\n        -92,\n        -80\n    ],\n    Wotilde: [\n        -60,\n        -60,\n        -30,\n        -30,\n        -75,\n        -80,\n        -92,\n        -80\n    ],\n    Wperiod: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -92,\n        -74,\n        -92,\n        -92\n    ],\n    Wsemicolon: [\n        -10,\n        -10,\n        0,\n        0,\n        -55,\n        -55,\n        -65,\n        -37\n    ],\n    Wu: [\n        -45,\n        -45,\n        -30,\n        -30,\n        -50,\n        -55,\n        -55,\n        -50\n    ],\n    Wuacute: [\n        -45,\n        -45,\n        -30,\n        -30,\n        -50,\n        -55,\n        -55,\n        -50\n    ],\n    Wucircumflex: [\n        -45,\n        -45,\n        -30,\n        -30,\n        -50,\n        -55,\n        -55,\n        -50\n    ],\n    Wudieresis: [\n        -45,\n        -45,\n        -30,\n        -30,\n        -50,\n        -55,\n        -55,\n        -50\n    ],\n    Wugrave: [\n        -45,\n        -45,\n        -30,\n        -30,\n        -50,\n        -55,\n        -55,\n        -50\n    ],\n    Wuhungarumlaut: [\n        -45,\n        -45,\n        -30,\n        -30,\n        -50,\n        -55,\n        -55,\n        -50\n    ],\n    Wumacron: [\n        -45,\n        -45,\n        -30,\n        -30,\n        -50,\n        -55,\n        -55,\n        -50\n    ],\n    Wuogonek: [\n        -45,\n        -45,\n        -30,\n        -30,\n        -50,\n        -55,\n        -55,\n        -50\n    ],\n    Wuring: [\n        -45,\n        -45,\n        -30,\n        -30,\n        -50,\n        -55,\n        -55,\n        -50\n    ],\n    Wy: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -60,\n        -55,\n        -70,\n        -73\n    ],\n    Wyacute: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -60,\n        -55,\n        -70,\n        -73\n    ],\n    Wydieresis: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -60,\n        -55,\n        -70,\n        -73\n    ],\n    YA: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YAacute: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YAbreve: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YAcircumflex: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YAdieresis: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YAgrave: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YAmacron: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YAogonek: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YAring: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YAtilde: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YO: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YOacute: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YOcircumflex: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YOdieresis: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YOgrave: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YOhungarumlaut: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YOmacron: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YOslash: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YOtilde: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    Ya: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Yaacute: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Yabreve: [\n        -90,\n        -90,\n        -70,\n        -70,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Yacircumflex: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Yadieresis: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -60\n    ],\n    Yagrave: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -60\n    ],\n    Yamacron: [\n        -90,\n        -90,\n        -70,\n        -70,\n        -85,\n        -92,\n        -92,\n        -60\n    ],\n    Yaogonek: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Yaring: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Yatilde: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -60\n    ],\n    Ycolon: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -92,\n        -92,\n        -65,\n        -92\n    ],\n    Ycomma: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -92,\n        -92,\n        -92,\n        -129\n    ],\n    Ye: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Yeacute: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Yecaron: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Yecircumflex: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -71,\n        -92,\n        -100\n    ],\n    Yedieresis: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -71,\n        -71,\n        -52,\n        -60\n    ],\n    Yedotaccent: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Yegrave: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -71,\n        -71,\n        -52,\n        -60\n    ],\n    Yemacron: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -71,\n        -71,\n        -52,\n        -60\n    ],\n    Yeogonek: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Yo: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Yoacute: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Yocircumflex: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Yodieresis: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -70\n    ],\n    Yograve: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -70\n    ],\n    Yohungarumlaut: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Yomacron: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -70\n    ],\n    Yoslash: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Yotilde: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -70\n    ],\n    Yperiod: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -92,\n        -74,\n        -92,\n        -129\n    ],\n    Ysemicolon: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -92,\n        -92,\n        -65,\n        -92\n    ],\n    Yu: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Yuacute: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Yucircumflex: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Yudieresis: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -71\n    ],\n    Yugrave: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -71\n    ],\n    Yuhungarumlaut: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Yumacron: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -71\n    ],\n    Yuogonek: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Yuring: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    YacuteA: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YacuteAacute: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YacuteAbreve: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YacuteAcircumflex: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YacuteAdieresis: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YacuteAgrave: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YacuteAmacron: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YacuteAogonek: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YacuteAring: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YacuteAtilde: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YacuteO: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YacuteOacute: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YacuteOcircumflex: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YacuteOdieresis: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YacuteOgrave: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YacuteOhungarumlaut: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YacuteOmacron: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YacuteOslash: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YacuteOtilde: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    Yacutea: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Yacuteaacute: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Yacuteabreve: [\n        -90,\n        -90,\n        -70,\n        -70,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Yacuteacircumflex: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Yacuteadieresis: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -60\n    ],\n    Yacuteagrave: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -60\n    ],\n    Yacuteamacron: [\n        -90,\n        -90,\n        -70,\n        -70,\n        -85,\n        -92,\n        -92,\n        -60\n    ],\n    Yacuteaogonek: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Yacutearing: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Yacuteatilde: [\n        -90,\n        -90,\n        -70,\n        -70,\n        -85,\n        -92,\n        -92,\n        -60\n    ],\n    Yacutecolon: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -92,\n        -92,\n        -65,\n        -92\n    ],\n    Yacutecomma: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -92,\n        -92,\n        -92,\n        -129\n    ],\n    Yacutee: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Yacuteeacute: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Yacuteecaron: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Yacuteecircumflex: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -71,\n        -92,\n        -100\n    ],\n    Yacuteedieresis: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -71,\n        -71,\n        -52,\n        -60\n    ],\n    Yacuteedotaccent: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Yacuteegrave: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -71,\n        -71,\n        -52,\n        -60\n    ],\n    Yacuteemacron: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -71,\n        -71,\n        -52,\n        -60\n    ],\n    Yacuteeogonek: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Yacuteo: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Yacuteoacute: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Yacuteocircumflex: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Yacuteodieresis: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -70\n    ],\n    Yacuteograve: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -70\n    ],\n    Yacuteohungarumlaut: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Yacuteomacron: [\n        -100,\n        -100,\n        -70,\n        -70,\n        -111,\n        -111,\n        -92,\n        -70\n    ],\n    Yacuteoslash: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Yacuteotilde: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -70\n    ],\n    Yacuteperiod: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -92,\n        -74,\n        -92,\n        -129\n    ],\n    Yacutesemicolon: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -92,\n        -92,\n        -65,\n        -92\n    ],\n    Yacuteu: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Yacuteuacute: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Yacuteucircumflex: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Yacuteudieresis: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -71\n    ],\n    Yacuteugrave: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -71\n    ],\n    Yacuteuhungarumlaut: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Yacuteumacron: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -71\n    ],\n    Yacuteuogonek: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Yacuteuring: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    YdieresisA: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YdieresisAacute: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YdieresisAbreve: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YdieresisAcircumflex: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YdieresisAdieresis: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YdieresisAgrave: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YdieresisAmacron: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YdieresisAogonek: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YdieresisAring: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YdieresisAtilde: [\n        -110,\n        -110,\n        -110,\n        -110,\n        -110,\n        -74,\n        -50,\n        -120\n    ],\n    YdieresisO: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YdieresisOacute: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YdieresisOcircumflex: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YdieresisOdieresis: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YdieresisOgrave: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YdieresisOhungarumlaut: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YdieresisOmacron: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YdieresisOslash: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    YdieresisOtilde: [\n        -70,\n        -70,\n        -85,\n        -85,\n        -35,\n        -25,\n        -15,\n        -30\n    ],\n    Ydieresisa: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Ydieresisaacute: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Ydieresisabreve: [\n        -90,\n        -90,\n        -70,\n        -70,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Ydieresisacircumflex: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Ydieresisadieresis: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -60\n    ],\n    Ydieresisagrave: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -60\n    ],\n    Ydieresisamacron: [\n        -90,\n        -90,\n        -70,\n        -70,\n        -85,\n        -92,\n        -92,\n        -60\n    ],\n    Ydieresisaogonek: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Ydieresisaring: [\n        -90,\n        -90,\n        -140,\n        -140,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Ydieresisatilde: [\n        -90,\n        -90,\n        -70,\n        -70,\n        -85,\n        -92,\n        -92,\n        -100\n    ],\n    Ydieresiscolon: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -92,\n        -92,\n        -65,\n        -92\n    ],\n    Ydieresiscomma: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -92,\n        -92,\n        -92,\n        -129\n    ],\n    Ydieresise: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Ydieresiseacute: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Ydieresisecaron: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Ydieresisecircumflex: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -71,\n        -92,\n        -100\n    ],\n    Ydieresisedieresis: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -71,\n        -71,\n        -52,\n        -60\n    ],\n    Ydieresisedotaccent: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Ydieresisegrave: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -71,\n        -71,\n        -52,\n        -60\n    ],\n    Ydieresisemacron: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -71,\n        -71,\n        -52,\n        -60\n    ],\n    Ydieresiseogonek: [\n        -80,\n        -80,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -100\n    ],\n    Ydieresiso: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Ydieresisoacute: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Ydieresisocircumflex: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Ydieresisodieresis: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -70\n    ],\n    Ydieresisograve: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -70\n    ],\n    Ydieresisohungarumlaut: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Ydieresisomacron: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -70\n    ],\n    Ydieresisoslash: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -110\n    ],\n    Ydieresisotilde: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -111,\n        -111,\n        -92,\n        -70\n    ],\n    Ydieresisperiod: [\n        -100,\n        -100,\n        -140,\n        -140,\n        -92,\n        -74,\n        -92,\n        -129\n    ],\n    Ydieresissemicolon: [\n        -50,\n        -50,\n        -60,\n        -60,\n        -92,\n        -92,\n        -65,\n        -92\n    ],\n    Ydieresisu: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Ydieresisuacute: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Ydieresisucircumflex: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Ydieresisudieresis: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -71\n    ],\n    Ydieresisugrave: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -71\n    ],\n    Ydieresisuhungarumlaut: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Ydieresisumacron: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -71\n    ],\n    Ydieresisuogonek: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    Ydieresisuring: [\n        -100,\n        -100,\n        -110,\n        -110,\n        -92,\n        -92,\n        -92,\n        -111\n    ],\n    ag: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    agbreve: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    agcommaaccent: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    av: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -25,\n        0,\n        0,\n        -20\n    ],\n    aw: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ay: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    ayacute: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    aydieresis: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    aacuteg: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    aacutegbreve: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    aacutegcommaaccent: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    aacutev: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -25,\n        0,\n        0,\n        -20\n    ],\n    aacutew: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        -15\n    ],\n    aacutey: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    aacuteyacute: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    aacuteydieresis: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    abreveg: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    abrevegbreve: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    abrevegcommaaccent: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    abrevev: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -25,\n        0,\n        0,\n        -20\n    ],\n    abrevew: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        -15\n    ],\n    abrevey: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    abreveyacute: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    abreveydieresis: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    acircumflexg: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    acircumflexgbreve: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    acircumflexgcommaaccent: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    acircumflexv: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -25,\n        0,\n        0,\n        -20\n    ],\n    acircumflexw: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        -15\n    ],\n    acircumflexy: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    acircumflexyacute: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    acircumflexydieresis: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    adieresisg: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    adieresisgbreve: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    adieresisgcommaaccent: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    adieresisv: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -25,\n        0,\n        0,\n        -20\n    ],\n    adieresisw: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        -15\n    ],\n    adieresisy: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    adieresisyacute: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    adieresisydieresis: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    agraveg: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    agravegbreve: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    agravegcommaaccent: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    agravev: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -25,\n        0,\n        0,\n        -20\n    ],\n    agravew: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        -15\n    ],\n    agravey: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    agraveyacute: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    agraveydieresis: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    amacrong: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    amacrongbreve: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    amacrongcommaaccent: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    amacronv: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -25,\n        0,\n        0,\n        -20\n    ],\n    amacronw: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        -15\n    ],\n    amacrony: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    amacronyacute: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    amacronydieresis: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    aogonekg: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    aogonekgbreve: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    aogonekgcommaaccent: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    aogonekv: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -25,\n        0,\n        0,\n        -20\n    ],\n    aogonekw: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        -15\n    ],\n    aogoneky: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    aogonekyacute: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    aogonekydieresis: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    aringg: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    aringgbreve: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    aringgcommaaccent: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    aringv: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -25,\n        0,\n        0,\n        -20\n    ],\n    aringw: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        -15\n    ],\n    aringy: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    aringyacute: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    aringydieresis: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    atildeg: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    atildegbreve: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    atildegcommaaccent: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    atildev: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -25,\n        0,\n        0,\n        -20\n    ],\n    atildew: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        -15\n    ],\n    atildey: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    atildeyacute: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    atildeydieresis: [\n        -20,\n        -20,\n        -30,\n        -30\n    ],\n    bl: [\n        -10,\n        -10,\n        -20,\n        -20\n    ],\n    blacute: [\n        -10,\n        -10,\n        -20,\n        -20\n    ],\n    blcommaaccent: [\n        -10,\n        -10,\n        -20,\n        -20\n    ],\n    blslash: [\n        -10,\n        -10,\n        -20,\n        -20\n    ],\n    bu: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20\n    ],\n    buacute: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20\n    ],\n    bucircumflex: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20\n    ],\n    budieresis: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20\n    ],\n    bugrave: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20\n    ],\n    buhungarumlaut: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20\n    ],\n    bumacron: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20\n    ],\n    buogonek: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20\n    ],\n    buring: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20,\n        -20\n    ],\n    bv: [\n        -20,\n        -20,\n        -20,\n        -20,\n        -15,\n        0,\n        0,\n        -15\n    ],\n    by: [\n        -20,\n        -20,\n        -20,\n        -20\n    ],\n    byacute: [\n        -20,\n        -20,\n        -20,\n        -20\n    ],\n    bydieresis: [\n        -20,\n        -20,\n        -20,\n        -20\n    ],\n    ch: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        -10,\n        -15\n    ],\n    ck: [\n        -20,\n        -20,\n        -20,\n        -20,\n        0,\n        -10,\n        -20\n    ],\n    ckcommaaccent: [\n        -20,\n        -20,\n        -20,\n        -20,\n        0,\n        -10,\n        -20\n    ],\n    cl: [\n        -20,\n        -20\n    ],\n    clacute: [\n        -20,\n        -20\n    ],\n    clcommaaccent: [\n        -20,\n        -20\n    ],\n    clslash: [\n        -20,\n        -20\n    ],\n    cy: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -15\n    ],\n    cyacute: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -15\n    ],\n    cydieresis: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -15\n    ],\n    cacuteh: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        -10,\n        -15\n    ],\n    cacutek: [\n        -20,\n        -20,\n        -20,\n        -20,\n        0,\n        -10,\n        -20\n    ],\n    cacutekcommaaccent: [\n        -20,\n        -20,\n        -20,\n        -20,\n        0,\n        -10,\n        -20\n    ],\n    cacutel: [\n        -20,\n        -20\n    ],\n    cacutelacute: [\n        -20,\n        -20\n    ],\n    cacutelcommaaccent: [\n        -20,\n        -20\n    ],\n    cacutelslash: [\n        -20,\n        -20\n    ],\n    cacutey: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -15\n    ],\n    cacuteyacute: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -15\n    ],\n    cacuteydieresis: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ccaronh: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        -10,\n        -15\n    ],\n    ccaronk: [\n        -20,\n        -20,\n        -20,\n        -20,\n        0,\n        -10,\n        -20\n    ],\n    ccaronkcommaaccent: [\n        -20,\n        -20,\n        -20,\n        -20,\n        0,\n        -10,\n        -20\n    ],\n    ccaronl: [\n        -20,\n        -20\n    ],\n    ccaronlacute: [\n        -20,\n        -20\n    ],\n    ccaronlcommaaccent: [\n        -20,\n        -20\n    ],\n    ccaronlslash: [\n        -20,\n        -20\n    ],\n    ccarony: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ccaronyacute: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ccaronydieresis: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ccedillah: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        -10,\n        -15\n    ],\n    ccedillak: [\n        -20,\n        -20,\n        -20,\n        -20,\n        0,\n        -10,\n        -20\n    ],\n    ccedillakcommaaccent: [\n        -20,\n        -20,\n        -20,\n        -20,\n        0,\n        -10,\n        -20\n    ],\n    ccedillal: [\n        -20,\n        -20\n    ],\n    ccedillalacute: [\n        -20,\n        -20\n    ],\n    ccedillalcommaaccent: [\n        -20,\n        -20\n    ],\n    ccedillalslash: [\n        -20,\n        -20\n    ],\n    ccedillay: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ccedillayacute: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ccedillaydieresis: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -15\n    ],\n    colonspace: [\n        -40,\n        -40,\n        -50,\n        -50\n    ],\n    commaquotedblright: [\n        -120,\n        -120,\n        -100,\n        -100,\n        -45,\n        -95,\n        -140,\n        -70\n    ],\n    commaquoteright: [\n        -120,\n        -120,\n        -100,\n        -100,\n        -55,\n        -95,\n        -140,\n        -70\n    ],\n    commaspace: [\n        -40,\n        -40\n    ],\n    dd: [\n        -10,\n        -10\n    ],\n    ddcroat: [\n        -10,\n        -10\n    ],\n    dv: [\n        -15,\n        -15\n    ],\n    dw: [\n        -15,\n        -15,\n        0,\n        0,\n        -15\n    ],\n    dy: [\n        -15,\n        -15\n    ],\n    dyacute: [\n        -15,\n        -15\n    ],\n    dydieresis: [\n        -15,\n        -15\n    ],\n    dcroatd: [\n        -10,\n        -10\n    ],\n    dcroatdcroat: [\n        -10,\n        -10\n    ],\n    dcroatv: [\n        -15,\n        -15\n    ],\n    dcroatw: [\n        -15,\n        -15,\n        0,\n        0,\n        -15\n    ],\n    dcroaty: [\n        -15,\n        -15\n    ],\n    dcroatyacute: [\n        -15,\n        -15\n    ],\n    dcroatydieresis: [\n        -15,\n        -15\n    ],\n    ecomma: [\n        10,\n        10,\n        -15,\n        -15,\n        0,\n        0,\n        -10\n    ],\n    eperiod: [\n        20,\n        20,\n        -15,\n        -15,\n        0,\n        0,\n        -15\n    ],\n    ev: [\n        -15,\n        -15,\n        -30,\n        -30,\n        -15,\n        0,\n        -15,\n        -25\n    ],\n    ew: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -15,\n        -25\n    ],\n    ex: [\n        -15,\n        -15,\n        -30,\n        -30,\n        0,\n        0,\n        -20,\n        -15\n    ],\n    ey: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    eyacute: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    eydieresis: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    eacutecomma: [\n        10,\n        10,\n        -15,\n        -15,\n        0,\n        0,\n        -10\n    ],\n    eacuteperiod: [\n        20,\n        20,\n        -15,\n        -15,\n        0,\n        0,\n        -15\n    ],\n    eacutev: [\n        -15,\n        -15,\n        -30,\n        -30,\n        -15,\n        0,\n        -15,\n        -25\n    ],\n    eacutew: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -15,\n        -25\n    ],\n    eacutex: [\n        -15,\n        -15,\n        -30,\n        -30,\n        0,\n        0,\n        -20,\n        -15\n    ],\n    eacutey: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    eacuteyacute: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    eacuteydieresis: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    ecaroncomma: [\n        10,\n        10,\n        -15,\n        -15,\n        0,\n        0,\n        -10\n    ],\n    ecaronperiod: [\n        20,\n        20,\n        -15,\n        -15,\n        0,\n        0,\n        -15\n    ],\n    ecaronv: [\n        -15,\n        -15,\n        -30,\n        -30,\n        -15,\n        0,\n        -15,\n        -25\n    ],\n    ecaronw: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -15,\n        -25\n    ],\n    ecaronx: [\n        -15,\n        -15,\n        -30,\n        -30,\n        0,\n        0,\n        -20,\n        -15\n    ],\n    ecarony: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    ecaronyacute: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    ecaronydieresis: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    ecircumflexcomma: [\n        10,\n        10,\n        -15,\n        -15,\n        0,\n        0,\n        -10\n    ],\n    ecircumflexperiod: [\n        20,\n        20,\n        -15,\n        -15,\n        0,\n        0,\n        -15\n    ],\n    ecircumflexv: [\n        -15,\n        -15,\n        -30,\n        -30,\n        -15,\n        0,\n        -15,\n        -25\n    ],\n    ecircumflexw: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -15,\n        -25\n    ],\n    ecircumflexx: [\n        -15,\n        -15,\n        -30,\n        -30,\n        0,\n        0,\n        -20,\n        -15\n    ],\n    ecircumflexy: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    ecircumflexyacute: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    ecircumflexydieresis: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    edieresiscomma: [\n        10,\n        10,\n        -15,\n        -15,\n        0,\n        0,\n        -10\n    ],\n    edieresisperiod: [\n        20,\n        20,\n        -15,\n        -15,\n        0,\n        0,\n        -15\n    ],\n    edieresisv: [\n        -15,\n        -15,\n        -30,\n        -30,\n        -15,\n        0,\n        -15,\n        -25\n    ],\n    edieresisw: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -15,\n        -25\n    ],\n    edieresisx: [\n        -15,\n        -15,\n        -30,\n        -30,\n        0,\n        0,\n        -20,\n        -15\n    ],\n    edieresisy: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    edieresisyacute: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    edieresisydieresis: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    edotaccentcomma: [\n        10,\n        10,\n        -15,\n        -15,\n        0,\n        0,\n        -10\n    ],\n    edotaccentperiod: [\n        20,\n        20,\n        -15,\n        -15,\n        0,\n        0,\n        -15\n    ],\n    edotaccentv: [\n        -15,\n        -15,\n        -30,\n        -30,\n        -15,\n        0,\n        -15,\n        -25\n    ],\n    edotaccentw: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -15,\n        -25\n    ],\n    edotaccentx: [\n        -15,\n        -15,\n        -30,\n        -30,\n        0,\n        0,\n        -20,\n        -15\n    ],\n    edotaccenty: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    edotaccentyacute: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    edotaccentydieresis: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    egravecomma: [\n        10,\n        10,\n        -15,\n        -15,\n        0,\n        0,\n        -10\n    ],\n    egraveperiod: [\n        20,\n        20,\n        -15,\n        -15,\n        0,\n        0,\n        -15\n    ],\n    egravev: [\n        -15,\n        -15,\n        -30,\n        -30,\n        -15,\n        0,\n        -15,\n        -25\n    ],\n    egravew: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -15,\n        -25\n    ],\n    egravex: [\n        -15,\n        -15,\n        -30,\n        -30,\n        0,\n        0,\n        -20,\n        -15\n    ],\n    egravey: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    egraveyacute: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    egraveydieresis: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    emacroncomma: [\n        10,\n        10,\n        -15,\n        -15,\n        0,\n        0,\n        -10\n    ],\n    emacronperiod: [\n        20,\n        20,\n        -15,\n        -15,\n        0,\n        0,\n        -15\n    ],\n    emacronv: [\n        -15,\n        -15,\n        -30,\n        -30,\n        -15,\n        0,\n        -15,\n        -25\n    ],\n    emacronw: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -15,\n        -25\n    ],\n    emacronx: [\n        -15,\n        -15,\n        -30,\n        -30,\n        0,\n        0,\n        -20,\n        -15\n    ],\n    emacrony: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    emacronyacute: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    emacronydieresis: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    eogonekcomma: [\n        10,\n        10,\n        -15,\n        -15,\n        0,\n        0,\n        -10\n    ],\n    eogonekperiod: [\n        20,\n        20,\n        -15,\n        -15,\n        0,\n        0,\n        -15\n    ],\n    eogonekv: [\n        -15,\n        -15,\n        -30,\n        -30,\n        -15,\n        0,\n        -15,\n        -25\n    ],\n    eogonekw: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -15,\n        -25\n    ],\n    eogonekx: [\n        -15,\n        -15,\n        -30,\n        -30,\n        0,\n        0,\n        -20,\n        -15\n    ],\n    eogoneky: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    eogonekyacute: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    eogonekydieresis: [\n        -15,\n        -15,\n        -20,\n        -20,\n        0,\n        0,\n        -30,\n        -15\n    ],\n    fcomma: [\n        -10,\n        -10,\n        -30,\n        -30,\n        -15,\n        -10,\n        -10\n    ],\n    fe: [\n        -10,\n        -10,\n        -30,\n        -30,\n        0,\n        -10\n    ],\n    feacute: [\n        -10,\n        -10,\n        -30,\n        -30,\n        0,\n        -10\n    ],\n    fecaron: [\n        -10,\n        -10,\n        -30,\n        -30\n    ],\n    fecircumflex: [\n        -10,\n        -10,\n        -30,\n        -30\n    ],\n    fedieresis: [\n        -10,\n        -10,\n        -30,\n        -30\n    ],\n    fedotaccent: [\n        -10,\n        -10,\n        -30,\n        -30,\n        0,\n        -10\n    ],\n    fegrave: [\n        -10,\n        -10,\n        -30,\n        -30\n    ],\n    femacron: [\n        -10,\n        -10,\n        -30,\n        -30\n    ],\n    feogonek: [\n        -10,\n        -10,\n        -30,\n        -30,\n        0,\n        -10\n    ],\n    fo: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -25,\n        -10\n    ],\n    foacute: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -25,\n        -10\n    ],\n    focircumflex: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -25,\n        -10\n    ],\n    fodieresis: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -25\n    ],\n    fograve: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -25,\n        -10\n    ],\n    fohungarumlaut: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -25,\n        -10\n    ],\n    fomacron: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -25\n    ],\n    foslash: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -25,\n        -10\n    ],\n    fotilde: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -25,\n        -10\n    ],\n    fperiod: [\n        -10,\n        -10,\n        -30,\n        -30,\n        -15,\n        -10,\n        -15\n    ],\n    fquotedblright: [\n        30,\n        30,\n        60,\n        60,\n        50\n    ],\n    fquoteright: [\n        30,\n        30,\n        50,\n        50,\n        55,\n        55,\n        92,\n        55\n    ],\n    ge: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    geacute: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gecaron: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gecircumflex: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gedieresis: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gedotaccent: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gegrave: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gemacron: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    geogonek: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gg: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ggbreve: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ggcommaaccent: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gbrevee: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gbreveeacute: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gbreveecaron: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gbreveecircumflex: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gbreveedieresis: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gbreveedotaccent: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gbreveegrave: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gbreveemacron: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gbreveeogonek: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gbreveg: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gbrevegbreve: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gbrevegcommaaccent: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gcommaaccente: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gcommaaccenteacute: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gcommaaccentecaron: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gcommaaccentecircumflex: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gcommaaccentedieresis: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gcommaaccentedotaccent: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gcommaaccentegrave: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gcommaaccentemacron: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gcommaaccenteogonek: [\n        10,\n        10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gcommaaccentg: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gcommaaccentgbreve: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gcommaaccentgcommaaccent: [\n        -10,\n        -10,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    hy: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -15,\n        0,\n        0,\n        -5\n    ],\n    hyacute: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -15,\n        0,\n        0,\n        -5\n    ],\n    hydieresis: [\n        -20,\n        -20,\n        -30,\n        -30,\n        -15,\n        0,\n        0,\n        -5\n    ],\n    ko: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    koacute: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kocircumflex: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kodieresis: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kograve: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kohungarumlaut: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    komacron: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    koslash: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kotilde: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kcommaaccento: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kcommaaccentoacute: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kcommaaccentocircumflex: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kcommaaccentodieresis: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kcommaaccentograve: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kcommaaccentohungarumlaut: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kcommaaccentomacron: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kcommaaccentoslash: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    kcommaaccentotilde: [\n        -15,\n        -15,\n        -20,\n        -20,\n        -15,\n        -10,\n        -10,\n        -10\n    ],\n    lw: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ly: [\n        -15,\n        -15\n    ],\n    lyacute: [\n        -15,\n        -15\n    ],\n    lydieresis: [\n        -15,\n        -15\n    ],\n    lacutew: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    lacutey: [\n        -15,\n        -15\n    ],\n    lacuteyacute: [\n        -15,\n        -15\n    ],\n    lacuteydieresis: [\n        -15,\n        -15\n    ],\n    lcommaaccentw: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    lcommaaccenty: [\n        -15,\n        -15\n    ],\n    lcommaaccentyacute: [\n        -15,\n        -15\n    ],\n    lcommaaccentydieresis: [\n        -15,\n        -15\n    ],\n    lslashw: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    lslashy: [\n        -15,\n        -15\n    ],\n    lslashyacute: [\n        -15,\n        -15\n    ],\n    lslashydieresis: [\n        -15,\n        -15\n    ],\n    mu: [\n        -20,\n        -20,\n        -10,\n        -10\n    ],\n    muacute: [\n        -20,\n        -20,\n        -10,\n        -10\n    ],\n    mucircumflex: [\n        -20,\n        -20,\n        -10,\n        -10\n    ],\n    mudieresis: [\n        -20,\n        -20,\n        -10,\n        -10\n    ],\n    mugrave: [\n        -20,\n        -20,\n        -10,\n        -10\n    ],\n    muhungarumlaut: [\n        -20,\n        -20,\n        -10,\n        -10\n    ],\n    mumacron: [\n        -20,\n        -20,\n        -10,\n        -10\n    ],\n    muogonek: [\n        -20,\n        -20,\n        -10,\n        -10\n    ],\n    muring: [\n        -20,\n        -20,\n        -10,\n        -10\n    ],\n    my: [\n        -30,\n        -30,\n        -15,\n        -15\n    ],\n    myacute: [\n        -30,\n        -30,\n        -15,\n        -15\n    ],\n    mydieresis: [\n        -30,\n        -30,\n        -15,\n        -15\n    ],\n    nu: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nuacute: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nucircumflex: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nudieresis: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nugrave: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nuhungarumlaut: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    numacron: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nuogonek: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nuring: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nv: [\n        -40,\n        -40,\n        -20,\n        -20,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    ny: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    nyacute: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    nydieresis: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    nacuteu: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nacuteuacute: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nacuteucircumflex: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nacuteudieresis: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nacuteugrave: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nacuteuhungarumlaut: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nacuteumacron: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nacuteuogonek: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nacuteuring: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    nacutev: [\n        -40,\n        -40,\n        -20,\n        -20,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    nacutey: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    nacuteyacute: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    nacuteydieresis: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ncaronu: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncaronuacute: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncaronucircumflex: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncaronudieresis: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncaronugrave: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncaronuhungarumlaut: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncaronumacron: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncaronuogonek: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncaronuring: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncaronv: [\n        -40,\n        -40,\n        -20,\n        -20,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    ncarony: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ncaronyacute: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ncaronydieresis: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ncommaaccentu: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncommaaccentuacute: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncommaaccentucircumflex: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncommaaccentudieresis: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncommaaccentugrave: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncommaaccentuhungarumlaut: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncommaaccentumacron: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncommaaccentuogonek: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncommaaccenturing: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ncommaaccentv: [\n        -40,\n        -40,\n        -20,\n        -20,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    ncommaaccenty: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ncommaaccentyacute: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ncommaaccentydieresis: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ntildeu: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ntildeuacute: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ntildeucircumflex: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ntildeudieresis: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ntildeugrave: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ntildeuhungarumlaut: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ntildeumacron: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ntildeuogonek: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ntildeuring: [\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    ntildev: [\n        -40,\n        -40,\n        -20,\n        -20,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    ntildey: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ntildeyacute: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ntildeydieresis: [\n        -20,\n        -20,\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        -15\n    ],\n    ov: [\n        -20,\n        -20,\n        -15,\n        -15,\n        -10,\n        -15,\n        -10,\n        -15\n    ],\n    ow: [\n        -15,\n        -15,\n        -15,\n        -15,\n        -10,\n        -25,\n        0,\n        -25\n    ],\n    ox: [\n        -30,\n        -30,\n        -30,\n        -30,\n        0,\n        -10\n    ],\n    oy: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    oyacute: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    oydieresis: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    oacutev: [\n        -20,\n        -20,\n        -15,\n        -15,\n        -10,\n        -15,\n        -10,\n        -15\n    ],\n    oacutew: [\n        -15,\n        -15,\n        -15,\n        -15,\n        -10,\n        -25,\n        0,\n        -25\n    ],\n    oacutex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        0,\n        -10\n    ],\n    oacutey: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    oacuteyacute: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    oacuteydieresis: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    ocircumflexv: [\n        -20,\n        -20,\n        -15,\n        -15,\n        -10,\n        -15,\n        -10,\n        -15\n    ],\n    ocircumflexw: [\n        -15,\n        -15,\n        -15,\n        -15,\n        -10,\n        -25,\n        0,\n        -25\n    ],\n    ocircumflexx: [\n        -30,\n        -30,\n        -30,\n        -30,\n        0,\n        -10\n    ],\n    ocircumflexy: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    ocircumflexyacute: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    ocircumflexydieresis: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    odieresisv: [\n        -20,\n        -20,\n        -15,\n        -15,\n        -10,\n        -15,\n        -10,\n        -15\n    ],\n    odieresisw: [\n        -15,\n        -15,\n        -15,\n        -15,\n        -10,\n        -25,\n        0,\n        -25\n    ],\n    odieresisx: [\n        -30,\n        -30,\n        -30,\n        -30,\n        0,\n        -10\n    ],\n    odieresisy: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    odieresisyacute: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    odieresisydieresis: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    ogravev: [\n        -20,\n        -20,\n        -15,\n        -15,\n        -10,\n        -15,\n        -10,\n        -15\n    ],\n    ogravew: [\n        -15,\n        -15,\n        -15,\n        -15,\n        -10,\n        -25,\n        0,\n        -25\n    ],\n    ogravex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        0,\n        -10\n    ],\n    ogravey: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    ograveyacute: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    ograveydieresis: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    ohungarumlautv: [\n        -20,\n        -20,\n        -15,\n        -15,\n        -10,\n        -15,\n        -10,\n        -15\n    ],\n    ohungarumlautw: [\n        -15,\n        -15,\n        -15,\n        -15,\n        -10,\n        -25,\n        0,\n        -25\n    ],\n    ohungarumlautx: [\n        -30,\n        -30,\n        -30,\n        -30,\n        0,\n        -10\n    ],\n    ohungarumlauty: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    ohungarumlautyacute: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    ohungarumlautydieresis: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    omacronv: [\n        -20,\n        -20,\n        -15,\n        -15,\n        -10,\n        -15,\n        -10,\n        -15\n    ],\n    omacronw: [\n        -15,\n        -15,\n        -15,\n        -15,\n        -10,\n        -25,\n        0,\n        -25\n    ],\n    omacronx: [\n        -30,\n        -30,\n        -30,\n        -30,\n        0,\n        -10\n    ],\n    omacrony: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    omacronyacute: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    omacronydieresis: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    oslashv: [\n        -20,\n        -20,\n        -70,\n        -70,\n        -10,\n        -15,\n        -10,\n        -15\n    ],\n    oslashw: [\n        -15,\n        -15,\n        -70,\n        -70,\n        -10,\n        -25,\n        0,\n        -25\n    ],\n    oslashx: [\n        -30,\n        -30,\n        -85,\n        -85,\n        0,\n        -10\n    ],\n    oslashy: [\n        -20,\n        -20,\n        -70,\n        -70,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    oslashyacute: [\n        -20,\n        -20,\n        -70,\n        -70,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    oslashydieresis: [\n        -20,\n        -20,\n        -70,\n        -70,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    otildev: [\n        -20,\n        -20,\n        -15,\n        -15,\n        -10,\n        -15,\n        -10,\n        -15\n    ],\n    otildew: [\n        -15,\n        -15,\n        -15,\n        -15,\n        -10,\n        -25,\n        0,\n        -25\n    ],\n    otildex: [\n        -30,\n        -30,\n        -30,\n        -30,\n        0,\n        -10\n    ],\n    otildey: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    otildeyacute: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    otildeydieresis: [\n        -20,\n        -20,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    py: [\n        -15,\n        -15,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -10\n    ],\n    pyacute: [\n        -15,\n        -15,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -10\n    ],\n    pydieresis: [\n        -15,\n        -15,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -10\n    ],\n    periodquotedblright: [\n        -120,\n        -120,\n        -100,\n        -100,\n        -55,\n        -95,\n        -140,\n        -70\n    ],\n    periodquoteright: [\n        -120,\n        -120,\n        -100,\n        -100,\n        -55,\n        -95,\n        -140,\n        -70\n    ],\n    periodspace: [\n        -40,\n        -40,\n        -60,\n        -60\n    ],\n    quotedblrightspace: [\n        -80,\n        -80,\n        -40,\n        -40\n    ],\n    quoteleftquoteleft: [\n        -46,\n        -46,\n        -57,\n        -57,\n        -63,\n        -74,\n        -111,\n        -74\n    ],\n    quoterightd: [\n        -80,\n        -80,\n        -50,\n        -50,\n        -20,\n        -15,\n        -25,\n        -50\n    ],\n    quoterightdcroat: [\n        -80,\n        -80,\n        -50,\n        -50,\n        -20,\n        -15,\n        -25,\n        -50\n    ],\n    quoterightl: [\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    quoterightlacute: [\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    quoterightlcommaaccent: [\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    quoterightlslash: [\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    quoterightquoteright: [\n        -46,\n        -46,\n        -57,\n        -57,\n        -63,\n        -74,\n        -111,\n        -74\n    ],\n    quoterightr: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -20,\n        -15,\n        -25,\n        -50\n    ],\n    quoterightracute: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -20,\n        -15,\n        -25,\n        -50\n    ],\n    quoterightrcaron: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -20,\n        -15,\n        -25,\n        -50\n    ],\n    quoterightrcommaaccent: [\n        -40,\n        -40,\n        -50,\n        -50,\n        -20,\n        -15,\n        -25,\n        -50\n    ],\n    quoterights: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -37,\n        -74,\n        -40,\n        -55\n    ],\n    quoterightsacute: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -37,\n        -74,\n        -40,\n        -55\n    ],\n    quoterightscaron: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -37,\n        -74,\n        -40,\n        -55\n    ],\n    quoterightscedilla: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -37,\n        -74,\n        -40,\n        -55\n    ],\n    quoterightscommaaccent: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -37,\n        -74,\n        -40,\n        -55\n    ],\n    quoterightspace: [\n        -80,\n        -80,\n        -70,\n        -70,\n        -74,\n        -74,\n        -111,\n        -74\n    ],\n    quoterightv: [\n        -20,\n        -20,\n        0,\n        0,\n        -20,\n        -15,\n        -10,\n        -50\n    ],\n    rc: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcacute: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rccaron: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rccedilla: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcomma: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -92,\n        -65,\n        -111,\n        -40\n    ],\n    rd: [\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        0,\n        -37\n    ],\n    rdcroat: [\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        0,\n        -37\n    ],\n    rg: [\n        -15,\n        -15,\n        0,\n        0,\n        -10,\n        0,\n        -37,\n        -18\n    ],\n    rgbreve: [\n        -15,\n        -15,\n        0,\n        0,\n        -10,\n        0,\n        -37,\n        -18\n    ],\n    rgcommaaccent: [\n        -15,\n        -15,\n        0,\n        0,\n        -10,\n        0,\n        -37,\n        -18\n    ],\n    rhyphen: [\n        -20,\n        -20,\n        0,\n        0,\n        -37,\n        0,\n        -20,\n        -20\n    ],\n    ro: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    roacute: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rocircumflex: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rodieresis: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rograve: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rohungarumlaut: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    romacron: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    roslash: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rotilde: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rperiod: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -100,\n        -65,\n        -111,\n        -55\n    ],\n    rq: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rs: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rsacute: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rscaron: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rscedilla: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rscommaaccent: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rt: [\n        20,\n        20,\n        40,\n        40\n    ],\n    rtcommaaccent: [\n        20,\n        20,\n        40,\n        40\n    ],\n    rv: [\n        10,\n        10,\n        30,\n        30,\n        -10\n    ],\n    ry: [\n        10,\n        10,\n        30,\n        30\n    ],\n    ryacute: [\n        10,\n        10,\n        30,\n        30\n    ],\n    rydieresis: [\n        10,\n        10,\n        30,\n        30\n    ],\n    racutec: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racutecacute: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racuteccaron: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racuteccedilla: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racutecomma: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -92,\n        -65,\n        -111,\n        -40\n    ],\n    racuted: [\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        0,\n        -37\n    ],\n    racutedcroat: [\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        0,\n        -37\n    ],\n    racuteg: [\n        -15,\n        -15,\n        0,\n        0,\n        -10,\n        0,\n        -37,\n        -18\n    ],\n    racutegbreve: [\n        -15,\n        -15,\n        0,\n        0,\n        -10,\n        0,\n        -37,\n        -18\n    ],\n    racutegcommaaccent: [\n        -15,\n        -15,\n        0,\n        0,\n        -10,\n        0,\n        -37,\n        -18\n    ],\n    racutehyphen: [\n        -20,\n        -20,\n        0,\n        0,\n        -37,\n        0,\n        -20,\n        -20\n    ],\n    racuteo: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    racuteoacute: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    racuteocircumflex: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    racuteodieresis: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    racuteograve: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    racuteohungarumlaut: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    racuteomacron: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    racuteoslash: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    racuteotilde: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    racuteperiod: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -100,\n        -65,\n        -111,\n        -55\n    ],\n    racuteq: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racutes: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    racutesacute: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    racutescaron: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    racutescedilla: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    racutescommaaccent: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    racutet: [\n        20,\n        20,\n        40,\n        40\n    ],\n    racutetcommaaccent: [\n        20,\n        20,\n        40,\n        40\n    ],\n    racutev: [\n        10,\n        10,\n        30,\n        30,\n        -10\n    ],\n    racutey: [\n        10,\n        10,\n        30,\n        30\n    ],\n    racuteyacute: [\n        10,\n        10,\n        30,\n        30\n    ],\n    racuteydieresis: [\n        10,\n        10,\n        30,\n        30\n    ],\n    rcaronc: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcaroncacute: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcaronccaron: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcaronccedilla: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcaroncomma: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -92,\n        -65,\n        -111,\n        -40\n    ],\n    rcarond: [\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        0,\n        -37\n    ],\n    rcarondcroat: [\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        0,\n        -37\n    ],\n    rcarong: [\n        -15,\n        -15,\n        0,\n        0,\n        -10,\n        0,\n        -37,\n        -18\n    ],\n    rcarongbreve: [\n        -15,\n        -15,\n        0,\n        0,\n        -10,\n        0,\n        -37,\n        -18\n    ],\n    rcarongcommaaccent: [\n        -15,\n        -15,\n        0,\n        0,\n        -10,\n        0,\n        -37,\n        -18\n    ],\n    rcaronhyphen: [\n        -20,\n        -20,\n        0,\n        0,\n        -37,\n        0,\n        -20,\n        -20\n    ],\n    rcarono: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcaronoacute: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcaronocircumflex: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcaronodieresis: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcaronograve: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcaronohungarumlaut: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcaronomacron: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcaronoslash: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcaronotilde: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcaronperiod: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -100,\n        -65,\n        -111,\n        -55\n    ],\n    rcaronq: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcarons: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rcaronsacute: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rcaronscaron: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rcaronscedilla: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rcaronscommaaccent: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rcaront: [\n        20,\n        20,\n        40,\n        40\n    ],\n    rcarontcommaaccent: [\n        20,\n        20,\n        40,\n        40\n    ],\n    rcaronv: [\n        10,\n        10,\n        30,\n        30,\n        -10\n    ],\n    rcarony: [\n        10,\n        10,\n        30,\n        30\n    ],\n    rcaronyacute: [\n        10,\n        10,\n        30,\n        30\n    ],\n    rcaronydieresis: [\n        10,\n        10,\n        30,\n        30\n    ],\n    rcommaaccentc: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccentcacute: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccentccaron: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccentccedilla: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccentcomma: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -92,\n        -65,\n        -111,\n        -40\n    ],\n    rcommaaccentd: [\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        0,\n        -37\n    ],\n    rcommaaccentdcroat: [\n        -20,\n        -20,\n        0,\n        0,\n        0,\n        0,\n        -37\n    ],\n    rcommaaccentg: [\n        -15,\n        -15,\n        0,\n        0,\n        -10,\n        0,\n        -37,\n        -18\n    ],\n    rcommaaccentgbreve: [\n        -15,\n        -15,\n        0,\n        0,\n        -10,\n        0,\n        -37,\n        -18\n    ],\n    rcommaaccentgcommaaccent: [\n        -15,\n        -15,\n        0,\n        0,\n        -10,\n        0,\n        -37,\n        -18\n    ],\n    rcommaaccenthyphen: [\n        -20,\n        -20,\n        0,\n        0,\n        -37,\n        0,\n        -20,\n        -20\n    ],\n    rcommaaccento: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcommaaccentoacute: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcommaaccentocircumflex: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcommaaccentodieresis: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcommaaccentograve: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcommaaccentohungarumlaut: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcommaaccentomacron: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcommaaccentoslash: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcommaaccentotilde: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -45\n    ],\n    rcommaaccentperiod: [\n        -60,\n        -60,\n        -50,\n        -50,\n        -100,\n        -65,\n        -111,\n        -55\n    ],\n    rcommaaccentq: [\n        -20,\n        -20,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccents: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rcommaaccentsacute: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rcommaaccentscaron: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rcommaaccentscedilla: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rcommaaccentscommaaccent: [\n        -15,\n        -15,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    rcommaaccentt: [\n        20,\n        20,\n        40,\n        40\n    ],\n    rcommaaccenttcommaaccent: [\n        20,\n        20,\n        40,\n        40\n    ],\n    rcommaaccentv: [\n        10,\n        10,\n        30,\n        30,\n        -10\n    ],\n    rcommaaccenty: [\n        10,\n        10,\n        30,\n        30\n    ],\n    rcommaaccentyacute: [\n        10,\n        10,\n        30,\n        30\n    ],\n    rcommaaccentydieresis: [\n        10,\n        10,\n        30,\n        30\n    ],\n    sw: [\n        -15,\n        -15,\n        -30,\n        -30\n    ],\n    sacutew: [\n        -15,\n        -15,\n        -30,\n        -30\n    ],\n    scaronw: [\n        -15,\n        -15,\n        -30,\n        -30\n    ],\n    scedillaw: [\n        -15,\n        -15,\n        -30,\n        -30\n    ],\n    scommaaccentw: [\n        -15,\n        -15,\n        -30,\n        -30\n    ],\n    semicolonspace: [\n        -40,\n        -40,\n        -50,\n        -50\n    ],\n    spaceT: [\n        -100,\n        -100,\n        -50,\n        -50,\n        -30,\n        0,\n        -18,\n        -18\n    ],\n    spaceTcaron: [\n        -100,\n        -100,\n        -50,\n        -50,\n        -30,\n        0,\n        -18,\n        -18\n    ],\n    spaceTcommaaccent: [\n        -100,\n        -100,\n        -50,\n        -50,\n        -30,\n        0,\n        -18,\n        -18\n    ],\n    spaceV: [\n        -80,\n        -80,\n        -50,\n        -50,\n        -45,\n        -70,\n        -35,\n        -50\n    ],\n    spaceW: [\n        -80,\n        -80,\n        -40,\n        -40,\n        -30,\n        -70,\n        -40,\n        -30\n    ],\n    spaceY: [\n        -120,\n        -120,\n        -90,\n        -90,\n        -55,\n        -70,\n        -75,\n        -90\n    ],\n    spaceYacute: [\n        -120,\n        -120,\n        -90,\n        -90,\n        -55,\n        -70,\n        -75,\n        -90\n    ],\n    spaceYdieresis: [\n        -120,\n        -120,\n        -90,\n        -90,\n        -55,\n        -70,\n        -75,\n        -90\n    ],\n    spacequotedblleft: [\n        -80,\n        -80,\n        -30,\n        -30\n    ],\n    spacequoteleft: [\n        -60,\n        -60,\n        -60,\n        -60\n    ],\n    va: [\n        -20,\n        -20,\n        -25,\n        -25,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    vaacute: [\n        -20,\n        -20,\n        -25,\n        -25,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    vabreve: [\n        -20,\n        -20,\n        -25,\n        -25,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    vacircumflex: [\n        -20,\n        -20,\n        -25,\n        -25,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    vadieresis: [\n        -20,\n        -20,\n        -25,\n        -25,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    vagrave: [\n        -20,\n        -20,\n        -25,\n        -25,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    vamacron: [\n        -20,\n        -20,\n        -25,\n        -25,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    vaogonek: [\n        -20,\n        -20,\n        -25,\n        -25,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    varing: [\n        -20,\n        -20,\n        -25,\n        -25,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    vatilde: [\n        -20,\n        -20,\n        -25,\n        -25,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    vcomma: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -55,\n        -37,\n        -74,\n        -65\n    ],\n    vo: [\n        -30,\n        -30,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -20\n    ],\n    voacute: [\n        -30,\n        -30,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -20\n    ],\n    vocircumflex: [\n        -30,\n        -30,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -20\n    ],\n    vodieresis: [\n        -30,\n        -30,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -20\n    ],\n    vograve: [\n        -30,\n        -30,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -20\n    ],\n    vohungarumlaut: [\n        -30,\n        -30,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -20\n    ],\n    vomacron: [\n        -30,\n        -30,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -20\n    ],\n    voslash: [\n        -30,\n        -30,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -20\n    ],\n    votilde: [\n        -30,\n        -30,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -20\n    ],\n    vperiod: [\n        -80,\n        -80,\n        -80,\n        -80,\n        -70,\n        -37,\n        -74,\n        -65\n    ],\n    wcomma: [\n        -40,\n        -40,\n        -60,\n        -60,\n        -55,\n        -37,\n        -74,\n        -65\n    ],\n    wo: [\n        -20,\n        -20,\n        -10,\n        -10,\n        -10,\n        -15,\n        0,\n        -10\n    ],\n    woacute: [\n        -20,\n        -20,\n        -10,\n        -10,\n        -10,\n        -15,\n        0,\n        -10\n    ],\n    wocircumflex: [\n        -20,\n        -20,\n        -10,\n        -10,\n        -10,\n        -15,\n        0,\n        -10\n    ],\n    wodieresis: [\n        -20,\n        -20,\n        -10,\n        -10,\n        -10,\n        -15,\n        0,\n        -10\n    ],\n    wograve: [\n        -20,\n        -20,\n        -10,\n        -10,\n        -10,\n        -15,\n        0,\n        -10\n    ],\n    wohungarumlaut: [\n        -20,\n        -20,\n        -10,\n        -10,\n        -10,\n        -15,\n        0,\n        -10\n    ],\n    womacron: [\n        -20,\n        -20,\n        -10,\n        -10,\n        -10,\n        -15,\n        0,\n        -10\n    ],\n    woslash: [\n        -20,\n        -20,\n        -10,\n        -10,\n        -10,\n        -15,\n        0,\n        -10\n    ],\n    wotilde: [\n        -20,\n        -20,\n        -10,\n        -10,\n        -10,\n        -15,\n        0,\n        -10\n    ],\n    wperiod: [\n        -40,\n        -40,\n        -60,\n        -60,\n        -70,\n        -37,\n        -74,\n        -65\n    ],\n    xe: [\n        -10,\n        -10,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -15\n    ],\n    xeacute: [\n        -10,\n        -10,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -15\n    ],\n    xecaron: [\n        -10,\n        -10,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -15\n    ],\n    xecircumflex: [\n        -10,\n        -10,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -15\n    ],\n    xedieresis: [\n        -10,\n        -10,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -15\n    ],\n    xedotaccent: [\n        -10,\n        -10,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -15\n    ],\n    xegrave: [\n        -10,\n        -10,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -15\n    ],\n    xemacron: [\n        -10,\n        -10,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -15\n    ],\n    xeogonek: [\n        -10,\n        -10,\n        -30,\n        -30,\n        0,\n        -10,\n        0,\n        -15\n    ],\n    ya: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yaacute: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yabreve: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yacircumflex: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yadieresis: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yagrave: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yamacron: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yaogonek: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yaring: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yatilde: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    ycomma: [\n        -80,\n        -80,\n        -100,\n        -100,\n        -55,\n        -37,\n        -55,\n        -65\n    ],\n    ye: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yeacute: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yecaron: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yecircumflex: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yedieresis: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yedotaccent: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yegrave: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yemacron: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yeogonek: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yo: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yoacute: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yocircumflex: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yodieresis: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yograve: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yohungarumlaut: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yomacron: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yoslash: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yotilde: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yperiod: [\n        -80,\n        -80,\n        -100,\n        -100,\n        -70,\n        -37,\n        -55,\n        -65\n    ],\n    yacutea: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yacuteaacute: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yacuteabreve: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yacuteacircumflex: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yacuteadieresis: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yacuteagrave: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yacuteamacron: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yacuteaogonek: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yacutearing: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yacuteatilde: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    yacutecomma: [\n        -80,\n        -80,\n        -100,\n        -100,\n        -55,\n        -37,\n        -55,\n        -65\n    ],\n    yacutee: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yacuteeacute: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yacuteecaron: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yacuteecircumflex: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yacuteedieresis: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yacuteedotaccent: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yacuteegrave: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yacuteemacron: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yacuteeogonek: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    yacuteo: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yacuteoacute: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yacuteocircumflex: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yacuteodieresis: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yacuteograve: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yacuteohungarumlaut: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yacuteomacron: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yacuteoslash: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yacuteotilde: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    yacuteperiod: [\n        -80,\n        -80,\n        -100,\n        -100,\n        -70,\n        -37,\n        -55,\n        -65\n    ],\n    ydieresisa: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    ydieresisaacute: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    ydieresisabreve: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    ydieresisacircumflex: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    ydieresisadieresis: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    ydieresisagrave: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    ydieresisamacron: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    ydieresisaogonek: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    ydieresisaring: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    ydieresisatilde: [\n        -30,\n        -30,\n        -20,\n        -20\n    ],\n    ydieresiscomma: [\n        -80,\n        -80,\n        -100,\n        -100,\n        -55,\n        -37,\n        -55,\n        -65\n    ],\n    ydieresise: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    ydieresiseacute: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    ydieresisecaron: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    ydieresisecircumflex: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    ydieresisedieresis: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    ydieresisedotaccent: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    ydieresisegrave: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    ydieresisemacron: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    ydieresiseogonek: [\n        -10,\n        -10,\n        -20,\n        -20,\n        -10\n    ],\n    ydieresiso: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    ydieresisoacute: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    ydieresisocircumflex: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    ydieresisodieresis: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    ydieresisograve: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    ydieresisohungarumlaut: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    ydieresisomacron: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    ydieresisoslash: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    ydieresisotilde: [\n        -25,\n        -25,\n        -20,\n        -20,\n        -25\n    ],\n    ydieresisperiod: [\n        -80,\n        -80,\n        -100,\n        -100,\n        -70,\n        -37,\n        -55,\n        -65\n    ],\n    ze: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zeacute: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zecaron: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zecircumflex: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zedieresis: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zedotaccent: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zegrave: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zemacron: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zeogonek: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zacutee: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zacuteeacute: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zacuteecaron: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zacuteecircumflex: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zacuteedieresis: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zacuteedotaccent: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zacuteegrave: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zacuteemacron: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zacuteeogonek: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zcarone: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zcaroneacute: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zcaronecaron: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zcaronecircumflex: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zcaronedieresis: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zcaronedotaccent: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zcaronegrave: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zcaronemacron: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zcaroneogonek: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zdotaccente: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zdotaccenteacute: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zdotaccentecaron: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zdotaccentecircumflex: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zdotaccentedieresis: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zdotaccentedotaccent: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zdotaccentegrave: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zdotaccentemacron: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    zdotaccenteogonek: [\n        10,\n        10,\n        -15,\n        -15\n    ],\n    Bcomma: [\n        0,\n        0,\n        -20,\n        -20\n    ],\n    Bperiod: [\n        0,\n        0,\n        -20,\n        -20\n    ],\n    Ccomma: [\n        0,\n        0,\n        -30,\n        -30\n    ],\n    Cperiod: [\n        0,\n        0,\n        -30,\n        -30\n    ],\n    Cacutecomma: [\n        0,\n        0,\n        -30,\n        -30\n    ],\n    Cacuteperiod: [\n        0,\n        0,\n        -30,\n        -30\n    ],\n    Ccaroncomma: [\n        0,\n        0,\n        -30,\n        -30\n    ],\n    Ccaronperiod: [\n        0,\n        0,\n        -30,\n        -30\n    ],\n    Ccedillacomma: [\n        0,\n        0,\n        -30,\n        -30\n    ],\n    Ccedillaperiod: [\n        0,\n        0,\n        -30,\n        -30\n    ],\n    Fe: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -100,\n        -75\n    ],\n    Feacute: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -100,\n        -75\n    ],\n    Fecaron: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -100,\n        -75\n    ],\n    Fecircumflex: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -100,\n        -75\n    ],\n    Fedieresis: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -100,\n        -75\n    ],\n    Fedotaccent: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -100,\n        -75\n    ],\n    Fegrave: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -100,\n        -75\n    ],\n    Femacron: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -100,\n        -75\n    ],\n    Feogonek: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -100,\n        -75\n    ],\n    Fo: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -70,\n        -105,\n        -15\n    ],\n    Foacute: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -70,\n        -105,\n        -15\n    ],\n    Focircumflex: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -70,\n        -105,\n        -15\n    ],\n    Fodieresis: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -70,\n        -105,\n        -15\n    ],\n    Fograve: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -70,\n        -105,\n        -15\n    ],\n    Fohungarumlaut: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -70,\n        -105,\n        -15\n    ],\n    Fomacron: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -70,\n        -105,\n        -15\n    ],\n    Foslash: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -70,\n        -105,\n        -15\n    ],\n    Fotilde: [\n        0,\n        0,\n        -30,\n        -30,\n        -25,\n        -70,\n        -105,\n        -15\n    ],\n    Fr: [\n        0,\n        0,\n        -45,\n        -45,\n        0,\n        -50,\n        -55\n    ],\n    Fracute: [\n        0,\n        0,\n        -45,\n        -45,\n        0,\n        -50,\n        -55\n    ],\n    Frcaron: [\n        0,\n        0,\n        -45,\n        -45,\n        0,\n        -50,\n        -55\n    ],\n    Frcommaaccent: [\n        0,\n        0,\n        -45,\n        -45,\n        0,\n        -50,\n        -55\n    ],\n    Ja: [\n        0,\n        0,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Jaacute: [\n        0,\n        0,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Jabreve: [\n        0,\n        0,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Jacircumflex: [\n        0,\n        0,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Jadieresis: [\n        0,\n        0,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Jagrave: [\n        0,\n        0,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Jamacron: [\n        0,\n        0,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Jaogonek: [\n        0,\n        0,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Jaring: [\n        0,\n        0,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    Jatilde: [\n        0,\n        0,\n        -20,\n        -20,\n        -15,\n        -40,\n        -35\n    ],\n    LcaronT: [\n        0,\n        0,\n        -110,\n        -110\n    ],\n    LcaronTcaron: [\n        0,\n        0,\n        -110,\n        -110\n    ],\n    LcaronTcommaaccent: [\n        0,\n        0,\n        -110,\n        -110\n    ],\n    LcaronV: [\n        0,\n        0,\n        -110,\n        -110\n    ],\n    LcaronW: [\n        0,\n        0,\n        -70,\n        -70\n    ],\n    LcaronY: [\n        0,\n        0,\n        -140,\n        -140\n    ],\n    LcaronYacute: [\n        0,\n        0,\n        -140,\n        -140\n    ],\n    LcaronYdieresis: [\n        0,\n        0,\n        -140,\n        -140\n    ],\n    Lcaronquotedblright: [\n        0,\n        0,\n        -140,\n        -140\n    ],\n    Lcaronquoteright: [\n        0,\n        0,\n        -160,\n        -160,\n        0,\n        0,\n        0,\n        -92\n    ],\n    Lcarony: [\n        0,\n        0,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -55\n    ],\n    Lcaronyacute: [\n        0,\n        0,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -55\n    ],\n    Lcaronydieresis: [\n        0,\n        0,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -55\n    ],\n    Scomma: [\n        0,\n        0,\n        -20,\n        -20\n    ],\n    Speriod: [\n        0,\n        0,\n        -20,\n        -20\n    ],\n    Sacutecomma: [\n        0,\n        0,\n        -20,\n        -20\n    ],\n    Sacuteperiod: [\n        0,\n        0,\n        -20,\n        -20\n    ],\n    Scaroncomma: [\n        0,\n        0,\n        -20,\n        -20\n    ],\n    Scaronperiod: [\n        0,\n        0,\n        -20,\n        -20\n    ],\n    Scedillacomma: [\n        0,\n        0,\n        -20,\n        -20\n    ],\n    Scedillaperiod: [\n        0,\n        0,\n        -20,\n        -20\n    ],\n    Scommaaccentcomma: [\n        0,\n        0,\n        -20,\n        -20\n    ],\n    Scommaaccentperiod: [\n        0,\n        0,\n        -20,\n        -20\n    ],\n    Trcaron: [\n        0,\n        0,\n        -120,\n        -120,\n        -74,\n        -37,\n        -55,\n        -35\n    ],\n    Tcaronrcaron: [\n        0,\n        0,\n        -120,\n        -120,\n        -74,\n        -37,\n        -55,\n        -35\n    ],\n    Tcommaaccentrcaron: [\n        0,\n        0,\n        -120,\n        -120,\n        -74,\n        -37,\n        -55,\n        -35\n    ],\n    Yhyphen: [\n        0,\n        0,\n        -140,\n        -140,\n        -92,\n        -92,\n        -74,\n        -111\n    ],\n    Yi: [\n        0,\n        0,\n        -20,\n        -20,\n        -37,\n        -55,\n        -74,\n        -55\n    ],\n    Yiacute: [\n        0,\n        0,\n        -20,\n        -20,\n        -37,\n        -55,\n        -74,\n        -55\n    ],\n    Yiogonek: [\n        0,\n        0,\n        -20,\n        -20,\n        -37,\n        -55,\n        -74,\n        -55\n    ],\n    Yacutehyphen: [\n        0,\n        0,\n        -140,\n        -140,\n        -92,\n        -92,\n        -74,\n        -111\n    ],\n    Yacutei: [\n        0,\n        0,\n        -20,\n        -20,\n        -37,\n        -55,\n        -74,\n        -55\n    ],\n    Yacuteiacute: [\n        0,\n        0,\n        -20,\n        -20,\n        -37,\n        -55,\n        -74,\n        -55\n    ],\n    Yacuteiogonek: [\n        0,\n        0,\n        -20,\n        -20,\n        -37,\n        -55,\n        -74,\n        -55\n    ],\n    Ydieresishyphen: [\n        0,\n        0,\n        -140,\n        -140,\n        -92,\n        -92,\n        -74,\n        -111\n    ],\n    Ydieresisi: [\n        0,\n        0,\n        -20,\n        -20,\n        -37,\n        -55,\n        -74,\n        -55\n    ],\n    Ydieresisiacute: [\n        0,\n        0,\n        -20,\n        -20,\n        -37,\n        -55,\n        -74,\n        -55\n    ],\n    Ydieresisiogonek: [\n        0,\n        0,\n        -20,\n        -20,\n        -37,\n        -55,\n        -74,\n        -55\n    ],\n    bb: [\n        0,\n        0,\n        -10,\n        -10,\n        -10,\n        -10\n    ],\n    bcomma: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    bperiod: [\n        0,\n        0,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40,\n        -40\n    ],\n    ccomma: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    cacutecomma: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    ccaroncomma: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    ccedillacomma: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    fa: [\n        0,\n        0,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -10\n    ],\n    faacute: [\n        0,\n        0,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -10\n    ],\n    fabreve: [\n        0,\n        0,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -10\n    ],\n    facircumflex: [\n        0,\n        0,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -10\n    ],\n    fadieresis: [\n        0,\n        0,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -10\n    ],\n    fagrave: [\n        0,\n        0,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -10\n    ],\n    famacron: [\n        0,\n        0,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -10\n    ],\n    faogonek: [\n        0,\n        0,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -10\n    ],\n    faring: [\n        0,\n        0,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -10\n    ],\n    fatilde: [\n        0,\n        0,\n        -30,\n        -30,\n        0,\n        0,\n        0,\n        -10\n    ],\n    fdotlessi: [\n        0,\n        0,\n        -28,\n        -28,\n        -35,\n        -30,\n        -60,\n        -50\n    ],\n    gr: [\n        0,\n        0,\n        -10,\n        -10\n    ],\n    gracute: [\n        0,\n        0,\n        -10,\n        -10\n    ],\n    grcaron: [\n        0,\n        0,\n        -10,\n        -10\n    ],\n    grcommaaccent: [\n        0,\n        0,\n        -10,\n        -10\n    ],\n    gbrever: [\n        0,\n        0,\n        -10,\n        -10\n    ],\n    gbreveracute: [\n        0,\n        0,\n        -10,\n        -10\n    ],\n    gbrevercaron: [\n        0,\n        0,\n        -10,\n        -10\n    ],\n    gbrevercommaaccent: [\n        0,\n        0,\n        -10,\n        -10\n    ],\n    gcommaaccentr: [\n        0,\n        0,\n        -10,\n        -10\n    ],\n    gcommaaccentracute: [\n        0,\n        0,\n        -10,\n        -10\n    ],\n    gcommaaccentrcaron: [\n        0,\n        0,\n        -10,\n        -10\n    ],\n    gcommaaccentrcommaaccent: [\n        0,\n        0,\n        -10,\n        -10\n    ],\n    ke: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    keacute: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kecaron: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kecircumflex: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kedieresis: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kedotaccent: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kegrave: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kemacron: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    keogonek: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kcommaaccente: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kcommaaccenteacute: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kcommaaccentecaron: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kcommaaccentecircumflex: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kcommaaccentedieresis: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kcommaaccentedotaccent: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kcommaaccentegrave: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kcommaaccentemacron: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    kcommaaccenteogonek: [\n        0,\n        0,\n        -20,\n        -20,\n        -10,\n        -30,\n        -10,\n        -10\n    ],\n    ocomma: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    operiod: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    oacutecomma: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    oacuteperiod: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    ocircumflexcomma: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    ocircumflexperiod: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    odieresiscomma: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    odieresisperiod: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    ogravecomma: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    ograveperiod: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    ohungarumlautcomma: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    ohungarumlautperiod: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    omacroncomma: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    omacronperiod: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    oslasha: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashaacute: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashabreve: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashacircumflex: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashadieresis: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashagrave: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashamacron: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashaogonek: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslasharing: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashatilde: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashb: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashc: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashcacute: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashccaron: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashccedilla: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashcomma: [\n        0,\n        0,\n        -95,\n        -95\n    ],\n    oslashd: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashdcroat: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashe: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslasheacute: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashecaron: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashecircumflex: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashedieresis: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashedotaccent: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashegrave: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashemacron: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslasheogonek: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashf: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashg: [\n        0,\n        0,\n        -55,\n        -55,\n        0,\n        0,\n        -10\n    ],\n    oslashgbreve: [\n        0,\n        0,\n        -55,\n        -55,\n        0,\n        0,\n        -10\n    ],\n    oslashgcommaaccent: [\n        0,\n        0,\n        -55,\n        -55,\n        0,\n        0,\n        -10\n    ],\n    oslashh: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashi: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashiacute: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashicircumflex: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashidieresis: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashigrave: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashimacron: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashiogonek: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashj: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashk: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashkcommaaccent: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashl: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashlacute: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashlcommaaccent: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashlslash: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashm: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashn: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashnacute: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashncaron: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashncommaaccent: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashntilde: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslasho: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashoacute: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashocircumflex: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashodieresis: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashograve: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashohungarumlaut: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashomacron: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashoslash: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashotilde: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashp: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashperiod: [\n        0,\n        0,\n        -95,\n        -95\n    ],\n    oslashq: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashr: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashracute: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashrcaron: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashrcommaaccent: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashs: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashsacute: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashscaron: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashscedilla: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashscommaaccent: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslasht: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashtcommaaccent: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashu: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashuacute: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashucircumflex: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashudieresis: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashugrave: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashuhungarumlaut: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashumacron: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashuogonek: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashuring: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashz: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashzacute: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashzcaron: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    oslashzdotaccent: [\n        0,\n        0,\n        -55,\n        -55\n    ],\n    otildecomma: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    otildeperiod: [\n        0,\n        0,\n        -40,\n        -40\n    ],\n    pcomma: [\n        0,\n        0,\n        -35,\n        -35\n    ],\n    pperiod: [\n        0,\n        0,\n        -35,\n        -35\n    ],\n    ra: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    raacute: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rabreve: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    racircumflex: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    radieresis: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    ragrave: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    ramacron: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    raogonek: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    raring: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    ratilde: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcolon: [\n        0,\n        0,\n        30,\n        30\n    ],\n    ri: [\n        0,\n        0,\n        15,\n        15\n    ],\n    riacute: [\n        0,\n        0,\n        15,\n        15\n    ],\n    ricircumflex: [\n        0,\n        0,\n        15,\n        15\n    ],\n    ridieresis: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rigrave: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rimacron: [\n        0,\n        0,\n        15,\n        15\n    ],\n    riogonek: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rk: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rkcommaaccent: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rl: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rlacute: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rlcommaaccent: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rlslash: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rm: [\n        0,\n        0,\n        25,\n        25\n    ],\n    rn: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rnacute: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rncaron: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rncommaaccent: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rntilde: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rp: [\n        0,\n        0,\n        30,\n        30,\n        -10\n    ],\n    rsemicolon: [\n        0,\n        0,\n        30,\n        30\n    ],\n    ru: [\n        0,\n        0,\n        15,\n        15\n    ],\n    ruacute: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rucircumflex: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rudieresis: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rugrave: [\n        0,\n        0,\n        15,\n        15\n    ],\n    ruhungarumlaut: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rumacron: [\n        0,\n        0,\n        15,\n        15\n    ],\n    ruogonek: [\n        0,\n        0,\n        15,\n        15\n    ],\n    ruring: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racutea: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    racuteaacute: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    racuteabreve: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    racuteacircumflex: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    racuteadieresis: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    racuteagrave: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    racuteamacron: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    racuteaogonek: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    racutearing: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    racuteatilde: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    racutecolon: [\n        0,\n        0,\n        30,\n        30\n    ],\n    racutei: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteiacute: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteicircumflex: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteidieresis: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteigrave: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteimacron: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteiogonek: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racutek: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racutekcommaaccent: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racutel: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racutelacute: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racutelcommaaccent: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racutelslash: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racutem: [\n        0,\n        0,\n        25,\n        25\n    ],\n    racuten: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    racutenacute: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    racutencaron: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    racutencommaaccent: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    racutentilde: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    racutep: [\n        0,\n        0,\n        30,\n        30,\n        -10\n    ],\n    racutesemicolon: [\n        0,\n        0,\n        30,\n        30\n    ],\n    racuteu: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteuacute: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteucircumflex: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteudieresis: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteugrave: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteuhungarumlaut: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteumacron: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteuogonek: [\n        0,\n        0,\n        15,\n        15\n    ],\n    racuteuring: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcarona: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcaronaacute: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcaronabreve: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcaronacircumflex: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcaronadieresis: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcaronagrave: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcaronamacron: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcaronaogonek: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcaronaring: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcaronatilde: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcaroncolon: [\n        0,\n        0,\n        30,\n        30\n    ],\n    rcaroni: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaroniacute: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronicircumflex: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronidieresis: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronigrave: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronimacron: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaroniogonek: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronk: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronkcommaaccent: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronl: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronlacute: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronlcommaaccent: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronlslash: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronm: [\n        0,\n        0,\n        25,\n        25\n    ],\n    rcaronn: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rcaronnacute: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rcaronncaron: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rcaronncommaaccent: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rcaronntilde: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rcaronp: [\n        0,\n        0,\n        30,\n        30,\n        -10\n    ],\n    rcaronsemicolon: [\n        0,\n        0,\n        30,\n        30\n    ],\n    rcaronu: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronuacute: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronucircumflex: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronudieresis: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronugrave: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronuhungarumlaut: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronumacron: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronuogonek: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcaronuring: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccenta: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcommaaccentaacute: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcommaaccentabreve: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcommaaccentacircumflex: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcommaaccentadieresis: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcommaaccentagrave: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcommaaccentamacron: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcommaaccentaogonek: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcommaaccentaring: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcommaaccentatilde: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        0,\n        -15\n    ],\n    rcommaaccentcolon: [\n        0,\n        0,\n        30,\n        30\n    ],\n    rcommaaccenti: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentiacute: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccenticircumflex: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentidieresis: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentigrave: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentimacron: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentiogonek: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentk: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentkcommaaccent: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentl: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentlacute: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentlcommaaccent: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentlslash: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentm: [\n        0,\n        0,\n        25,\n        25\n    ],\n    rcommaaccentn: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rcommaaccentnacute: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rcommaaccentncaron: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rcommaaccentncommaaccent: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rcommaaccentntilde: [\n        0,\n        0,\n        25,\n        25,\n        -15\n    ],\n    rcommaaccentp: [\n        0,\n        0,\n        30,\n        30,\n        -10\n    ],\n    rcommaaccentsemicolon: [\n        0,\n        0,\n        30,\n        30\n    ],\n    rcommaaccentu: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentuacute: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentucircumflex: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentudieresis: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentugrave: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentuhungarumlaut: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentumacron: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccentuogonek: [\n        0,\n        0,\n        15,\n        15\n    ],\n    rcommaaccenturing: [\n        0,\n        0,\n        15,\n        15\n    ],\n    scomma: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    speriod: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    sacutecomma: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    sacuteperiod: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    scaroncomma: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    scaronperiod: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    scedillacomma: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    scedillaperiod: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    scommaaccentcomma: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    scommaaccentperiod: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    ve: [\n        0,\n        0,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -15\n    ],\n    veacute: [\n        0,\n        0,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -15\n    ],\n    vecaron: [\n        0,\n        0,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -15\n    ],\n    vecircumflex: [\n        0,\n        0,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -15\n    ],\n    vedieresis: [\n        0,\n        0,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -15\n    ],\n    vedotaccent: [\n        0,\n        0,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -15\n    ],\n    vegrave: [\n        0,\n        0,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -15\n    ],\n    vemacron: [\n        0,\n        0,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -15\n    ],\n    veogonek: [\n        0,\n        0,\n        -25,\n        -25,\n        -10,\n        -15,\n        0,\n        -15\n    ],\n    wa: [\n        0,\n        0,\n        -15,\n        -15,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    waacute: [\n        0,\n        0,\n        -15,\n        -15,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    wabreve: [\n        0,\n        0,\n        -15,\n        -15,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    wacircumflex: [\n        0,\n        0,\n        -15,\n        -15,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    wadieresis: [\n        0,\n        0,\n        -15,\n        -15,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    wagrave: [\n        0,\n        0,\n        -15,\n        -15,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    wamacron: [\n        0,\n        0,\n        -15,\n        -15,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    waogonek: [\n        0,\n        0,\n        -15,\n        -15,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    waring: [\n        0,\n        0,\n        -15,\n        -15,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    watilde: [\n        0,\n        0,\n        -15,\n        -15,\n        0,\n        -10,\n        0,\n        -10\n    ],\n    we: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        -10\n    ],\n    weacute: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        -10\n    ],\n    wecaron: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        -10\n    ],\n    wecircumflex: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        -10\n    ],\n    wedieresis: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        -10\n    ],\n    wedotaccent: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        -10\n    ],\n    wegrave: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        -10\n    ],\n    wemacron: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        -10\n    ],\n    weogonek: [\n        0,\n        0,\n        -10,\n        -10,\n        0,\n        -10\n    ],\n    zo: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zoacute: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zocircumflex: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zodieresis: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zograve: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zohungarumlaut: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zomacron: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zoslash: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zotilde: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zacuteo: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zacuteoacute: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zacuteocircumflex: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zacuteodieresis: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zacuteograve: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zacuteohungarumlaut: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zacuteomacron: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zacuteoslash: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zacuteotilde: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zcarono: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zcaronoacute: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zcaronocircumflex: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zcaronodieresis: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zcaronograve: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zcaronohungarumlaut: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zcaronomacron: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zcaronoslash: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zcaronotilde: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zdotaccento: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zdotaccentoacute: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zdotaccentocircumflex: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zdotaccentodieresis: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zdotaccentograve: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zdotaccentohungarumlaut: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zdotaccentomacron: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zdotaccentoslash: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    zdotaccentotilde: [\n        0,\n        0,\n        -15,\n        -15\n    ],\n    Ap: [\n        0,\n        0,\n        0,\n        0,\n        -25\n    ],\n    Aquoteright: [\n        0,\n        0,\n        0,\n        0,\n        -74,\n        -74,\n        -37,\n        -111\n    ],\n    Aacutep: [\n        0,\n        0,\n        0,\n        0,\n        -25\n    ],\n    Aacutequoteright: [\n        0,\n        0,\n        0,\n        0,\n        -74,\n        -74,\n        -37,\n        -111\n    ],\n    Abrevep: [\n        0,\n        0,\n        0,\n        0,\n        -25\n    ],\n    Abrevequoteright: [\n        0,\n        0,\n        0,\n        0,\n        -74,\n        -74,\n        -37,\n        -111\n    ],\n    Acircumflexp: [\n        0,\n        0,\n        0,\n        0,\n        -25\n    ],\n    Acircumflexquoteright: [\n        0,\n        0,\n        0,\n        0,\n        -74,\n        -74,\n        -37,\n        -111\n    ],\n    Adieresisp: [\n        0,\n        0,\n        0,\n        0,\n        -25\n    ],\n    Adieresisquoteright: [\n        0,\n        0,\n        0,\n        0,\n        -74,\n        -74,\n        -37,\n        -111\n    ],\n    Agravep: [\n        0,\n        0,\n        0,\n        0,\n        -25\n    ],\n    Agravequoteright: [\n        0,\n        0,\n        0,\n        0,\n        -74,\n        -74,\n        -37,\n        -111\n    ],\n    Amacronp: [\n        0,\n        0,\n        0,\n        0,\n        -25\n    ],\n    Amacronquoteright: [\n        0,\n        0,\n        0,\n        0,\n        -74,\n        -74,\n        -37,\n        -111\n    ],\n    Aogonekp: [\n        0,\n        0,\n        0,\n        0,\n        -25\n    ],\n    Aogonekquoteright: [\n        0,\n        0,\n        0,\n        0,\n        -74,\n        -74,\n        -37,\n        -111\n    ],\n    Aringp: [\n        0,\n        0,\n        0,\n        0,\n        -25\n    ],\n    Aringquoteright: [\n        0,\n        0,\n        0,\n        0,\n        -74,\n        -74,\n        -37,\n        -111\n    ],\n    Atildep: [\n        0,\n        0,\n        0,\n        0,\n        -25\n    ],\n    Atildequoteright: [\n        0,\n        0,\n        0,\n        0,\n        -74,\n        -74,\n        -37,\n        -111\n    ],\n    Je: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jeacute: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jecaron: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jecircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jedieresis: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jedotaccent: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jegrave: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jemacron: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jeogonek: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jo: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Joacute: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jocircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jodieresis: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jograve: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Johungarumlaut: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jomacron: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Joslash: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    Jotilde: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        -40,\n        -25\n    ],\n    NA: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NAacute: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NAbreve: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NAcircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NAdieresis: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NAgrave: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NAmacron: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NAogonek: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NAring: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NAtilde: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NacuteA: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NacuteAacute: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NacuteAbreve: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NacuteAcircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NacuteAdieresis: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NacuteAgrave: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NacuteAmacron: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NacuteAogonek: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NacuteAring: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NacuteAtilde: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcaronA: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcaronAacute: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcaronAbreve: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcaronAcircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcaronAdieresis: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcaronAgrave: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcaronAmacron: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcaronAogonek: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcaronAring: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcaronAtilde: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcommaaccentA: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcommaaccentAacute: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcommaaccentAbreve: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcommaaccentAcircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcommaaccentAdieresis: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcommaaccentAgrave: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcommaaccentAmacron: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcommaaccentAogonek: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcommaaccentAring: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NcommaaccentAtilde: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NtildeA: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NtildeAacute: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NtildeAbreve: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NtildeAcircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NtildeAdieresis: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NtildeAgrave: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NtildeAmacron: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NtildeAogonek: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NtildeAring: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    NtildeAtilde: [\n        0,\n        0,\n        0,\n        0,\n        -20,\n        -30,\n        -27,\n        -35\n    ],\n    Ti: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        -37,\n        -55,\n        -35\n    ],\n    Tiacute: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        -37,\n        -55,\n        -35\n    ],\n    Tiogonek: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        -37,\n        -55,\n        -35\n    ],\n    Tcaroni: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        -37,\n        -55,\n        -35\n    ],\n    Tcaroniacute: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        -37,\n        -55,\n        -35\n    ],\n    Tcaroniogonek: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        -37,\n        -55,\n        -35\n    ],\n    Tcommaaccenti: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        -37,\n        -55,\n        -35\n    ],\n    Tcommaaccentiacute: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        -37,\n        -55,\n        -35\n    ],\n    Tcommaaccentiogonek: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        -37,\n        -55,\n        -35\n    ],\n    Vi: [\n        0,\n        0,\n        0,\n        0,\n        -37,\n        -55,\n        -74,\n        -60\n    ],\n    Viacute: [\n        0,\n        0,\n        0,\n        0,\n        -37,\n        -55,\n        -74,\n        -60\n    ],\n    Vicircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -37,\n        0,\n        -34,\n        -20\n    ],\n    Vidieresis: [\n        0,\n        0,\n        0,\n        0,\n        -37,\n        0,\n        -34,\n        -20\n    ],\n    Vigrave: [\n        0,\n        0,\n        0,\n        0,\n        -37,\n        0,\n        -34,\n        -20\n    ],\n    Vimacron: [\n        0,\n        0,\n        0,\n        0,\n        -37,\n        0,\n        -34,\n        -20\n    ],\n    Viogonek: [\n        0,\n        0,\n        0,\n        0,\n        -37,\n        -55,\n        -74,\n        -60\n    ],\n    Wi: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        -37,\n        -55,\n        -40\n    ],\n    Wiacute: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        -37,\n        -55,\n        -40\n    ],\n    Wiogonek: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        -37,\n        -55,\n        -40\n    ],\n    fi: [\n        0,\n        0,\n        0,\n        0,\n        -25,\n        0,\n        -20,\n        -20\n    ],\n    gperiod: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        0,\n        -15\n    ],\n    gbreveperiod: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        0,\n        -15\n    ],\n    gcommaaccentperiod: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        0,\n        -15\n    ],\n    iv: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    iacutev: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    icircumflexv: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    idieresisv: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    igravev: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    imacronv: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    iogonekv: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -25\n    ],\n    ky: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        0,\n        -10,\n        -15\n    ],\n    kyacute: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        0,\n        -10,\n        -15\n    ],\n    kydieresis: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        0,\n        -10,\n        -15\n    ],\n    kcommaaccenty: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        0,\n        -10,\n        -15\n    ],\n    kcommaaccentyacute: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        0,\n        -10,\n        -15\n    ],\n    kcommaaccentydieresis: [\n        0,\n        0,\n        0,\n        0,\n        -15,\n        0,\n        -10,\n        -15\n    ],\n    quotedblleftA: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quotedblleftAacute: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quotedblleftAbreve: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quotedblleftAcircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quotedblleftAdieresis: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quotedblleftAgrave: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quotedblleftAmacron: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quotedblleftAogonek: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quotedblleftAring: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quotedblleftAtilde: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quoteleftA: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quoteleftAacute: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quoteleftAbreve: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quoteleftAcircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quoteleftAdieresis: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quoteleftAgrave: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quoteleftAmacron: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quoteleftAogonek: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quoteleftAring: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    quoteleftAtilde: [\n        0,\n        0,\n        0,\n        0,\n        -10,\n        0,\n        0,\n        -80\n    ],\n    re: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    reacute: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    recaron: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    recircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    redieresis: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    redotaccent: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    regrave: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    remacron: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    reogonek: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racutee: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racuteeacute: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racuteecaron: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racuteecircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racuteedieresis: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racuteedotaccent: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racuteegrave: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racuteemacron: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    racuteeogonek: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcarone: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcaroneacute: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcaronecaron: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcaronecircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcaronedieresis: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcaronedotaccent: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcaronegrave: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcaronemacron: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcaroneogonek: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccente: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccenteacute: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccentecaron: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccentecircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccentedieresis: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccentedotaccent: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccentegrave: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccentemacron: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    rcommaaccenteogonek: [\n        0,\n        0,\n        0,\n        0,\n        -18,\n        0,\n        -37\n    ],\n    spaceA: [\n        0,\n        0,\n        0,\n        0,\n        -55,\n        -37,\n        -18,\n        -55\n    ],\n    spaceAacute: [\n        0,\n        0,\n        0,\n        0,\n        -55,\n        -37,\n        -18,\n        -55\n    ],\n    spaceAbreve: [\n        0,\n        0,\n        0,\n        0,\n        -55,\n        -37,\n        -18,\n        -55\n    ],\n    spaceAcircumflex: [\n        0,\n        0,\n        0,\n        0,\n        -55,\n        -37,\n        -18,\n        -55\n    ],\n    spaceAdieresis: [\n        0,\n        0,\n        0,\n        0,\n        -55,\n        -37,\n        -18,\n        -55\n    ],\n    spaceAgrave: [\n        0,\n        0,\n        0,\n        0,\n        -55,\n        -37,\n        -18,\n        -55\n    ],\n    spaceAmacron: [\n        0,\n        0,\n        0,\n        0,\n        -55,\n        -37,\n        -18,\n        -55\n    ],\n    spaceAogonek: [\n        0,\n        0,\n        0,\n        0,\n        -55,\n        -37,\n        -18,\n        -55\n    ],\n    spaceAring: [\n        0,\n        0,\n        0,\n        0,\n        -55,\n        -37,\n        -18,\n        -55\n    ],\n    spaceAtilde: [\n        0,\n        0,\n        0,\n        0,\n        -55,\n        -37,\n        -18,\n        -55\n    ],\n    Fi: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -45\n    ],\n    Fiacute: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -45\n    ],\n    Ficircumflex: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -45\n    ],\n    Fidieresis: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -45\n    ],\n    Figrave: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -45\n    ],\n    Fimacron: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -45\n    ],\n    Fiogonek: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -45\n    ],\n    eb: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    eacuteb: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ecaronb: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ecircumflexb: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    edieresisb: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    edotaccentb: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    egraveb: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    emacronb: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    eogonekb: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ff: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -18,\n        -18,\n        -25\n    ],\n    quoterightt: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -37,\n        -30,\n        -18\n    ],\n    quoterighttcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        -37,\n        -30,\n        -18\n    ],\n    Yicircumflex: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -34\n    ],\n    Yidieresis: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -34\n    ],\n    Yigrave: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -34\n    ],\n    Yimacron: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -34\n    ],\n    Yacuteicircumflex: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -34\n    ],\n    Yacuteidieresis: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -34\n    ],\n    Yacuteigrave: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -34\n    ],\n    Yacuteimacron: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -34\n    ],\n    Ydieresisicircumflex: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -34\n    ],\n    Ydieresisidieresis: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -34\n    ],\n    Ydieresisigrave: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -34\n    ],\n    Ydieresisimacron: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -34\n    ],\n    eg: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    egbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    egcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    eacuteg: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    eacutegbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    eacutegcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    ecarong: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    ecarongbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    ecarongcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    ecircumflexg: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    ecircumflexgbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    ecircumflexgcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    edieresisg: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    edieresisgbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    edieresisgcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    edotaccentg: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    edotaccentgbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    edotaccentgcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    egraveg: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    egravegbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    egravegcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    emacrong: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    emacrongbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    emacrongcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    eogonekg: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    eogonekgbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    eogonekgcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -40,\n        -15\n    ],\n    fiogonek: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -20\n    ],\n    gcomma: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gbrevecomma: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    gcommaaccentcomma: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    og: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ogbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ogcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    oacuteg: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    oacutegbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    oacutegcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ocircumflexg: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ocircumflexgbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ocircumflexgcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    odieresisg: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    odieresisgbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    odieresisgcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ograveg: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ogravegbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ogravegcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ohungarumlautg: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ohungarumlautgbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    ohungarumlautgcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    omacrong: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    omacrongbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    omacrongcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    otildeg: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    otildegbreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    otildegcommaaccent: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -10\n    ],\n    fiacute: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -20\n    ],\n    ga: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gaacute: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gabreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gacircumflex: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gadieresis: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gagrave: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gamacron: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gaogonek: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    garing: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gatilde: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gbrevea: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gbreveaacute: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gbreveabreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gbreveacircumflex: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gbreveadieresis: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gbreveagrave: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gbreveamacron: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gbreveaogonek: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gbrevearing: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gbreveatilde: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gcommaaccenta: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gcommaaccentaacute: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gcommaaccentabreve: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gcommaaccentacircumflex: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gcommaaccentadieresis: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gcommaaccentagrave: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gcommaaccentamacron: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gcommaaccentaogonek: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gcommaaccentaring: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ],\n    gcommaaccentatilde: [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        -5\n    ]\n};\nvar data = {\n    attributes: attributes,\n    glyphWidths: glyphWidths,\n    kernPairs: kernPairs\n};\nvar initFont = function initFont(font) {\n    return [\n        font.FontName,\n        {\n            attributes: font,\n            glyphWidths: {},\n            kernPairs: {}\n        }\n    ];\n};\nvar expandData = function expandData(data) {\n    var attributes = data.attributes, glyphWidths = data.glyphWidths, kernPairs = data.kernPairs;\n    var fonts = attributes.map(initFont);\n    Object.keys(glyphWidths).forEach(function(key) {\n        glyphWidths[key].forEach(function(value, index) {\n            if (value) fonts[index][1].glyphWidths[key] = value;\n        });\n    });\n    Object.keys(kernPairs).forEach(function(key) {\n        kernPairs[key].forEach(function(value, index) {\n            if (value) fonts[index][1].kernPairs[key] = value;\n        });\n    });\n    return Object.fromEntries(fonts);\n};\nvar STANDARD_FONTS = expandData(data);\nvar createStandardFont = function createStandardFont(PDFFont) {\n    return /*#__PURE__*/ function(_PDFFont) {\n        _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__(StandardFont, _PDFFont);\n        function StandardFont(document, name, id) {\n            var _this;\n            _this = _PDFFont.call(this) || this;\n            _this.document = document;\n            _this.name = name;\n            _this.id = id;\n            _this.font = AFMFont.fromJson(STANDARD_FONTS[_this.name]);\n            _this.ascender = _this.font.ascender;\n            _this.descender = _this.font.descender;\n            _this.bbox = _this.font.bbox;\n            _this.lineGap = _this.font.lineGap;\n            return _this;\n        }\n        var _proto = StandardFont.prototype;\n        _proto.embed = function embed() {\n            this.dictionary.data = {\n                Type: \"Font\",\n                BaseFont: this.name,\n                Subtype: \"Type1\",\n                Encoding: \"WinAnsiEncoding\"\n            };\n            return this.dictionary.end();\n        };\n        _proto.encode = function encode(text) {\n            var encoded = this.font.encodeText(text);\n            var glyphs = this.font.glyphsForString(\"\" + text);\n            var advances = this.font.advancesForGlyphs(glyphs);\n            var positions = [];\n            for(var i = 0; i < glyphs.length; i++){\n                var glyph = glyphs[i];\n                positions.push({\n                    xAdvance: advances[i],\n                    yAdvance: 0,\n                    xOffset: 0,\n                    yOffset: 0,\n                    advanceWidth: this.font.widthOfGlyph(glyph)\n                });\n            }\n            return [\n                encoded,\n                positions\n            ];\n        };\n        _proto.encodeGlyphs = function encodeGlyphs(glyphs) {\n            var res = [];\n            for(var _i = 0, _Array$from = Array.from(glyphs); _i < _Array$from.length; _i++){\n                var glyph = _Array$from[_i];\n                res.push((\"00\" + glyph.id.toString(16)).slice(-2));\n            }\n            return res;\n        };\n        _proto.widthOfString = function widthOfString(string, size) {\n            var glyphs = this.font.glyphsForString(\"\" + string);\n            var advances = this.font.advancesForGlyphs(glyphs);\n            var width = 0;\n            for(var _i2 = 0, _Array$from2 = Array.from(advances); _i2 < _Array$from2.length; _i2++){\n                var advance = _Array$from2[_i2];\n                width += advance;\n            }\n            var scale = size / 1000;\n            return width * scale;\n        };\n        StandardFont.isStandardFont = function isStandardFont(name) {\n            return name in STANDARD_FONTS;\n        };\n        return StandardFont;\n    }(PDFFont);\n};\nvar toHex = function toHex() {\n    for(var _len = arguments.length, codePoints = new Array(_len), _key = 0; _key < _len; _key++){\n        codePoints[_key] = arguments[_key];\n    }\n    var codes = Array.from(codePoints).map(function(code) {\n        return (\"0000\" + code.toString(16)).slice(-4);\n    });\n    return codes.join(\"\");\n};\nvar createEmbeddedFont = function createEmbeddedFont(PDFFont) {\n    return /*#__PURE__*/ function(_PDFFont) {\n        _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__(EmbeddedFont, _PDFFont);\n        function EmbeddedFont(document, font, id) {\n            var _this;\n            _this = _PDFFont.call(this) || this;\n            _this.document = document;\n            _this.font = font;\n            _this.id = id;\n            _this.subset = _this.font.createSubset();\n            _this.unicode = [\n                [\n                    0\n                ]\n            ];\n            _this.widths = [\n                _this.font.getGlyph(0).advanceWidth\n            ];\n            _this.name = _this.font.postscriptName;\n            _this.scale = 1000 / _this.font.unitsPerEm;\n            _this.ascender = _this.font.ascent * _this.scale;\n            _this.descender = _this.font.descent * _this.scale;\n            _this.xHeight = _this.font.xHeight * _this.scale;\n            _this.capHeight = _this.font.capHeight * _this.scale;\n            _this.lineGap = _this.font.lineGap * _this.scale;\n            _this.bbox = _this.font.bbox;\n            _this.layoutCache = Object.create(null);\n            return _this;\n        }\n        var _proto = EmbeddedFont.prototype;\n        _proto.layoutRun = function layoutRun(text, features) {\n            // passing LTR To force fontkit to not reverse the string\n            var run = this.font.layout(text, features, undefined, undefined, \"ltr\");\n            // Normalize position values\n            for(var i = 0; i < run.positions.length; i++){\n                var position = run.positions[i];\n                for(var key in position){\n                    position[key] *= this.scale;\n                }\n                position.advanceWidth = run.glyphs[i].advanceWidth * this.scale;\n            }\n            return run;\n        };\n        _proto.layoutCached = function layoutCached(text) {\n            var cached;\n            if (cached = this.layoutCache[text]) {\n                return cached;\n            }\n            var run = this.layoutRun(text);\n            this.layoutCache[text] = run;\n            return run;\n        };\n        _proto.layout = function layout(text, features, onlyWidth) {\n            // Skip the cache if any user defined features are applied\n            if (onlyWidth == null) {\n                onlyWidth = false;\n            }\n            if (features) {\n                return this.layoutRun(text, features);\n            }\n            var glyphs = onlyWidth ? null : [];\n            var positions = onlyWidth ? null : [];\n            var advanceWidth = 0;\n            // Split the string by words to increase cache efficiency.\n            // For this purpose, spaces and tabs are a good enough delimeter.\n            var last = 0;\n            var index = 0;\n            while(index <= text.length){\n                var needle = void 0;\n                if (index === text.length && last < index || (needle = text.charAt(index), [\n                    \" \",\n                    \"\t\"\n                ].includes(needle))) {\n                    var run = this.layoutCached(text.slice(last, ++index));\n                    if (!onlyWidth) {\n                        glyphs.push.apply(glyphs, Array.from(run.glyphs || []));\n                        positions.push.apply(positions, Array.from(run.positions || []));\n                    }\n                    advanceWidth += run.advanceWidth;\n                    last = index;\n                } else {\n                    index++;\n                }\n            }\n            return {\n                glyphs: glyphs,\n                positions: positions,\n                advanceWidth: advanceWidth\n            };\n        };\n        _proto.encode = function encode(text, features) {\n            var _this$layout = this.layout(text, features), glyphs = _this$layout.glyphs, positions = _this$layout.positions;\n            var res = [];\n            for(var i = 0; i < glyphs.length; i++){\n                var glyph = glyphs[i];\n                var gid = this.subset.includeGlyph(glyph.id);\n                res.push((\"0000\" + gid.toString(16)).slice(-4));\n                if (this.widths[gid] == null) {\n                    this.widths[gid] = glyph.advanceWidth * this.scale;\n                }\n                if (this.unicode[gid] == null) {\n                    this.unicode[gid] = glyph.codePoints;\n                }\n            }\n            return [\n                res,\n                positions\n            ];\n        };\n        _proto.encodeGlyphs = function encodeGlyphs(glyphs) {\n            var res = [];\n            for(var i = 0; i < glyphs.length; i++){\n                var glyph = glyphs[i];\n                var gid = this.subset.includeGlyph(glyph.id);\n                res.push((\"0000\" + gid.toString(16)).slice(-4));\n                if (this.widths[gid] == null) {\n                    this.widths[gid] = glyph.advanceWidth * this.scale;\n                }\n                if (this.unicode[gid] == null) {\n                    this.unicode[gid] = glyph.codePoints;\n                }\n            }\n            return res;\n        };\n        _proto.widthOfString = function widthOfString(string, size, features) {\n            var width = this.layout(string, features, true).advanceWidth;\n            var scale = size / 1000;\n            return width * scale;\n        };\n        _proto.embed = function embed() {\n            var isCFF = this.subset.cff != null;\n            var fontFile = this.document.ref();\n            if (isCFF) {\n                fontFile.data.Subtype = \"CIDFontType0C\";\n            }\n            fontFile.end(this.subset.encode());\n            var familyClass = ((this.font[\"OS/2\"] != null ? this.font[\"OS/2\"].sFamilyClass : undefined) || 0) >> 8;\n            var flags = 0;\n            if (this.font.post.isFixedPitch) {\n                flags |= 1 << 0;\n            }\n            if (1 <= familyClass && familyClass <= 7) {\n                flags |= 1 << 1;\n            }\n            flags |= 1 << 2; // assume the font uses non-latin characters\n            if (familyClass === 10) {\n                flags |= 1 << 3;\n            }\n            if (this.font.head.macStyle.italic) {\n                flags |= 1 << 6;\n            }\n            // generate a random tag (6 uppercase letters. 65 is the char code for 'A')\n            var tag = [\n                0,\n                1,\n                2,\n                3,\n                4,\n                5\n            ].map(function() {\n                return String.fromCharCode(Math.random() * 26 + 65);\n            }).join(\"\");\n            var name = tag + \"+\" + this.font.postscriptName;\n            var bbox = this.font.bbox;\n            var descriptor = this.document.ref({\n                Type: \"FontDescriptor\",\n                FontName: name,\n                Flags: flags,\n                FontBBox: [\n                    bbox.minX * this.scale,\n                    bbox.minY * this.scale,\n                    bbox.maxX * this.scale,\n                    bbox.maxY * this.scale\n                ],\n                ItalicAngle: this.font.italicAngle,\n                Ascent: this.ascender,\n                Descent: this.descender,\n                CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,\n                XHeight: (this.font.xHeight || 0) * this.scale,\n                StemV: 0\n            }); // not sure how to calculate this\n            if (isCFF) {\n                descriptor.data.FontFile3 = fontFile;\n            } else {\n                descriptor.data.FontFile2 = fontFile;\n            }\n            descriptor.end();\n            var descendantFontData = {\n                Type: \"Font\",\n                Subtype: \"CIDFontType0\",\n                BaseFont: name,\n                CIDSystemInfo: {\n                    Registry: new String(\"Adobe\"),\n                    Ordering: new String(\"Identity\"),\n                    Supplement: 0\n                },\n                FontDescriptor: descriptor,\n                W: [\n                    0,\n                    this.widths\n                ]\n            };\n            if (!isCFF) {\n                descendantFontData.Subtype = \"CIDFontType2\";\n                descendantFontData.CIDToGIDMap = \"Identity\";\n            }\n            var descendantFont = this.document.ref(descendantFontData);\n            descendantFont.end();\n            this.dictionary.data = {\n                Type: \"Font\",\n                Subtype: \"Type0\",\n                BaseFont: name,\n                Encoding: \"Identity-H\",\n                DescendantFonts: [\n                    descendantFont\n                ],\n                ToUnicode: this.toUnicodeCmap()\n            };\n            return this.dictionary.end();\n        };\n        _proto.toUnicodeCmap = function toUnicodeCmap() {\n            var cmap = this.document.ref();\n            var entries = [];\n            var unicodeMap = \"/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap\\n/CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n>> def\\n/CMapName /Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange\\n<0000><ffff>\\nendcodespacerange\";\n            for(var _iterator = _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__(this.unicode.entries()), _step; !(_step = _iterator()).done;){\n                var _step$value = _step.value, index = _step$value[0], codePoints = _step$value[1];\n                var encoded = [];\n                if (entries.length >= 100) {\n                    unicodeMap += \"\\n\" + entries.length + \" beginbfchar\\n\" + entries.join(\"\\n\") + \"\\nendbfchar\";\n                    entries = [];\n                }\n                // encode codePoints to utf16\n                for(var _iterator2 = _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__(codePoints), _step2; !(_step2 = _iterator2()).done;){\n                    var value = _step2.value;\n                    if (value > 0xffff) {\n                        value -= 0x10000;\n                        encoded.push(toHex(value >>> 10 & 0x3ff | 0xd800));\n                        value = 0xdc00 | value & 0x3ff;\n                    }\n                    encoded.push(toHex(value));\n                }\n                // eslint-disable-next-line no-useless-concat\n                entries.push(\"<\" + toHex(index) + \">\" + \"<\" + encoded.join(\" \") + \">\");\n            }\n            if (entries.length) {\n                unicodeMap += \"\\n\" + entries.length + \" beginbfchar\\n\" + entries.join(\"\\n\") + \"\\nendbfchar\\n\";\n            }\n            unicodeMap += \"endcmap\\nCMapName currentdict /CMap defineresource pop\\nend\\nend\";\n            cmap.end(unicodeMap);\n            return cmap;\n        };\n        return EmbeddedFont;\n    }(PDFFont);\n};\nvar PDFFont = /*#__PURE__*/ function() {\n    function PDFFont() {}\n    PDFFont.open = function open(document, src, family, id) {\n        var font;\n        if (typeof src === \"string\") {\n            if (StandardFont.isStandardFont(src)) {\n                return new StandardFont(document, src, id);\n            }\n            {\n                font = fontkit__WEBPACK_IMPORTED_MODULE_7__.openSync(src, family);\n            }\n        } else if (src instanceof Uint8Array) {\n            font = fontkit__WEBPACK_IMPORTED_MODULE_7__.create(src, family);\n        } else if (src instanceof ArrayBuffer) {\n            font = fontkit__WEBPACK_IMPORTED_MODULE_7__.create(new Uint8Array(src), family);\n        } else if (typeof src === \"object\") {\n            font = src;\n        }\n        if (font == null) {\n            throw new Error(\"Not a supported font format or standard PDF font.\");\n        }\n        return new EmbeddedFont(document, font, id);\n    };\n    var _proto = PDFFont.prototype;\n    _proto.encode = function encode() {\n        throw new Error(\"Must be implemented by subclasses\");\n    };\n    _proto.widthOfString = function widthOfString() {\n        throw new Error(\"Must be implemented by subclasses\");\n    };\n    _proto.ref = function ref() {\n        return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();\n    };\n    _proto.finalize = function finalize() {\n        if (this.embedded || this.dictionary == null) {\n            return;\n        }\n        this.embed();\n        return this.embedded = true;\n    };\n    _proto.embed = function embed() {\n        throw new Error(\"Must be implemented by subclasses\");\n    };\n    _proto.lineHeight = function lineHeight(size, includeGap) {\n        if (includeGap == null) {\n            includeGap = false;\n        }\n        var gap = includeGap ? this.lineGap : 0;\n        return (this.ascender + gap - this.descender) / 1000 * size;\n    };\n    return PDFFont;\n}();\nvar StandardFont = createStandardFont(PDFFont);\nvar EmbeddedFont = createEmbeddedFont(PDFFont);\nvar FontsMixin = {\n    initFonts: function initFonts() {\n        // Lookup table for embedded fonts\n        this._fontFamilies = {};\n        this._fontCount = 0;\n        // Font state\n        this._fontSize = 12;\n        this._font = null;\n        this._registeredFonts = {};\n        // Set the default font\n        return this.font(\"Helvetica\");\n    },\n    font: function font(src, family, size) {\n        var cacheKey;\n        var font;\n        if (typeof family === \"number\") {\n            size = family;\n            family = null;\n        }\n        // check registered fonts if src is a string\n        if (typeof src === \"string\" && this._registeredFonts[src]) {\n            cacheKey = src;\n            var _this$_registeredFont = this._registeredFonts[src];\n            src = _this$_registeredFont.src;\n            family = _this$_registeredFont.family;\n        } else {\n            cacheKey = family || src;\n            if (typeof cacheKey !== \"string\") {\n                cacheKey = null;\n            }\n        }\n        if (size != null) {\n            this.fontSize(size);\n        }\n        // fast path: check if the font is already in the PDF\n        if (font = this._fontFamilies[cacheKey]) {\n            this._font = font;\n            return this;\n        }\n        // load the font\n        var id = \"F\" + ++this._fontCount;\n        this._font = PDFFont.open(this, src, family, id);\n        // check for existing font familes with the same name already in the PDF\n        // useful if the font was passed as a buffer\n        if (font = this._fontFamilies[this._font.name]) {\n            this._font = font;\n            return this;\n        }\n        // save the font for reuse later\n        if (cacheKey) {\n            this._fontFamilies[cacheKey] = this._font;\n        }\n        if (this._font.name) {\n            this._fontFamilies[this._font.name] = this._font;\n        }\n        return this;\n    },\n    fontSize: function fontSize(_fontSize) {\n        this._fontSize = _fontSize;\n        return this;\n    },\n    currentLineHeight: function currentLineHeight(includeGap) {\n        if (includeGap == null) {\n            includeGap = false;\n        }\n        return this._font.lineHeight(this._fontSize, includeGap);\n    },\n    registerFont: function registerFont(name, src, family) {\n        this._registeredFonts[name] = {\n            src: src,\n            family: family\n        };\n        return this;\n    }\n};\nvar number = PDFObject$1.number;\nvar TextMixin = {\n    initText: function initText() {\n        this._line = this._line.bind(this);\n        // Current coordinates\n        this.x = 0;\n        this.y = 0;\n        return this._lineGap = 0;\n    },\n    _text: function _text(text, x, y, options, lineCallback) {\n        var _this = this;\n        options = this._initOptions(x, y, options);\n        // Convert text to a string\n        text = text == null ? \"\" : \"\" + text;\n        // if the wordSpacing option is specified, remove multiple consecutive spaces\n        if (options.wordSpacing) {\n            text = text.replace(/\\s{2,}/g, \" \");\n        }\n        var addStructure = function addStructure() {\n            if (options.structParent) {\n                options.structParent.add(_this.struct(options.structType || \"P\", [\n                    _this.markStructureContent(options.structType || \"P\")\n                ]));\n            }\n        };\n        for(var _iterator = _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__(text.split(\"\\n\")), _step; !(_step = _iterator()).done;){\n            var line = _step.value;\n            addStructure();\n            lineCallback(line, options);\n        }\n        return this;\n    },\n    text: function text(_text2, x, y, options) {\n        return this._text(_text2, x, y, options, this._line);\n    },\n    widthOfString: function widthOfString(string, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        return this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1);\n    },\n    _initOptions: function _initOptions(x, y, options) {\n        if (x === void 0) {\n            x = {};\n        }\n        if (options === void 0) {\n            options = {};\n        }\n        if (typeof x === \"object\") {\n            options = x;\n            x = null;\n        }\n        // shallow clone options object\n        /**\n     * @type {Object}\n     */ var result = Object.assign({}, options);\n        // extend options with previous values for continued text\n        if (this._textOptions) {\n            for(var key in this._textOptions){\n                var val = this._textOptions[key];\n                if (key !== \"continued\") {\n                    if (result[key] === undefined) {\n                        result[key] = val;\n                    }\n                }\n            }\n        }\n        // Update the current position\n        if (x != null) {\n            this.x = x;\n        }\n        if (y != null) {\n            this.y = y;\n        }\n        // wrap to margins if no x or y position passed\n        if (result.lineBreak !== false) {\n            if (result.width == null) {\n                result.width = this.page.width - this.x - this.page.margins.right;\n            }\n            result.width = Math.max(result.width, 0);\n        }\n        if (!result.columns) {\n            result.columns = 0;\n        }\n        if (result.columnGap == null) {\n            result.columnGap = 18;\n        } // 1/4 inch\n        return result;\n    },\n    _line: function _line(text, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        this._fragment(text, this.x, this.y, options);\n        return this.x += this.widthOfString(text);\n    },\n    _fragment: function _fragment(text, x, y, options) {\n        text = (\"\" + text).replace(/\\n/g, \"\");\n        if (text.length === 0) return;\n        var _this$_font$encode = this._font.encode(text, options.features), encoded = _this$_font$encode[0], positions = _this$_font$encode[1];\n        var dy = this._font.ascender / 1000 * this._fontSize;\n        this._glyphs(encoded, positions, x, y + dy, options);\n    },\n    _glyphs: function _glyphs(encoded, positions, x, y, options) {\n        var _this2 = this;\n        var commands = [];\n        var scale = this._fontSize / 1000;\n        var i;\n        var last = 0;\n        var hadOffset = false;\n        this.save();\n        // flip coordinate system\n        this.transform(1, 0, 0, -1, 0, this.page.height);\n        y = this.page.height - y;\n        // add current font to page if necessary\n        if (this.page.fonts[this._font.id] == null) {\n            this.page.fonts[this._font.id] = this._font.ref();\n        }\n        // begin the text object\n        this.addContent(\"BT\");\n        // text position\n        this.addContent(\"1 0 0 1 \" + number(x) + \" \" + number(y) + \" Tm\");\n        // font and font size\n        this.addContent(\"/\" + this._font.id + \" \" + number(this._fontSize) + \" Tf\");\n        // rendering mode\n        var mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;\n        if (mode) {\n            this.addContent(mode + \" Tr\");\n        }\n        // Adds a segment of text to the TJ command buffer\n        var addSegment = function addSegment(cur) {\n            if (last < cur) {\n                var hex = encoded.slice(last, cur).join(\"\");\n                var advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;\n                commands.push(\"<\" + hex + \"> \" + number(-advance));\n            }\n            return last = cur;\n        };\n        // Flushes the current TJ commands to the output stream\n        var flush = function flush(i) {\n            addSegment(i);\n            if (commands.length > 0) {\n                _this2.addContent(\"[\" + commands.join(\" \") + \"] TJ\");\n                return commands.length = 0;\n            }\n        };\n        for(i = 0; i < positions.length; i++){\n            // If we have an x or y offset, we have to break out of the current TJ command\n            // so we can move the text position.\n            var pos = positions[i];\n            if (pos.xOffset || pos.yOffset) {\n                // Flush the current buffer\n                flush(i);\n                // Move the text position and flush just the current character\n                this.addContent(\"1 0 0 1 \" + number(x + pos.xOffset * scale) + \" \" + number(y + pos.yOffset * scale) + \" Tm\");\n                flush(i + 1);\n                hadOffset = true;\n            } else {\n                // If the last character had an offset, reset the text position\n                if (hadOffset) {\n                    this.addContent(\"1 0 0 1 \" + number(x) + \" \" + number(y) + \" Tm\");\n                    hadOffset = false;\n                }\n                // Group segments that don't have any advance adjustments\n                if (pos.xAdvance - pos.advanceWidth !== 0) {\n                    addSegment(i + 1);\n                }\n            }\n            x += pos.xAdvance * scale;\n        }\n        // Flush any remaining commands\n        flush(i);\n        // end the text object\n        this.addContent(\"ET\");\n        // restore flipped coordinate system\n        return this.restore();\n    }\n};\nvar COLOR_SPACE_MAP = {\n    1: \"DeviceGray\",\n    3: \"DeviceRGB\",\n    4: \"DeviceCMYK\"\n};\nvar JPEG = /*#__PURE__*/ function() {\n    function JPEG(data, label) {\n        this.data = data;\n        this.label = label;\n        this.orientation = 1;\n        if (this.data.readUInt16BE(0) !== 0xffd8) {\n            throw \"SOI not found in JPEG\";\n        }\n        var markers = jay_peg__WEBPACK_IMPORTED_MODULE_9__[\"default\"].decode(this.data);\n        for(var i = 0; i < markers.length; i += 1){\n            var marker = markers[i];\n            if (marker.name === \"EXIF\" && marker.entries.orientation) {\n                this.orientation = marker.entries.orientation;\n            }\n            if (marker.name === \"SOF\") {\n                this.bits || (this.bits = marker.precision);\n                this.width || (this.width = marker.width);\n                this.height || (this.height = marker.height);\n                this.colorSpace || (this.colorSpace = COLOR_SPACE_MAP[marker.numberOfComponents]);\n            }\n        }\n        this.obj = null;\n    }\n    var _proto = JPEG.prototype;\n    _proto.embed = function embed(document) {\n        if (this.obj) {\n            return;\n        }\n        this.obj = document.ref({\n            Type: \"XObject\",\n            Subtype: \"Image\",\n            BitsPerComponent: this.bits,\n            Width: this.width,\n            Height: this.height,\n            ColorSpace: this.colorSpace,\n            Filter: \"DCTDecode\"\n        });\n        // add extra decode params for CMYK images. By swapping the\n        // min and max values from the default, we invert the colors. See\n        // section 4.8.4 of the spec.\n        if (this.colorSpace === \"DeviceCMYK\") {\n            this.obj.data[\"Decode\"] = [\n                1.0,\n                0.0,\n                1.0,\n                0.0,\n                1.0,\n                0.0,\n                1.0,\n                0.0\n            ];\n        }\n        this.obj.end(this.data);\n        // free memory\n        return this.data = null;\n    };\n    return JPEG;\n}();\nvar PNGImage = /*#__PURE__*/ function() {\n    function PNGImage(data, label) {\n        this.label = label;\n        this.image = new _react_pdf_png_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"](data);\n        this.width = this.image.width;\n        this.height = this.image.height;\n        this.imgData = this.image.imgData;\n        this.obj = null;\n    }\n    var _proto = PNGImage.prototype;\n    _proto.embed = function embed(document) {\n        var dataDecoded = false;\n        this.document = document;\n        if (this.obj) {\n            return;\n        }\n        var hasAlphaChannel = this.image.hasAlphaChannel;\n        var isInterlaced = this.image.interlaceMethod === 1;\n        this.obj = this.document.ref({\n            Type: \"XObject\",\n            Subtype: \"Image\",\n            BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,\n            Width: this.width,\n            Height: this.height,\n            Filter: \"FlateDecode\"\n        });\n        if (!hasAlphaChannel) {\n            var params = this.document.ref({\n                Predictor: isInterlaced ? 1 : 15,\n                Colors: this.image.colors,\n                BitsPerComponent: this.image.bits,\n                Columns: this.width\n            });\n            this.obj.data.DecodeParms = params;\n            params.end();\n        }\n        if (this.image.palette.length === 0) {\n            this.obj.data.ColorSpace = this.image.colorSpace;\n        } else {\n            // embed the color palette in the PDF as an object stream\n            var palette = this.document.ref();\n            palette.end(Buffer.from(this.image.palette));\n            // build the color space array for the image\n            this.obj.data.ColorSpace = [\n                \"Indexed\",\n                \"DeviceRGB\",\n                this.image.palette.length / 3 - 1,\n                palette\n            ];\n        }\n        // For PNG color types 0, 2 and 3, the transparency data is stored in\n        // a dedicated PNG chunk.\n        if (this.image.transparency.grayscale != null) {\n            // Use Color Key Masking (spec section 4.8.5)\n            // An array with N elements, where N is two times the number of color components.\n            var val = this.image.transparency.grayscale;\n            this.obj.data.Mask = [\n                val,\n                val\n            ];\n        } else if (this.image.transparency.rgb) {\n            // Use Color Key Masking (spec section 4.8.5)\n            // An array with N elements, where N is two times the number of color components.\n            var rgb = this.image.transparency.rgb;\n            var mask = [];\n            for(var _iterator = _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__(rgb), _step; !(_step = _iterator()).done;){\n                var x = _step.value;\n                mask.push(x, x);\n            }\n            this.obj.data.Mask = mask;\n        } else if (this.image.transparency.indexed) {\n            // Create a transparency SMask for the image based on the data\n            // in the PLTE and tRNS sections. See below for details on SMasks.\n            dataDecoded = true;\n            return this.loadIndexedAlphaChannel();\n        } else if (hasAlphaChannel) {\n            // For PNG color types 4 and 6, the transparency data is stored as a alpha\n            // channel mixed in with the main image data. Separate this data out into an\n            // SMask object and store it separately in the PDF.\n            dataDecoded = true;\n            return this.splitAlphaChannel();\n        }\n        if (isInterlaced && !dataDecoded) {\n            return this.decodeData();\n        }\n        this.finalize();\n    };\n    _proto.finalize = function finalize() {\n        if (this.alphaChannel) {\n            var sMask = this.document.ref({\n                Type: \"XObject\",\n                Subtype: \"Image\",\n                Height: this.height,\n                Width: this.width,\n                BitsPerComponent: 8,\n                Filter: \"FlateDecode\",\n                ColorSpace: \"DeviceGray\",\n                Decode: [\n                    0,\n                    1\n                ]\n            });\n            sMask.end(this.alphaChannel);\n            this.obj.data.SMask = sMask;\n        }\n        // add the actual image data\n        this.obj.end(this.imgData);\n        // free memory\n        this.image = null;\n        return this.imgData = null;\n    };\n    _proto.splitAlphaChannel = function splitAlphaChannel() {\n        var _this = this;\n        return this.image.decodePixels(function(pixels) {\n            var a;\n            var p;\n            var colorCount = _this.image.colors;\n            var pixelCount = _this.width * _this.height;\n            var imgData = Buffer.alloc(pixelCount * colorCount);\n            var alphaChannel = Buffer.alloc(pixelCount);\n            var i = p = a = 0;\n            var len = pixels.length;\n            // For 16bit images copy only most significant byte (MSB) - PNG data is always stored in network byte order (MSB first)\n            var skipByteCount = _this.image.bits === 16 ? 1 : 0;\n            while(i < len){\n                for(var colorIndex = 0; colorIndex < colorCount; colorIndex++){\n                    imgData[p++] = pixels[i++];\n                    i += skipByteCount;\n                }\n                alphaChannel[a++] = pixels[i++];\n                i += skipByteCount;\n            }\n            _this.imgData = zlib__WEBPACK_IMPORTED_MODULE_3__.deflateSync(imgData);\n            _this.alphaChannel = zlib__WEBPACK_IMPORTED_MODULE_3__.deflateSync(alphaChannel);\n            return _this.finalize();\n        });\n    };\n    _proto.loadIndexedAlphaChannel = function loadIndexedAlphaChannel() {\n        var _this2 = this;\n        var transparency = this.image.transparency.indexed;\n        return this.image.decodePixels(function(pixels) {\n            var alphaChannel = Buffer.alloc(_this2.width * _this2.height);\n            var i = 0;\n            for(var j = 0, end = pixels.length; j < end; j++){\n                alphaChannel[i++] = transparency[pixels[j]];\n            }\n            _this2.alphaChannel = zlib__WEBPACK_IMPORTED_MODULE_3__.deflateSync(alphaChannel);\n            return _this2.finalize();\n        });\n    };\n    _proto.decodeData = function decodeData() {\n        var _this3 = this;\n        this.image.decodePixels(function(pixels) {\n            _this3.imgData = zlib__WEBPACK_IMPORTED_MODULE_3__.deflateSync(pixels);\n            _this3.finalize();\n        });\n    };\n    return PNGImage;\n}();\n/*\nPDFImage - embeds images in PDF documents\nBy Devon Govett\n*/ var PDFImage = /*#__PURE__*/ function() {\n    function PDFImage() {}\n    PDFImage.open = function open(src, label) {\n        var data;\n        if (Buffer.isBuffer(src)) {\n            data = src;\n        } else if (src instanceof ArrayBuffer) {\n            data = Buffer.from(new Uint8Array(src));\n        } else {\n            var match;\n            if (match = /^data:.+?;base64,(.*)$/.exec(src)) {\n                data = Buffer.from(match[1], \"base64\");\n            } else {\n                data = fs__WEBPACK_IMPORTED_MODULE_8__.readFileSync(src);\n                if (!data) {\n                    return;\n                }\n            }\n        }\n        if (data[0] === 0xff && data[1] === 0xd8) {\n            return new JPEG(data, label);\n        } else if (data[0] === 0x89 && data.toString(\"ascii\", 1, 4) === \"PNG\") {\n            return new PNGImage(data, label);\n        } else {\n            throw new Error(\"Unknown image format.\");\n        }\n    };\n    return PDFImage;\n}();\nvar ImagesMixin = {\n    initImages: function initImages() {\n        this._imageRegistry = {};\n        return this._imageCount = 0;\n    },\n    embedImage: function embedImage(src) {\n        var image;\n        if (typeof src === \"string\") {\n            image = this._imageRegistry[src];\n        }\n        if (!image) {\n            if (src.width && src.height) {\n                image = src;\n            } else {\n                image = this.openImage(src);\n            }\n        }\n        if (!image.obj) {\n            image.embed(this);\n        }\n        return image;\n    },\n    image: function image(src, x, y, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var bh;\n        var bp;\n        var bw;\n        var image;\n        var ip;\n        var left;\n        var left1;\n        var rotateAngle;\n        var originX;\n        var originY;\n        if (typeof x === \"object\") {\n            options = x;\n            x = null;\n        }\n        // Ignore orientation based on document options or image options\n        var ignoreOrientation = options.ignoreOrientation || options.ignoreOrientation !== false && this.options.ignoreOrientation;\n        x = (left = x != null ? x : options.x) != null ? left : this.x;\n        y = (left1 = y != null ? y : options.y) != null ? left1 : this.y;\n        if (typeof src === \"string\") {\n            image = this._imageRegistry[src];\n        }\n        if (!image) {\n            if (src.width && src.height) {\n                image = src;\n            } else {\n                image = this.openImage(src);\n            }\n        }\n        if (!image.obj) {\n            image.embed(this);\n        }\n        if (this.page.xobjects[image.label] == null) {\n            this.page.xobjects[image.label] = image.obj;\n        }\n        var _image = image, width = _image.width, height = _image.height;\n        // If EXIF orientation calls for it, swap width and height\n        if (!ignoreOrientation && image.orientation > 4) {\n            var _ref = [\n                height,\n                width\n            ];\n            width = _ref[0];\n            height = _ref[1];\n        }\n        var w = options.width || width;\n        var h = options.height || height;\n        if (options.width && !options.height) {\n            var wp = w / width;\n            w = width * wp;\n            h = height * wp;\n        } else if (options.height && !options.width) {\n            var hp = h / height;\n            w = width * hp;\n            h = height * hp;\n        } else if (options.scale) {\n            w = width * options.scale;\n            h = height * options.scale;\n        } else if (options.fit) {\n            var _options$fit = options.fit;\n            bw = _options$fit[0];\n            bh = _options$fit[1];\n            bp = bw / bh;\n            ip = width / height;\n            if (ip > bp) {\n                w = bw;\n                h = bw / ip;\n            } else {\n                h = bh;\n                w = bh * ip;\n            }\n        } else if (options.cover) {\n            var _options$cover = options.cover;\n            bw = _options$cover[0];\n            bh = _options$cover[1];\n            bp = bw / bh;\n            ip = width / height;\n            if (ip > bp) {\n                h = bh;\n                w = bh * ip;\n            } else {\n                w = bw;\n                h = bw / ip;\n            }\n        }\n        if (options.fit || options.cover) {\n            if (options.align === \"center\") {\n                x = x + bw / 2 - w / 2;\n            } else if (options.align === \"right\") {\n                x = x + bw - w;\n            }\n            if (options.valign === \"center\") {\n                y = y + bh / 2 - h / 2;\n            } else if (options.valign === \"bottom\") {\n                y = y + bh - h;\n            }\n        }\n        if (!ignoreOrientation) {\n            switch(image.orientation){\n                // No orientation (need to flip image, though, because of the default transform matrix on the document)\n                default:\n                case 1:\n                    h = -h;\n                    y -= h;\n                    rotateAngle = 0;\n                    break;\n                // Flip Horizontal\n                case 2:\n                    w = -w;\n                    h = -h;\n                    x -= w;\n                    y -= h;\n                    rotateAngle = 0;\n                    break;\n                // Rotate 180 degrees\n                case 3:\n                    originX = x;\n                    originY = y;\n                    h = -h;\n                    x -= w;\n                    rotateAngle = 180;\n                    break;\n                // Flip vertical\n                case 4:\n                    break;\n                // Flip horizontally and rotate 270 degrees CW\n                case 5:\n                    originX = x;\n                    originY = y;\n                    var _ref2 = [\n                        h,\n                        w\n                    ];\n                    w = _ref2[0];\n                    h = _ref2[1];\n                    y -= h;\n                    rotateAngle = 90;\n                    break;\n                // Rotate 90 degrees CW\n                case 6:\n                    originX = x;\n                    originY = y;\n                    var _ref3 = [\n                        h,\n                        w\n                    ];\n                    w = _ref3[0];\n                    h = _ref3[1];\n                    h = -h;\n                    rotateAngle = 90;\n                    break;\n                // Flip horizontally and rotate 90 degrees CW\n                case 7:\n                    originX = x;\n                    originY = y;\n                    var _ref4 = [\n                        h,\n                        w\n                    ];\n                    w = _ref4[0];\n                    h = _ref4[1];\n                    h = -h;\n                    w = -w;\n                    x -= w;\n                    rotateAngle = 90;\n                    break;\n                // Rotate 270 degrees CW\n                case 8:\n                    originX = x;\n                    originY = y;\n                    var _ref5 = [\n                        h,\n                        w\n                    ];\n                    w = _ref5[0];\n                    h = _ref5[1];\n                    h = -h;\n                    x -= w;\n                    y -= h;\n                    rotateAngle = -90;\n                    break;\n            }\n        } else {\n            h = -h;\n            y -= h;\n            rotateAngle = 0;\n        }\n        // Set the current y position to below the image if it is in the document flow\n        if (this.y === y) {\n            this.y += h;\n        }\n        this.save();\n        if (rotateAngle) {\n            this.rotate(rotateAngle, {\n                origin: [\n                    originX,\n                    originY\n                ]\n            });\n        }\n        this.transform(w, 0, 0, h, x, y);\n        this.addContent(\"/\" + image.label + \" Do\");\n        this.restore();\n        return this;\n    },\n    openImage: function openImage(src) {\n        var image;\n        if (typeof src === \"string\") {\n            image = this._imageRegistry[src];\n        }\n        if (!image) {\n            image = PDFImage.open(src, \"I\" + ++this._imageCount);\n            if (typeof src === \"string\") {\n                this._imageRegistry[src] = image;\n            }\n        }\n        return image;\n    }\n};\nvar AnnotationsMixin = {\n    annotate: function annotate(x, y, w, h, options) {\n        options.Type = \"Annot\";\n        options.Rect = this._convertRect(x, y, w, h);\n        options.Border = [\n            0,\n            0,\n            0\n        ];\n        if (options.Subtype === \"Link\" && typeof options.F === \"undefined\") {\n            options.F = 1 << 2; // Print Annotation Flag\n        }\n        if (options.Subtype !== \"Link\") {\n            if (options.C == null) {\n                options.C = this._normalizeColor(options.color || [\n                    0,\n                    0,\n                    0\n                ]);\n            }\n        } // convert colors\n        delete options.color;\n        if (typeof options.Dest === \"string\") {\n            options.Dest = new String(options.Dest);\n        }\n        // Capitalize keys\n        for(var key in options){\n            var val = options[key];\n            options[key[0].toUpperCase() + key.slice(1)] = val;\n        }\n        var ref = this.ref(options);\n        this.page.annotations.push(ref);\n        ref.end();\n        return this;\n    },\n    note: function note(x, y, w, h, contents, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        options.Subtype = \"Text\";\n        options.Contents = new String(contents);\n        options.Name = \"Comment\";\n        if (options.color == null) {\n            options.color = [\n                243,\n                223,\n                92\n            ];\n        }\n        return this.annotate(x, y, w, h, options);\n    },\n    goTo: function goTo(x, y, w, h, name, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        options.Subtype = \"Link\";\n        options.A = this.ref({\n            S: \"GoTo\",\n            D: new String(name)\n        });\n        options.A.end();\n        return this.annotate(x, y, w, h, options);\n    },\n    link: function link(x, y, w, h, url, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        options.Subtype = \"Link\";\n        if (typeof url === \"number\") {\n            // Link to a page in the document (the page must already exist)\n            var pages = this._root.data.Pages.data;\n            if (url >= 0 && url < pages.Kids.length) {\n                options.A = this.ref({\n                    S: \"GoTo\",\n                    D: [\n                        pages.Kids[url],\n                        \"XYZ\",\n                        null,\n                        null,\n                        null\n                    ]\n                });\n                options.A.end();\n            } else {\n                throw new Error(\"The document has no page \" + url);\n            }\n        } else {\n            // Link to an external url\n            options.A = this.ref({\n                S: \"URI\",\n                URI: new String(url)\n            });\n            options.A.end();\n        }\n        return this.annotate(x, y, w, h, options);\n    },\n    _markup: function _markup(x, y, w, h, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _this$_convertRect = this._convertRect(x, y, w, h), x1 = _this$_convertRect[0], y1 = _this$_convertRect[1], x2 = _this$_convertRect[2], y2 = _this$_convertRect[3];\n        options.QuadPoints = [\n            x1,\n            y2,\n            x2,\n            y2,\n            x1,\n            y1,\n            x2,\n            y1\n        ];\n        options.Contents = new String();\n        return this.annotate(x, y, w, h, options);\n    },\n    highlight: function highlight(x, y, w, h, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        options.Subtype = \"Highlight\";\n        if (options.color == null) {\n            options.color = [\n                241,\n                238,\n                148\n            ];\n        }\n        return this._markup(x, y, w, h, options);\n    },\n    underline: function underline(x, y, w, h, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        options.Subtype = \"Underline\";\n        return this._markup(x, y, w, h, options);\n    },\n    strike: function strike(x, y, w, h, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        options.Subtype = \"StrikeOut\";\n        return this._markup(x, y, w, h, options);\n    },\n    lineAnnotation: function lineAnnotation(x1, y1, x2, y2, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        options.Subtype = \"Line\";\n        options.Contents = new String();\n        options.L = [\n            x1,\n            this.page.height - y1,\n            x2,\n            this.page.height - y2\n        ];\n        return this.annotate(x1, y1, x2, y2, options);\n    },\n    rectAnnotation: function rectAnnotation(x, y, w, h, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        options.Subtype = \"Square\";\n        options.Contents = new String();\n        return this.annotate(x, y, w, h, options);\n    },\n    ellipseAnnotation: function ellipseAnnotation(x, y, w, h, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        options.Subtype = \"Circle\";\n        options.Contents = new String();\n        return this.annotate(x, y, w, h, options);\n    },\n    textAnnotation: function textAnnotation(x, y, w, h, text, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        options.Subtype = \"FreeText\";\n        options.Contents = new String(text);\n        options.DA = new String();\n        return this.annotate(x, y, w, h, options);\n    },\n    fileAnnotation: function fileAnnotation(x, y, w, h, file, options) {\n        if (file === void 0) {\n            file = {};\n        }\n        if (options === void 0) {\n            options = {};\n        }\n        // create hidden file\n        var filespec = this.file(file.src, Object.assign({\n            hidden: true\n        }, file));\n        options.Subtype = \"FileAttachment\";\n        options.FS = filespec;\n        // add description from filespec unless description (Contents) has already been set\n        if (options.Contents) {\n            options.Contents = new String(options.Contents);\n        } else if (filespec.data.Desc) {\n            options.Contents = filespec.data.Desc;\n        }\n        return this.annotate(x, y, w, h, options);\n    },\n    _convertRect: function _convertRect(x1, y1, w, h) {\n        // flip y1 and y2\n        var y2 = y1;\n        y1 += h;\n        // make x2\n        var x2 = x1 + w;\n        // apply current transformation matrix to points\n        var _this$_ctm = this._ctm, m0 = _this$_ctm[0], m1 = _this$_ctm[1], m2 = _this$_ctm[2], m3 = _this$_ctm[3], m4 = _this$_ctm[4], m5 = _this$_ctm[5];\n        x1 = m0 * x1 + m2 * y1 + m4;\n        y1 = m1 * x1 + m3 * y1 + m5;\n        x2 = m0 * x2 + m2 * y2 + m4;\n        y2 = m1 * x2 + m3 * y2 + m5;\n        return [\n            x1,\n            y1,\n            x2,\n            y2\n        ];\n    }\n};\nvar PDFOutline = /*#__PURE__*/ function() {\n    function PDFOutline(document, parent, title, dest, options) {\n        if (options === void 0) {\n            options = {\n                expanded: false\n            };\n        }\n        this.document = document;\n        this.options = options;\n        this.outlineData = {};\n        if (dest !== null) {\n            this.outlineData[\"Dest\"] = [\n                dest.dictionary,\n                \"Fit\"\n            ];\n        }\n        if (parent !== null) {\n            this.outlineData[\"Parent\"] = parent;\n        }\n        if (title !== null) {\n            this.outlineData[\"Title\"] = new String(title);\n        }\n        this.dictionary = this.document.ref(this.outlineData);\n        this.children = [];\n    }\n    var _proto = PDFOutline.prototype;\n    _proto.addItem = function addItem(title, options) {\n        if (options === void 0) {\n            options = {\n                expanded: false\n            };\n        }\n        var result = new PDFOutline(this.document, this.dictionary, title, this.document.page, options);\n        this.children.push(result);\n        return result;\n    };\n    _proto.endOutline = function endOutline() {\n        if (this.children.length > 0) {\n            if (this.options.expanded) {\n                this.outlineData.Count = this.children.length;\n            }\n            var first = this.children[0], last = this.children[this.children.length - 1];\n            this.outlineData.First = first.dictionary;\n            this.outlineData.Last = last.dictionary;\n            for(var i = 0, len = this.children.length; i < len; i++){\n                var child = this.children[i];\n                if (i > 0) {\n                    child.outlineData.Prev = this.children[i - 1].dictionary;\n                }\n                if (i < this.children.length - 1) {\n                    child.outlineData.Next = this.children[i + 1].dictionary;\n                }\n                child.endOutline();\n            }\n        }\n        return this.dictionary.end();\n    };\n    return PDFOutline;\n}();\nvar OutlineMixin = {\n    initOutline: function initOutline() {\n        return this.outline = new PDFOutline(this, null, null, null);\n    },\n    endOutline: function endOutline() {\n        this.outline.endOutline();\n        if (this.outline.children.length > 0) {\n            this._root.data.Outlines = this.outline.dictionary;\n            return this._root.data.PageMode = \"UseOutlines\";\n        }\n    }\n};\n/*\nPDFStructureContent - a reference to a marked structure content\nBy Ben Schmidt\n*/ var PDFStructureContent = /*#__PURE__*/ function() {\n    function PDFStructureContent(pageRef, mcid) {\n        this.refs = [\n            {\n                pageRef: pageRef,\n                mcid: mcid\n            }\n        ];\n    }\n    var _proto = PDFStructureContent.prototype;\n    _proto.push = function push(structContent) {\n        var _this = this;\n        structContent.refs.forEach(function(ref) {\n            return _this.refs.push(ref);\n        });\n    };\n    return PDFStructureContent;\n}();\n/*\nPDFStructureElement - represents an element in the PDF logical structure tree\nBy Ben Schmidt\n*/ var PDFStructureElement = /*#__PURE__*/ function() {\n    function PDFStructureElement(document, type, options, children) {\n        var _this = this;\n        if (options === void 0) {\n            options = {};\n        }\n        if (children === void 0) {\n            children = null;\n        }\n        this.document = document;\n        this._attached = false;\n        this._ended = false;\n        this._flushed = false;\n        this.dictionary = document.ref({\n            // Type: \"StructElem\",\n            S: type\n        });\n        var data = this.dictionary.data;\n        if (Array.isArray(options) || this._isValidChild(options)) {\n            children = options;\n            options = {};\n        }\n        if (typeof options.title !== \"undefined\") {\n            data.T = new String(options.title);\n        }\n        if (typeof options.lang !== \"undefined\") {\n            data.Lang = new String(options.lang);\n        }\n        if (typeof options.alt !== \"undefined\") {\n            data.Alt = new String(options.alt);\n        }\n        if (typeof options.expanded !== \"undefined\") {\n            data.E = new String(options.expanded);\n        }\n        if (typeof options.actual !== \"undefined\") {\n            data.ActualText = new String(options.actual);\n        }\n        this._children = [];\n        if (children) {\n            if (!Array.isArray(children)) {\n                children = [\n                    children\n                ];\n            }\n            children.forEach(function(child) {\n                return _this.add(child);\n            });\n            this.end();\n        }\n    }\n    var _proto = PDFStructureElement.prototype;\n    _proto.add = function add(child) {\n        if (this._ended) {\n            throw new Error(\"Cannot add child to already-ended structure element\");\n        }\n        if (!this._isValidChild(child)) {\n            throw new Error(\"Invalid structure element child\");\n        }\n        if (child instanceof PDFStructureElement) {\n            child.setParent(this.dictionary);\n            if (this._attached) {\n                child.setAttached();\n            }\n        }\n        if (child instanceof PDFStructureContent) {\n            this._addContentToParentTree(child);\n        }\n        if (typeof child === \"function\" && this._attached) {\n            // _contentForClosure() adds the content to the parent tree\n            child = this._contentForClosure(child);\n        }\n        this._children.push(child);\n        return this;\n    };\n    _proto._addContentToParentTree = function _addContentToParentTree(content) {\n        var _this2 = this;\n        content.refs.forEach(function(_ref) {\n            var pageRef = _ref.pageRef, mcid = _ref.mcid;\n            var pageStructParents = _this2.document.getStructParentTree().get(pageRef.data.StructParents);\n            pageStructParents[mcid] = _this2.dictionary;\n        });\n    };\n    _proto.setParent = function setParent(parentRef) {\n        if (this.dictionary.data.P) {\n            throw new Error(\"Structure element added to more than one parent\");\n        }\n        this.dictionary.data.P = parentRef;\n        this._flush();\n    };\n    _proto.setAttached = function setAttached() {\n        var _this3 = this;\n        if (this._attached) {\n            return;\n        }\n        this._children.forEach(function(child, index) {\n            if (child instanceof PDFStructureElement) {\n                child.setAttached();\n            }\n            if (typeof child === \"function\") {\n                _this3._children[index] = _this3._contentForClosure(child);\n            }\n        });\n        this._attached = true;\n        this._flush();\n    };\n    _proto.end = function end() {\n        if (this._ended) {\n            return;\n        }\n        this._children.filter(function(child) {\n            return child instanceof PDFStructureElement;\n        }).forEach(function(child) {\n            return child.end();\n        });\n        this._ended = true;\n        this._flush();\n    };\n    _proto._isValidChild = function _isValidChild(child) {\n        return child instanceof PDFStructureElement || child instanceof PDFStructureContent || typeof child === \"function\";\n    };\n    _proto._contentForClosure = function _contentForClosure(closure) {\n        var content = this.document.markStructureContent(this.dictionary.data.S);\n        closure();\n        this.document.endMarkedContent();\n        this._addContentToParentTree(content);\n        return content;\n    };\n    _proto._isFlushable = function _isFlushable() {\n        if (!this.dictionary.data.P || !this._ended) {\n            return false;\n        }\n        return this._children.every(function(child) {\n            if (typeof child === \"function\") {\n                return false;\n            }\n            if (child instanceof PDFStructureElement) {\n                return child._isFlushable();\n            }\n            return true;\n        });\n    };\n    _proto._flush = function _flush() {\n        var _this4 = this;\n        if (this._flushed || !this._isFlushable()) {\n            return;\n        }\n        this.dictionary.data.K = [];\n        this._children.forEach(function(child) {\n            return _this4._flushChild(child);\n        });\n        this.dictionary.end();\n        // free memory used by children; the dictionary itself may still be\n        // referenced by a parent structure element or root, but we can\n        // at least trim the tree here\n        this._children = [];\n        this.dictionary.data.K = null;\n        this._flushed = true;\n    };\n    _proto._flushChild = function _flushChild(child) {\n        var _this5 = this;\n        if (child instanceof PDFStructureElement) {\n            this.dictionary.data.K.push(child.dictionary);\n        }\n        if (child instanceof PDFStructureContent) {\n            child.refs.forEach(function(_ref2) {\n                var pageRef = _ref2.pageRef, mcid = _ref2.mcid;\n                if (!_this5.dictionary.data.Pg) {\n                    _this5.dictionary.data.Pg = pageRef;\n                }\n                if (_this5.dictionary.data.Pg === pageRef) {\n                    _this5.dictionary.data.K.push(mcid);\n                } else {\n                    _this5.dictionary.data.K.push({\n                        Type: \"MCR\",\n                        Pg: pageRef,\n                        MCID: mcid\n                    });\n                }\n            });\n        }\n    };\n    return PDFStructureElement;\n}();\nvar PDFNumberTree = /*#__PURE__*/ function(_PDFTree) {\n    _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__(PDFNumberTree, _PDFTree);\n    function PDFNumberTree() {\n        return _PDFTree.apply(this, arguments) || this;\n    }\n    var _proto = PDFNumberTree.prototype;\n    _proto._compareKeys = function _compareKeys(a, b) {\n        return parseInt(a) - parseInt(b);\n    };\n    _proto._keysName = function _keysName() {\n        return \"Nums\";\n    };\n    _proto._dataForKey = function _dataForKey(k) {\n        return parseInt(k);\n    };\n    return PDFNumberTree;\n}(PDFTree);\nvar MarkingsMixin = {\n    initMarkings: function initMarkings(options) {\n        this.structChildren = [];\n        if (options.tagged) {\n            this.getMarkInfoDictionary().data.Marked = true;\n            this.getStructTreeRoot();\n        }\n    },\n    markContent: function markContent(tag, options) {\n        if (options === void 0) {\n            options = null;\n        }\n        if (tag === \"Artifact\" || options && options.mcid) {\n            var toClose = 0;\n            this.page.markings.forEach(function(marking) {\n                if (toClose || marking.structContent || marking.tag === \"Artifact\") {\n                    toClose++;\n                }\n            });\n            while(toClose--){\n                this.endMarkedContent();\n            }\n        }\n        if (!options) {\n            this.page.markings.push({\n                tag: tag\n            });\n            this.addContent(\"/\" + tag + \" BMC\");\n            return this;\n        }\n        this.page.markings.push({\n            tag: tag,\n            options: options\n        });\n        var dictionary = {};\n        if (typeof options.mcid !== \"undefined\") {\n            dictionary.MCID = options.mcid;\n        }\n        if (tag === \"Artifact\") {\n            if (typeof options.type === \"string\") {\n                dictionary.Type = options.type;\n            }\n            if (Array.isArray(options.bbox)) {\n                dictionary.BBox = [\n                    options.bbox[0],\n                    this.page.height - options.bbox[3],\n                    options.bbox[2],\n                    this.page.height - options.bbox[1]\n                ];\n            }\n            if (Array.isArray(options.attached) && options.attached.every(function(val) {\n                return typeof val === \"string\";\n            })) {\n                dictionary.Attached = options.attached;\n            }\n        }\n        if (tag === \"Span\") {\n            if (options.lang) {\n                dictionary.Lang = new String(options.lang);\n            }\n            if (options.alt) {\n                dictionary.Alt = new String(options.alt);\n            }\n            if (options.expanded) {\n                dictionary.E = new String(options.expanded);\n            }\n            if (options.actual) {\n                dictionary.ActualText = new String(options.actual);\n            }\n        }\n        this.addContent(\"/\" + tag + \" \" + PDFObject$1.convert(dictionary) + \" BDC\");\n        return this;\n    },\n    markStructureContent: function markStructureContent(tag, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var pageStructParents = this.getStructParentTree().get(this.page.structParentTreeKey);\n        var mcid = pageStructParents.length;\n        pageStructParents.push(null);\n        this.markContent(tag, _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_11__({}, options, {\n            mcid: mcid\n        }));\n        var structContent = new PDFStructureContent(this.page.dictionary, mcid);\n        this.page.markings.slice(-1)[0].structContent = structContent;\n        return structContent;\n    },\n    endMarkedContent: function endMarkedContent() {\n        this.page.markings.pop();\n        this.addContent(\"EMC\");\n        return this;\n    },\n    struct: function struct(type, options, children) {\n        if (options === void 0) {\n            options = {};\n        }\n        if (children === void 0) {\n            children = null;\n        }\n        return new PDFStructureElement(this, type, options, children);\n    },\n    addStructure: function addStructure(structElem) {\n        var structTreeRoot = this.getStructTreeRoot();\n        structElem.setParent(structTreeRoot);\n        structElem.setAttached();\n        this.structChildren.push(structElem);\n        if (!structTreeRoot.data.K) {\n            structTreeRoot.data.K = [];\n        }\n        structTreeRoot.data.K.push(structElem.dictionary);\n        return this;\n    },\n    initPageMarkings: function initPageMarkings(pageMarkings) {\n        var _this = this;\n        pageMarkings.forEach(function(marking) {\n            if (marking.structContent) {\n                var structContent = marking.structContent;\n                var newStructContent = _this.markStructureContent(marking.tag, marking.options);\n                structContent.push(newStructContent);\n                _this.page.markings.slice(-1)[0].structContent = structContent;\n            } else {\n                _this.markContent(marking.tag, marking.options);\n            }\n        });\n    },\n    endPageMarkings: function endPageMarkings(page) {\n        var pageMarkings = page.markings;\n        pageMarkings.forEach(function() {\n            return page.write(\"EMC\");\n        });\n        page.markings = [];\n        return pageMarkings;\n    },\n    getMarkInfoDictionary: function getMarkInfoDictionary() {\n        if (!this._root.data.MarkInfo) {\n            this._root.data.MarkInfo = this.ref({});\n        }\n        return this._root.data.MarkInfo;\n    },\n    getStructTreeRoot: function getStructTreeRoot() {\n        if (!this._root.data.StructTreeRoot) {\n            this._root.data.StructTreeRoot = this.ref({\n                Type: \"StructTreeRoot\",\n                ParentTree: new PDFNumberTree(),\n                ParentTreeNextKey: 0\n            });\n        }\n        return this._root.data.StructTreeRoot;\n    },\n    getStructParentTree: function getStructParentTree() {\n        return this.getStructTreeRoot().data.ParentTree;\n    },\n    createStructParentTreeNextKey: function createStructParentTreeNextKey() {\n        // initialise the MarkInfo dictionary\n        this.getMarkInfoDictionary();\n        var structTreeRoot = this.getStructTreeRoot();\n        var key = structTreeRoot.data.ParentTreeNextKey++;\n        structTreeRoot.data.ParentTree.add(key, []);\n        return key;\n    },\n    endMarkings: function endMarkings() {\n        var structTreeRoot = this._root.data.StructTreeRoot;\n        if (structTreeRoot) {\n            structTreeRoot.end();\n            this.structChildren.forEach(function(structElem) {\n                return structElem.end();\n            });\n        }\n        if (this._root.data.MarkInfo) {\n            this._root.data.MarkInfo.end();\n        }\n    }\n};\nvar FIELD_FLAGS = {\n    readOnly: 1,\n    required: 2,\n    noExport: 4,\n    multiline: 0x1000,\n    password: 0x2000,\n    toggleToOffButton: 0x4000,\n    radioButton: 0x8000,\n    pushButton: 0x10000,\n    combo: 0x20000,\n    edit: 0x40000,\n    sort: 0x80000,\n    multiSelect: 0x200000,\n    noSpell: 0x400000\n};\nvar FIELD_JUSTIFY = {\n    left: 0,\n    center: 1,\n    right: 2\n};\nvar VALUE_MAP = {\n    value: \"V\",\n    defaultValue: \"DV\"\n};\nvar FORMAT_SPECIAL = {\n    zip: \"0\",\n    zipPlus4: \"1\",\n    zip4: \"1\",\n    phone: \"2\",\n    ssn: \"3\"\n};\nvar FORMAT_DEFAULT = {\n    number: {\n        nDec: 0,\n        sepComma: false,\n        negStyle: \"MinusBlack\",\n        currency: \"\",\n        currencyPrepend: true\n    },\n    percent: {\n        nDec: 0,\n        sepComma: false\n    }\n};\nvar AcroFormMixin = {\n    /**\n   * Must call if adding AcroForms to a document. Must also call font() before\n   * this method to set the default font.\n   */ initForm: function initForm() {\n        if (!this._font) {\n            throw new Error(\"Must set a font before calling initForm method\");\n        }\n        this._acroform = {\n            fonts: {},\n            defaultFont: this._font.name\n        };\n        this._acroform.fonts[this._font.id] = this._font.ref();\n        var data = {\n            Fields: [],\n            NeedAppearances: true,\n            DA: new String(\"/\" + this._font.id + \" 0 Tf 0 g\"),\n            DR: {\n                Font: {}\n            }\n        };\n        data.DR.Font[this._font.id] = this._font.ref();\n        var AcroForm = this.ref(data);\n        this._root.data.AcroForm = AcroForm;\n        return this;\n    },\n    /**\n   * Called automatically by document.js\n   */ endAcroForm: function endAcroForm() {\n        var _this = this;\n        if (this._root.data.AcroForm) {\n            if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont) {\n                throw new Error(\"No fonts specified for PDF form\");\n            }\n            var fontDict = this._root.data.AcroForm.data.DR.Font;\n            Object.keys(this._acroform.fonts).forEach(function(name) {\n                fontDict[name] = _this._acroform.fonts[name];\n            });\n            this._root.data.AcroForm.data.Fields.forEach(function(fieldRef) {\n                _this._endChild(fieldRef);\n            });\n            this._root.data.AcroForm.end();\n        }\n        return this;\n    },\n    _endChild: function _endChild(ref) {\n        var _this2 = this;\n        if (Array.isArray(ref.data.Kids)) {\n            ref.data.Kids.forEach(function(childRef) {\n                _this2._endChild(childRef);\n            });\n            ref.end();\n        }\n        return this;\n    },\n    /**\n   * Creates and adds a form field to the document. Form fields are intermediate\n   * nodes in a PDF form that are used to specify form name heirarchy and form\n   * value defaults.\n   * @param {string} name - field name (T attribute in field dictionary)\n   * @param {object} options  - other attributes to include in field dictionary\n   */ formField: function formField(name, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var fieldDict = this._fieldDict(name, null, options);\n        var fieldRef = this.ref(fieldDict);\n        this._addToParent(fieldRef);\n        return fieldRef;\n    },\n    /**\n   * Creates and adds a Form Annotation to the document. Form annotations are\n   * called Widget annotations internally within a PDF file.\n   * @param {string} name - form field name (T attribute of widget annotation\n   * dictionary)\n   * @param {number} x\n   * @param {number} y\n   * @param {number} w\n   * @param {number} h\n   * @param {object} options\n   */ formAnnotation: function formAnnotation(name, type, x, y, w, h, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var fieldDict = this._fieldDict(name, type, options);\n        fieldDict.Subtype = \"Widget\";\n        if (fieldDict.F === undefined) {\n            fieldDict.F = 4; // print the annotation\n        }\n        // Add Field annot to page, and get it's ref\n        this.annotate(x, y, w, h, fieldDict);\n        var annotRef = this.page.annotations[this.page.annotations.length - 1];\n        return this._addToParent(annotRef);\n    },\n    formText: function formText(name, x, y, w, h, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        return this.formAnnotation(name, \"text\", x, y, w, h, options);\n    },\n    formPushButton: function formPushButton(name, x, y, w, h, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        return this.formAnnotation(name, \"pushButton\", x, y, w, h, options);\n    },\n    formCombo: function formCombo(name, x, y, w, h, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        return this.formAnnotation(name, \"combo\", x, y, w, h, options);\n    },\n    formList: function formList(name, x, y, w, h, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        return this.formAnnotation(name, \"list\", x, y, w, h, options);\n    },\n    formRadioButton: function formRadioButton(name, x, y, w, h, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        return this.formAnnotation(name, \"radioButton\", x, y, w, h, options);\n    },\n    formCheckbox: function formCheckbox(name, x, y, w, h, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        return this.formAnnotation(name, \"checkbox\", x, y, w, h, options);\n    },\n    _addToParent: function _addToParent(fieldRef) {\n        var parent = fieldRef.data.Parent;\n        if (parent) {\n            if (!parent.data.Kids) {\n                parent.data.Kids = [];\n            }\n            parent.data.Kids.push(fieldRef);\n        } else {\n            this._root.data.AcroForm.data.Fields.push(fieldRef);\n        }\n        return this;\n    },\n    _fieldDict: function _fieldDict(name, type, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        if (!this._acroform) {\n            throw new Error(\"Call document.initForms() method before adding form elements to document\");\n        }\n        var opts = Object.assign({}, options);\n        if (type !== null) {\n            opts = this._resolveType(type, options);\n        }\n        opts = this._resolveFlags(opts);\n        opts = this._resolveJustify(opts);\n        opts = this._resolveFont(opts);\n        opts = this._resolveStrings(opts);\n        opts = this._resolveColors(opts);\n        opts = this._resolveFormat(opts);\n        opts.T = new String(name);\n        if (opts.parent) {\n            opts.Parent = opts.parent;\n            delete opts.parent;\n        }\n        return opts;\n    },\n    _resolveType: function _resolveType(type, opts) {\n        if (type === \"text\") {\n            opts.FT = \"Tx\";\n        } else if (type === \"pushButton\") {\n            opts.FT = \"Btn\";\n            opts.pushButton = true;\n        } else if (type === \"radioButton\") {\n            opts.FT = \"Btn\";\n            opts.radioButton = true;\n        } else if (type === \"checkbox\") {\n            opts.FT = \"Btn\";\n        } else if (type === \"combo\") {\n            opts.FT = \"Ch\";\n            opts.combo = true;\n        } else if (type === \"list\") {\n            opts.FT = \"Ch\";\n        } else {\n            throw new Error(\"Invalid form annotation type '\" + type + \"'\");\n        }\n        return opts;\n    },\n    _resolveFormat: function _resolveFormat(opts) {\n        var f = opts.format;\n        if (f && f.type) {\n            var fnKeystroke;\n            var fnFormat;\n            var params = \"\";\n            if (FORMAT_SPECIAL[f.type] !== undefined) {\n                fnKeystroke = \"AFSpecial_Keystroke\";\n                fnFormat = \"AFSpecial_Format\";\n                params = FORMAT_SPECIAL[f.type];\n            } else {\n                var format = f.type.charAt(0).toUpperCase() + f.type.slice(1);\n                fnKeystroke = \"AF\" + format + \"_Keystroke\";\n                fnFormat = \"AF\" + format + \"_Format\";\n                if (f.type === \"date\") {\n                    fnKeystroke += \"Ex\";\n                    params = String(f.param);\n                } else if (f.type === \"time\") {\n                    params = String(f.param);\n                } else if (f.type === \"number\") {\n                    var p = Object.assign({}, FORMAT_DEFAULT.number, f);\n                    params = String([\n                        String(p.nDec),\n                        p.sepComma ? \"0\" : \"1\",\n                        '\"' + p.negStyle + '\"',\n                        \"null\",\n                        '\"' + p.currency + '\"',\n                        String(p.currencyPrepend)\n                    ].join(\",\"));\n                } else if (f.type === \"percent\") {\n                    var _p = Object.assign({}, FORMAT_DEFAULT.percent, f);\n                    params = String([\n                        String(_p.nDec),\n                        _p.sepComma ? \"0\" : \"1\"\n                    ].join(\",\"));\n                }\n            }\n            opts.AA = opts.AA ? opts.AA : {};\n            opts.AA.K = {\n                S: \"JavaScript\",\n                JS: new String(fnKeystroke + \"(\" + params + \");\")\n            };\n            opts.AA.F = {\n                S: \"JavaScript\",\n                JS: new String(fnFormat + \"(\" + params + \");\")\n            };\n        }\n        delete opts.format;\n        return opts;\n    },\n    _resolveColors: function _resolveColors(opts) {\n        var color = this._normalizeColor(opts.backgroundColor);\n        if (color) {\n            if (!opts.MK) {\n                opts.MK = {};\n            }\n            opts.MK.BG = color;\n        }\n        color = this._normalizeColor(opts.borderColor);\n        if (color) {\n            if (!opts.MK) {\n                opts.MK = {};\n            }\n            opts.MK.BC = color;\n        }\n        delete opts.backgroundColor;\n        delete opts.borderColor;\n        return opts;\n    },\n    _resolveFlags: function _resolveFlags(options) {\n        var result = 0;\n        Object.keys(options).forEach(function(key) {\n            if (FIELD_FLAGS[key]) {\n                result |= FIELD_FLAGS[key];\n                delete options[key];\n            }\n        });\n        if (result !== 0) {\n            options.Ff = options.Ff ? options.Ff : 0;\n            options.Ff |= result;\n        }\n        return options;\n    },\n    _resolveJustify: function _resolveJustify(options) {\n        var result = 0;\n        if (options.align !== undefined) {\n            if (typeof FIELD_JUSTIFY[options.align] === \"number\") {\n                result = FIELD_JUSTIFY[options.align];\n            }\n            delete options.align;\n        }\n        if (result !== 0) {\n            options.Q = result; // default\n        }\n        return options;\n    },\n    _resolveFont: function _resolveFont(options) {\n        // add current font to document-level AcroForm dict if necessary\n        if (this._acroform.fonts[this._font.id] === null) {\n            this._acroform.fonts[this._font.id] = this._font.ref();\n        }\n        // add current font to field's resource dict (RD) if not the default acroform font\n        if (this._acroform.defaultFont !== this._font.name) {\n            options.DR = {\n                Font: {}\n            };\n            // Get the fontSize option. If not set use auto sizing\n            var fontSize = options.fontSize || 0;\n            options.DR.Font[this._font.id] = this._font.ref();\n            options.DA = new String(\"/\" + this._font.id + \" \" + fontSize + \" Tf 0 g\");\n        }\n        return options;\n    },\n    _resolveStrings: function _resolveStrings(options) {\n        var select = [];\n        function appendChoices(a) {\n            if (Array.isArray(a)) {\n                for(var idx = 0; idx < a.length; idx++){\n                    if (typeof a[idx] === \"string\") {\n                        select.push(new String(a[idx]));\n                    } else {\n                        select.push(a[idx]);\n                    }\n                }\n            }\n        }\n        appendChoices(options.Opt);\n        if (options.select) {\n            appendChoices(options.select);\n            delete options.select;\n        }\n        if (select.length) {\n            options.Opt = select;\n        }\n        Object.keys(VALUE_MAP).forEach(function(key) {\n            if (options[key] !== undefined) {\n                options[VALUE_MAP[key]] = options[key];\n                delete options[key];\n            }\n        });\n        [\n            \"V\",\n            \"DV\"\n        ].forEach(function(key) {\n            if (typeof options[key] === \"string\") {\n                options[key] = new String(options[key]);\n            }\n        });\n        if (options.MK && options.MK.CA) {\n            options.MK.CA = new String(options.MK.CA);\n        }\n        if (options.label) {\n            options.MK = options.MK ? options.MK : {};\n            options.MK.CA = new String(options.label);\n            delete options.label;\n        }\n        return options;\n    }\n};\nvar AttachmentsMixin = {\n    /**\n   * Embed contents of `src` in PDF\n   * @param {Buffer | ArrayBuffer | string} src input Buffer, ArrayBuffer, base64 encoded string or path to file\n   * @param {object} options\n   *  * options.name: filename to be shown in PDF, will use `src` if none set\n   *  * options.type: filetype to be shown in PDF\n   *  * options.description: description to be shown in PDF\n   *  * options.hidden: if true, do not add attachment to EmbeddedFiles dictionary. Useful for file attachment annotations\n   *  * options.creationDate: override creation date\n   *  * options.modifiedDate: override modified date\n   * @returns filespec reference\n   */ file: function file(src, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        options.name = options.name || src;\n        var refBody = {\n            Type: \"EmbeddedFile\",\n            Params: {}\n        };\n        var data;\n        if (!src) {\n            throw new Error(\"No src specified\");\n        }\n        if (Buffer.isBuffer(src)) {\n            data = src;\n        } else if (src instanceof ArrayBuffer) {\n            data = Buffer.from(new Uint8Array(src));\n        } else {\n            var match;\n            if (match = /^data:(.*);base64,(.*)$/.exec(src)) {\n                if (match[1]) {\n                    refBody.Subtype = match[1].replace(\"/\", \"#2F\");\n                }\n                data = Buffer.from(match[2], \"base64\");\n            } else {\n                data = fs__WEBPACK_IMPORTED_MODULE_8__.readFileSync(src);\n                if (!data) {\n                    throw new Error(\"Could not read contents of file at filepath \" + src);\n                }\n                // update CreationDate and ModDate\n                var _fs$statSync = fs__WEBPACK_IMPORTED_MODULE_8__.statSync(src), birthtime = _fs$statSync.birthtime, ctime = _fs$statSync.ctime;\n                refBody.Params.CreationDate = birthtime;\n                refBody.Params.ModDate = ctime;\n            }\n        }\n        // override creation date and modified date\n        if (options.creationDate instanceof Date) {\n            refBody.Params.CreationDate = options.creationDate;\n        }\n        if (options.modifiedDate instanceof Date) {\n            refBody.Params.ModDate = options.modifiedDate;\n        }\n        // add optional subtype\n        if (options.type) {\n            refBody.Subtype = options.type.replace(\"/\", \"#2F\");\n        }\n        // add checksum and size information\n        var checksum = crypto_js_md5_js__WEBPACK_IMPORTED_MODULE_6__(crypto_js_core_js__WEBPACK_IMPORTED_MODULE_12__.lib.WordArray.create(new Uint8Array(data)));\n        refBody.Params.CheckSum = new String(checksum);\n        refBody.Params.Size = data.byteLength;\n        // save some space when embedding the same file again\n        // if a file with the same name and metadata exists, reuse its reference\n        var ref;\n        if (!this._fileRegistry) this._fileRegistry = {};\n        var file = this._fileRegistry[options.name];\n        if (file && isEqual(refBody, file)) {\n            ref = file.ref;\n        } else {\n            ref = this.ref(refBody);\n            ref.end(data);\n            this._fileRegistry[options.name] = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_11__({}, refBody, {\n                ref: ref\n            });\n        }\n        // add filespec for embedded file\n        var fileSpecBody = {\n            Type: \"Filespec\",\n            F: new String(options.name),\n            EF: {\n                F: ref\n            },\n            UF: new String(options.name)\n        };\n        if (options.description) {\n            fileSpecBody.Desc = new String(options.description);\n        }\n        var filespec = this.ref(fileSpecBody);\n        filespec.end();\n        if (!options.hidden) {\n            this.addNamedEmbeddedFile(options.name, filespec);\n        }\n        return filespec;\n    }\n};\n/** check two embedded file metadata objects for equality */ function isEqual(a, b) {\n    return a.Subtype === b.Subtype && a.Params.CheckSum.toString() === b.Params.CheckSum.toString() && a.Params.Size === b.Params.Size && a.Params.CreationDate === b.Params.CreationDate && a.Params.ModDate === b.Params.ModDate;\n}\nvar PDFMetadata = /*#__PURE__*/ function() {\n    function PDFMetadata() {\n        this._metadata = '\\n        <?xpacket begin=\"\\uFEFF\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>\\n            <x:xmpmeta xmlns:x=\"adobe:ns:meta/\">\\n                <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\\n        ';\n    }\n    var _proto = PDFMetadata.prototype;\n    _proto._closeTags = function _closeTags() {\n        this._metadata = this._metadata.concat('\\n                </rdf:RDF>\\n            </x:xmpmeta>\\n        <?xpacket end=\"w\"?>\\n        ');\n    };\n    _proto.append = function append(xml, newline) {\n        if (newline === void 0) {\n            newline = true;\n        }\n        this._metadata = this._metadata.concat(xml);\n        if (newline) this._metadata = this._metadata.concat(\"\\n\");\n    };\n    _proto.getXML = function getXML() {\n        return this._metadata;\n    };\n    _proto.getLength = function getLength() {\n        return this._metadata.length;\n    };\n    _proto.end = function end() {\n        this._closeTags();\n        this._metadata = this._metadata.trim();\n    };\n    return PDFMetadata;\n}();\nvar MetadataMixin = {\n    initMetadata: function initMetadata() {\n        this.metadata = new PDFMetadata();\n    },\n    appendXML: function appendXML(xml, newline) {\n        if (newline === void 0) {\n            newline = true;\n        }\n        this.metadata.append(xml, newline);\n    },\n    _addInfo: function _addInfo() {\n        this.appendXML('\\n        <rdf:Description rdf:about=\"\" xmlns:xmp=\"http://ns.adobe.com/xap/1.0/\">\\n            <xmp:CreateDate>' + (this.info.CreationDate.toISOString().split(\".\")[0] + \"Z\") + \"</xmp:CreateDate>\\n            <xmp:CreatorTool>\" + this.info.Creator + \"</xmp:CreatorTool>\\n        </rdf:Description>\\n        \");\n        if (this.info.Title || this.info.Author || this.info.Subject) {\n            this.appendXML('\\n            <rdf:Description rdf:about=\"\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\\n            ');\n            if (this.info.Title) {\n                this.appendXML('\\n                <dc:title>\\n                    <rdf:Alt>\\n                        <rdf:li xml:lang=\"x-default\">' + this.info.Title + \"</rdf:li>\\n                    </rdf:Alt>\\n                </dc:title>\\n                \");\n            }\n            if (this.info.Author) {\n                this.appendXML(\"\\n                <dc:creator>\\n                    <rdf:Seq>\\n                        <rdf:li>\" + this.info.Author + \"</rdf:li>\\n                    </rdf:Seq>\\n                </dc:creator>\\n                \");\n            }\n            if (this.info.Subject) {\n                this.appendXML('\\n                <dc:description>\\n                    <rdf:Alt>\\n                        <rdf:li xml:lang=\"x-default\">' + this.info.Subject + \"</rdf:li>\\n                    </rdf:Alt>\\n                </dc:description>\\n                \");\n            }\n            this.appendXML(\"\\n            </rdf:Description>\\n            \");\n        }\n        this.appendXML('\\n        <rdf:Description rdf:about=\"\" xmlns:pdf=\"http://ns.adobe.com/pdf/1.3/\">\\n            <pdf:Producer>' + this.info.Creator + \"</pdf:Producer>\", false);\n        if (this.info.Keywords) {\n            this.appendXML(\"\\n            <pdf:Keywords>\" + this.info.Keywords + \"</pdf:Keywords>\", false);\n        }\n        this.appendXML(\"\\n        </rdf:Description>\\n        \");\n    },\n    endMetadata: function endMetadata() {\n        this._addInfo();\n        this.metadata.end();\n        /*\n        Metadata was introduced in PDF 1.4, so adding it to 1.3\n        will likely only take up more space.\n        */ if (this.version != 1.3) {\n            this.metadataRef = this.ref({\n                length: this.metadata.getLength(),\n                Type: \"Metadata\",\n                Subtype: \"XML\"\n            });\n            this.metadataRef.compress = false;\n            this.metadataRef.write(Buffer.from(this.metadata.getXML(), \"utf-8\"));\n            this.metadataRef.end();\n            this._root.data.Metadata = this.metadataRef;\n        }\n    }\n};\nvar capitalize = function capitalize(v) {\n    return v[0].toUpperCase() + v.slice(1);\n};\nvar PDFDocument = /*#__PURE__*/ function(_stream$Readable) {\n    _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__(PDFDocument, _stream$Readable);\n    function PDFDocument(options) {\n        var _this;\n        if (options === void 0) {\n            options = {};\n        }\n        _this = _stream$Readable.call(this) || this;\n        _this.options = options;\n        // PDF version\n        switch(options.pdfVersion){\n            case \"1.4\":\n                _this.version = 1.4;\n                break;\n            case \"1.5\":\n                _this.version = 1.5;\n                break;\n            case \"1.6\":\n                _this.version = 1.6;\n                break;\n            case \"1.7\":\n            case \"1.7ext3\":\n                _this.version = 1.7;\n                break;\n            default:\n                _this.version = 1.3;\n                break;\n        }\n        // Whether streams should be compressed\n        _this.compress = _this.options.compress != null ? _this.options.compress : true;\n        _this._pageBuffer = [];\n        _this._pageBufferStart = 0;\n        // The PDF object store\n        _this._offsets = [];\n        _this._waiting = 0;\n        _this._ended = false;\n        _this._offset = 0;\n        var Pages = _this.ref({\n            Type: \"Pages\",\n            Count: 0,\n            Kids: []\n        });\n        var Names = _this.ref({\n            Dests: new PDFNameTree()\n        });\n        _this._root = _this.ref({\n            Type: \"Catalog\",\n            Pages: Pages,\n            Names: Names\n        });\n        if (_this.options.lang) {\n            _this._root.data.Lang = new String(_this.options.lang);\n        }\n        if (_this.options.pageLayout) {\n            _this._root.data.PageLayout = capitalize(_this.options.pageLayout);\n        }\n        if (_this.options.pageMode) {\n            _this._root.data.PageMode = capitalize(_this.options.pageMode);\n        }\n        // The current page\n        _this.page = null;\n        // Initialize mixins\n        _this.initColor();\n        _this.initVector();\n        _this.initFonts();\n        _this.initText();\n        _this.initImages();\n        _this.initOutline();\n        // this.initMarkings(options)\n        // Initialize the metadata\n        _this.info = {\n            Producer: \"PDFKit\",\n            Creator: \"PDFKit\",\n            CreationDate: new Date()\n        };\n        if (_this.options.info) {\n            for(var key in _this.options.info){\n                var val = _this.options.info[key];\n                _this.info[key] = val;\n            }\n        }\n        if (_this.options.displayTitle) {\n            _this._root.data.ViewerPreferences = _this.ref({\n                DisplayDocTitle: true\n            });\n        }\n        // Generate file ID\n        _this._id = PDFSecurity.generateFileID(_this.info);\n        // Initialize security settings\n        // this._security = PDFSecurity.create(this, options);\n        // Write the header PDF version\n        _this._write(\"%PDF-\" + _this.version);\n        // 4 binary chars, as recommended by the spec\n        _this._write(\"%\\xff\\xff\\xff\\xff\");\n        // Add the first page\n        if (_this.options.autoFirstPage !== false) {\n            _this.addPage();\n        }\n        return _this;\n    }\n    var _proto = PDFDocument.prototype;\n    _proto.addPage = function addPage(options) {\n        // end the current page if needed\n        if (options == null) {\n            options = this.options;\n        }\n        // end the current page if needed\n        if (!this.options.bufferPages) {\n            this.flushPages();\n        }\n        // create a page object\n        this.page = new PDFPage(this, options);\n        this._pageBuffer.push(this.page);\n        // add the page to the object store\n        var pages = this._root.data.Pages.data;\n        pages.Kids.push(this.page.dictionary);\n        pages.Count++;\n        // flip PDF coordinate system so that the origin is in\n        // the top left rather than the bottom left\n        this._ctm = [\n            1,\n            0,\n            0,\n            1,\n            0,\n            0\n        ];\n        this.transform(1, 0, 0, -1, 0, this.page.height);\n        // this.emit('pageAdded');\n        return this;\n    };\n    _proto.flushPages = function flushPages() {\n        // this local variable exists so we're future-proof against\n        // reentrant calls to flushPages.\n        var pages = this._pageBuffer;\n        this._pageBuffer = [];\n        this._pageBufferStart += pages.length;\n        for(var _i = 0, _Array$from = Array.from(pages); _i < _Array$from.length; _i++){\n            var page = _Array$from[_i];\n            // this.endPageMarkings(page);\n            page.end();\n        }\n    };\n    _proto.addNamedDestination = function addNamedDestination(name) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        if (args.length === 0) {\n            args = [\n                \"XYZ\",\n                null,\n                null,\n                null\n            ];\n        }\n        if (args[0] === \"XYZ\" && args[2] !== null) {\n            args[2] = this.page.height - args[2];\n        }\n        args.unshift(this.page.dictionary);\n        this._root.data.Names.data.Dests.add(name, args);\n    };\n    _proto.addNamedEmbeddedFile = function addNamedEmbeddedFile(name, ref) {\n        if (!this._root.data.Names.data.EmbeddedFiles) {\n            // disabling /Limits for this tree fixes attachments not showing in Adobe Reader\n            this._root.data.Names.data.EmbeddedFiles = new PDFNameTree({\n                limits: false\n            });\n        }\n        // add filespec to EmbeddedFiles\n        this._root.data.Names.data.EmbeddedFiles.add(name, ref);\n    };\n    _proto.addNamedJavaScript = function addNamedJavaScript(name, js) {\n        if (!this._root.data.Names.data.JavaScript) {\n            this._root.data.Names.data.JavaScript = new PDFNameTree();\n        }\n        var data = {\n            JS: new String(js),\n            S: \"JavaScript\"\n        };\n        this._root.data.Names.data.JavaScript.add(name, data);\n    };\n    _proto.ref = function ref(data) {\n        var ref = new PDFReference(this, this._offsets.length + 1, data);\n        this._offsets.push(null); // placeholder for this object's offset once it is finalized\n        this._waiting++;\n        return ref;\n    };\n    _proto._read = function _read() {\n    // do nothing, but this method is required by node\n    };\n    _proto._write = function _write(data) {\n        if (!Buffer.isBuffer(data)) {\n            data = Buffer.from(data + \"\\n\", \"binary\");\n        }\n        this.push(data);\n        return this._offset += data.length;\n    };\n    _proto.addContent = function addContent(data) {\n        this.page.write(data);\n        return this;\n    };\n    _proto._refEnd = function _refEnd(ref) {\n        this._offsets[ref.id - 1] = ref.offset;\n        if (--this._waiting === 0 && this._ended) {\n            this._finalize();\n            return this._ended = false;\n        }\n    };\n    _proto.end = function end() {\n        this.flushPages();\n        this._info = this.ref();\n        for(var key in this.info){\n            var val = this.info[key];\n            if (typeof val === \"string\") {\n                val = new String(val);\n            }\n            var entry = this.ref(val);\n            entry.end();\n            this._info.data[key] = entry;\n        }\n        this._info.end();\n        for(var name in this._fontFamilies){\n            var font = this._fontFamilies[name];\n            font.finalize();\n        }\n        this.endOutline();\n        // this.endMarkings();\n        this._root.end();\n        this._root.data.Pages.end();\n        this._root.data.Names.end();\n        this.endAcroForm();\n        if (this._root.data.ViewerPreferences) {\n            this._root.data.ViewerPreferences.end();\n        }\n        // if (this._security) {\n        //   this._security.end();\n        // }\n        if (this._waiting === 0) {\n            return this._finalize();\n        }\n        this._ended = true;\n    };\n    _proto._finalize = function _finalize() {\n        // generate xref\n        var xRefOffset = this._offset;\n        this._write(\"xref\");\n        this._write(\"0 \" + (this._offsets.length + 1));\n        this._write(\"0000000000 65535 f \");\n        for(var _i2 = 0, _Array$from2 = Array.from(this._offsets); _i2 < _Array$from2.length; _i2++){\n            var offset = _Array$from2[_i2];\n            offset = (\"0000000000\" + offset).slice(-10);\n            this._write(offset + \" 00000 n \");\n        }\n        // trailer\n        var trailer = {\n            Size: this._offsets.length + 1,\n            Root: this._root,\n            Info: this._info,\n            ID: [\n                this._id,\n                this._id\n            ]\n        };\n        // if (this._security) {\n        //   trailer.Encrypt = this._security.dictionary;\n        // }\n        this._write(\"trailer\");\n        this._write(PDFObject$1.convert(trailer));\n        this._write(\"startxref\");\n        this._write(\"\" + xRefOffset);\n        this._write(\"%%EOF\");\n        // end the stream\n        return this.push(null);\n    };\n    _proto.toString = function toString() {\n        return \"[object PDFDocument]\";\n    };\n    _proto.initColor = function initColor() {};\n    _proto.initVector = function initVector() {};\n    _proto.initFonts = function initFonts() {};\n    _proto.initText = function initText() {};\n    _proto.initImages = function initImages() {};\n    _proto.initOutline = function initOutline() {};\n    _proto.transform = function transform(m11, m12, m21, m22, dx, dy) {};\n    _proto.endOutline = function endOutline() {};\n    _proto.endAcroForm = function endAcroForm() {};\n    return PDFDocument;\n}(stream__WEBPACK_IMPORTED_MODULE_1__.Readable);\nvar mixin = function mixin(methods) {\n    Object.assign(PDFDocument.prototype, methods);\n};\n// Load mixins\nmixin(MetadataMixin);\nmixin(ColorMixin);\nmixin(VectorMixin);\nmixin(FontsMixin);\nmixin(TextMixin);\nmixin(ImagesMixin);\nmixin(AnnotationsMixin);\nmixin(OutlineMixin);\nmixin(MarkingsMixin);\nmixin(AcroFormMixin);\nmixin(AttachmentsMixin);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/pdfkit/lib/pdfkit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-pdf/png-js/lib/png-js.js":
/*!******************************************************!*\
  !*** ./node_modules/@react-pdf/png-js/lib/png-js.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PNG)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zlib */ \"zlib\");\n\n\nvar PNG = /*#__PURE__*/ function() {\n    PNG.decode = function decode(path, fn) {\n        {\n            return fs__WEBPACK_IMPORTED_MODULE_0__.readFile(path, function(err, file) {\n                var png = new PNG(file);\n                return png.decode(function(pixels) {\n                    return fn(pixels);\n                });\n            });\n        }\n    };\n    PNG.load = function load(path) {\n        {\n            var file = fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync(path);\n            return new PNG(file);\n        }\n    };\n    function PNG(data) {\n        var i;\n        this.data = data;\n        this.pos = 8; // Skip the default header\n        this.palette = [];\n        this.imgData = [];\n        this.transparency = {};\n        this.text = {};\n        while(true){\n            var chunkSize = this.readUInt32();\n            var section = \"\";\n            for(i = 0; i < 4; i++){\n                section += String.fromCharCode(this.data[this.pos++]);\n            }\n            switch(section){\n                case \"IHDR\":\n                    // we can grab  interesting values from here (like width, height, etc)\n                    this.width = this.readUInt32();\n                    this.height = this.readUInt32();\n                    this.bits = this.data[this.pos++];\n                    this.colorType = this.data[this.pos++];\n                    this.compressionMethod = this.data[this.pos++];\n                    this.filterMethod = this.data[this.pos++];\n                    this.interlaceMethod = this.data[this.pos++];\n                    break;\n                case \"PLTE\":\n                    this.palette = this.read(chunkSize);\n                    break;\n                case \"IDAT\":\n                    for(i = 0; i < chunkSize; i++){\n                        this.imgData.push(this.data[this.pos++]);\n                    }\n                    break;\n                case \"tRNS\":\n                    // This chunk can only occur once and it must occur after the\n                    // PLTE chunk and before the IDAT chunk.\n                    this.transparency = {};\n                    switch(this.colorType){\n                        case 3:\n                            // Indexed color, RGB. Each byte in this chunk is an alpha for\n                            // the palette index in the PLTE (\"palette\") chunk up until the\n                            // last non-opaque entry. Set up an array, stretching over all\n                            // palette entries which will be 0 (opaque) or 1 (transparent).\n                            this.transparency.indexed = this.read(chunkSize);\n                            var short = 255 - this.transparency.indexed.length;\n                            if (short > 0) {\n                                for(i = 0; i < short; i++){\n                                    this.transparency.indexed.push(255);\n                                }\n                            }\n                            break;\n                        case 0:\n                            // Greyscale. Corresponding to entries in the PLTE chunk.\n                            // Grey is two bytes, range 0 .. (2 ^ bit-depth) - 1\n                            this.transparency.grayscale = this.read(chunkSize)[0];\n                            break;\n                        case 2:\n                            // True color with proper alpha channel.\n                            this.transparency.rgb = this.read(chunkSize);\n                            break;\n                    }\n                    break;\n                case \"tEXt\":\n                    var text = this.read(chunkSize);\n                    var index = text.indexOf(0);\n                    var key = String.fromCharCode.apply(String, text.slice(0, index));\n                    this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));\n                    break;\n                case \"IEND\":\n                    // we've got everything we need!\n                    switch(this.colorType){\n                        case 0:\n                        case 3:\n                        case 4:\n                            this.colors = 1;\n                            break;\n                        case 2:\n                        case 6:\n                            this.colors = 3;\n                            break;\n                    }\n                    this.hasAlphaChannel = [\n                        4,\n                        6\n                    ].includes(this.colorType);\n                    var colors = this.colors + (this.hasAlphaChannel ? 1 : 0);\n                    this.pixelBitlength = this.bits * colors;\n                    switch(this.colors){\n                        case 1:\n                            this.colorSpace = \"DeviceGray\";\n                            break;\n                        case 3:\n                            this.colorSpace = \"DeviceRGB\";\n                            break;\n                    }\n                    this.imgData = Buffer.from(this.imgData);\n                    return;\n                default:\n                    // unknown (or unimportant) section, skip it\n                    this.pos += chunkSize;\n            }\n            this.pos += 4; // Skip the CRC\n            if (this.pos > this.data.length) {\n                throw new Error(\"Incomplete or corrupt PNG file\");\n            }\n        }\n    }\n    var _proto = PNG.prototype;\n    _proto.read = function read(bytes) {\n        var result = new Array(bytes);\n        for(var i = 0; i < bytes; i++){\n            result[i] = this.data[this.pos++];\n        }\n        return result;\n    };\n    _proto.readUInt32 = function readUInt32() {\n        var b1 = this.data[this.pos++] << 24;\n        var b2 = this.data[this.pos++] << 16;\n        var b3 = this.data[this.pos++] << 8;\n        var b4 = this.data[this.pos++];\n        return b1 | b2 | b3 | b4;\n    };\n    _proto.readUInt16 = function readUInt16() {\n        var b1 = this.data[this.pos++] << 8;\n        var b2 = this.data[this.pos++];\n        return b1 | b2;\n    };\n    _proto.decodePixels = function decodePixels(fn) {\n        var _this = this;\n        return zlib__WEBPACK_IMPORTED_MODULE_1__.inflate(this.imgData, function(err, data) {\n            if (err) throw err;\n            var pos = 0;\n            var width = _this.width, height = _this.height;\n            var pixelBytes = _this.pixelBitlength / 8;\n            var pixels = Buffer.alloc(width * height * pixelBytes);\n            function pass(x0, y0, dx, dy, singlePass) {\n                if (singlePass === void 0) {\n                    singlePass = false;\n                }\n                var w = Math.ceil((width - x0) / dx);\n                var h = Math.ceil((height - y0) / dy);\n                var scanlineLength = pixelBytes * w;\n                var buffer = singlePass ? pixels : Buffer.alloc(scanlineLength * h);\n                var row = 0;\n                var c = 0;\n                while(row < h && pos < data.length){\n                    var byte;\n                    var col;\n                    var i;\n                    var left;\n                    var upper;\n                    switch(data[pos++]){\n                        case 0:\n                            // None\n                            for(i = 0; i < scanlineLength; i++){\n                                buffer[c++] = data[pos++];\n                            }\n                            break;\n                        case 1:\n                            // Sub\n                            for(i = 0; i < scanlineLength; i++){\n                                byte = data[pos++];\n                                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];\n                                buffer[c++] = (byte + left) % 256;\n                            }\n                            break;\n                        case 2:\n                            // Up\n                            for(i = 0; i < scanlineLength; i++){\n                                byte = data[pos++];\n                                col = (i - i % pixelBytes) / pixelBytes;\n                                upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                                buffer[c++] = (upper + byte) % 256;\n                            }\n                            break;\n                        case 3:\n                            // Average\n                            for(i = 0; i < scanlineLength; i++){\n                                byte = data[pos++];\n                                col = (i - i % pixelBytes) / pixelBytes;\n                                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];\n                                upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                                buffer[c++] = (byte + Math.floor((left + upper) / 2)) % 256;\n                            }\n                            break;\n                        case 4:\n                            // Paeth\n                            for(i = 0; i < scanlineLength; i++){\n                                var paeth;\n                                var upperLeft;\n                                byte = data[pos++];\n                                col = (i - i % pixelBytes) / pixelBytes;\n                                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];\n                                if (row === 0) {\n                                    upper = upperLeft = 0;\n                                } else {\n                                    upper = buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                                    upperLeft = col && buffer[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i % pixelBytes];\n                                }\n                                var p = left + upper - upperLeft;\n                                var pa = Math.abs(p - left);\n                                var pb = Math.abs(p - upper);\n                                var pc = Math.abs(p - upperLeft);\n                                if (pa <= pb && pa <= pc) {\n                                    paeth = left;\n                                } else if (pb <= pc) {\n                                    paeth = upper;\n                                } else {\n                                    paeth = upperLeft;\n                                }\n                                buffer[c++] = (byte + paeth) % 256;\n                            }\n                            break;\n                        default:\n                            throw new Error(\"Invalid filter algorithm: \" + data[pos - 1]);\n                    }\n                    if (!singlePass) {\n                        var pixelsPos = ((y0 + row * dy) * width + x0) * pixelBytes;\n                        var bufferPos = row * scanlineLength;\n                        for(i = 0; i < w; i++){\n                            for(var j = 0; j < pixelBytes; j++)pixels[pixelsPos++] = buffer[bufferPos++];\n                            pixelsPos += (dx - 1) * pixelBytes;\n                        }\n                    }\n                    row++;\n                }\n            }\n            if (_this.interlaceMethod === 1) {\n                /*\n          1 6 4 6 2 6 4 6\n          7 7 7 7 7 7 7 7\n          5 6 5 6 5 6 5 6\n          7 7 7 7 7 7 7 7\n          3 6 4 6 3 6 4 6\n          7 7 7 7 7 7 7 7\n          5 6 5 6 5 6 5 6\n          7 7 7 7 7 7 7 7\n        */ pass(0, 0, 8, 8); // 1\n                pass(4, 0, 8, 8); // 2\n                pass(0, 4, 4, 8); // 3\n                pass(2, 0, 4, 4); // 4\n                pass(0, 2, 2, 4); // 5\n                pass(1, 0, 2, 2); // 6\n                pass(0, 1, 1, 2); // 7\n            } else {\n                pass(0, 0, 1, 1, true);\n            }\n            return fn(pixels);\n        });\n    };\n    _proto.decodePalette = function decodePalette() {\n        var palette = this.palette;\n        var length = palette.length;\n        var transparency = this.transparency.indexed || [];\n        var ret = Buffer.alloc(transparency.length + length);\n        var pos = 0;\n        var c = 0;\n        for(var i = 0; i < length; i += 3){\n            var left;\n            ret[pos++] = palette[i];\n            ret[pos++] = palette[i + 1];\n            ret[pos++] = palette[i + 2];\n            ret[pos++] = (left = transparency[c++]) != null ? left : 255;\n        }\n        return ret;\n    };\n    _proto.copyToImageData = function copyToImageData(imageData, pixels) {\n        var j;\n        var k;\n        var colors = this.colors;\n        var palette = null;\n        var alpha = this.hasAlphaChannel;\n        if (this.palette.length) {\n            palette = this._decodedPalette || (this._decodedPalette = this.decodePalette());\n            colors = 4;\n            alpha = true;\n        }\n        var data = imageData.data || imageData;\n        var length = data.length;\n        var input = palette || pixels;\n        var i = j = 0;\n        if (colors === 1) {\n            while(i < length){\n                k = palette ? pixels[i / 4] * 4 : j;\n                var v = input[k++];\n                data[i++] = v;\n                data[i++] = v;\n                data[i++] = v;\n                data[i++] = alpha ? input[k++] : 255;\n                j = k;\n            }\n        } else {\n            while(i < length){\n                k = palette ? pixels[i / 4] * 4 : j;\n                data[i++] = input[k++];\n                data[i++] = input[k++];\n                data[i++] = input[k++];\n                data[i++] = alpha ? input[k++] : 255;\n                j = k;\n            }\n        }\n    };\n    _proto.decode = function decode(fn) {\n        var _this2 = this;\n        var ret = Buffer.alloc(this.width * this.height * 4);\n        return this.decodePixels(function(pixels) {\n            _this2.copyToImageData(ret, pixels);\n            return fn(ret);\n        });\n    };\n    return PNG;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/png-js/lib/png-js.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-pdf/primitives/src/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@react-pdf/primitives/src/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Canvas: () => (/* binding */ Canvas),\n/* harmony export */   Circle: () => (/* binding */ Circle),\n/* harmony export */   ClipPath: () => (/* binding */ ClipPath),\n/* harmony export */   Defs: () => (/* binding */ Defs),\n/* harmony export */   Document: () => (/* binding */ Document),\n/* harmony export */   Ellipse: () => (/* binding */ Ellipse),\n/* harmony export */   G: () => (/* binding */ G),\n/* harmony export */   Image: () => (/* binding */ Image),\n/* harmony export */   Line: () => (/* binding */ Line),\n/* harmony export */   LinearGradient: () => (/* binding */ LinearGradient),\n/* harmony export */   Link: () => (/* binding */ Link),\n/* harmony export */   Note: () => (/* binding */ Note),\n/* harmony export */   Page: () => (/* binding */ Page),\n/* harmony export */   Path: () => (/* binding */ Path),\n/* harmony export */   Polygon: () => (/* binding */ Polygon),\n/* harmony export */   Polyline: () => (/* binding */ Polyline),\n/* harmony export */   RadialGradient: () => (/* binding */ RadialGradient),\n/* harmony export */   Rect: () => (/* binding */ Rect),\n/* harmony export */   Stop: () => (/* binding */ Stop),\n/* harmony export */   Svg: () => (/* binding */ Svg),\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   TextInstance: () => (/* binding */ TextInstance),\n/* harmony export */   Tspan: () => (/* binding */ Tspan),\n/* harmony export */   View: () => (/* binding */ View)\n/* harmony export */ });\nconst G = \"G\";\nconst Svg = \"SVG\";\nconst View = \"VIEW\";\nconst Text = \"TEXT\";\nconst Link = \"LINK\";\nconst Page = \"PAGE\";\nconst Note = \"NOTE\";\nconst Path = \"PATH\";\nconst Rect = \"RECT\";\nconst Line = \"LINE\";\nconst Stop = \"STOP\";\nconst Defs = \"DEFS\";\nconst Image = \"IMAGE\";\nconst Tspan = \"TSPAN\";\nconst Canvas = \"CANVAS\";\nconst Circle = \"CIRCLE\";\nconst Ellipse = \"ELLIPSE\";\nconst Polygon = \"POLYGON\";\nconst Document = \"DOCUMENT\";\nconst Polyline = \"POLYLINE\";\nconst ClipPath = \"CLIP_PATH\";\nconst TextInstance = \"TEXT_INSTANCE\";\nconst LinearGradient = \"LINEAR_GRADIENT\";\nconst RadialGradient = \"RADIAL_GRADIENT\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXBkZi9wcmltaXRpdmVzL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTyxNQUFNQSxJQUFJLElBQUk7QUFDZCxNQUFNQyxNQUFNLE1BQU07QUFDbEIsTUFBTUMsT0FBTyxPQUFPO0FBQ3BCLE1BQU1DLE9BQU8sT0FBTztBQUNwQixNQUFNQyxPQUFPLE9BQU87QUFDcEIsTUFBTUMsT0FBTyxPQUFPO0FBQ3BCLE1BQU1DLE9BQU8sT0FBTztBQUNwQixNQUFNQyxPQUFPLE9BQU87QUFDcEIsTUFBTUMsT0FBTyxPQUFPO0FBQ3BCLE1BQU1DLE9BQU8sT0FBTztBQUNwQixNQUFNQyxPQUFPLE9BQU87QUFDcEIsTUFBTUMsT0FBTyxPQUFPO0FBQ3BCLE1BQU1DLFFBQVEsUUFBUTtBQUN0QixNQUFNQyxRQUFRLFFBQVE7QUFDdEIsTUFBTUMsU0FBUyxTQUFTO0FBQ3hCLE1BQU1DLFNBQVMsU0FBUztBQUN4QixNQUFNQyxVQUFVLFVBQVU7QUFDMUIsTUFBTUMsVUFBVSxVQUFVO0FBQzFCLE1BQU1DLFdBQVcsV0FBVztBQUM1QixNQUFNQyxXQUFXLFdBQVc7QUFDNUIsTUFBTUMsV0FBVyxZQUFZO0FBQzdCLE1BQU1DLGVBQWUsZ0JBQWdCO0FBQ3JDLE1BQU1DLGlCQUFpQixrQkFBa0I7QUFDekMsTUFBTUMsaUJBQWlCLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2xlYXJucmVhY3RuZXh0Ly4vbm9kZV9tb2R1bGVzL0ByZWFjdC1wZGYvcHJpbWl0aXZlcy9zcmMvaW5kZXguanM/MDY5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgRyA9ICdHJztcbmV4cG9ydCBjb25zdCBTdmcgPSAnU1ZHJztcbmV4cG9ydCBjb25zdCBWaWV3ID0gJ1ZJRVcnO1xuZXhwb3J0IGNvbnN0IFRleHQgPSAnVEVYVCc7XG5leHBvcnQgY29uc3QgTGluayA9ICdMSU5LJztcbmV4cG9ydCBjb25zdCBQYWdlID0gJ1BBR0UnO1xuZXhwb3J0IGNvbnN0IE5vdGUgPSAnTk9URSc7XG5leHBvcnQgY29uc3QgUGF0aCA9ICdQQVRIJztcbmV4cG9ydCBjb25zdCBSZWN0ID0gJ1JFQ1QnO1xuZXhwb3J0IGNvbnN0IExpbmUgPSAnTElORSc7XG5leHBvcnQgY29uc3QgU3RvcCA9ICdTVE9QJztcbmV4cG9ydCBjb25zdCBEZWZzID0gJ0RFRlMnO1xuZXhwb3J0IGNvbnN0IEltYWdlID0gJ0lNQUdFJztcbmV4cG9ydCBjb25zdCBUc3BhbiA9ICdUU1BBTic7XG5leHBvcnQgY29uc3QgQ2FudmFzID0gJ0NBTlZBUyc7XG5leHBvcnQgY29uc3QgQ2lyY2xlID0gJ0NJUkNMRSc7XG5leHBvcnQgY29uc3QgRWxsaXBzZSA9ICdFTExJUFNFJztcbmV4cG9ydCBjb25zdCBQb2x5Z29uID0gJ1BPTFlHT04nO1xuZXhwb3J0IGNvbnN0IERvY3VtZW50ID0gJ0RPQ1VNRU5UJztcbmV4cG9ydCBjb25zdCBQb2x5bGluZSA9ICdQT0xZTElORSc7XG5leHBvcnQgY29uc3QgQ2xpcFBhdGggPSAnQ0xJUF9QQVRIJztcbmV4cG9ydCBjb25zdCBUZXh0SW5zdGFuY2UgPSAnVEVYVF9JTlNUQU5DRSc7XG5leHBvcnQgY29uc3QgTGluZWFyR3JhZGllbnQgPSAnTElORUFSX0dSQURJRU5UJztcbmV4cG9ydCBjb25zdCBSYWRpYWxHcmFkaWVudCA9ICdSQURJQUxfR1JBRElFTlQnO1xuIl0sIm5hbWVzIjpbIkciLCJTdmciLCJWaWV3IiwiVGV4dCIsIkxpbmsiLCJQYWdlIiwiTm90ZSIsIlBhdGgiLCJSZWN0IiwiTGluZSIsIlN0b3AiLCJEZWZzIiwiSW1hZ2UiLCJUc3BhbiIsIkNhbnZhcyIsIkNpcmNsZSIsIkVsbGlwc2UiLCJQb2x5Z29uIiwiRG9jdW1lbnQiLCJQb2x5bGluZSIsIkNsaXBQYXRoIiwiVGV4dEluc3RhbmNlIiwiTGluZWFyR3JhZGllbnQiLCJSYWRpYWxHcmFkaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/primitives/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-pdf/render/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@react-pdf/render/lib/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ render)\n/* harmony export */ });\n/* harmony import */ var _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-pdf/primitives */ \"(ssr)/./node_modules/@react-pdf/primitives/src/index.js\");\n/* harmony import */ var _react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-pdf/fns */ \"(ssr)/./node_modules/@react-pdf/fns/lib/index.js\");\n/* harmony import */ var abs_svg_path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! abs-svg-path */ \"(ssr)/./node_modules/abs-svg-path/index.js\");\n/* harmony import */ var parse_svg_path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! parse-svg-path */ \"(ssr)/./node_modules/parse-svg-path/index.js\");\n/* harmony import */ var normalize_svg_path__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! normalize-svg-path */ \"(ssr)/./node_modules/normalize-svg-path/index.mjs\");\n/* harmony import */ var color_string__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! color-string */ \"(ssr)/./node_modules/color-string/index.js\");\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/extends.js\");\n\n\n\n\n\n\n\nvar renderPath = function renderPath(ctx, node) {\n    var _node$props;\n    var d = (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.d;\n    if (d) ctx.path(node.props.d);\n};\nvar KAPPA$3 = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nvar renderRect = function renderRect(ctx, node) {\n    var _node$props, _node$props2, _node$props3, _node$props4, _node$props5, _node$props6;\n    var x = ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.x) || 0;\n    var y = ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.y) || 0;\n    var rx = ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.rx) || 0;\n    var ry = ((_node$props4 = node.props) === null || _node$props4 === void 0 ? void 0 : _node$props4.ry) || 0;\n    var width = ((_node$props5 = node.props) === null || _node$props5 === void 0 ? void 0 : _node$props5.width) || 0;\n    var height = ((_node$props6 = node.props) === null || _node$props6 === void 0 ? void 0 : _node$props6.height) || 0;\n    if (!width || !height) return;\n    if (rx && ry) {\n        var krx = rx * KAPPA$3;\n        var kry = ry * KAPPA$3;\n        ctx.moveTo(x + rx, y);\n        ctx.lineTo(x - rx + width, y);\n        ctx.bezierCurveTo(x - rx + width + krx, y, x + width, y + ry - kry, x + width, y + ry);\n        ctx.lineTo(x + width, y + height - ry);\n        ctx.bezierCurveTo(x + width, y + height - ry + kry, x - rx + width + krx, y + height, x - rx + width, y + height);\n        ctx.lineTo(x + rx, y + height);\n        ctx.bezierCurveTo(x + rx - krx, y + height, x, y + height - ry + kry, x, y + height - ry);\n        ctx.lineTo(x, y + ry);\n        ctx.bezierCurveTo(x, y + ry - kry, x + rx - krx, y, x + rx, y);\n    } else {\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + width, y);\n        ctx.lineTo(x + width, y + height);\n        ctx.lineTo(x, y + height);\n    }\n    ctx.closePath();\n};\nvar renderLine$1 = function renderLine(ctx, node) {\n    var _ref = node.props || {}, x1 = _ref.x1, x2 = _ref.x2, y1 = _ref.y1, y2 = _ref.y2;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n};\nvar renderGroup = function renderGroup() {\n// noop\n};\nvar KAPPA$2 = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nvar drawEllipse = function drawEllipse(ctx, cx, cy, rx, ry) {\n    if (cx === void 0) {\n        cx = 0;\n    }\n    if (cy === void 0) {\n        cy = 0;\n    }\n    var x = cx - rx;\n    var y = cy - ry;\n    var ox = rx * KAPPA$2;\n    var oy = ry * KAPPA$2;\n    var xe = x + rx * 2;\n    var ye = y + ry * 2;\n    var xm = x + rx;\n    var ym = y + ry;\n    ctx.moveTo(x, ym);\n    ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n    ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n    ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n    ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n    ctx.closePath();\n};\nvar renderEllipse = function renderEllipse(ctx, node) {\n    var _ref = node.props || {}, cx = _ref.cx, cy = _ref.cy, rx = _ref.rx, ry = _ref.ry;\n    drawEllipse(ctx, cx, cy, rx, ry);\n};\nvar renderCircle = function renderCircle(ctx, node) {\n    var _node$props, _node$props2, _node$props3;\n    var cx = (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.cx;\n    var cy = (_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.cy;\n    var r = (_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.r;\n    drawEllipse(ctx, cx, cy, r, r);\n};\nvar renderGlyphs = function renderGlyphs(ctx, glyphs, positions, x, y, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var scale = 1000 / ctx._fontSize;\n    var unitsPerEm = ctx._font.font.unitsPerEm || 1000;\n    var advanceWidthScale = 1000 / unitsPerEm;\n    // Glyph encoding and positioning\n    var encodedGlyphs = ctx._font.encodeGlyphs(glyphs);\n    var encodedPositions = positions.map(function(pos, i) {\n        return {\n            xAdvance: pos.xAdvance * scale,\n            yAdvance: pos.yAdvance * scale,\n            xOffset: pos.xOffset,\n            yOffset: pos.yOffset,\n            advanceWidth: glyphs[i].advanceWidth * advanceWidthScale\n        };\n    });\n    return ctx._glyphs(encodedGlyphs, encodedPositions, x, y, options);\n};\nvar renderRun$1 = function renderRun(ctx, run) {\n    var runAdvanceWidth = run.xAdvance;\n    var _run$attributes = run.attributes, font = _run$attributes.font, fontSize = _run$attributes.fontSize, color = _run$attributes.color, opacity = _run$attributes.opacity;\n    ctx.fillColor(color);\n    ctx.fillOpacity(opacity);\n    if (font.sbix || font.COLR && font.CPAL) {\n        ctx.save();\n        ctx.translate(0, -run.ascent);\n        for(var i = 0; i < run.glyphs.length; i += 1){\n            var position = run.positions[i];\n            var glyph = run.glyphs[i];\n            ctx.save();\n            ctx.translate(position.xOffset, position.yOffset);\n            glyph.render(ctx, fontSize);\n            ctx.restore();\n            ctx.translate(position.xAdvance, position.yAdvance);\n        }\n        ctx.restore();\n    } else {\n        ctx.font(typeof font.name === \"string\" ? font.name : font, fontSize);\n        try {\n            renderGlyphs(ctx, run.glyphs, run.positions, 0, 0);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    ctx.translate(runAdvanceWidth, 0);\n};\nvar renderSpan = function renderSpan(ctx, line, textAnchor, dominantBaseline) {\n    var _line$box, _line$box2, _line$runs$, _line$runs$2, _line$runs$2$attribut;\n    ctx.save();\n    var x = ((_line$box = line.box) === null || _line$box === void 0 ? void 0 : _line$box.x) || 0;\n    var y = ((_line$box2 = line.box) === null || _line$box2 === void 0 ? void 0 : _line$box2.y) || 0;\n    var font = (_line$runs$ = line.runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes.font;\n    var scale = ((_line$runs$2 = line.runs[0]) === null || _line$runs$2 === void 0 ? void 0 : (_line$runs$2$attribut = _line$runs$2.attributes) === null || _line$runs$2$attribut === void 0 ? void 0 : _line$runs$2$attribut.scale) || 1;\n    var width = line.xAdvance;\n    var ascent = font.ascent * scale;\n    var xHeight = font.xHeight * scale;\n    var descent = font.descent * scale;\n    var capHeight = font.capHeight * scale;\n    var xTranslate = x;\n    var yTranslate = y;\n    switch(textAnchor){\n        case \"middle\":\n            xTranslate = x - width / 2;\n            break;\n        case \"end\":\n            xTranslate = x - width;\n            break;\n        default:\n            xTranslate = x;\n            break;\n    }\n    switch(dominantBaseline){\n        case \"middle\":\n        case \"central\":\n            yTranslate = y + capHeight / 2;\n            break;\n        case \"hanging\":\n            yTranslate = y + capHeight;\n            break;\n        case \"mathematical\":\n            yTranslate = y + xHeight;\n            break;\n        case \"text-after-edge\":\n            yTranslate = y + descent;\n            break;\n        case \"text-before-edge\":\n            yTranslate = y + ascent;\n            break;\n        default:\n            yTranslate = y;\n            break;\n    }\n    ctx.translate(xTranslate, yTranslate);\n    line.runs.forEach(function(run) {\n        return renderRun$1(ctx, run);\n    });\n    ctx.restore();\n};\nvar renderSvgText = function renderSvgText(ctx, node) {\n    node.children.forEach(function(span) {\n        return renderSpan(ctx, span.lines[0], span.props.textAnchor, span.props.dominantBaseline);\n    });\n};\n/**\n * Create pairs from array\n *\n * @template T\n * @param {T[]} values array\n * @returns {T[][]} pairs\n */ var pairs = function pairs(values) {\n    var result = [];\n    for(var i = 0; i < values.length; i += 2){\n        result.push([\n            values[i],\n            values[i + 1]\n        ]);\n    }\n    return result;\n};\n/**\n * Parse svg-like points into number arrays\n *\n * @param {string} points string ex. \"20,30 50,60\"\n * @returns {number[][]} points array ex. [[20, 30], [50, 60]]\n */ var parsePoints = function parsePoints(points) {\n    var values = (points || \"\").trim().replace(/,/g, \" \").replace(/(\\d)-(\\d)/g, \"$1 -$2\").split(/\\s+/);\n    if (values.length % 2 !== 0) {\n        values = values.slice(0, -1);\n    }\n    var mappedValues = values.map(parseFloat);\n    return pairs(mappedValues);\n};\nvar drawPolyline = function drawPolyline(ctx, points) {\n    if (points.length > 0) {\n        ctx.moveTo(points[0][0], points[0][1]);\n        points.slice(1).forEach(function(p) {\n            return ctx.lineTo(p[0], p[1]);\n        });\n    }\n};\nvar renderPolyline = function renderPolyline(ctx, node) {\n    var points = parsePoints(node.props.points || \"\");\n    drawPolyline(ctx, points);\n};\nvar renderPolygon = function renderPolygon(ctx, node) {\n    renderPolyline(ctx, node);\n    ctx.closePath();\n};\nvar renderImage$1 = function renderImage(ctx, node) {\n    if (!node.image.data) return;\n    var _node$props = node.props, x = _node$props.x, y = _node$props.y;\n    var _node$style = node.style, width = _node$style.width, height = _node$style.height, opacity = _node$style.opacity;\n    var paddingTop = node.box.paddingLeft || 0;\n    var paddingLeft = node.box.paddingLeft || 0;\n    if (width === 0 || height === 0) {\n        console.warn(\"Image with src '\" + node.props.href + \"' skipped due to invalid dimensions\");\n        return;\n    }\n    ctx.save();\n    ctx.fillOpacity(opacity || 1).image(node.image.data, x + paddingLeft, y + paddingTop, {\n        width: width,\n        height: height\n    });\n    ctx.restore();\n};\n// This constant is used to approximate a symmetrical arc using a cubic\n// Bezier curve.\nvar KAPPA$1 = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nvar clipNode = function clipNode(ctx, node) {\n    if (!node.style) return;\n    var _node$box = node.box, top = _node$box.top, left = _node$box.left, width = _node$box.width, height = _node$box.height;\n    var _node$style = node.style, _node$style$borderTop = _node$style.borderTopLeftRadius, borderTopLeftRadius = _node$style$borderTop === void 0 ? 0 : _node$style$borderTop, _node$style$borderTop2 = _node$style.borderTopRightRadius, borderTopRightRadius = _node$style$borderTop2 === void 0 ? 0 : _node$style$borderTop2, _node$style$borderBot = _node$style.borderBottomRightRadius, borderBottomRightRadius = _node$style$borderBot === void 0 ? 0 : _node$style$borderBot, _node$style$borderBot2 = _node$style.borderBottomLeftRadius, borderBottomLeftRadius = _node$style$borderBot2 === void 0 ? 0 : _node$style$borderBot2;\n    // Border top\n    var rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n    var ctr = rtr * (1.0 - KAPPA$1);\n    ctx.moveTo(left + rtr, top);\n    ctx.lineTo(left + width - rtr, top);\n    ctx.bezierCurveTo(left + width - ctr, top, left + width, top + ctr, left + width, top + rtr);\n    // Border right\n    var rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n    var cbr = rbr * (1.0 - KAPPA$1);\n    ctx.lineTo(left + width, top + height - rbr);\n    ctx.bezierCurveTo(left + width, top + height - cbr, left + width - cbr, top + height, left + width - rbr, top + height);\n    // Border bottom\n    var rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n    var cbl = rbl * (1.0 - KAPPA$1);\n    ctx.lineTo(left + rbl, top + height);\n    ctx.bezierCurveTo(left + cbl, top + height, left, top + height - cbl, left, top + height - rbl);\n    // Border left\n    var rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n    var ctl = rtl * (1.0 - KAPPA$1);\n    ctx.lineTo(left, top + rtl);\n    ctx.bezierCurveTo(left, top + ctl, left + ctl, top, left + rtl, top);\n    ctx.closePath();\n    ctx.clip();\n};\nvar applySingleTransformation = function applySingleTransformation(ctx, transform, origin) {\n    var operation = transform.operation, value = transform.value;\n    switch(operation){\n        case \"scale\":\n            {\n                var scaleX = value[0], scaleY = value[1];\n                ctx.scale(scaleX, scaleY, {\n                    origin: origin\n                });\n                break;\n            }\n        case \"rotate\":\n            {\n                var angle = value[0];\n                ctx.rotate(angle, {\n                    origin: origin\n                });\n                break;\n            }\n        case \"translate\":\n            {\n                var x = value[0], _value$ = value[1], y = _value$ === void 0 ? 0 : _value$;\n                ctx.translate(x, y, {\n                    origin: origin\n                });\n                break;\n            }\n        case \"skew\":\n            {\n                var xAngle = value[0], yAngle = value[1];\n                ctx.skew(xAngle, yAngle, {\n                    origin: origin\n                });\n                break;\n            }\n        case \"matrix\":\n            {\n                ctx.transform.apply(ctx, value);\n                break;\n            }\n        default:\n            {\n                console.error(\"Transform operation: '\" + operation + \"' doesn't supported\");\n            }\n    }\n};\nvar applyTransformations = function applyTransformations(ctx, node) {\n    var _node$style, _node$props;\n    if (!node.origin) return;\n    var origin = [\n        node.origin.left,\n        node.origin.top\n    ];\n    var operations = ((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.transform) || ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.transform) || [];\n    operations.forEach(function(operation) {\n        applySingleTransformation(ctx, operation, origin);\n    });\n};\nvar _boundingBoxFns;\n// From https://github.com/dy/svg-path-bounds/blob/master/index.js\nvar getPathBoundingBox = function getPathBoundingBox(node) {\n    var _node$props;\n    var path = (0,normalize_svg_path__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(abs_svg_path__WEBPACK_IMPORTED_MODULE_2__(parse_svg_path__WEBPACK_IMPORTED_MODULE_3__(((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.d) || \"\")));\n    if (!path.length) return [\n        0,\n        0,\n        0,\n        0\n    ];\n    var bounds = [\n        Infinity,\n        Infinity,\n        -Infinity,\n        -Infinity\n    ];\n    for(var i = 0, l = path.length; i < l; i += 1){\n        var points = path[i].slice(1);\n        for(var j = 0; j < points.length; j += 2){\n            if (points[j + 0] < bounds[0]) bounds[0] = points[j + 0];\n            if (points[j + 1] < bounds[1]) bounds[1] = points[j + 1];\n            if (points[j + 0] > bounds[2]) bounds[2] = points[j + 0];\n            if (points[j + 1] > bounds[3]) bounds[3] = points[j + 1];\n        }\n    }\n    return bounds;\n};\nvar getCircleBoundingBox = function getCircleBoundingBox(node) {\n    var _node$props2, _node$props3, _node$props4;\n    var r = ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.r) || 0;\n    var cx = ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.cx) || 0;\n    var cy = ((_node$props4 = node.props) === null || _node$props4 === void 0 ? void 0 : _node$props4.cy) || 0;\n    return [\n        cx - r,\n        cy - r,\n        cx + r,\n        cy + r\n    ];\n};\nvar getEllipseBoundingBox = function getEllipseBoundingBox(node) {\n    var _node$props5, _node$props6, _node$props7, _node$props8;\n    var cx = ((_node$props5 = node.props) === null || _node$props5 === void 0 ? void 0 : _node$props5.cx) || 0;\n    var cy = ((_node$props6 = node.props) === null || _node$props6 === void 0 ? void 0 : _node$props6.cy) || 0;\n    var rx = ((_node$props7 = node.props) === null || _node$props7 === void 0 ? void 0 : _node$props7.rx) || 0;\n    var ry = ((_node$props8 = node.props) === null || _node$props8 === void 0 ? void 0 : _node$props8.ry) || 0;\n    return [\n        cx - rx,\n        cy - ry,\n        cx + rx,\n        cy + ry\n    ];\n};\nvar getLineBoundingBox = function getLineBoundingBox(node) {\n    var _node$props9, _node$props10, _node$props11, _node$props12;\n    var x1 = ((_node$props9 = node.props) === null || _node$props9 === void 0 ? void 0 : _node$props9.x1) || 0;\n    var y1 = ((_node$props10 = node.props) === null || _node$props10 === void 0 ? void 0 : _node$props10.y1) || 0;\n    var x2 = ((_node$props11 = node.props) === null || _node$props11 === void 0 ? void 0 : _node$props11.x2) || 0;\n    var y2 = ((_node$props12 = node.props) === null || _node$props12 === void 0 ? void 0 : _node$props12.y2) || 0;\n    return [\n        Math.min(x1, x2),\n        Math.min(y1, y2),\n        Math.max(x1, x2),\n        Math.max(y1, y2)\n    ];\n};\nvar getRectBoundingBox = function getRectBoundingBox(node) {\n    var _node$props13, _node$props14, _node$props15, _node$props16;\n    var x = ((_node$props13 = node.props) === null || _node$props13 === void 0 ? void 0 : _node$props13.x) || 0;\n    var y = ((_node$props14 = node.props) === null || _node$props14 === void 0 ? void 0 : _node$props14.y) || 0;\n    var width = ((_node$props15 = node.props) === null || _node$props15 === void 0 ? void 0 : _node$props15.width) || 0;\n    var height = ((_node$props16 = node.props) === null || _node$props16 === void 0 ? void 0 : _node$props16.height) || 0;\n    return [\n        x,\n        y,\n        x + width,\n        y + height\n    ];\n};\nvar max = function max(values) {\n    return Math.max.apply(Math, [\n        -Infinity\n    ].concat(values));\n};\nvar min = function min(values) {\n    return Math.min.apply(Math, [\n        Infinity\n    ].concat(values));\n};\nvar getPolylineBoundingBox = function getPolylineBoundingBox(node) {\n    var _node$props17;\n    var points = parsePoints(((_node$props17 = node.props) === null || _node$props17 === void 0 ? void 0 : _node$props17.points) || []);\n    var xValues = points.map(function(p) {\n        return p[0];\n    });\n    var yValues = points.map(function(p) {\n        return p[1];\n    });\n    return [\n        min(xValues),\n        min(yValues),\n        max(xValues),\n        max(yValues)\n    ];\n};\nvar boundingBoxFns = (_boundingBoxFns = {}, _boundingBoxFns[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Rect] = getRectBoundingBox, _boundingBoxFns[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Line] = getLineBoundingBox, _boundingBoxFns[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Path] = getPathBoundingBox, _boundingBoxFns[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Circle] = getCircleBoundingBox, _boundingBoxFns[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Ellipse] = getEllipseBoundingBox, _boundingBoxFns[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Polygon] = getPolylineBoundingBox, _boundingBoxFns[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Polyline] = getPolylineBoundingBox, _boundingBoxFns);\nvar getBoundingBox = function getBoundingBox(node) {\n    var boundingBoxFn = boundingBoxFns[node.type];\n    return boundingBoxFn ? boundingBoxFn(node) : [\n        0,\n        0,\n        0,\n        0\n    ];\n};\nvar _renderFns$1;\nvar setStrokeWidth = function setStrokeWidth(ctx, node) {\n    var _node$props;\n    var lineWidth = ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.strokeWidth) || 0;\n    if (lineWidth) ctx.lineWidth(lineWidth);\n};\nvar setStrokeColor = function setStrokeColor(ctx, node) {\n    var _node$props2;\n    var strokeColor = ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.stroke) || null;\n    if (strokeColor) ctx.strokeColor(strokeColor);\n};\nvar setOpacity = function setOpacity(ctx, node) {\n    var _node$props3;\n    var opacity = ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.opacity) || null;\n    if (!(0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.isNil)(opacity)) ctx.opacity(opacity);\n};\nvar setFillOpacity = function setFillOpacity(ctx, node) {\n    var _node$props4;\n    var fillOpacity = ((_node$props4 = node.props) === null || _node$props4 === void 0 ? void 0 : _node$props4.fillOpacity) || null;\n    if (!(0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.isNil)(fillOpacity)) ctx.fillOpacity(fillOpacity);\n};\nvar setStrokeOpacity = function setStrokeOpacity(ctx, node) {\n    var _node$props5;\n    var strokeOpacity = ((_node$props5 = node.props) === null || _node$props5 === void 0 ? void 0 : _node$props5.strokeOpacity) || null;\n    if (!(0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.isNil)(strokeOpacity)) ctx.strokeOpacity(strokeOpacity);\n};\nvar setLineJoin = function setLineJoin(ctx, node) {\n    var _node$props6;\n    var lineJoin = ((_node$props6 = node.props) === null || _node$props6 === void 0 ? void 0 : _node$props6.strokeLinejoin) || null;\n    if (lineJoin) ctx.lineJoin(lineJoin);\n};\nvar setLineCap = function setLineCap(ctx, node) {\n    var _node$props7;\n    var lineCap = ((_node$props7 = node.props) === null || _node$props7 === void 0 ? void 0 : _node$props7.strokeLinecap) || null;\n    if (lineCap) ctx.lineCap(lineCap);\n};\nvar setLineDash = function setLineDash(ctx, node) {\n    var _node$props8;\n    var value = ((_node$props8 = node.props) === null || _node$props8 === void 0 ? void 0 : _node$props8.strokeDasharray) || null;\n    if (value) ctx.dash(value.split(\",\").map(Number));\n};\nvar hasLinearGradientFill = function hasLinearGradientFill(node) {\n    var _node$props9, _node$props9$fill;\n    return ((_node$props9 = node.props) === null || _node$props9 === void 0 ? void 0 : (_node$props9$fill = _node$props9.fill) === null || _node$props9$fill === void 0 ? void 0 : _node$props9$fill.type) === _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.LinearGradient;\n};\nvar hasRadialGradientFill = function hasRadialGradientFill(node) {\n    var _node$props10, _node$props10$fill;\n    return ((_node$props10 = node.props) === null || _node$props10 === void 0 ? void 0 : (_node$props10$fill = _node$props10.fill) === null || _node$props10$fill === void 0 ? void 0 : _node$props10$fill.type) === _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.RadialGradient;\n};\n// Math simplified from https://github.com/devongovett/svgkit/blob/master/src/elements/SVGGradient.js#L104\nvar setLinearGradientFill = function setLinearGradientFill(ctx, node) {\n    var _node$props11;\n    var bbox = getBoundingBox(node);\n    var gradient = ((_node$props11 = node.props) === null || _node$props11 === void 0 ? void 0 : _node$props11.fill) || null;\n    var x1 = gradient.props.x1 || 0;\n    var y1 = gradient.props.y1 || 0;\n    var x2 = gradient.props.x2 || 1;\n    var y2 = gradient.props.y2 || 0;\n    var m0 = bbox[2] - bbox[0];\n    var m3 = bbox[3] - bbox[1];\n    var m4 = bbox[0];\n    var m5 = bbox[1];\n    var gx1 = m0 * x1 + m4;\n    var gy1 = m3 * y1 + m5;\n    var gx2 = m0 * x2 + m4;\n    var gy2 = m3 * y2 + m5;\n    var grad = ctx.linearGradient(gx1, gy1, gx2, gy2);\n    gradient.children.forEach(function(stop) {\n        grad.stop(stop.props.offset, stop.props.stopColor, stop.props.stopOpacity);\n    });\n    ctx.fill(grad);\n};\n// Math simplified from https://github.com/devongovett/svgkit/blob/master/src/elements/SVGGradient.js#L155\nvar setRadialGradientFill = function setRadialGradientFill(ctx, node) {\n    var _node$props12;\n    var bbox = getBoundingBox(node);\n    var gradient = ((_node$props12 = node.props) === null || _node$props12 === void 0 ? void 0 : _node$props12.fill) || null;\n    var cx = gradient.props.cx || 0.5;\n    var cy = gradient.props.cy || 0.5;\n    var fx = gradient.props.fx || cx;\n    var fy = gradient.props.fy || cy;\n    var r = gradient.props.r || 0.5;\n    var m0 = bbox[2] - bbox[0];\n    var m3 = bbox[3] - bbox[1];\n    var m4 = bbox[0];\n    var m5 = bbox[1];\n    var gr = r * m0;\n    var gcx = m0 * cx + m4;\n    var gcy = m3 * cy + m5;\n    var gfx = m0 * fx + m4;\n    var gfy = m3 * fy + m5;\n    var grad = ctx.radialGradient(gfx, gfy, 0, gcx, gcy, gr);\n    gradient.children.forEach(function(stop) {\n        grad.stop(stop.props.offset, stop.props.stopColor, stop.props.stopOpacity);\n    });\n    ctx.fill(grad);\n};\nvar setFillColor = function setFillColor(ctx, node) {\n    var _node$props13;\n    var fillColor = ((_node$props13 = node.props) === null || _node$props13 === void 0 ? void 0 : _node$props13.fill) || null;\n    if (fillColor) ctx.fillColor(fillColor);\n};\nvar setFill = function setFill(ctx, node) {\n    if (hasLinearGradientFill(node)) return setLinearGradientFill(ctx, node);\n    if (hasRadialGradientFill(node)) return setRadialGradientFill(ctx, node);\n    return setFillColor(ctx, node);\n};\nvar draw = function draw(ctx, node) {\n    var props = node.props || {};\n    if (props.fill && props.stroke) {\n        ctx.fillAndStroke(props.fillRule);\n    } else if (props.fill) {\n        ctx.fill(props.fillRule);\n    } else if (props.stroke) {\n        ctx.stroke();\n    } else {\n        ctx.save();\n        ctx.opacity(0);\n        ctx.fill(null);\n        ctx.restore();\n    }\n};\nvar noop = function noop() {};\nvar renderFns$1 = (_renderFns$1 = {}, _renderFns$1[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Tspan] = noop, _renderFns$1[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.TextInstance] = noop, _renderFns$1[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Path] = renderPath, _renderFns$1[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Rect] = renderRect, _renderFns$1[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Line] = renderLine$1, _renderFns$1[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.G] = renderGroup, _renderFns$1[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Text] = renderSvgText, _renderFns$1[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Circle] = renderCircle, _renderFns$1[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Image] = renderImage$1, _renderFns$1[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Ellipse] = renderEllipse, _renderFns$1[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Polygon] = renderPolygon, _renderFns$1[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Polyline] = renderPolyline, _renderFns$1);\nvar renderNode$1 = function renderNode(ctx, node) {\n    var renderFn = renderFns$1[node.type];\n    if (renderFns$1) {\n        renderFn(ctx, node);\n    } else {\n        console.warn(\"SVG node of type \" + node.type + \" is not currenty supported\");\n    }\n};\nvar drawNode = function drawNode(ctx, node) {\n    setLineCap(ctx, node);\n    setLineDash(ctx, node);\n    setLineJoin(ctx, node);\n    setStrokeWidth(ctx, node);\n    setStrokeColor(ctx, node);\n    setFill(ctx, node);\n    setStrokeOpacity(ctx, node);\n    setFillOpacity(ctx, node);\n    setOpacity(ctx, node);\n    applyTransformations(ctx, node);\n    renderNode$1(ctx, node);\n    draw(ctx, node);\n};\nvar clipPath = function clipPath(ctx, node) {\n    var _node$props14;\n    var value = (_node$props14 = node.props) === null || _node$props14 === void 0 ? void 0 : _node$props14.clipPath;\n    if (value) {\n        var children = value.children || [];\n        children.forEach(function(child) {\n            return renderNode$1(ctx, child);\n        });\n        ctx.clip();\n    }\n};\nvar drawChildren = function drawChildren(ctx, node) {\n    var children = node.children || [];\n    children.forEach(function(child) {\n        ctx.save();\n        clipPath(ctx, child);\n        drawNode(ctx, child);\n        drawChildren(ctx, child);\n        ctx.restore();\n    });\n};\nvar resolveAspectRatio = function resolveAspectRatio(ctx, node) {\n    var _node$box = node.box, width = _node$box.width, height = _node$box.height;\n    var _node$props15 = node.props, viewBox = _node$props15.viewBox, _node$props15$preserv = _node$props15.preserveAspectRatio, preserveAspectRatio = _node$props15$preserv === void 0 ? {} : _node$props15$preserv;\n    var _preserveAspectRatio$ = preserveAspectRatio.meetOrSlice, meetOrSlice = _preserveAspectRatio$ === void 0 ? \"meet\" : _preserveAspectRatio$, _preserveAspectRatio$2 = preserveAspectRatio.align, align = _preserveAspectRatio$2 === void 0 ? \"xMidYMid\" : _preserveAspectRatio$2;\n    if (viewBox == null || width == null || height == null) return;\n    var x = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.minX) || 0;\n    var y = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.minY) || 0;\n    var logicalWidth = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.maxX) || width;\n    var logicalHeight = (viewBox === null || viewBox === void 0 ? void 0 : viewBox.maxY) || height;\n    var logicalRatio = logicalWidth / logicalHeight;\n    var physicalRatio = width / height;\n    var scaleX = width / logicalWidth;\n    var scaleY = height / logicalHeight;\n    if (align === \"none\") {\n        ctx.scale(scaleX, scaleY);\n        ctx.translate(-x, -y);\n        return;\n    }\n    if (logicalRatio < physicalRatio && meetOrSlice === \"meet\" || logicalRatio >= physicalRatio && meetOrSlice === \"slice\") {\n        ctx.scale(scaleY, scaleY);\n        switch(align){\n            case \"xMinYMin\":\n            case \"xMinYMid\":\n            case \"xMinYMax\":\n                ctx.translate(-x, -y);\n                break;\n            case \"xMidYMin\":\n            case \"xMidYMid\":\n            case \"xMidYMax\":\n                ctx.translate(-x - (logicalWidth - width * logicalHeight / height) / 2, -y);\n                break;\n            default:\n                ctx.translate(-x - (logicalWidth - width * logicalHeight / height), -y);\n        }\n    } else {\n        ctx.scale(scaleX, scaleX);\n        switch(align){\n            case \"xMinYMin\":\n            case \"xMidYMin\":\n            case \"xMaxYMin\":\n                ctx.translate(-x, -y);\n                break;\n            case \"xMinYMid\":\n            case \"xMidYMid\":\n            case \"xMaxYMid\":\n                ctx.translate(-x, -y - (logicalHeight - height * logicalWidth / width) / 2);\n                break;\n            default:\n                ctx.translate(-x, -y - (logicalHeight - height * logicalWidth / width));\n        }\n    }\n};\nvar moveToOrigin = function moveToOrigin(ctx, node) {\n    var _node$box2 = node.box, top = _node$box2.top, left = _node$box2.left;\n    var paddingLeft = node.box.paddingLeft || 0;\n    var paddingTop = node.box.paddingTop || 0;\n    ctx.translate(left + paddingLeft, top + paddingTop);\n};\nvar renderSvg = function renderSvg(ctx, node) {\n    ctx.save();\n    clipNode(ctx, node);\n    moveToOrigin(ctx, node);\n    resolveAspectRatio(ctx, node);\n    drawChildren(ctx, node);\n    ctx.restore();\n};\nvar black = {\n    value: [\n        0,\n        0,\n        0\n    ],\n    opacity: 1\n};\nvar parseColor = function parseColor(hex) {\n    var parsed = color_string__WEBPACK_IMPORTED_MODULE_5__.get(hex);\n    if (!parsed) return black;\n    var value = color_string__WEBPACK_IMPORTED_MODULE_5__.to.hex(parsed.value.slice(0, 3));\n    var opacity = parsed.value[3];\n    return {\n        value: value,\n        opacity: opacity\n    };\n};\n/* eslint-disable no-param-reassign */ var DEST_REGEXP = /^#.+/;\nvar isSrcId$1 = function isSrcId(src) {\n    return src.match(DEST_REGEXP);\n};\nvar renderAttachment = function renderAttachment(ctx, attachment) {\n    var _attachment$xOffset = attachment.xOffset, xOffset = _attachment$xOffset === void 0 ? 0 : _attachment$xOffset, _attachment$yOffset = attachment.yOffset, yOffset = _attachment$yOffset === void 0 ? 0 : _attachment$yOffset, width = attachment.width, height = attachment.height, image = attachment.image;\n    ctx.translate(-width + xOffset, -height + yOffset);\n    ctx.image(image, 0, 0, {\n        fit: [\n            width,\n            height\n        ],\n        align: \"center\",\n        valign: \"bottom\"\n    });\n};\nvar renderAttachments = function renderAttachments(ctx, run) {\n    ctx.save();\n    var font = run.attributes.font;\n    var space = font.glyphForCodePoint(0x20);\n    var objectReplacement = font.glyphForCodePoint(0xfffc);\n    var attachmentAdvance = 0;\n    for(var i = 0; i < run.glyphs.length; i += 1){\n        var position = run.positions[i];\n        var glyph = run.glyphs[i];\n        attachmentAdvance += position.xAdvance || 0;\n        if (glyph.id === objectReplacement.id && run.attributes.attachment) {\n            ctx.translate(attachmentAdvance, position.yOffset || 0);\n            renderAttachment(ctx, run.attributes.attachment);\n            run.glyphs[i] = space;\n            attachmentAdvance = 0;\n        }\n    }\n    ctx.restore();\n};\nvar renderRun = function renderRun(ctx, run, options) {\n    var _run$attributes = run.attributes, font = _run$attributes.font, fontSize = _run$attributes.fontSize, link = _run$attributes.link;\n    var color = parseColor(run.attributes.color);\n    var opacity = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.isNil)(run.attributes.opacity) ? color.opacity : run.attributes.opacity;\n    var height = run.height, descent = run.descent, xAdvance = run.xAdvance;\n    if (options.outlineRuns) {\n        ctx.rect(0, -height, xAdvance, height).stroke();\n    }\n    ctx.fillColor(color.value);\n    ctx.fillOpacity(opacity);\n    if (link) {\n        if (isSrcId$1(link)) {\n            ctx.goTo(0, -height - descent, xAdvance, height, link.slice(1));\n        } else {\n            ctx.link(0, -height - descent, xAdvance, height, link);\n        }\n    }\n    renderAttachments(ctx, run);\n    if (font.sbix || font.COLR && font.CPAL) {\n        ctx.save();\n        ctx.translate(0, -run.ascent);\n        for(var i = 0; i < run.glyphs.length; i += 1){\n            var position = run.positions[i];\n            var glyph = run.glyphs[i];\n            ctx.save();\n            ctx.translate(position.xOffset, position.yOffset);\n            glyph.render(ctx, fontSize);\n            ctx.restore();\n            ctx.translate(position.xAdvance, position.yAdvance);\n        }\n        ctx.restore();\n    } else {\n        ctx.font(typeof font.name === \"string\" ? font.name : font, fontSize);\n        try {\n            renderGlyphs(ctx, run.glyphs, run.positions, 0, 0);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    ctx.translate(xAdvance, 0);\n};\nvar renderBackground$1 = function renderBackground(ctx, rect, backgroundColor) {\n    var color = parseColor(backgroundColor);\n    ctx.save();\n    ctx.fillOpacity(color.opacity);\n    ctx.rect(rect.x, rect.y, rect.width, rect.height);\n    ctx.fill(color.value);\n    ctx.restore();\n};\nvar renderDecorationLine = function renderDecorationLine(ctx, line) {\n    ctx.save();\n    ctx.lineWidth(line.rect.height);\n    ctx.strokeOpacity(line.opacity);\n    if (/dashed/.test(line.style)) {\n        ctx.dash(3 * line.rect.height);\n    } else if (/dotted/.test(line.style)) {\n        ctx.dash(line.rect.height);\n    }\n    if (/wavy/.test(line.style)) {\n        var dist = Math.max(2, line.rect.height);\n        var step = 1.1 * dist;\n        var stepCount = Math.floor(line.rect.width / (2 * step));\n        // Adjust step to fill entire width\n        var remainingWidth = line.rect.width - stepCount * 2 * step;\n        var adjustment = remainingWidth / stepCount / 2;\n        step += adjustment;\n        var cp1y = line.rect.y + dist;\n        var cp2y = line.rect.y - dist;\n        var x = line.rect.x;\n        ctx.moveTo(line.rect.x, line.rect.y);\n        for(var i = 0; i < stepCount; i += 1){\n            ctx.bezierCurveTo(x + step, cp1y, x + step, cp2y, x + 2 * step, line.rect.y);\n            x += 2 * step;\n        }\n    } else {\n        ctx.moveTo(line.rect.x, line.rect.y);\n        ctx.lineTo(line.rect.x + line.rect.width, line.rect.y);\n        if (/double/.test(line.style)) {\n            ctx.moveTo(line.rect.x, line.rect.y + line.rect.height * 2);\n            ctx.lineTo(line.rect.x + line.rect.width, line.rect.y + line.rect.height * 2);\n        }\n    }\n    ctx.stroke(line.color);\n    ctx.restore();\n};\nvar renderLine = function renderLine(ctx, line, options) {\n    var lineAscent = line.ascent;\n    if (options.outlineLines) {\n        ctx.rect(line.box.x, line.box.y, line.box.width, line.box.height).stroke();\n    }\n    ctx.save();\n    ctx.translate(line.box.x, line.box.y + lineAscent);\n    for(var i = 0; i < line.runs.length; i += 1){\n        var run = line.runs[i];\n        var isLastRun = i === line.runs.length - 1;\n        if (run.attributes.backgroundColor) {\n            var overflowRight = isLastRun ? line.overflowRight : 0;\n            var backgroundRect = {\n                x: 0,\n                y: -lineAscent,\n                height: line.box.height,\n                width: run.xAdvance - overflowRight\n            };\n            renderBackground$1(ctx, backgroundRect, run.attributes.backgroundColor);\n        }\n        renderRun(ctx, run, options);\n    }\n    ctx.restore();\n    ctx.save();\n    ctx.translate(line.box.x, line.box.y);\n    for(var _i = 0; _i < line.decorationLines.length; _i += 1){\n        var decorationLine = line.decorationLines[_i];\n        renderDecorationLine(ctx, decorationLine);\n    }\n    ctx.restore();\n};\nvar renderBlock = function renderBlock(ctx, block, options) {\n    block.forEach(function(line) {\n        renderLine(ctx, line, options);\n    });\n};\nvar renderText = function renderText(ctx, node) {\n    var _node$box2, _node$box3;\n    var _node$box = node.box, top = _node$box.top, left = _node$box.left;\n    var blocks = [\n        node.lines\n    ];\n    var paddingTop = ((_node$box2 = node.box) === null || _node$box2 === void 0 ? void 0 : _node$box2.paddingTop) || 0;\n    var paddingLeft = ((_node$box3 = node.box) === null || _node$box3 === void 0 ? void 0 : _node$box3.paddingLeft) || 0;\n    var initialY = node.lines[0] ? node.lines[0].box.y : 0;\n    var offsetX = node.alignOffset || 0;\n    ctx.save();\n    ctx.translate(left + paddingLeft - offsetX, top + paddingTop - initialY);\n    blocks.forEach(function(block) {\n        renderBlock(ctx, block, {});\n    });\n    ctx.restore();\n};\nvar renderPage = function renderPage(ctx, node) {\n    var _node$props;\n    var _node$box = node.box, width = _node$box.width, height = _node$box.height;\n    var dpi = ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.dpi) || 72;\n    var userUnit = dpi / 72;\n    ctx.addPage({\n        size: [\n            width,\n            height\n        ],\n        margin: 0,\n        userUnit: userUnit\n    });\n};\nvar renderNote = function renderNote(ctx, node) {\n    var _node$children, _node$style, _node$style2;\n    var _node$box = node.box, top = _node$box.top, left = _node$box.left;\n    var value = (node === null || node === void 0 ? void 0 : (_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children[0].value) || \"\";\n    var color = ((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.backgroundColor) || null;\n    var borderWidth = ((_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2.borderWidth) || null;\n    ctx.note(left, top, 0, 0, value, {\n        color: color,\n        borderWidth: borderWidth\n    });\n};\nvar isNumeric = function isNumeric(n) {\n    return !Number.isNaN(parseFloat(n)) && Number.isFinite(n);\n};\nvar applyContainObjectFit = function applyContainObjectFit(cw, ch, iw, ih, px, py) {\n    var cr = cw / ch;\n    var ir = iw / ih;\n    var pxp = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.matchPercent)(px);\n    var pyp = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.matchPercent)(py);\n    var pxv = pxp ? pxp.percent : 0.5;\n    var pyv = pyp ? pyp.percent : 0.5;\n    if (cr > ir) {\n        var _height = ch;\n        var _width = _height * ir;\n        var _yOffset = isNumeric(py) ? py : 0;\n        var _xOffset = isNumeric(px) ? px : (cw - _width) * pxv;\n        return {\n            width: _width,\n            height: _height,\n            xOffset: _xOffset,\n            yOffset: _yOffset\n        };\n    }\n    var width = cw;\n    var height = width / ir;\n    var xOffset = isNumeric(px) ? px : 0;\n    var yOffset = isNumeric(py) ? py : (ch - height) * pyv;\n    return {\n        width: width,\n        height: height,\n        yOffset: yOffset,\n        xOffset: xOffset\n    };\n};\nvar applyNoneObjectFit = function applyNoneObjectFit(cw, ch, iw, ih, px, py) {\n    var width = iw;\n    var height = ih;\n    var pxp = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.matchPercent)(px);\n    var pyp = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.matchPercent)(py);\n    var pxv = pxp ? pxp.percent : 0.5;\n    var pyv = pyp ? pyp.percent : 0.5;\n    var xOffset = isNumeric(px) ? px : (cw - width) * pxv;\n    var yOffset = isNumeric(py) ? py : (ch - height) * pyv;\n    return {\n        width: width,\n        height: height,\n        xOffset: xOffset,\n        yOffset: yOffset\n    };\n};\nvar applyCoverObjectFit = function applyCoverObjectFit(cw, ch, iw, ih, px, py) {\n    var ir = iw / ih;\n    var cr = cw / ch;\n    var pxp = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.matchPercent)(px);\n    var pyp = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.matchPercent)(py);\n    var pxv = pxp ? pxp.percent : 0.5;\n    var pyv = pyp ? pyp.percent : 0.5;\n    if (cr > ir) {\n        var _width2 = cw;\n        var _height2 = _width2 / ir;\n        var _xOffset2 = isNumeric(px) ? px : 0;\n        var _yOffset2 = isNumeric(py) ? py : (ch - _height2) * pyv;\n        return {\n            width: _width2,\n            height: _height2,\n            yOffset: _yOffset2,\n            xOffset: _xOffset2\n        };\n    }\n    var height = ch;\n    var width = height * ir;\n    var xOffset = isNumeric(px) ? px : (cw - width) * pxv;\n    var yOffset = isNumeric(py) ? py : 0;\n    return {\n        width: width,\n        height: height,\n        xOffset: xOffset,\n        yOffset: yOffset\n    };\n};\nvar applyScaleDownObjectFit = function applyScaleDownObjectFit(cw, ch, iw, ih, px, py) {\n    var containDimension = applyContainObjectFit(cw, ch, iw, ih, px, py);\n    var noneDimension = applyNoneObjectFit(cw, ch, iw, ih, px, py);\n    return containDimension.width < noneDimension.width ? containDimension : noneDimension;\n};\nvar applyFillObjectFit = function applyFillObjectFit(cw, ch, px, py) {\n    return {\n        width: cw,\n        height: ch,\n        xOffset: (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.matchPercent)(px) ? 0 : px || 0,\n        yOffset: (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.matchPercent)(py) ? 0 : py || 0\n    };\n};\nvar resolveObjectFit = function resolveObjectFit(type, cw, ch, iw, ih, px, py) {\n    if (type === void 0) {\n        type = \"fill\";\n    }\n    switch(type){\n        case \"contain\":\n            return applyContainObjectFit(cw, ch, iw, ih, px, py);\n        case \"cover\":\n            return applyCoverObjectFit(cw, ch, iw, ih, px, py);\n        case \"none\":\n            return applyNoneObjectFit(cw, ch, iw, ih, px, py);\n        case \"scale-down\":\n            return applyScaleDownObjectFit(cw, ch, iw, ih, px, py);\n        default:\n            return applyFillObjectFit(cw, ch, px, py);\n    }\n};\nvar drawImage = function drawImage(ctx, node, options) {\n    var _node$style, _node$style2, _node$style3, _node$style4;\n    if (options === void 0) {\n        options = {};\n    }\n    var _node$box = node.box, left = _node$box.left, top = _node$box.top;\n    var opacity = (_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.opacity;\n    var objectFit = (_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2.objectFit;\n    var objectPositionX = (_node$style3 = node.style) === null || _node$style3 === void 0 ? void 0 : _node$style3.objectPositionX;\n    var objectPositionY = (_node$style4 = node.style) === null || _node$style4 === void 0 ? void 0 : _node$style4.objectPositionY;\n    var paddingTop = node.box.paddingTop || 0;\n    var paddingRight = node.box.paddingRight || 0;\n    var paddingBottom = node.box.paddingBottom || 0;\n    var paddingLeft = node.box.paddingLeft || 0;\n    var imageCache = options.imageCache || new Map();\n    var _resolveObjectFit = resolveObjectFit(objectFit, node.box.width - paddingLeft - paddingRight, node.box.height - paddingTop - paddingBottom, node.image.width, node.image.height, objectPositionX, objectPositionY), width = _resolveObjectFit.width, height = _resolveObjectFit.height, xOffset = _resolveObjectFit.xOffset, yOffset = _resolveObjectFit.yOffset;\n    if (node.image.data) {\n        if (width !== 0 && height !== 0) {\n            var cacheKey = node.image.key;\n            var image = imageCache.get(cacheKey) || ctx.embedImage(node.image.data);\n            if (cacheKey) imageCache.set(cacheKey, image);\n            var imageOpacity = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.isNil)(opacity) ? 1 : opacity;\n            ctx.fillOpacity(imageOpacity).image(image, left + paddingLeft + xOffset, top + paddingTop + yOffset, {\n                width: width,\n                height: height\n            });\n        } else {\n            console.warn(\"Image with src '\" + JSON.stringify(node.props.src) + \"' skipped due to invalid dimensions\");\n        }\n    }\n};\nvar renderImage = function renderImage(ctx, node, options) {\n    ctx.save();\n    clipNode(ctx, node);\n    drawImage(ctx, node, options);\n    ctx.restore();\n};\nvar CONTENT_COLOR = \"#a1c6e7\";\nvar PADDING_COLOR = \"#c4deb9\";\nvar MARGIN_COLOR = \"#f8cca1\";\n// TODO: Draw debug boxes using clipping to enhance quality\nvar debugContent = function debugContent(ctx, node) {\n    var _node$box = node.box, left = _node$box.left, top = _node$box.top, width = _node$box.width, height = _node$box.height, _node$box$paddingLeft = _node$box.paddingLeft, paddingLeft = _node$box$paddingLeft === void 0 ? 0 : _node$box$paddingLeft, _node$box$paddingTop = _node$box.paddingTop, paddingTop = _node$box$paddingTop === void 0 ? 0 : _node$box$paddingTop, _node$box$paddingRigh = _node$box.paddingRight, paddingRight = _node$box$paddingRigh === void 0 ? 0 : _node$box$paddingRigh, _node$box$paddingBott = _node$box.paddingBottom, paddingBottom = _node$box$paddingBott === void 0 ? 0 : _node$box$paddingBott, _node$box$borderLeftW = _node$box.borderLeftWidth, borderLeftWidth = _node$box$borderLeftW === void 0 ? 0 : _node$box$borderLeftW, _node$box$borderTopWi = _node$box.borderTopWidth, borderTopWidth = _node$box$borderTopWi === void 0 ? 0 : _node$box$borderTopWi, _node$box$borderRight = _node$box.borderRightWidth, borderRightWidth = _node$box$borderRight === void 0 ? 0 : _node$box$borderRight, _node$box$borderBotto = _node$box.borderBottomWidth, borderBottomWidth = _node$box$borderBotto === void 0 ? 0 : _node$box$borderBotto;\n    ctx.fillColor(CONTENT_COLOR).opacity(0.5).rect(left + paddingLeft + borderLeftWidth, top + paddingTop + borderTopWidth, width - paddingLeft - paddingRight - borderRightWidth - borderLeftWidth, height - paddingTop - paddingBottom - borderTopWidth - borderBottomWidth).fill();\n};\nvar debugPadding = function debugPadding(ctx, node) {\n    var _node$box2 = node.box, left = _node$box2.left, top = _node$box2.top, width = _node$box2.width, height = _node$box2.height, _node$box2$paddingLef = _node$box2.paddingLeft, paddingLeft = _node$box2$paddingLef === void 0 ? 0 : _node$box2$paddingLef, _node$box2$paddingTop = _node$box2.paddingTop, paddingTop = _node$box2$paddingTop === void 0 ? 0 : _node$box2$paddingTop, _node$box2$paddingRig = _node$box2.paddingRight, paddingRight = _node$box2$paddingRig === void 0 ? 0 : _node$box2$paddingRig, _node$box2$paddingBot = _node$box2.paddingBottom, paddingBottom = _node$box2$paddingBot === void 0 ? 0 : _node$box2$paddingBot, _node$box2$borderLeft = _node$box2.borderLeftWidth, borderLeftWidth = _node$box2$borderLeft === void 0 ? 0 : _node$box2$borderLeft, _node$box2$borderTopW = _node$box2.borderTopWidth, borderTopWidth = _node$box2$borderTopW === void 0 ? 0 : _node$box2$borderTopW, _node$box2$borderRigh = _node$box2.borderRightWidth, borderRightWidth = _node$box2$borderRigh === void 0 ? 0 : _node$box2$borderRigh, _node$box2$borderBott = _node$box2.borderBottomWidth, borderBottomWidth = _node$box2$borderBott === void 0 ? 0 : _node$box2$borderBott;\n    ctx.fillColor(PADDING_COLOR).opacity(0.5);\n    // Padding top\n    ctx.rect(left + paddingLeft + borderLeftWidth, top + borderTopWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingTop).fill();\n    // Padding left\n    ctx.rect(left + borderLeftWidth, top + borderTopWidth, paddingLeft, height - borderTopWidth - borderBottomWidth).fill();\n    // Padding right\n    ctx.rect(left + width - paddingRight - borderRightWidth, top + borderTopWidth, paddingRight, height - borderTopWidth - borderBottomWidth).fill();\n    // Padding bottom\n    ctx.rect(left + paddingLeft + borderLeftWidth, top + height - paddingBottom - borderBottomWidth, width - paddingRight - paddingLeft - borderLeftWidth - borderRightWidth, paddingBottom).fill();\n};\nvar getMargin = function getMargin(box) {\n    var marginLeft = box.marginLeft === \"auto\" ? 0 : box.marginLeft;\n    var marginTop = box.marginTop === \"auto\" ? 0 : box.marginTop;\n    var marginRight = box.marginRight === \"auto\" ? 0 : box.marginRight;\n    var marginBottom = box.marginBottom === \"auto\" ? 0 : box.marginBottom;\n    return {\n        marginLeft: marginLeft,\n        marginTop: marginTop,\n        marginRight: marginRight,\n        marginBottom: marginBottom\n    };\n};\nvar debugMargin = function debugMargin(ctx, node) {\n    var _node$box3 = node.box, left = _node$box3.left, top = _node$box3.top, width = _node$box3.width, height = _node$box3.height;\n    var _getMargin = getMargin(node.box), _getMargin$marginLeft = _getMargin.marginLeft, marginLeft = _getMargin$marginLeft === void 0 ? 0 : _getMargin$marginLeft, _getMargin$marginTop = _getMargin.marginTop, marginTop = _getMargin$marginTop === void 0 ? 0 : _getMargin$marginTop, _getMargin$marginRigh = _getMargin.marginRight, marginRight = _getMargin$marginRigh === void 0 ? 0 : _getMargin$marginRigh, _getMargin$marginBott = _getMargin.marginBottom, marginBottom = _getMargin$marginBott === void 0 ? 0 : _getMargin$marginBott;\n    ctx.fillColor(MARGIN_COLOR).opacity(0.5);\n    // Margin top\n    ctx.rect(left, top - marginTop, width, marginTop).fill();\n    // Margin left\n    ctx.rect(left - marginLeft, top - marginTop, marginLeft, height + marginTop + marginBottom).fill();\n    // Margin right\n    ctx.rect(left + width, top - marginTop, marginRight, height + marginTop + marginBottom).fill();\n    // Margin bottom\n    ctx.rect(left, top + height, width, marginBottom).fill();\n};\nvar debugText = function debugText(ctx, node) {\n    var _node$box4 = node.box, left = _node$box4.left, top = _node$box4.top, width = _node$box4.width, height = _node$box4.height;\n    var _getMargin2 = getMargin(node.box), _getMargin2$marginLef = _getMargin2.marginLeft, marginLeft = _getMargin2$marginLef === void 0 ? 0 : _getMargin2$marginLef, _getMargin2$marginTop = _getMargin2.marginTop, marginTop = _getMargin2$marginTop === void 0 ? 0 : _getMargin2$marginTop, _getMargin2$marginRig = _getMargin2.marginRight, marginRight = _getMargin2$marginRig === void 0 ? 0 : _getMargin2$marginRig, _getMargin2$marginBot = _getMargin2.marginBottom, marginBottom = _getMargin2$marginBot === void 0 ? 0 : _getMargin2$marginBot;\n    var roundedWidth = Math.round(width + marginLeft + marginRight);\n    var roundedHeight = Math.round(height + marginTop + marginBottom);\n    ctx.fontSize(6).opacity(1).fillColor(\"black\").text(roundedWidth + \" x \" + roundedHeight, left - marginLeft, Math.max(top - marginTop - 4, 1));\n};\nvar debugOrigin = function debugOrigin(ctx, node) {\n    if (node.origin) {\n        ctx.circle(node.origin.left, node.origin.top, 3).fill(\"red\").circle(node.origin.left, node.origin.top, 5).stroke(\"red\");\n    }\n};\nvar renderDebug = function renderDebug(ctx, node) {\n    var _node$props;\n    if (!((_node$props = node.props) !== null && _node$props !== void 0 && _node$props.debug)) return;\n    ctx.save();\n    debugContent(ctx, node);\n    debugPadding(ctx, node);\n    debugMargin(ctx, node);\n    debugText(ctx, node);\n    debugOrigin(ctx, node);\n    ctx.restore();\n};\nvar availableMethods = [\n    \"dash\",\n    \"clip\",\n    \"save\",\n    \"path\",\n    \"fill\",\n    \"font\",\n    \"text\",\n    \"rect\",\n    \"scale\",\n    \"moveTo\",\n    \"lineTo\",\n    \"stroke\",\n    \"rotate\",\n    \"circle\",\n    \"lineCap\",\n    \"opacity\",\n    \"ellipse\",\n    \"polygon\",\n    \"restore\",\n    \"lineJoin\",\n    \"fontSize\",\n    \"fillColor\",\n    \"lineWidth\",\n    \"translate\",\n    \"miterLimit\",\n    \"strokeColor\",\n    \"fillOpacity\",\n    \"roundedRect\",\n    \"fillAndStroke\",\n    \"strokeOpacity\",\n    \"bezierCurveTo\",\n    \"quadraticCurveTo\",\n    \"linearGradient\",\n    \"radialGradient\"\n];\nvar painter = function painter(ctx) {\n    var p = availableMethods.reduce(function(acc, prop) {\n        var _extends2;\n        return _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_6__({}, acc, (_extends2 = {}, _extends2[prop] = function() {\n            ctx[prop].apply(ctx, arguments);\n            return p;\n        }, _extends2));\n    }, {});\n    return p;\n};\nvar renderCanvas = function renderCanvas(ctx, node) {\n    var _node$box = node.box, top = _node$box.top, left = _node$box.left, width = _node$box.width, height = _node$box.height;\n    var paddingTop = node.box.paddingTop || 0;\n    var paddingLeft = node.box.paddingLeft || 0;\n    var paddingRight = node.box.paddingRight || 0;\n    var paddingBottom = node.box.paddingBottom || 0;\n    var availableWidth = width - paddingLeft - paddingRight;\n    var availableHeight = height - paddingTop - paddingBottom;\n    if (!availableWidth || !availableHeight) {\n        console.warn(\"Canvas element has null width or height. Please provide valid values via the `style` prop in order to correctly render it.\");\n    }\n    ctx.save().translate(left + paddingLeft, top + paddingTop);\n    if (node.props.paint) {\n        node.props.paint(painter(ctx), availableWidth, availableHeight);\n    }\n    ctx.restore();\n};\n// Ref: https://www.w3.org/TR/css-backgrounds-3/#borders\n// This constant is used to approximate a symmetrical arc using a cubic Bezier curve.\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\nvar clipBorderTop = function clipBorderTop(ctx, layout, style, rtr, rtl) {\n    var top = layout.top, left = layout.left, width = layout.width, height = layout.height;\n    var borderTopWidth = style.borderTopWidth, borderRightWidth = style.borderRightWidth, borderLeftWidth = style.borderLeftWidth;\n    // Clip outer top border edge\n    ctx.moveTo(left + rtl, top);\n    ctx.lineTo(left + width - rtr, top);\n    // Ellipse coefficients outer top right cap\n    var c0 = rtr * (1.0 - KAPPA);\n    // Clip outer top right cap\n    ctx.bezierCurveTo(left + width - c0, top, left + width, top + c0, left + width, top + rtr);\n    // Move down in case the margin exceedes the radius\n    var topRightYCoord = top + Math.max(borderTopWidth, rtr);\n    ctx.lineTo(left + width, topRightYCoord);\n    // Clip inner top right cap\n    ctx.lineTo(left + width - borderRightWidth, topRightYCoord);\n    // Ellipse coefficients inner top right cap\n    var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n    var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n    var c1 = innerTopRightRadiusX * (1.0 - KAPPA);\n    var c2 = innerTopRightRadiusY * (1.0 - KAPPA);\n    // Clip inner top right cap\n    ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c2, left + width - borderRightWidth - c1, top + borderTopWidth, left + width - borderRightWidth - innerTopRightRadiusX, top + borderTopWidth);\n    // Clip inner top border edge\n    ctx.lineTo(left + Math.max(rtl, borderLeftWidth), top + borderTopWidth);\n    // Ellipse coefficients inner top left cap\n    var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n    var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n    var c3 = innerTopLeftRadiusX * (1.0 - KAPPA);\n    var c4 = innerTopLeftRadiusY * (1.0 - KAPPA);\n    var topLeftYCoord = top + Math.max(borderTopWidth, rtl);\n    // Clip inner top left cap\n    ctx.bezierCurveTo(left + borderLeftWidth + c3, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c4, left + borderLeftWidth, topLeftYCoord);\n    ctx.lineTo(left, topLeftYCoord);\n    // Move down in case the margin exceedes the radius\n    ctx.lineTo(left, top + rtl);\n    // Ellipse coefficients outer top left cap\n    var c5 = rtl * (1.0 - KAPPA);\n    // Clip outer top left cap\n    ctx.bezierCurveTo(left, top + c5, left + c5, top, left + rtl, top);\n    ctx.closePath();\n    ctx.clip();\n    // Clip border top cap joins\n    if (borderRightWidth) {\n        var trSlope = -borderTopWidth / borderRightWidth;\n        ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n        ctx.lineTo(left + width, top);\n        ctx.lineTo(left, top);\n        ctx.lineTo(left, top + height);\n        ctx.closePath();\n        ctx.clip();\n    }\n    if (borderLeftWidth) {\n        var _trSlope = -borderTopWidth / borderLeftWidth;\n        ctx.moveTo(left + width / 2, _trSlope * (-width / 2) + top);\n        ctx.lineTo(left, top);\n        ctx.lineTo(left + width, top);\n        ctx.lineTo(left + width, top + height);\n        ctx.closePath();\n        ctx.clip();\n    }\n};\nvar fillBorderTop = function fillBorderTop(ctx, layout, style, rtr, rtl) {\n    var top = layout.top, left = layout.left, width = layout.width;\n    var borderTopColor = style.borderTopColor, borderTopWidth = style.borderTopWidth, borderTopStyle = style.borderTopStyle, borderRightWidth = style.borderRightWidth, borderLeftWidth = style.borderLeftWidth;\n    var c0 = rtl * (1.0 - KAPPA);\n    var c1 = rtr * (1.0 - KAPPA);\n    ctx.moveTo(left, top + Math.max(rtl, borderTopWidth));\n    ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);\n    ctx.lineTo(left + width - rtr, top);\n    ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n    ctx.strokeColor(borderTopColor);\n    ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderLeftWidth) * 2);\n    if (borderTopStyle === \"dashed\") {\n        ctx.dash(borderTopWidth * 2, {\n            space: borderTopWidth * 1.2\n        });\n    } else if (borderTopStyle === \"dotted\") {\n        ctx.dash(borderTopWidth, {\n            space: borderTopWidth * 1.2\n        });\n    }\n    ctx.stroke();\n    ctx.undash();\n};\nvar clipBorderRight = function clipBorderRight(ctx, layout, style, rtr, rbr) {\n    var top = layout.top, left = layout.left, width = layout.width, height = layout.height;\n    var borderTopWidth = style.borderTopWidth, borderRightWidth = style.borderRightWidth, borderBottomWidth = style.borderBottomWidth;\n    // Clip outer right border edge\n    ctx.moveTo(left + width, top + rtr);\n    ctx.lineTo(left + width, top + height - rbr);\n    // Ellipse coefficients outer bottom right cap\n    var c0 = rbr * (1.0 - KAPPA);\n    // Clip outer top right cap\n    ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height);\n    // Move left in case the margin exceedes the radius\n    var topBottomXCoord = left + width - Math.max(borderRightWidth, rbr);\n    ctx.lineTo(topBottomXCoord, top + height);\n    // Clip inner bottom right cap\n    ctx.lineTo(topBottomXCoord, top + height - borderBottomWidth);\n    // Ellipse coefficients inner bottom right cap\n    var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n    var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n    var c1 = innerBottomRightRadiusX * (1.0 - KAPPA);\n    var c2 = innerBottomRightRadiusY * (1.0 - KAPPA);\n    // Clip inner top right cap\n    ctx.bezierCurveTo(left + width - borderRightWidth - c1, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c2, left + width - borderRightWidth, top + height - Math.max(rbr, borderBottomWidth));\n    // Clip inner right border edge\n    ctx.lineTo(left + width - borderRightWidth, top + Math.max(rtr, borderTopWidth));\n    // Ellipse coefficients inner top right cap\n    var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n    var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n    var c3 = innerTopRightRadiusX * (1.0 - KAPPA);\n    var c4 = innerTopRightRadiusY * (1.0 - KAPPA);\n    var topRightXCoord = left + width - Math.max(rtr, borderRightWidth);\n    // Clip inner top left cap\n    ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c4, left + width - borderRightWidth - c3, top + borderTopWidth, topRightXCoord, top + borderTopWidth);\n    ctx.lineTo(topRightXCoord, top);\n    // Move right in case the margin exceedes the radius\n    ctx.lineTo(left + width - rtr, top);\n    // Ellipse coefficients outer top right cap\n    var c5 = rtr * (1.0 - KAPPA);\n    // Clip outer top right cap\n    ctx.bezierCurveTo(left + width - c5, top, left + width, top + c5, left + width, top + rtr);\n    ctx.closePath();\n    ctx.clip();\n    // Clip border right cap joins\n    if (borderTopWidth) {\n        var trSlope = -borderTopWidth / borderRightWidth;\n        ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n        ctx.lineTo(left + width, top);\n        ctx.lineTo(left + width, top + height);\n        ctx.lineTo(left, top + height);\n        ctx.closePath();\n        ctx.clip();\n    }\n    if (borderBottomWidth) {\n        var brSlope = borderBottomWidth / borderRightWidth;\n        ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n        ctx.lineTo(left + width, top + height);\n        ctx.lineTo(left + width, top);\n        ctx.lineTo(left, top);\n        ctx.closePath();\n        ctx.clip();\n    }\n};\nvar fillBorderRight = function fillBorderRight(ctx, layout, style, rtr, rbr) {\n    var top = layout.top, left = layout.left, width = layout.width, height = layout.height;\n    var borderRightColor = style.borderRightColor, borderRightStyle = style.borderRightStyle, borderRightWidth = style.borderRightWidth, borderTopWidth = style.borderTopWidth, borderBottomWidth = style.borderBottomWidth;\n    var c0 = rbr * (1.0 - KAPPA);\n    var c1 = rtr * (1.0 - KAPPA);\n    ctx.moveTo(left + width - rtr, top);\n    ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n    ctx.lineTo(left + width, top + height - rbr);\n    ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height);\n    ctx.strokeColor(borderRightColor);\n    ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderBottomWidth) * 2);\n    if (borderRightStyle === \"dashed\") {\n        ctx.dash(borderRightWidth * 2, {\n            space: borderRightWidth * 1.2\n        });\n    } else if (borderRightStyle === \"dotted\") {\n        ctx.dash(borderRightWidth, {\n            space: borderRightWidth * 1.2\n        });\n    }\n    ctx.stroke();\n    ctx.undash();\n};\nvar clipBorderBottom = function clipBorderBottom(ctx, layout, style, rbl, rbr) {\n    var top = layout.top, left = layout.left, width = layout.width, height = layout.height;\n    var borderBottomWidth = style.borderBottomWidth, borderRightWidth = style.borderRightWidth, borderLeftWidth = style.borderLeftWidth;\n    // Clip outer top border edge\n    ctx.moveTo(left + width - rbr, top + height);\n    ctx.lineTo(left + rbl, top + height);\n    // Ellipse coefficients outer top right cap\n    var c0 = rbl * (1.0 - KAPPA);\n    // Clip outer top right cap\n    ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n    // Move up in case the margin exceedes the radius\n    var bottomLeftYCoord = top + height - Math.max(borderBottomWidth, rbl);\n    ctx.lineTo(left, bottomLeftYCoord);\n    // Clip inner bottom left cap\n    ctx.lineTo(left + borderLeftWidth, bottomLeftYCoord);\n    // Ellipse coefficients inner top right cap\n    var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n    var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n    var c1 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n    var c2 = innerBottomLeftRadiusY * (1.0 - KAPPA);\n    // Clip inner bottom left cap\n    ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c2, left + borderLeftWidth + c1, top + height - borderBottomWidth, left + borderLeftWidth + innerBottomLeftRadiusX, top + height - borderBottomWidth);\n    // Clip inner bottom border edge\n    ctx.lineTo(left + width - Math.max(rbr, borderRightWidth), top + height - borderBottomWidth);\n    // Ellipse coefficients inner top left cap\n    var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n    var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n    var c3 = innerBottomRightRadiusX * (1.0 - KAPPA);\n    var c4 = innerBottomRightRadiusY * (1.0 - KAPPA);\n    var bottomRightYCoord = top + height - Math.max(borderBottomWidth, rbr);\n    // Clip inner top left cap\n    ctx.bezierCurveTo(left + width - borderRightWidth - c3, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c4, left + width - borderRightWidth, bottomRightYCoord);\n    ctx.lineTo(left + width, bottomRightYCoord);\n    // Move down in case the margin exceedes the radius\n    ctx.lineTo(left + width, top + height - rbr);\n    // Ellipse coefficients outer top left cap\n    var c5 = rbr * (1.0 - KAPPA);\n    // Clip outer top left cap\n    ctx.bezierCurveTo(left + width, top + height - c5, left + width - c5, top + height, left + width - rbr, top + height);\n    ctx.closePath();\n    ctx.clip();\n    // Clip border bottom cap joins\n    if (borderRightWidth) {\n        var brSlope = borderBottomWidth / borderRightWidth;\n        ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n        ctx.lineTo(left + width, top + height);\n        ctx.lineTo(left, top + height);\n        ctx.lineTo(left, top);\n        ctx.closePath();\n        ctx.clip();\n    }\n    if (borderLeftWidth) {\n        var trSlope = -borderBottomWidth / borderLeftWidth;\n        ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n        ctx.lineTo(left, top + height);\n        ctx.lineTo(left + width, top + height);\n        ctx.lineTo(left + width, top);\n        ctx.closePath();\n        ctx.clip();\n    }\n};\nvar fillBorderBottom = function fillBorderBottom(ctx, layout, style, rbl, rbr) {\n    var top = layout.top, left = layout.left, width = layout.width, height = layout.height;\n    var borderBottomColor = style.borderBottomColor, borderBottomStyle = style.borderBottomStyle, borderBottomWidth = style.borderBottomWidth, borderRightWidth = style.borderRightWidth, borderLeftWidth = style.borderLeftWidth;\n    var c0 = rbl * (1.0 - KAPPA);\n    var c1 = rbr * (1.0 - KAPPA);\n    ctx.moveTo(left + width, top + height - rbr);\n    ctx.bezierCurveTo(left + width, top + height - c1, left + width - c1, top + height, left + width - rbr, top + height);\n    ctx.lineTo(left + rbl, top + height);\n    ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n    ctx.strokeColor(borderBottomColor);\n    ctx.lineWidth(Math.max(borderBottomWidth, borderRightWidth, borderLeftWidth) * 2);\n    if (borderBottomStyle === \"dashed\") {\n        ctx.dash(borderBottomWidth * 2, {\n            space: borderBottomWidth * 1.2\n        });\n    } else if (borderBottomStyle === \"dotted\") {\n        ctx.dash(borderBottomWidth, {\n            space: borderBottomWidth * 1.2\n        });\n    }\n    ctx.stroke();\n    ctx.undash();\n};\nvar clipBorderLeft = function clipBorderLeft(ctx, layout, style, rbl, rtl) {\n    var top = layout.top, left = layout.left, width = layout.width, height = layout.height;\n    var borderTopWidth = style.borderTopWidth, borderLeftWidth = style.borderLeftWidth, borderBottomWidth = style.borderBottomWidth;\n    // Clip outer left border edge\n    ctx.moveTo(left, top + height - rbl);\n    ctx.lineTo(left, top + rtl);\n    // Ellipse coefficients outer top left cap\n    var c0 = rtl * (1.0 - KAPPA);\n    // Clip outer top left cap\n    ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);\n    // Move right in case the margin exceedes the radius\n    var topLeftCoordX = left + Math.max(borderLeftWidth, rtl);\n    ctx.lineTo(topLeftCoordX, top);\n    // Clip inner top left cap\n    ctx.lineTo(topLeftCoordX, top + borderTopWidth);\n    // Ellipse coefficients inner top left cap\n    var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n    var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n    var c1 = innerTopLeftRadiusX * (1.0 - KAPPA);\n    var c2 = innerTopLeftRadiusY * (1.0 - KAPPA);\n    // Clip inner top right cap\n    ctx.bezierCurveTo(left + borderLeftWidth + c1, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c2, left + borderLeftWidth, top + Math.max(rtl, borderTopWidth));\n    // Clip inner left border edge\n    ctx.lineTo(left + borderLeftWidth, top + height - Math.max(rbl, borderBottomWidth));\n    // Ellipse coefficients inner bottom left cap\n    var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n    var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n    var c3 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n    var c4 = innerBottomLeftRadiusY * (1.0 - KAPPA);\n    var bottomLeftXCoord = left + Math.max(rbl, borderLeftWidth);\n    // Clip inner top left cap\n    ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c4, left + borderLeftWidth + c3, top + height - borderBottomWidth, bottomLeftXCoord, top + height - borderBottomWidth);\n    ctx.lineTo(bottomLeftXCoord, top + height);\n    // Move left in case the margin exceedes the radius\n    ctx.lineTo(left + rbl, top + height);\n    // Ellipse coefficients outer top right cap\n    var c5 = rbl * (1.0 - KAPPA);\n    // Clip outer top right cap\n    ctx.bezierCurveTo(left + c5, top + height, left, top + height - c5, left, top + height - rbl);\n    ctx.closePath();\n    ctx.clip();\n    // Clip border right cap joins\n    if (borderBottomWidth) {\n        var trSlope = -borderBottomWidth / borderLeftWidth;\n        ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n        ctx.lineTo(left, top + height);\n        ctx.lineTo(left, top);\n        ctx.lineTo(left + width, top);\n        ctx.closePath();\n        ctx.clip();\n    }\n    if (borderBottomWidth) {\n        var _trSlope2 = -borderTopWidth / borderLeftWidth;\n        ctx.moveTo(left + width / 2, _trSlope2 * (-width / 2) + top);\n        ctx.lineTo(left, top);\n        ctx.lineTo(left, top + height);\n        ctx.lineTo(left + width, top + height);\n        ctx.closePath();\n        ctx.clip();\n    }\n};\nvar fillBorderLeft = function fillBorderLeft(ctx, layout, style, rbl, rtl) {\n    var top = layout.top, left = layout.left, height = layout.height;\n    var borderLeftColor = style.borderLeftColor, borderLeftStyle = style.borderLeftStyle, borderLeftWidth = style.borderLeftWidth, borderTopWidth = style.borderTopWidth, borderBottomWidth = style.borderBottomWidth;\n    var c0 = rbl * (1.0 - KAPPA);\n    var c1 = rtl * (1.0 - KAPPA);\n    ctx.moveTo(left + rbl, top + height);\n    ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n    ctx.lineTo(left, top + rtl);\n    ctx.bezierCurveTo(left, top + c1, left + c1, top, left + rtl, top);\n    ctx.strokeColor(borderLeftColor);\n    ctx.lineWidth(Math.max(borderLeftWidth, borderTopWidth, borderBottomWidth) * 2);\n    if (borderLeftStyle === \"dashed\") {\n        ctx.dash(borderLeftWidth * 2, {\n            space: borderLeftWidth * 1.2\n        });\n    } else if (borderLeftStyle === \"dotted\") {\n        ctx.dash(borderLeftWidth, {\n            space: borderLeftWidth * 1.2\n        });\n    }\n    ctx.stroke();\n    ctx.undash();\n};\nvar shouldRenderBorders = function shouldRenderBorders(node) {\n    return node.box && (node.box.borderTopWidth || node.box.borderRightWidth || node.box.borderBottomWidth || node.box.borderLeftWidth);\n};\nvar renderBorders = function renderBorders(ctx, node) {\n    if (!shouldRenderBorders(node)) return;\n    var _node$box = node.box, width = _node$box.width, height = _node$box.height, borderTopWidth = _node$box.borderTopWidth, borderLeftWidth = _node$box.borderLeftWidth, borderRightWidth = _node$box.borderRightWidth, borderBottomWidth = _node$box.borderBottomWidth;\n    var _node$style = node.style, opacity = _node$style.opacity, _node$style$borderTop = _node$style.borderTopLeftRadius, borderTopLeftRadius = _node$style$borderTop === void 0 ? 0 : _node$style$borderTop, _node$style$borderTop2 = _node$style.borderTopRightRadius, borderTopRightRadius = _node$style$borderTop2 === void 0 ? 0 : _node$style$borderTop2, _node$style$borderBot = _node$style.borderBottomLeftRadius, borderBottomLeftRadius = _node$style$borderBot === void 0 ? 0 : _node$style$borderBot, _node$style$borderBot2 = _node$style.borderBottomRightRadius, borderBottomRightRadius = _node$style$borderBot2 === void 0 ? 0 : _node$style$borderBot2, _node$style$borderTop3 = _node$style.borderTopColor, borderTopColor = _node$style$borderTop3 === void 0 ? \"black\" : _node$style$borderTop3, _node$style$borderTop4 = _node$style.borderTopStyle, borderTopStyle = _node$style$borderTop4 === void 0 ? \"solid\" : _node$style$borderTop4, _node$style$borderLef = _node$style.borderLeftColor, borderLeftColor = _node$style$borderLef === void 0 ? \"black\" : _node$style$borderLef, _node$style$borderLef2 = _node$style.borderLeftStyle, borderLeftStyle = _node$style$borderLef2 === void 0 ? \"solid\" : _node$style$borderLef2, _node$style$borderRig = _node$style.borderRightColor, borderRightColor = _node$style$borderRig === void 0 ? \"black\" : _node$style$borderRig, _node$style$borderRig2 = _node$style.borderRightStyle, borderRightStyle = _node$style$borderRig2 === void 0 ? \"solid\" : _node$style$borderRig2, _node$style$borderBot3 = _node$style.borderBottomColor, borderBottomColor = _node$style$borderBot3 === void 0 ? \"black\" : _node$style$borderBot3, _node$style$borderBot4 = _node$style.borderBottomStyle, borderBottomStyle = _node$style$borderBot4 === void 0 ? \"solid\" : _node$style$borderBot4;\n    var style = {\n        borderTopColor: borderTopColor,\n        borderTopWidth: borderTopWidth,\n        borderTopStyle: borderTopStyle,\n        borderLeftColor: borderLeftColor,\n        borderLeftWidth: borderLeftWidth,\n        borderLeftStyle: borderLeftStyle,\n        borderRightColor: borderRightColor,\n        borderRightWidth: borderRightWidth,\n        borderRightStyle: borderRightStyle,\n        borderBottomColor: borderBottomColor,\n        borderBottomWidth: borderBottomWidth,\n        borderBottomStyle: borderBottomStyle,\n        borderTopLeftRadius: borderTopLeftRadius,\n        borderTopRightRadius: borderTopRightRadius,\n        borderBottomLeftRadius: borderBottomLeftRadius,\n        borderBottomRightRadius: borderBottomRightRadius\n    };\n    var rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n    var rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n    var rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n    var rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n    ctx.save();\n    ctx.strokeOpacity(opacity);\n    if (borderTopWidth) {\n        ctx.save();\n        clipBorderTop(ctx, node.box, style, rtr, rtl);\n        fillBorderTop(ctx, node.box, style, rtr, rtl);\n        ctx.restore();\n    }\n    if (borderRightWidth) {\n        ctx.save();\n        clipBorderRight(ctx, node.box, style, rtr, rbr);\n        fillBorderRight(ctx, node.box, style, rtr, rbr);\n        ctx.restore();\n    }\n    if (borderBottomWidth) {\n        ctx.save();\n        clipBorderBottom(ctx, node.box, style, rbl, rbr);\n        fillBorderBottom(ctx, node.box, style, rbl, rbr);\n        ctx.restore();\n    }\n    if (borderLeftWidth) {\n        ctx.save();\n        clipBorderLeft(ctx, node.box, style, rbl, rtl);\n        fillBorderLeft(ctx, node.box, style, rbl, rtl);\n        ctx.restore();\n    }\n    ctx.restore();\n};\nvar drawBackground = function drawBackground(ctx, node) {\n    var _node$style;\n    var _node$box = node.box, top = _node$box.top, left = _node$box.left, width = _node$box.width, height = _node$box.height;\n    var color = parseColor(node.style.backgroundColor);\n    var nodeOpacity = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_1__.isNil)((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.opacity) ? 1 : node.style.opacity;\n    var opacity = Math.min(color.opacity, nodeOpacity);\n    ctx.fillOpacity(opacity).fillColor(color.value).rect(left, top, width, height).fill();\n};\nvar renderBackground = function renderBackground(ctx, node) {\n    var _node$style2;\n    var hasBackground = !!node.box && !!((_node$style2 = node.style) !== null && _node$style2 !== void 0 && _node$style2.backgroundColor);\n    if (hasBackground) {\n        ctx.save();\n        clipNode(ctx, node);\n        drawBackground(ctx, node);\n        ctx.restore();\n    }\n};\nvar isSrcId = function isSrcId(value) {\n    return /^#.+/.test(value);\n};\nvar setLink = function setLink(ctx, node) {\n    var props = node.props || {};\n    var _node$box = node.box, top = _node$box.top, left = _node$box.left, width = _node$box.width, height = _node$box.height;\n    var src = props.src || props.href;\n    if (src) {\n        var isId = isSrcId(src);\n        var method = isId ? \"goTo\" : \"link\";\n        var value = isId ? src.slice(1) : src;\n        ctx[method](left, top, width, height, value);\n    }\n};\nvar setDestination = function setDestination(ctx, node) {\n    var _node$props;\n    if ((_node$props = node.props) !== null && _node$props !== void 0 && _node$props.id) {\n        ctx.addNamedDestination(node.props.id, \"XYZ\", null, node.box.top, null);\n    }\n};\nvar _renderFns;\nvar isRecursiveNode = function isRecursiveNode(node) {\n    return node.type !== _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Text && node.type !== _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Svg;\n};\nvar renderChildren = function renderChildren(ctx, node, options) {\n    ctx.save();\n    if (node.box) {\n        ctx.translate(node.box.left, node.box.top);\n    }\n    var children = node.children || [];\n    var renderChild = function renderChild(child) {\n        return renderNode(ctx, child, options);\n    };\n    children.forEach(renderChild);\n    ctx.restore();\n};\nvar renderFns = (_renderFns = {}, _renderFns[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Text] = renderText, _renderFns[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Note] = renderNote, _renderFns[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Image] = renderImage, _renderFns[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Canvas] = renderCanvas, _renderFns[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Svg] = renderSvg, _renderFns[_react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Link] = setLink, _renderFns);\nvar renderNode = function renderNode(ctx, node, options) {\n    var _node$style;\n    var overflowHidden = ((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.overflow) === \"hidden\";\n    var shouldRenderChildren = isRecursiveNode(node);\n    if (node.type === _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_0__.Page) renderPage(ctx, node);\n    ctx.save();\n    if (overflowHidden) clipNode(ctx, node);\n    applyTransformations(ctx, node);\n    renderBackground(ctx, node);\n    renderBorders(ctx, node);\n    var renderFn = renderFns[node.type];\n    if (renderFn) renderFn(ctx, node, options);\n    if (shouldRenderChildren) renderChildren(ctx, node, options);\n    setDestination(ctx, node);\n    renderDebug(ctx, node);\n    ctx.restore();\n};\n/* eslint-disable no-param-reassign */ var setPDFMetadata = function setPDFMetadata(target) {\n    return function(key, value) {\n        if (value) target.info[key] = value;\n    };\n};\n/**\n * Set document instance metadata\n *\n * @param {Object} ctx document instance\n * @param {Object} doc document root\n */ var addMetadata = function addMetadata(ctx, doc) {\n    var _props$creator, _props$producer;\n    var setProp = setPDFMetadata(ctx);\n    var props = doc.props || {};\n    var title = props.title || null;\n    var author = props.author || null;\n    var subject = props.subject || null;\n    var keywords = props.keywords || null;\n    var creator = (_props$creator = props.creator) != null ? _props$creator : \"react-pdf\";\n    var producer = (_props$producer = props.producer) != null ? _props$producer : \"react-pdf\";\n    var creationDate = props.creationDate || new Date();\n    var modificationDate = props.modificationDate || null;\n    setProp(\"Title\", title);\n    setProp(\"Author\", author);\n    setProp(\"Subject\", subject);\n    setProp(\"Keywords\", keywords);\n    setProp(\"Creator\", creator);\n    setProp(\"Producer\", producer);\n    setProp(\"CreationDate\", creationDate);\n    setProp(\"ModificationDate\", modificationDate);\n};\n/* eslint-disable no-param-reassign */ var addNodeBookmark = function addNodeBookmark(ctx, node, pageNumber, registry) {\n    var _node$props;\n    var bookmark = (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.bookmark;\n    if (bookmark) {\n        var title = bookmark.title, parent = bookmark.parent, expanded = bookmark.expanded, zoom = bookmark.zoom, fit = bookmark.fit;\n        var outline = registry[parent] || ctx.outline;\n        var top = bookmark.top || node.box.top;\n        var left = bookmark.left || node.box.left;\n        var instance = outline.addItem(title, {\n            pageNumber: pageNumber,\n            expanded: expanded,\n            top: top,\n            left: left,\n            zoom: zoom,\n            fit: fit\n        });\n        registry[bookmark.ref] = instance;\n    }\n    if (!node.children) return;\n    node.children.forEach(function(child) {\n        return addNodeBookmark(ctx, child, pageNumber, registry);\n    });\n};\nvar addBookmarks = function addBookmarks(ctx, root) {\n    var registry = {};\n    var pages = root.children || [];\n    pages.forEach(function(page, i) {\n        addNodeBookmark(ctx, page, i, registry);\n    });\n};\nvar render = function render(ctx, doc) {\n    var pages = doc.children || [];\n    var options = {\n        imageCache: new Map()\n    };\n    addMetadata(ctx, doc);\n    pages.forEach(function(page) {\n        return renderNode(ctx, page, options);\n    });\n    addBookmarks(ctx, doc);\n    ctx.end();\n    return ctx;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/render/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-pdf/renderer/lib/react-pdf.js":
/*!***********************************************************!*\
  !*** ./node_modules/@react-pdf/renderer/lib/react-pdf.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var scheduler__WEBPACK_IMPORTED_MODULE_13___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobProvider: () => (/* binding */ BlobProvider),\n/* harmony export */   Canvas: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Canvas),\n/* harmony export */   Circle: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Circle),\n/* harmony export */   ClipPath: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.ClipPath),\n/* harmony export */   Defs: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Defs),\n/* harmony export */   Document: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Document),\n/* harmony export */   Ellipse: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Ellipse),\n/* harmony export */   Font: () => (/* binding */ Font),\n/* harmony export */   G: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.G),\n/* harmony export */   Image: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Image),\n/* harmony export */   Line: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Line),\n/* harmony export */   LinearGradient: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.LinearGradient),\n/* harmony export */   Link: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Link),\n/* harmony export */   Note: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Note),\n/* harmony export */   PDFDownloadLink: () => (/* binding */ PDFDownloadLink),\n/* harmony export */   PDFViewer: () => (/* binding */ PDFViewer),\n/* harmony export */   Page: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Page),\n/* harmony export */   Path: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Path),\n/* harmony export */   Polygon: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Polygon),\n/* harmony export */   Polyline: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Polyline),\n/* harmony export */   RadialGradient: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.RadialGradient),\n/* harmony export */   Rect: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Rect),\n/* harmony export */   Stop: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Stop),\n/* harmony export */   StyleSheet: () => (/* binding */ StyleSheet),\n/* harmony export */   Svg: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Svg),\n/* harmony export */   Text: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Text),\n/* harmony export */   TextInstance: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.TextInstance),\n/* harmony export */   Tspan: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.Tspan),\n/* harmony export */   View: () => (/* reexport safe */ _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__.View),\n/* harmony export */   createRenderer: () => (/* binding */ createRenderer),\n/* harmony export */   \"default\": () => (/* binding */ index),\n/* harmony export */   pdf: () => (/* binding */ pdf),\n/* harmony export */   render: () => (/* binding */ render),\n/* harmony export */   renderToBuffer: () => (/* binding */ renderToBuffer),\n/* harmony export */   renderToFile: () => (/* binding */ renderToFile),\n/* harmony export */   renderToStream: () => (/* binding */ renderToStream),\n/* harmony export */   renderToString: () => (/* binding */ renderToString),\n/* harmony export */   usePDF: () => (/* binding */ usePDF),\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/extends.js\");\n/* harmony import */ var _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-pdf/primitives */ \"(ssr)/./node_modules/@react-pdf/primitives/src/index.js\");\n/* harmony import */ var _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/regeneratorRuntime */ \"(ssr)/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(ssr)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var _react_pdf_font__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @react-pdf/font */ \"(ssr)/./node_modules/@react-pdf/font/lib/index.js\");\n/* harmony import */ var _react_pdf_render__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @react-pdf/render */ \"(ssr)/./node_modules/@react-pdf/render/lib/index.js\");\n/* harmony import */ var _react_pdf_pdfkit__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @react-pdf/pdfkit */ \"(ssr)/./node_modules/@react-pdf/pdfkit/lib/pdfkit.js\");\n/* harmony import */ var _react_pdf_layout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @react-pdf/layout */ \"(ssr)/./node_modules/@react-pdf/layout/lib/index.js\");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutPropertiesLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js\");\n/* harmony import */ var object_assign__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! scheduler */ \"(ssr)/./node_modules/@react-pdf/renderer/node_modules/scheduler/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getDefaultExportFromCjs(x) {\n    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, \"default\") ? x[\"default\"] : x;\n}\nfunction getAugmentedNamespace(n) {\n    if (n.__esModule) return n;\n    var f = n.default;\n    if (typeof f == \"function\") {\n        var a = function a() {\n            if (this instanceof a) {\n                return Reflect.construct(f, arguments, this.constructor);\n            }\n            return f.apply(this, arguments);\n        };\n        a.prototype = f.prototype;\n    } else a = {};\n    Object.defineProperty(a, \"__esModule\", {\n        value: true\n    });\n    Object.keys(n).forEach(function(k) {\n        var d = Object.getOwnPropertyDescriptor(n, k);\n        Object.defineProperty(a, k, d.get ? d : {\n            enumerable: true,\n            get: function() {\n                return n[k];\n            }\n        });\n    });\n    return a;\n}\nvar reactReconciler_production_min = {\n    exports: {}\n};\nvar require$$2 = /*@__PURE__*/ getAugmentedNamespace(/*#__PURE__*/ (scheduler__WEBPACK_IMPORTED_MODULE_13___namespace_cache || (scheduler__WEBPACK_IMPORTED_MODULE_13___namespace_cache = __webpack_require__.t(scheduler__WEBPACK_IMPORTED_MODULE_13__, 2))));\n/** @license React v0.23.0\n * react-reconciler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ (function(module) {\n    module.exports = function $$$reconciler($$$hostConfig) {\n        var aa = object_assign__WEBPACK_IMPORTED_MODULE_11__, ba = react__WEBPACK_IMPORTED_MODULE_12__, m = require$$2;\n        function n(a) {\n            for(var b = \"https://reactjs.org/docs/error-decoder.html?invariant=\" + a, c = 1; c < arguments.length; c++)b += \"&args[]=\" + encodeURIComponent(arguments[c]);\n            return \"Minified React error #\" + a + \"; visit \" + b + \" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\";\n        }\n        var q = ba.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        q.hasOwnProperty(\"ReactCurrentDispatcher\") || (q.ReactCurrentDispatcher = {\n            current: null\n        });\n        q.hasOwnProperty(\"ReactCurrentBatchConfig\") || (q.ReactCurrentBatchConfig = {\n            suspense: null\n        });\n        var u = \"function\" === typeof Symbol && Symbol.for, ca = u ? Symbol.for(\"react.element\") : 60103, da = u ? Symbol.for(\"react.portal\") : 60106, ea = u ? Symbol.for(\"react.fragment\") : 60107, fa = u ? Symbol.for(\"react.strict_mode\") : 60108, ha = u ? Symbol.for(\"react.profiler\") : 60114, ia = u ? Symbol.for(\"react.provider\") : 60109, ja = u ? Symbol.for(\"react.context\") : 60110, ka = u ? Symbol.for(\"react.concurrent_mode\") : 60111, la = u ? Symbol.for(\"react.forward_ref\") : 60112, ma = u ? Symbol.for(\"react.suspense\") : 60113, na = u ? Symbol.for(\"react.suspense_list\") : 60120, oa = u ? Symbol.for(\"react.memo\") : 60115, pa = u ? Symbol.for(\"react.lazy\") : 60116;\n        var qa = \"function\" === typeof Symbol && Symbol.iterator;\n        function ra(a) {\n            if (null === a || \"object\" !== typeof a) return null;\n            a = qa && a[qa] || a[\"@@iterator\"];\n            return \"function\" === typeof a ? a : null;\n        }\n        function sa(a) {\n            if (-1 === a._status) {\n                a._status = 0;\n                var b = a._ctor;\n                b = b();\n                a._result = b;\n                b.then(function(b) {\n                    0 === a._status && (b = b.default, a._status = 1, a._result = b);\n                }, function(b) {\n                    0 === a._status && (a._status = 2, a._result = b);\n                });\n            }\n        }\n        function ta(a) {\n            if (null == a) return null;\n            if (\"function\" === typeof a) return a.displayName || a.name || null;\n            if (\"string\" === typeof a) return a;\n            switch(a){\n                case ea:\n                    return \"Fragment\";\n                case da:\n                    return \"Portal\";\n                case ha:\n                    return \"Profiler\";\n                case fa:\n                    return \"StrictMode\";\n                case ma:\n                    return \"Suspense\";\n                case na:\n                    return \"SuspenseList\";\n            }\n            if (\"object\" === typeof a) switch(a.$$typeof){\n                case ja:\n                    return \"Context.Consumer\";\n                case ia:\n                    return \"Context.Provider\";\n                case la:\n                    var b = a.render;\n                    b = b.displayName || b.name || \"\";\n                    return a.displayName || (\"\" !== b ? \"ForwardRef(\" + b + \")\" : \"ForwardRef\");\n                case oa:\n                    return ta(a.type);\n                case pa:\n                    if (a = 1 === a._status ? a._result : null) return ta(a);\n            }\n            return null;\n        }\n        function ua(a) {\n            var b = a, c = a;\n            if (a.alternate) for(; b.return;)b = b.return;\n            else {\n                a = b;\n                do b = a, 0 !== (b.effectTag & 1026) && (c = b.return), a = b.return;\n                while (a);\n            }\n            return 3 === b.tag ? c : null;\n        }\n        function va(a) {\n            if (ua(a) !== a) throw Error(n(188));\n        }\n        function wa(a) {\n            var b = a.alternate;\n            if (!b) {\n                b = ua(a);\n                if (null === b) throw Error(n(188));\n                return b !== a ? null : a;\n            }\n            for(var c = a, d = b;;){\n                var e = c.return;\n                if (null === e) break;\n                var f = e.alternate;\n                if (null === f) {\n                    d = e.return;\n                    if (null !== d) {\n                        c = d;\n                        continue;\n                    }\n                    break;\n                }\n                if (e.child === f.child) {\n                    for(f = e.child; f;){\n                        if (f === c) return va(e), a;\n                        if (f === d) return va(e), b;\n                        f = f.sibling;\n                    }\n                    throw Error(n(188));\n                }\n                if (c.return !== d.return) c = e, d = f;\n                else {\n                    for(var g = !1, l = e.child; l;){\n                        if (l === c) {\n                            g = !0;\n                            c = e;\n                            d = f;\n                            break;\n                        }\n                        if (l === d) {\n                            g = !0;\n                            d = e;\n                            c = f;\n                            break;\n                        }\n                        l = l.sibling;\n                    }\n                    if (!g) {\n                        for(l = f.child; l;){\n                            if (l === c) {\n                                g = !0;\n                                c = f;\n                                d = e;\n                                break;\n                            }\n                            if (l === d) {\n                                g = !0;\n                                d = f;\n                                c = e;\n                                break;\n                            }\n                            l = l.sibling;\n                        }\n                        if (!g) throw Error(n(189));\n                    }\n                }\n                if (c.alternate !== d) throw Error(n(190));\n            }\n            if (3 !== c.tag) throw Error(n(188));\n            return c.stateNode.current === c ? a : b;\n        }\n        function xa(a) {\n            a = wa(a);\n            if (!a) return null;\n            for(var b = a;;){\n                if (5 === b.tag || 6 === b.tag) return b;\n                if (b.child) b.child.return = b, b = b.child;\n                else {\n                    if (b === a) break;\n                    for(; !b.sibling;){\n                        if (!b.return || b.return === a) return null;\n                        b = b.return;\n                    }\n                    b.sibling.return = b.return;\n                    b = b.sibling;\n                }\n            }\n            return null;\n        }\n        function ya(a) {\n            a = wa(a);\n            if (!a) return null;\n            for(var b = a;;){\n                if (5 === b.tag || 6 === b.tag) return b;\n                if (b.child && 4 !== b.tag) b.child.return = b, b = b.child;\n                else {\n                    if (b === a) break;\n                    for(; !b.sibling;){\n                        if (!b.return || b.return === a) return null;\n                        b = b.return;\n                    }\n                    b.sibling.return = b.return;\n                    b = b.sibling;\n                }\n            }\n            return null;\n        }\n        var za = $$$hostConfig.getPublicInstance, Aa = $$$hostConfig.getRootHostContext, Ba = $$$hostConfig.getChildHostContext, Ca = $$$hostConfig.prepareForCommit, Da = $$$hostConfig.resetAfterCommit, Ea = $$$hostConfig.createInstance, Fa = $$$hostConfig.appendInitialChild, Ga = $$$hostConfig.finalizeInitialChildren, Ia = $$$hostConfig.prepareUpdate, Ja = $$$hostConfig.shouldSetTextContent, Ka = $$$hostConfig.shouldDeprioritizeSubtree, La = $$$hostConfig.createTextInstance, Ma = $$$hostConfig.setTimeout, Na = $$$hostConfig.clearTimeout, Oa = $$$hostConfig.noTimeout, Pa = $$$hostConfig.isPrimaryRenderer, Qa = $$$hostConfig.supportsMutation, Ra = $$$hostConfig.supportsPersistence, Sa = $$$hostConfig.supportsHydration, Ta = $$$hostConfig.appendChild, Ua = $$$hostConfig.appendChildToContainer, Va = $$$hostConfig.commitTextUpdate, Wa = $$$hostConfig.commitMount, Xa = $$$hostConfig.commitUpdate, Ya = $$$hostConfig.insertBefore, Za = $$$hostConfig.insertInContainerBefore, $a = $$$hostConfig.removeChild, ab = $$$hostConfig.removeChildFromContainer, bb = $$$hostConfig.resetTextContent, cb = $$$hostConfig.hideInstance, db = $$$hostConfig.hideTextInstance, eb = $$$hostConfig.unhideInstance, fb = $$$hostConfig.unhideTextInstance, gb = $$$hostConfig.cloneInstance, hb = $$$hostConfig.createContainerChildSet, ib = $$$hostConfig.appendChildToContainerChildSet, kb = $$$hostConfig.finalizeContainerChildren, lb = $$$hostConfig.replaceContainerChildren, mb = $$$hostConfig.cloneHiddenInstance, nb = $$$hostConfig.cloneHiddenTextInstance, ob = $$$hostConfig.canHydrateInstance, pb = $$$hostConfig.canHydrateTextInstance, qb = $$$hostConfig.isSuspenseInstancePending, rb = $$$hostConfig.isSuspenseInstanceFallback, sb = $$$hostConfig.getNextHydratableSibling, tb = $$$hostConfig.getFirstHydratableChild, ub = $$$hostConfig.hydrateInstance, vb = $$$hostConfig.hydrateTextInstance, wb = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance, xb = $$$hostConfig.commitHydratedContainer, yb = $$$hostConfig.commitHydratedSuspenseInstance, zb = /^(.*)[\\\\\\/]/;\n        function Ab(a) {\n            var b = \"\";\n            do {\n                a: switch(a.tag){\n                    case 3:\n                    case 4:\n                    case 6:\n                    case 7:\n                    case 10:\n                    case 9:\n                        var c = \"\";\n                        break a;\n                    default:\n                        var d = a._debugOwner, e = a._debugSource, f = ta(a.type);\n                        c = null;\n                        d && (c = ta(d.type));\n                        d = f;\n                        f = \"\";\n                        e ? f = \" (at \" + e.fileName.replace(zb, \"\") + \":\" + e.lineNumber + \")\" : c && (f = \" (created by \" + c + \")\");\n                        c = \"\\n    in \" + (d || \"Unknown\") + f;\n                }\n                b += c;\n                a = a.return;\n            }while (a);\n            return b;\n        }\n        var Bb = [], Cb = -1;\n        function y(a) {\n            0 > Cb || (a.current = Bb[Cb], Bb[Cb] = null, Cb--);\n        }\n        function z(a, b) {\n            Cb++;\n            Bb[Cb] = a.current;\n            a.current = b;\n        }\n        var Db = {}, A = {\n            current: Db\n        }, B = {\n            current: !1\n        }, Eb = Db;\n        function Fb(a, b) {\n            var c = a.type.contextTypes;\n            if (!c) return Db;\n            var d = a.stateNode;\n            if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;\n            var e = {}, f;\n            for(f in c)e[f] = b[f];\n            d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);\n            return e;\n        }\n        function C(a) {\n            a = a.childContextTypes;\n            return null !== a && void 0 !== a;\n        }\n        function Gb(a) {\n            y(B);\n            y(A);\n        }\n        function Hb(a) {\n            y(B);\n            y(A);\n        }\n        function Ib(a, b, c) {\n            if (A.current !== Db) throw Error(n(168));\n            z(A, b);\n            z(B, c);\n        }\n        function Jb(a, b, c) {\n            var d = a.stateNode;\n            a = b.childContextTypes;\n            if (\"function\" !== typeof d.getChildContext) return c;\n            d = d.getChildContext();\n            for(var e in d)if (!(e in a)) throw Error(n(108, ta(b) || \"Unknown\", e));\n            return aa({}, c, {}, d);\n        }\n        function Kb(a) {\n            var b = a.stateNode;\n            b = b && b.__reactInternalMemoizedMergedChildContext || Db;\n            Eb = A.current;\n            z(A, b);\n            z(B, B.current);\n            return !0;\n        }\n        function Lb(a, b, c) {\n            var d = a.stateNode;\n            if (!d) throw Error(n(169));\n            c ? (b = Jb(a, b, Eb), d.__reactInternalMemoizedMergedChildContext = b, y(B), y(A), z(A, b)) : y(B);\n            z(B, c);\n        }\n        var Mb = m.unstable_runWithPriority, Nb = m.unstable_scheduleCallback, Ob = m.unstable_cancelCallback, Pb = m.unstable_shouldYield, Qb = m.unstable_requestPaint, Tb = m.unstable_now, Ub = m.unstable_getCurrentPriorityLevel, Vb = m.unstable_ImmediatePriority, Wb = m.unstable_UserBlockingPriority, Xb = m.unstable_NormalPriority, Yb = m.unstable_LowPriority, Zb = m.unstable_IdlePriority, $b = {}, ac = void 0 !== Qb ? Qb : function() {}, bc = null, cc = null, dc = !1, ec = Tb(), E = 1E4 > ec ? Tb : function() {\n            return Tb() - ec;\n        };\n        function fc() {\n            switch(Ub()){\n                case Vb:\n                    return 99;\n                case Wb:\n                    return 98;\n                case Xb:\n                    return 97;\n                case Yb:\n                    return 96;\n                case Zb:\n                    return 95;\n                default:\n                    throw Error(n(332));\n            }\n        }\n        function gc(a) {\n            switch(a){\n                case 99:\n                    return Vb;\n                case 98:\n                    return Wb;\n                case 97:\n                    return Xb;\n                case 96:\n                    return Yb;\n                case 95:\n                    return Zb;\n                default:\n                    throw Error(n(332));\n            }\n        }\n        function hc(a, b) {\n            a = gc(a);\n            return Mb(a, b);\n        }\n        function ic(a, b, c) {\n            a = gc(a);\n            return Nb(a, b, c);\n        }\n        function jc(a) {\n            null === bc ? (bc = [\n                a\n            ], cc = Nb(Vb, kc)) : bc.push(a);\n            return $b;\n        }\n        function F() {\n            if (null !== cc) {\n                var a = cc;\n                cc = null;\n                Ob(a);\n            }\n            kc();\n        }\n        function kc() {\n            if (!dc && null !== bc) {\n                dc = !0;\n                var a = 0;\n                try {\n                    var b = bc;\n                    hc(99, function() {\n                        for(; a < b.length; a++){\n                            var c = b[a];\n                            do c = c(!0);\n                            while (null !== c);\n                        }\n                    });\n                    bc = null;\n                } catch (c) {\n                    throw null !== bc && (bc = bc.slice(a + 1)), Nb(Vb, F), c;\n                } finally{\n                    dc = !1;\n                }\n            }\n        }\n        var lc = 3;\n        function mc(a, b, c) {\n            c /= 10;\n            return 1073741821 - (((1073741821 - a + b / 10) / c | 0) + 1) * c;\n        }\n        function nc(a, b) {\n            return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;\n        }\n        var oc = \"function\" === typeof Object.is ? Object.is : nc, pc = Object.prototype.hasOwnProperty;\n        function qc(a, b) {\n            if (oc(a, b)) return !0;\n            if (\"object\" !== typeof a || null === a || \"object\" !== typeof b || null === b) return !1;\n            var c = Object.keys(a), d = Object.keys(b);\n            if (c.length !== d.length) return !1;\n            for(d = 0; d < c.length; d++)if (!pc.call(b, c[d]) || !oc(a[c[d]], b[c[d]])) return !1;\n            return !0;\n        }\n        function rc(a, b) {\n            if (a && a.defaultProps) {\n                b = aa({}, b);\n                a = a.defaultProps;\n                for(var c in a)void 0 === b[c] && (b[c] = a[c]);\n            }\n            return b;\n        }\n        var sc = {\n            current: null\n        }, tc = null, uc = null, vc = null;\n        function wc() {\n            vc = uc = tc = null;\n        }\n        function xc(a, b) {\n            var c = a.type._context;\n            Pa ? (z(sc, c._currentValue), c._currentValue = b) : (z(sc, c._currentValue2), c._currentValue2 = b);\n        }\n        function yc(a) {\n            var b = sc.current;\n            y(sc);\n            a = a.type._context;\n            Pa ? a._currentValue = b : a._currentValue2 = b;\n        }\n        function zc(a, b) {\n            for(; null !== a;){\n                var c = a.alternate;\n                if (a.childExpirationTime < b) a.childExpirationTime = b, null !== c && c.childExpirationTime < b && (c.childExpirationTime = b);\n                else if (null !== c && c.childExpirationTime < b) c.childExpirationTime = b;\n                else break;\n                a = a.return;\n            }\n        }\n        function Ac(a, b) {\n            tc = a;\n            vc = uc = null;\n            a = a.dependencies;\n            null !== a && null !== a.firstContext && (a.expirationTime >= b && (Bc = !0), a.firstContext = null);\n        }\n        function Cc(a, b) {\n            if (vc !== a && !1 !== b && 0 !== b) {\n                if (\"number\" !== typeof b || 1073741823 === b) vc = a, b = 1073741823;\n                b = {\n                    context: a,\n                    observedBits: b,\n                    next: null\n                };\n                if (null === uc) {\n                    if (null === tc) throw Error(n(308));\n                    uc = b;\n                    tc.dependencies = {\n                        expirationTime: 0,\n                        firstContext: b,\n                        responders: null\n                    };\n                } else uc = uc.next = b;\n            }\n            return Pa ? a._currentValue : a._currentValue2;\n        }\n        var Dc = !1;\n        function Ec(a) {\n            return {\n                baseState: a,\n                firstUpdate: null,\n                lastUpdate: null,\n                firstCapturedUpdate: null,\n                lastCapturedUpdate: null,\n                firstEffect: null,\n                lastEffect: null,\n                firstCapturedEffect: null,\n                lastCapturedEffect: null\n            };\n        }\n        function Fc(a) {\n            return {\n                baseState: a.baseState,\n                firstUpdate: a.firstUpdate,\n                lastUpdate: a.lastUpdate,\n                firstCapturedUpdate: null,\n                lastCapturedUpdate: null,\n                firstEffect: null,\n                lastEffect: null,\n                firstCapturedEffect: null,\n                lastCapturedEffect: null\n            };\n        }\n        function Gc(a, b) {\n            return {\n                expirationTime: a,\n                suspenseConfig: b,\n                tag: 0,\n                payload: null,\n                callback: null,\n                next: null,\n                nextEffect: null\n            };\n        }\n        function Hc(a, b) {\n            null === a.lastUpdate ? a.firstUpdate = a.lastUpdate = b : (a.lastUpdate.next = b, a.lastUpdate = b);\n        }\n        function Ic(a, b) {\n            var c = a.alternate;\n            if (null === c) {\n                var d = a.updateQueue;\n                var e = null;\n                null === d && (d = a.updateQueue = Ec(a.memoizedState));\n            } else d = a.updateQueue, e = c.updateQueue, null === d ? null === e ? (d = a.updateQueue = Ec(a.memoizedState), e = c.updateQueue = Ec(c.memoizedState)) : d = a.updateQueue = Fc(e) : null === e && (e = c.updateQueue = Fc(d));\n            null === e || d === e ? Hc(d, b) : null === d.lastUpdate || null === e.lastUpdate ? (Hc(d, b), Hc(e, b)) : (Hc(d, b), e.lastUpdate = b);\n        }\n        function Jc(a, b) {\n            var c = a.updateQueue;\n            c = null === c ? a.updateQueue = Ec(a.memoizedState) : Kc(a, c);\n            null === c.lastCapturedUpdate ? c.firstCapturedUpdate = c.lastCapturedUpdate = b : (c.lastCapturedUpdate.next = b, c.lastCapturedUpdate = b);\n        }\n        function Kc(a, b) {\n            var c = a.alternate;\n            null !== c && b === c.updateQueue && (b = a.updateQueue = Fc(b));\n            return b;\n        }\n        function Lc(a, b, c, d, e, f) {\n            switch(c.tag){\n                case 1:\n                    return a = c.payload, \"function\" === typeof a ? a.call(f, d, e) : a;\n                case 3:\n                    a.effectTag = a.effectTag & -4097 | 64;\n                case 0:\n                    a = c.payload;\n                    e = \"function\" === typeof a ? a.call(f, d, e) : a;\n                    if (null === e || void 0 === e) break;\n                    return aa({}, d, e);\n                case 2:\n                    Dc = !0;\n            }\n            return d;\n        }\n        function Nc(a, b, c, d, e) {\n            Dc = !1;\n            b = Kc(a, b);\n            for(var f = b.baseState, g = null, l = 0, h = b.firstUpdate, k = f; null !== h;){\n                var p = h.expirationTime;\n                p < e ? (null === g && (g = h, f = k), l < p && (l = p)) : (Oc(p, h.suspenseConfig), k = Lc(a, b, h, k, c, d), null !== h.callback && (a.effectTag |= 32, h.nextEffect = null, null === b.lastEffect ? b.firstEffect = b.lastEffect = h : (b.lastEffect.nextEffect = h, b.lastEffect = h)));\n                h = h.next;\n            }\n            p = null;\n            for(h = b.firstCapturedUpdate; null !== h;){\n                var D = h.expirationTime;\n                D < e ? (null === p && (p = h, null === g && (f = k)), l < D && (l = D)) : (k = Lc(a, b, h, k, c, d), null !== h.callback && (a.effectTag |= 32, h.nextEffect = null, null === b.lastCapturedEffect ? b.firstCapturedEffect = b.lastCapturedEffect = h : (b.lastCapturedEffect.nextEffect = h, b.lastCapturedEffect = h)));\n                h = h.next;\n            }\n            null === g && (b.lastUpdate = null);\n            null === p ? b.lastCapturedUpdate = null : a.effectTag |= 32;\n            null === g && null === p && (f = k);\n            b.baseState = f;\n            b.firstUpdate = g;\n            b.firstCapturedUpdate = p;\n            Pc(l);\n            a.expirationTime = l;\n            a.memoizedState = k;\n        }\n        function Qc(a, b, c) {\n            null !== b.firstCapturedUpdate && (null !== b.lastUpdate && (b.lastUpdate.next = b.firstCapturedUpdate, b.lastUpdate = b.lastCapturedUpdate), b.firstCapturedUpdate = b.lastCapturedUpdate = null);\n            Rc(b.firstEffect, c);\n            b.firstEffect = b.lastEffect = null;\n            Rc(b.firstCapturedEffect, c);\n            b.firstCapturedEffect = b.lastCapturedEffect = null;\n        }\n        function Rc(a, b) {\n            for(; null !== a;){\n                var c = a.callback;\n                if (null !== c) {\n                    a.callback = null;\n                    var d = b;\n                    if (\"function\" !== typeof c) throw Error(n(191, c));\n                    c.call(d);\n                }\n                a = a.nextEffect;\n            }\n        }\n        var Sc = q.ReactCurrentBatchConfig, Tc = new ba.Component().refs;\n        function Uc(a, b, c, d) {\n            b = a.memoizedState;\n            c = c(d, b);\n            c = null === c || void 0 === c ? b : aa({}, b, c);\n            a.memoizedState = c;\n            d = a.updateQueue;\n            null !== d && 0 === a.expirationTime && (d.baseState = c);\n        }\n        var Xc = {\n            isMounted: function isMounted(a) {\n                return (a = a._reactInternalFiber) ? ua(a) === a : !1;\n            },\n            enqueueSetState: function enqueueSetState(a, b, c) {\n                a = a._reactInternalFiber;\n                var d = G(), e = Sc.suspense;\n                d = Vc(d, a, e);\n                e = Gc(d, e);\n                e.payload = b;\n                void 0 !== c && null !== c && (e.callback = c);\n                Ic(a, e);\n                Wc(a, d);\n            },\n            enqueueReplaceState: function enqueueReplaceState(a, b, c) {\n                a = a._reactInternalFiber;\n                var d = G(), e = Sc.suspense;\n                d = Vc(d, a, e);\n                e = Gc(d, e);\n                e.tag = 1;\n                e.payload = b;\n                void 0 !== c && null !== c && (e.callback = c);\n                Ic(a, e);\n                Wc(a, d);\n            },\n            enqueueForceUpdate: function enqueueForceUpdate(a, b) {\n                a = a._reactInternalFiber;\n                var c = G(), d = Sc.suspense;\n                c = Vc(c, a, d);\n                d = Gc(c, d);\n                d.tag = 2;\n                void 0 !== b && null !== b && (d.callback = b);\n                Ic(a, d);\n                Wc(a, c);\n            }\n        };\n        function Yc(a, b, c, d, e, f, g) {\n            a = a.stateNode;\n            return \"function\" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !qc(c, d) || !qc(e, f) : !0;\n        }\n        function Zc(a, b, c) {\n            var d = !1, e = Db;\n            var f = b.contextType;\n            \"object\" === typeof f && null !== f ? f = Cc(f) : (e = C(b) ? Eb : A.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Fb(a, e) : Db);\n            b = new b(c, f);\n            a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;\n            b.updater = Xc;\n            a.stateNode = b;\n            b._reactInternalFiber = a;\n            d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);\n            return b;\n        }\n        function $c(a, b, c, d) {\n            a = b.state;\n            \"function\" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);\n            \"function\" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);\n            b.state !== a && Xc.enqueueReplaceState(b, b.state, null);\n        }\n        function ad(a, b, c, d) {\n            var e = a.stateNode;\n            e.props = c;\n            e.state = a.memoizedState;\n            e.refs = Tc;\n            var f = b.contextType;\n            \"object\" === typeof f && null !== f ? e.context = Cc(f) : (f = C(b) ? Eb : A.current, e.context = Fb(a, f));\n            f = a.updateQueue;\n            null !== f && (Nc(a, f, c, e, d), e.state = a.memoizedState);\n            f = b.getDerivedStateFromProps;\n            \"function\" === typeof f && (Uc(a, b, f, c), e.state = a.memoizedState);\n            \"function\" === typeof b.getDerivedStateFromProps || \"function\" === typeof e.getSnapshotBeforeUpdate || \"function\" !== typeof e.UNSAFE_componentWillMount && \"function\" !== typeof e.componentWillMount || (b = e.state, \"function\" === typeof e.componentWillMount && e.componentWillMount(), \"function\" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Xc.enqueueReplaceState(e, e.state, null), f = a.updateQueue, null !== f && (Nc(a, f, c, e, d), e.state = a.memoizedState));\n            \"function\" === typeof e.componentDidMount && (a.effectTag |= 4);\n        }\n        var bd = Array.isArray;\n        function cd(a, b, c) {\n            a = c.ref;\n            if (null !== a && \"function\" !== typeof a && \"object\" !== typeof a) {\n                if (c._owner) {\n                    c = c._owner;\n                    if (c) {\n                        if (1 !== c.tag) throw Error(n(309));\n                        var d = c.stateNode;\n                    }\n                    if (!d) throw Error(n(147, a));\n                    var e = \"\" + a;\n                    if (null !== b && null !== b.ref && \"function\" === typeof b.ref && b.ref._stringRef === e) return b.ref;\n                    b = function b(_b) {\n                        var a = d.refs;\n                        a === Tc && (a = d.refs = {});\n                        null === _b ? delete a[e] : a[e] = _b;\n                    };\n                    b._stringRef = e;\n                    return b;\n                }\n                if (\"string\" !== typeof a) throw Error(n(284));\n                if (!c._owner) throw Error(n(290, a));\n            }\n            return a;\n        }\n        function dd(a, b) {\n            if (\"textarea\" !== a.type) throw Error(n(31, \"[object Object]\" === Object.prototype.toString.call(b) ? \"object with keys {\" + Object.keys(b).join(\", \") + \"}\" : b, \"\"));\n        }\n        function ed(a) {\n            function b(b, c) {\n                if (a) {\n                    var d = b.lastEffect;\n                    null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;\n                    c.nextEffect = null;\n                    c.effectTag = 8;\n                }\n            }\n            function c(c, d) {\n                if (!a) return null;\n                for(; null !== d;)b(c, d), d = d.sibling;\n                return null;\n            }\n            function d(b, a) {\n                for(b = new Map(); null !== a;)null !== a.key ? b.set(a.key, a) : b.set(a.index, a), a = a.sibling;\n                return b;\n            }\n            function e(b, a, c) {\n                b = fd(b, a);\n                b.index = 0;\n                b.sibling = null;\n                return b;\n            }\n            function f(b, c, d) {\n                b.index = d;\n                if (!a) return c;\n                d = b.alternate;\n                if (null !== d) return d = d.index, d < c ? (b.effectTag = 2, c) : d;\n                b.effectTag = 2;\n                return c;\n            }\n            function g(b) {\n                a && null === b.alternate && (b.effectTag = 2);\n                return b;\n            }\n            function l(b, a, c, d) {\n                if (null === a || 6 !== a.tag) return a = gd(c, b.mode, d), a.return = b, a;\n                a = e(a, c);\n                a.return = b;\n                return a;\n            }\n            function h(b, a, c, d) {\n                if (null !== a && a.elementType === c.type) return d = e(a, c.props), d.ref = cd(b, a, c), d.return = b, d;\n                d = hd(c.type, c.key, c.props, null, b.mode, d);\n                d.ref = cd(b, a, c);\n                d.return = b;\n                return d;\n            }\n            function k(b, a, c, d) {\n                if (null === a || 4 !== a.tag || a.stateNode.containerInfo !== c.containerInfo || a.stateNode.implementation !== c.implementation) return a = id(c, b.mode, d), a.return = b, a;\n                a = e(a, c.children || []);\n                a.return = b;\n                return a;\n            }\n            function p(b, a, c, d, f) {\n                if (null === a || 7 !== a.tag) return a = jd(c, b.mode, d, f), a.return = b, a;\n                a = e(a, c);\n                a.return = b;\n                return a;\n            }\n            function D(b, a, c) {\n                if (\"string\" === typeof a || \"number\" === typeof a) return a = gd(\"\" + a, b.mode, c), a.return = b, a;\n                if (\"object\" === typeof a && null !== a) {\n                    switch(a.$$typeof){\n                        case ca:\n                            return c = hd(a.type, a.key, a.props, null, b.mode, c), c.ref = cd(b, null, a), c.return = b, c;\n                        case da:\n                            return a = id(a, b.mode, c), a.return = b, a;\n                    }\n                    if (bd(a) || ra(a)) return a = jd(a, b.mode, c, null), a.return = b, a;\n                    dd(b, a);\n                }\n                return null;\n            }\n            function x(b, a, c, d) {\n                var e = null !== a ? a.key : null;\n                if (\"string\" === typeof c || \"number\" === typeof c) return null !== e ? null : l(b, a, \"\" + c, d);\n                if (\"object\" === typeof c && null !== c) {\n                    switch(c.$$typeof){\n                        case ca:\n                            return c.key === e ? c.type === ea ? p(b, a, c.props.children, d, e) : h(b, a, c, d) : null;\n                        case da:\n                            return c.key === e ? k(b, a, c, d) : null;\n                    }\n                    if (bd(c) || ra(c)) return null !== e ? null : p(b, a, c, d, null);\n                    dd(b, c);\n                }\n                return null;\n            }\n            function K(b, a, c, d, e) {\n                if (\"string\" === typeof d || \"number\" === typeof d) return b = b.get(c) || null, l(a, b, \"\" + d, e);\n                if (\"object\" === typeof d && null !== d) {\n                    switch(d.$$typeof){\n                        case ca:\n                            return b = b.get(null === d.key ? c : d.key) || null, d.type === ea ? p(a, b, d.props.children, e, d.key) : h(a, b, d, e);\n                        case da:\n                            return b = b.get(null === d.key ? c : d.key) || null, k(a, b, d, e);\n                    }\n                    if (bd(d) || ra(d)) return b = b.get(c) || null, p(a, b, d, e, null);\n                    dd(a, d);\n                }\n                return null;\n            }\n            function Ha(e, g, h, l) {\n                for(var k = null, w = null, t = g, r = g = 0, p = null; null !== t && r < h.length; r++){\n                    t.index > r ? (p = t, t = null) : p = t.sibling;\n                    var v = x(e, t, h[r], l);\n                    if (null === v) {\n                        null === t && (t = p);\n                        break;\n                    }\n                    a && t && null === v.alternate && b(e, t);\n                    g = f(v, g, r);\n                    null === w ? k = v : w.sibling = v;\n                    w = v;\n                    t = p;\n                }\n                if (r === h.length) return c(e, t), k;\n                if (null === t) {\n                    for(; r < h.length; r++)t = D(e, h[r], l), null !== t && (g = f(t, g, r), null === w ? k = t : w.sibling = t, w = t);\n                    return k;\n                }\n                for(t = d(e, t); r < h.length; r++)p = K(t, e, r, h[r], l), null !== p && (a && null !== p.alternate && t.delete(null === p.key ? r : p.key), g = f(p, g, r), null === w ? k = p : w.sibling = p, w = p);\n                a && t.forEach(function(a) {\n                    return b(e, a);\n                });\n                return k;\n            }\n            function O(e, g, h, l) {\n                var k = ra(h);\n                if (\"function\" !== typeof k) throw Error(n(150));\n                h = k.call(h);\n                if (null == h) throw Error(n(151));\n                for(var t = k = null, r = g, w = g = 0, p = null, v = h.next(); null !== r && !v.done; w++, v = h.next()){\n                    r.index > w ? (p = r, r = null) : p = r.sibling;\n                    var N = x(e, r, v.value, l);\n                    if (null === N) {\n                        null === r && (r = p);\n                        break;\n                    }\n                    a && r && null === N.alternate && b(e, r);\n                    g = f(N, g, w);\n                    null === t ? k = N : t.sibling = N;\n                    t = N;\n                    r = p;\n                }\n                if (v.done) return c(e, r), k;\n                if (null === r) {\n                    for(; !v.done; w++, v = h.next())v = D(e, v.value, l), null !== v && (g = f(v, g, w), null === t ? k = v : t.sibling = v, t = v);\n                    return k;\n                }\n                for(r = d(e, r); !v.done; w++, v = h.next())v = K(r, e, w, v.value, l), null !== v && (a && null !== v.alternate && r.delete(null === v.key ? w : v.key), g = f(v, g, w), null === t ? k = v : t.sibling = v, t = v);\n                a && r.forEach(function(a) {\n                    return b(e, a);\n                });\n                return k;\n            }\n            return function(a, d, f, h) {\n                var k = \"object\" === typeof f && null !== f && f.type === ea && null === f.key;\n                k && (f = f.props.children);\n                var l = \"object\" === typeof f && null !== f;\n                if (l) switch(f.$$typeof){\n                    case ca:\n                        a: {\n                            l = f.key;\n                            for(k = d; null !== k;){\n                                if (k.key === l) {\n                                    if (7 === k.tag ? f.type === ea : k.elementType === f.type) {\n                                        c(a, k.sibling);\n                                        d = e(k, f.type === ea ? f.props.children : f.props);\n                                        d.ref = cd(a, k, f);\n                                        d.return = a;\n                                        a = d;\n                                        break a;\n                                    } else {\n                                        c(a, k);\n                                        break;\n                                    }\n                                } else b(a, k);\n                                k = k.sibling;\n                            }\n                            f.type === ea ? (d = jd(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = hd(f.type, f.key, f.props, null, a.mode, h), h.ref = cd(a, d, f), h.return = a, a = h);\n                        }\n                        return g(a);\n                    case da:\n                        a: {\n                            for(k = f.key; null !== d;){\n                                if (d.key === k) {\n                                    if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {\n                                        c(a, d.sibling);\n                                        d = e(d, f.children || []);\n                                        d.return = a;\n                                        a = d;\n                                        break a;\n                                    } else {\n                                        c(a, d);\n                                        break;\n                                    }\n                                } else b(a, d);\n                                d = d.sibling;\n                            }\n                            d = id(f, a.mode, h);\n                            d.return = a;\n                            a = d;\n                        }\n                        return g(a);\n                }\n                if (\"string\" === typeof f || \"number\" === typeof f) return f = \"\" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = gd(f, a.mode, h), d.return = a, a = d), g(a);\n                if (bd(f)) return Ha(a, d, f, h);\n                if (ra(f)) return O(a, d, f, h);\n                l && dd(a, f);\n                if (\"undefined\" === typeof f && !k) switch(a.tag){\n                    case 1:\n                    case 0:\n                        throw a = a.type, Error(n(152, a.displayName || a.name || \"Component\"));\n                }\n                return c(a, d);\n            };\n        }\n        var kd = ed(!0), ld = ed(!1), md = {}, H = {\n            current: md\n        }, nd = {\n            current: md\n        }, od = {\n            current: md\n        };\n        function pd(a) {\n            if (a === md) throw Error(n(174));\n            return a;\n        }\n        function qd(a, b) {\n            z(od, b);\n            z(nd, a);\n            z(H, md);\n            b = Aa(b);\n            y(H);\n            z(H, b);\n        }\n        function rd(a) {\n            y(H);\n            y(nd);\n            y(od);\n        }\n        function sd(a) {\n            var b = pd(od.current), c = pd(H.current);\n            b = Ba(c, a.type, b);\n            c !== b && (z(nd, a), z(H, b));\n        }\n        function td(a) {\n            nd.current === a && (y(H), y(nd));\n        }\n        var I = {\n            current: 0\n        };\n        function ud(a) {\n            for(var b = a; null !== b;){\n                if (13 === b.tag) {\n                    var c = b.memoizedState;\n                    if (null !== c && (c = c.dehydrated, null === c || qb(c) || rb(c))) return b;\n                } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {\n                    if (0 !== (b.effectTag & 64)) return b;\n                } else if (null !== b.child) {\n                    b.child.return = b;\n                    b = b.child;\n                    continue;\n                }\n                if (b === a) break;\n                for(; null === b.sibling;){\n                    if (null === b.return || b.return === a) return null;\n                    b = b.return;\n                }\n                b.sibling.return = b.return;\n                b = b.sibling;\n            }\n            return null;\n        }\n        function vd(a, b) {\n            return {\n                responder: a,\n                props: b\n            };\n        }\n        var wd = q.ReactCurrentDispatcher, J = q.ReactCurrentBatchConfig, xd = 0, yd = null, L = null, zd = null, Ad = null, M = null, Bd = null, Cd = 0, Dd = null, Ed = 0, Fd = !1, Gd = null, Hd = 0;\n        function P() {\n            throw Error(n(321));\n        }\n        function Id(a, b) {\n            if (null === b) return !1;\n            for(var c = 0; c < b.length && c < a.length; c++)if (!oc(a[c], b[c])) return !1;\n            return !0;\n        }\n        function Jd(a, b, c, d, e, f) {\n            xd = f;\n            yd = b;\n            zd = null !== a ? a.memoizedState : null;\n            wd.current = null === zd ? Kd : Ld;\n            b = c(d, e);\n            if (Fd) {\n                do Fd = !1, Hd += 1, zd = null !== a ? a.memoizedState : null, Bd = Ad, Dd = M = L = null, wd.current = Ld, b = c(d, e);\n                while (Fd);\n                Gd = null;\n                Hd = 0;\n            }\n            wd.current = Md;\n            a = yd;\n            a.memoizedState = Ad;\n            a.expirationTime = Cd;\n            a.updateQueue = Dd;\n            a.effectTag |= Ed;\n            a = null !== L && null !== L.next;\n            xd = 0;\n            Bd = M = Ad = zd = L = yd = null;\n            Cd = 0;\n            Dd = null;\n            Ed = 0;\n            if (a) throw Error(n(300));\n            return b;\n        }\n        function Nd() {\n            wd.current = Md;\n            xd = 0;\n            Bd = M = Ad = zd = L = yd = null;\n            Cd = 0;\n            Dd = null;\n            Ed = 0;\n            Fd = !1;\n            Gd = null;\n            Hd = 0;\n        }\n        function Od() {\n            var a = {\n                memoizedState: null,\n                baseState: null,\n                queue: null,\n                baseUpdate: null,\n                next: null\n            };\n            null === M ? Ad = M = a : M = M.next = a;\n            return M;\n        }\n        function Pd() {\n            if (null !== Bd) M = Bd, Bd = M.next, L = zd, zd = null !== L ? L.next : null;\n            else {\n                if (null === zd) throw Error(n(310));\n                L = zd;\n                var a = {\n                    memoizedState: L.memoizedState,\n                    baseState: L.baseState,\n                    queue: L.queue,\n                    baseUpdate: L.baseUpdate,\n                    next: null\n                };\n                M = null === M ? Ad = a : M.next = a;\n                zd = L.next;\n            }\n            return M;\n        }\n        function Qd(a, b) {\n            return \"function\" === typeof b ? b(a) : b;\n        }\n        function Rd(a) {\n            var b = Pd(), c = b.queue;\n            if (null === c) throw Error(n(311));\n            c.lastRenderedReducer = a;\n            if (0 < Hd) {\n                var d = c.dispatch;\n                if (null !== Gd) {\n                    var e = Gd.get(c);\n                    if (void 0 !== e) {\n                        Gd.delete(c);\n                        var f = b.memoizedState;\n                        do f = a(f, e.action), e = e.next;\n                        while (null !== e);\n                        oc(f, b.memoizedState) || (Bc = !0);\n                        b.memoizedState = f;\n                        b.baseUpdate === c.last && (b.baseState = f);\n                        c.lastRenderedState = f;\n                        return [\n                            f,\n                            d\n                        ];\n                    }\n                }\n                return [\n                    b.memoizedState,\n                    d\n                ];\n            }\n            d = c.last;\n            var g = b.baseUpdate;\n            f = b.baseState;\n            null !== g ? (null !== d && (d.next = null), d = g.next) : d = null !== d ? d.next : null;\n            if (null !== d) {\n                var l = e = null, h = d, k = !1;\n                do {\n                    var p = h.expirationTime;\n                    p < xd ? (k || (k = !0, l = g, e = f), p > Cd && (Cd = p, Pc(Cd))) : (Oc(p, h.suspenseConfig), f = h.eagerReducer === a ? h.eagerState : a(f, h.action));\n                    g = h;\n                    h = h.next;\n                }while (null !== h && h !== d);\n                k || (l = g, e = f);\n                oc(f, b.memoizedState) || (Bc = !0);\n                b.memoizedState = f;\n                b.baseUpdate = l;\n                b.baseState = e;\n                c.lastRenderedState = f;\n            }\n            return [\n                b.memoizedState,\n                c.dispatch\n            ];\n        }\n        function Sd(a) {\n            var b = Od();\n            \"function\" === typeof a && (a = a());\n            b.memoizedState = b.baseState = a;\n            a = b.queue = {\n                last: null,\n                dispatch: null,\n                lastRenderedReducer: Qd,\n                lastRenderedState: a\n            };\n            a = a.dispatch = Td.bind(null, yd, a);\n            return [\n                b.memoizedState,\n                a\n            ];\n        }\n        function Ud(a) {\n            return Rd(Qd);\n        }\n        function Vd(a, b, c, d) {\n            a = {\n                tag: a,\n                create: b,\n                destroy: c,\n                deps: d,\n                next: null\n            };\n            null === Dd ? (Dd = {\n                lastEffect: null\n            }, Dd.lastEffect = a.next = a) : (b = Dd.lastEffect, null === b ? Dd.lastEffect = a.next = a : (c = b.next, b.next = a, a.next = c, Dd.lastEffect = a));\n            return a;\n        }\n        function Wd(a, b, c, d) {\n            var e = Od();\n            Ed |= a;\n            e.memoizedState = Vd(b, c, void 0, void 0 === d ? null : d);\n        }\n        function Xd(a, b, c, d) {\n            var e = Pd();\n            d = void 0 === d ? null : d;\n            var f = void 0;\n            if (null !== L) {\n                var g = L.memoizedState;\n                f = g.destroy;\n                if (null !== d && Id(d, g.deps)) {\n                    Vd(0, c, f, d);\n                    return;\n                }\n            }\n            Ed |= a;\n            e.memoizedState = Vd(b, c, f, d);\n        }\n        function Yd(a, b) {\n            return Wd(516, 192, a, b);\n        }\n        function Zd(a, b) {\n            return Xd(516, 192, a, b);\n        }\n        function $d(a, b) {\n            if (\"function\" === typeof b) return a = a(), b(a), function() {\n                b(null);\n            };\n            if (null !== b && void 0 !== b) return a = a(), b.current = a, function() {\n                b.current = null;\n            };\n        }\n        function ae() {}\n        function be(a, b) {\n            Od().memoizedState = [\n                a,\n                void 0 === b ? null : b\n            ];\n            return a;\n        }\n        function ce(a, b) {\n            var c = Pd();\n            b = void 0 === b ? null : b;\n            var d = c.memoizedState;\n            if (null !== d && null !== b && Id(b, d[1])) return d[0];\n            c.memoizedState = [\n                a,\n                b\n            ];\n            return a;\n        }\n        function Td(a, b, c) {\n            if (!(25 > Hd)) throw Error(n(301));\n            var d = a.alternate;\n            if (a === yd || null !== d && d === yd) {\n                if (Fd = !0, a = {\n                    expirationTime: xd,\n                    suspenseConfig: null,\n                    action: c,\n                    eagerReducer: null,\n                    eagerState: null,\n                    next: null\n                }, null === Gd && (Gd = new Map()), c = Gd.get(b), void 0 === c) Gd.set(b, a);\n                else {\n                    for(b = c; null !== b.next;)b = b.next;\n                    b.next = a;\n                }\n            } else {\n                var e = G(), f = Sc.suspense;\n                e = Vc(e, a, f);\n                f = {\n                    expirationTime: e,\n                    suspenseConfig: f,\n                    action: c,\n                    eagerReducer: null,\n                    eagerState: null,\n                    next: null\n                };\n                var g = b.last;\n                if (null === g) f.next = f;\n                else {\n                    var l = g.next;\n                    null !== l && (f.next = l);\n                    g.next = f;\n                }\n                b.last = f;\n                if (0 === a.expirationTime && (null === d || 0 === d.expirationTime) && (d = b.lastRenderedReducer, null !== d)) try {\n                    var h = b.lastRenderedState, k = d(h, c);\n                    f.eagerReducer = d;\n                    f.eagerState = k;\n                    if (oc(k, h)) return;\n                } catch (p) {} finally{}\n                Wc(a, e);\n            }\n        }\n        var Md = {\n            readContext: Cc,\n            useCallback: P,\n            useContext: P,\n            useEffect: P,\n            useImperativeHandle: P,\n            useLayoutEffect: P,\n            useMemo: P,\n            useReducer: P,\n            useRef: P,\n            useState: P,\n            useDebugValue: P,\n            useResponder: P,\n            useDeferredValue: P,\n            useTransition: P\n        }, Kd = {\n            readContext: Cc,\n            useCallback: be,\n            useContext: Cc,\n            useEffect: Yd,\n            useImperativeHandle: function useImperativeHandle(a, b, c) {\n                c = null !== c && void 0 !== c ? c.concat([\n                    a\n                ]) : null;\n                return Wd(4, 36, $d.bind(null, b, a), c);\n            },\n            useLayoutEffect: function useLayoutEffect(a, b) {\n                return Wd(4, 36, a, b);\n            },\n            useMemo: function useMemo(a, b) {\n                var c = Od();\n                b = void 0 === b ? null : b;\n                a = a();\n                c.memoizedState = [\n                    a,\n                    b\n                ];\n                return a;\n            },\n            useReducer: function useReducer(a, b, c) {\n                var d = Od();\n                b = void 0 !== c ? c(b) : b;\n                d.memoizedState = d.baseState = b;\n                a = d.queue = {\n                    last: null,\n                    dispatch: null,\n                    lastRenderedReducer: a,\n                    lastRenderedState: b\n                };\n                a = a.dispatch = Td.bind(null, yd, a);\n                return [\n                    d.memoizedState,\n                    a\n                ];\n            },\n            useRef: function useRef(a) {\n                var b = Od();\n                a = {\n                    current: a\n                };\n                return b.memoizedState = a;\n            },\n            useState: Sd,\n            useDebugValue: ae,\n            useResponder: vd,\n            useDeferredValue: function useDeferredValue(a, b) {\n                var c = Sd(a), d = c[0], e = c[1];\n                Yd(function() {\n                    m.unstable_next(function() {\n                        var c = J.suspense;\n                        J.suspense = void 0 === b ? null : b;\n                        try {\n                            e(a);\n                        } finally{\n                            J.suspense = c;\n                        }\n                    });\n                }, [\n                    a,\n                    b\n                ]);\n                return d;\n            },\n            useTransition: function useTransition(a) {\n                var b = Sd(!1), c = b[0], d = b[1];\n                return [\n                    be(function(b) {\n                        d(!0);\n                        m.unstable_next(function() {\n                            var c = J.suspense;\n                            J.suspense = void 0 === a ? null : a;\n                            try {\n                                d(!1), b();\n                            } finally{\n                                J.suspense = c;\n                            }\n                        });\n                    }, [\n                        a,\n                        c\n                    ]),\n                    c\n                ];\n            }\n        }, Ld = {\n            readContext: Cc,\n            useCallback: ce,\n            useContext: Cc,\n            useEffect: Zd,\n            useImperativeHandle: function useImperativeHandle(a, b, c) {\n                c = null !== c && void 0 !== c ? c.concat([\n                    a\n                ]) : null;\n                return Xd(4, 36, $d.bind(null, b, a), c);\n            },\n            useLayoutEffect: function useLayoutEffect(a, b) {\n                return Xd(4, 36, a, b);\n            },\n            useMemo: function useMemo(a, b) {\n                var c = Pd();\n                b = void 0 === b ? null : b;\n                var d = c.memoizedState;\n                if (null !== d && null !== b && Id(b, d[1])) return d[0];\n                a = a();\n                c.memoizedState = [\n                    a,\n                    b\n                ];\n                return a;\n            },\n            useReducer: Rd,\n            useRef: function useRef() {\n                return Pd().memoizedState;\n            },\n            useState: Ud,\n            useDebugValue: ae,\n            useResponder: vd,\n            useDeferredValue: function useDeferredValue(a, b) {\n                var c = Ud(), d = c[0], e = c[1];\n                Zd(function() {\n                    m.unstable_next(function() {\n                        var c = J.suspense;\n                        J.suspense = void 0 === b ? null : b;\n                        try {\n                            e(a);\n                        } finally{\n                            J.suspense = c;\n                        }\n                    });\n                }, [\n                    a,\n                    b\n                ]);\n                return d;\n            },\n            useTransition: function useTransition(a) {\n                var b = Ud(), c = b[0], d = b[1];\n                return [\n                    ce(function(b) {\n                        d(!0);\n                        m.unstable_next(function() {\n                            var c = J.suspense;\n                            J.suspense = void 0 === a ? null : a;\n                            try {\n                                d(!1), b();\n                            } finally{\n                                J.suspense = c;\n                            }\n                        });\n                    }, [\n                        a,\n                        c\n                    ]),\n                    c\n                ];\n            }\n        }, de = null, ee = null, fe = !1;\n        function ge(a, b) {\n            var c = he(5, null, null, 0);\n            c.elementType = \"DELETED\";\n            c.type = \"DELETED\";\n            c.stateNode = b;\n            c.return = a;\n            c.effectTag = 8;\n            null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;\n        }\n        function ie(a, b) {\n            switch(a.tag){\n                case 5:\n                    return b = ob(b, a.type, a.pendingProps), null !== b ? (a.stateNode = b, !0) : !1;\n                case 6:\n                    return b = pb(b, a.pendingProps), null !== b ? (a.stateNode = b, !0) : !1;\n                case 13:\n                    return !1;\n                default:\n                    return !1;\n            }\n        }\n        function je(a) {\n            if (fe) {\n                var b = ee;\n                if (b) {\n                    var c = b;\n                    if (!ie(a, b)) {\n                        b = sb(c);\n                        if (!b || !ie(a, b)) {\n                            a.effectTag = a.effectTag & -1025 | 2;\n                            fe = !1;\n                            de = a;\n                            return;\n                        }\n                        ge(de, c);\n                    }\n                    de = a;\n                    ee = tb(b);\n                } else a.effectTag = a.effectTag & -1025 | 2, fe = !1, de = a;\n            }\n        }\n        function ke(a) {\n            for(a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;)a = a.return;\n            de = a;\n        }\n        function ne(a) {\n            if (!Sa || a !== de) return !1;\n            if (!fe) return ke(a), fe = !0, !1;\n            var b = a.type;\n            if (5 !== a.tag || \"head\" !== b && \"body\" !== b && !Ja(b, a.memoizedProps)) for(b = ee; b;)ge(a, b), b = sb(b);\n            ke(a);\n            if (13 === a.tag) {\n                if (!Sa) throw Error(n(316));\n                a = a.memoizedState;\n                a = null !== a ? a.dehydrated : null;\n                if (!a) throw Error(n(317));\n                ee = wb(a);\n            } else ee = de ? sb(a.stateNode) : null;\n            return !0;\n        }\n        function oe() {\n            Sa && (ee = de = null, fe = !1);\n        }\n        var pe = q.ReactCurrentOwner, Bc = !1;\n        function Q(a, b, c, d) {\n            b.child = null === a ? ld(b, null, c, d) : kd(b, a.child, c, d);\n        }\n        function qe(a, b, c, d, e) {\n            c = c.render;\n            var f = b.ref;\n            Ac(b, e);\n            d = Jd(a, b, c, d, f, e);\n            if (null !== a && !Bc) return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), re(a, b, e);\n            b.effectTag |= 1;\n            Q(a, b, d, e);\n            return b.child;\n        }\n        function se(a, b, c, d, e, f) {\n            if (null === a) {\n                var g = c.type;\n                if (\"function\" === typeof g && !te(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, ue(a, b, g, d, e, f);\n                a = hd(c.type, null, d, null, b.mode, f);\n                a.ref = b.ref;\n                a.return = b;\n                return b.child = a;\n            }\n            g = a.child;\n            if (e < f && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : qc, c(e, d) && a.ref === b.ref)) return re(a, b, f);\n            b.effectTag |= 1;\n            a = fd(g, d);\n            a.ref = b.ref;\n            a.return = b;\n            return b.child = a;\n        }\n        function ue(a, b, c, d, e, f) {\n            return null !== a && qc(a.memoizedProps, d) && a.ref === b.ref && (Bc = !1, e < f) ? re(a, b, f) : ve(a, b, c, d, f);\n        }\n        function we(a, b) {\n            var c = b.ref;\n            if (null === a && null !== c || null !== a && a.ref !== c) b.effectTag |= 128;\n        }\n        function ve(a, b, c, d, e) {\n            var f = C(c) ? Eb : A.current;\n            f = Fb(b, f);\n            Ac(b, e);\n            c = Jd(a, b, c, d, f, e);\n            if (null !== a && !Bc) return b.updateQueue = a.updateQueue, b.effectTag &= -517, a.expirationTime <= e && (a.expirationTime = 0), re(a, b, e);\n            b.effectTag |= 1;\n            Q(a, b, c, e);\n            return b.child;\n        }\n        function xe(a, b, c, d, e) {\n            if (C(c)) {\n                var f = !0;\n                Kb(b);\n            } else f = !1;\n            Ac(b, e);\n            if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), Zc(b, c, d), ad(b, c, d, e), d = !0;\n            else if (null === a) {\n                var g = b.stateNode, l = b.memoizedProps;\n                g.props = l;\n                var h = g.context, k = c.contextType;\n                \"object\" === typeof k && null !== k ? k = Cc(k) : (k = C(c) ? Eb : A.current, k = Fb(b, k));\n                var p = c.getDerivedStateFromProps, D = \"function\" === typeof p || \"function\" === typeof g.getSnapshotBeforeUpdate;\n                D || \"function\" !== typeof g.UNSAFE_componentWillReceiveProps && \"function\" !== typeof g.componentWillReceiveProps || (l !== d || h !== k) && $c(b, g, d, k);\n                Dc = !1;\n                var x = b.memoizedState;\n                h = g.state = x;\n                var K = b.updateQueue;\n                null !== K && (Nc(b, K, d, g, e), h = b.memoizedState);\n                l !== d || x !== h || B.current || Dc ? (\"function\" === typeof p && (Uc(b, c, p, d), h = b.memoizedState), (l = Dc || Yc(b, c, l, d, x, h, k)) ? (D || \"function\" !== typeof g.UNSAFE_componentWillMount && \"function\" !== typeof g.componentWillMount || (\"function\" === typeof g.componentWillMount && g.componentWillMount(), \"function\" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), \"function\" === typeof g.componentDidMount && (b.effectTag |= 4)) : (\"function\" === typeof g.componentDidMount && (b.effectTag |= 4), b.memoizedProps = d, b.memoizedState = h), g.props = d, g.state = h, g.context = k, d = l) : (\"function\" === typeof g.componentDidMount && (b.effectTag |= 4), d = !1);\n            } else g = b.stateNode, l = b.memoizedProps, g.props = b.type === b.elementType ? l : rc(b.type, l), h = g.context, k = c.contextType, \"object\" === typeof k && null !== k ? k = Cc(k) : (k = C(c) ? Eb : A.current, k = Fb(b, k)), p = c.getDerivedStateFromProps, (D = \"function\" === typeof p || \"function\" === typeof g.getSnapshotBeforeUpdate) || \"function\" !== typeof g.UNSAFE_componentWillReceiveProps && \"function\" !== typeof g.componentWillReceiveProps || (l !== d || h !== k) && $c(b, g, d, k), Dc = !1, h = b.memoizedState, x = g.state = h, K = b.updateQueue, null !== K && (Nc(b, K, d, g, e), x = b.memoizedState), l !== d || h !== x || B.current || Dc ? (\"function\" === typeof p && (Uc(b, c, p, d), x = b.memoizedState), (p = Dc || Yc(b, c, l, d, h, x, k)) ? (D || \"function\" !== typeof g.UNSAFE_componentWillUpdate && \"function\" !== typeof g.componentWillUpdate || (\"function\" === typeof g.componentWillUpdate && g.componentWillUpdate(d, x, k), \"function\" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, x, k)), \"function\" === typeof g.componentDidUpdate && (b.effectTag |= 4), \"function\" === typeof g.getSnapshotBeforeUpdate && (b.effectTag |= 256)) : (\"function\" !== typeof g.componentDidUpdate || l === a.memoizedProps && h === a.memoizedState || (b.effectTag |= 4), \"function\" !== typeof g.getSnapshotBeforeUpdate || l === a.memoizedProps && h === a.memoizedState || (b.effectTag |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = k, d = p) : (\"function\" !== typeof g.componentDidUpdate || l === a.memoizedProps && h === a.memoizedState || (b.effectTag |= 4), \"function\" !== typeof g.getSnapshotBeforeUpdate || l === a.memoizedProps && h === a.memoizedState || (b.effectTag |= 256), d = !1);\n            return ye(a, b, c, d, f, e);\n        }\n        function ye(a, b, c, d, e, f) {\n            we(a, b);\n            var g = 0 !== (b.effectTag & 64);\n            if (!d && !g) return e && Lb(b, c, !1), re(a, b, f);\n            d = b.stateNode;\n            pe.current = b;\n            var l = g && \"function\" !== typeof c.getDerivedStateFromError ? null : d.render();\n            b.effectTag |= 1;\n            null !== a && g ? (b.child = kd(b, a.child, null, f), b.child = kd(b, null, l, f)) : Q(a, b, l, f);\n            b.memoizedState = d.state;\n            e && Lb(b, c, !0);\n            return b.child;\n        }\n        function ze(a) {\n            var b = a.stateNode;\n            b.pendingContext ? Ib(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Ib(a, b.context, !1);\n            qd(a, b.containerInfo);\n        }\n        var Ae = {\n            dehydrated: null,\n            retryTime: 0\n        };\n        function Be(a, b, c) {\n            var d = b.mode, e = b.pendingProps, f = I.current, g = !1, l;\n            (l = 0 !== (b.effectTag & 64)) || (l = 0 !== (f & 2) && (null === a || null !== a.memoizedState));\n            l ? (g = !0, b.effectTag &= -65) : null !== a && null === a.memoizedState || void 0 === e.fallback || !0 === e.unstable_avoidThisFallback || (f |= 1);\n            z(I, f & 1);\n            if (null === a) {\n                void 0 !== e.fallback && je(b);\n                if (g) {\n                    g = e.fallback;\n                    e = jd(null, d, 0, null);\n                    e.return = b;\n                    if (0 === (b.mode & 2)) for(a = null !== b.memoizedState ? b.child.child : b.child, e.child = a; null !== a;)a.return = e, a = a.sibling;\n                    c = jd(g, d, c, null);\n                    c.return = b;\n                    e.sibling = c;\n                    b.memoizedState = Ae;\n                    b.child = e;\n                    return c;\n                }\n                d = e.children;\n                b.memoizedState = null;\n                return b.child = ld(b, null, d, c);\n            }\n            if (null !== a.memoizedState) {\n                a = a.child;\n                d = a.sibling;\n                if (g) {\n                    e = e.fallback;\n                    c = fd(a, a.pendingProps);\n                    c.return = b;\n                    if (0 === (b.mode & 2) && (g = null !== b.memoizedState ? b.child.child : b.child, g !== a.child)) for(c.child = g; null !== g;)g.return = c, g = g.sibling;\n                    d = fd(d, e, d.expirationTime);\n                    d.return = b;\n                    c.sibling = d;\n                    c.childExpirationTime = 0;\n                    b.memoizedState = Ae;\n                    b.child = c;\n                    return d;\n                }\n                c = kd(b, a.child, e.children, c);\n                b.memoizedState = null;\n                return b.child = c;\n            }\n            a = a.child;\n            if (g) {\n                g = e.fallback;\n                e = jd(null, d, 0, null);\n                e.return = b;\n                e.child = a;\n                null !== a && (a.return = e);\n                if (0 === (b.mode & 2)) for(a = null !== b.memoizedState ? b.child.child : b.child, e.child = a; null !== a;)a.return = e, a = a.sibling;\n                c = jd(g, d, c, null);\n                c.return = b;\n                e.sibling = c;\n                c.effectTag |= 2;\n                e.childExpirationTime = 0;\n                b.memoizedState = Ae;\n                b.child = e;\n                return c;\n            }\n            b.memoizedState = null;\n            return b.child = kd(b, a, e.children, c);\n        }\n        function Ce(a, b) {\n            a.expirationTime < b && (a.expirationTime = b);\n            var c = a.alternate;\n            null !== c && c.expirationTime < b && (c.expirationTime = b);\n            zc(a.return, b);\n        }\n        function De(a, b, c, d, e, f) {\n            var g = a.memoizedState;\n            null === g ? a.memoizedState = {\n                isBackwards: b,\n                rendering: null,\n                last: d,\n                tail: c,\n                tailExpiration: 0,\n                tailMode: e,\n                lastEffect: f\n            } : (g.isBackwards = b, g.rendering = null, g.last = d, g.tail = c, g.tailExpiration = 0, g.tailMode = e, g.lastEffect = f);\n        }\n        function Ee(a, b, c) {\n            var d = b.pendingProps, e = d.revealOrder, f = d.tail;\n            Q(a, b, d.children, c);\n            d = I.current;\n            if (0 !== (d & 2)) d = d & 1 | 2, b.effectTag |= 64;\n            else {\n                if (null !== a && 0 !== (a.effectTag & 64)) a: for(a = b.child; null !== a;){\n                    if (13 === a.tag) null !== a.memoizedState && Ce(a, c);\n                    else if (19 === a.tag) Ce(a, c);\n                    else if (null !== a.child) {\n                        a.child.return = a;\n                        a = a.child;\n                        continue;\n                    }\n                    if (a === b) break a;\n                    for(; null === a.sibling;){\n                        if (null === a.return || a.return === b) break a;\n                        a = a.return;\n                    }\n                    a.sibling.return = a.return;\n                    a = a.sibling;\n                }\n                d &= 1;\n            }\n            z(I, d);\n            if (0 === (b.mode & 2)) b.memoizedState = null;\n            else switch(e){\n                case \"forwards\":\n                    c = b.child;\n                    for(e = null; null !== c;)a = c.alternate, null !== a && null === ud(a) && (e = c), c = c.sibling;\n                    c = e;\n                    null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);\n                    De(b, !1, e, c, f, b.lastEffect);\n                    break;\n                case \"backwards\":\n                    c = null;\n                    e = b.child;\n                    for(b.child = null; null !== e;){\n                        a = e.alternate;\n                        if (null !== a && null === ud(a)) {\n                            b.child = e;\n                            break;\n                        }\n                        a = e.sibling;\n                        e.sibling = c;\n                        c = e;\n                        e = a;\n                    }\n                    De(b, !0, c, null, f, b.lastEffect);\n                    break;\n                case \"together\":\n                    De(b, !1, null, null, void 0, b.lastEffect);\n                    break;\n                default:\n                    b.memoizedState = null;\n            }\n            return b.child;\n        }\n        function re(a, b, c) {\n            null !== a && (b.dependencies = a.dependencies);\n            var d = b.expirationTime;\n            0 !== d && Pc(d);\n            if (b.childExpirationTime < c) return null;\n            if (null !== a && b.child !== a.child) throw Error(n(153));\n            if (null !== b.child) {\n                a = b.child;\n                c = fd(a, a.pendingProps, a.expirationTime);\n                b.child = c;\n                for(c.return = b; null !== a.sibling;)a = a.sibling, c = c.sibling = fd(a, a.pendingProps, a.expirationTime), c.return = b;\n                c.sibling = null;\n            }\n            return b.child;\n        }\n        function Fe(a) {\n            a.effectTag |= 4;\n        }\n        var _Ge, He, Ie, Je;\n        if (Qa) _Ge = function Ge(a, b) {\n            for(var c = b.child; null !== c;){\n                if (5 === c.tag || 6 === c.tag) Fa(a, c.stateNode);\n                else if (4 !== c.tag && null !== c.child) {\n                    c.child.return = c;\n                    c = c.child;\n                    continue;\n                }\n                if (c === b) break;\n                for(; null === c.sibling;){\n                    if (null === c.return || c.return === b) return;\n                    c = c.return;\n                }\n                c.sibling.return = c.return;\n                c = c.sibling;\n            }\n        }, He = function He() {}, Ie = function Ie(a, b, c, d, e) {\n            a = a.memoizedProps;\n            if (a !== d) {\n                var f = b.stateNode, g = pd(H.current);\n                c = Ia(f, c, a, d, e, g);\n                (b.updateQueue = c) && Fe(b);\n            }\n        }, Je = function Je(a, b, c, d) {\n            c !== d && Fe(b);\n        };\n        else if (Ra) {\n            _Ge = function Ge(a, b, c, d) {\n                for(var e = b.child; null !== e;){\n                    if (5 === e.tag) {\n                        var f = e.stateNode;\n                        c && d && (f = mb(f, e.type, e.memoizedProps, e));\n                        Fa(a, f);\n                    } else if (6 === e.tag) f = e.stateNode, c && d && (f = nb(f, e.memoizedProps, e)), Fa(a, f);\n                    else if (4 !== e.tag) {\n                        if (13 === e.tag && 0 !== (e.effectTag & 4) && (f = null !== e.memoizedState)) {\n                            var g = e.child;\n                            if (null !== g && (null !== g.child && (g.child.return = g, _Ge(a, g, !0, f)), f = g.sibling, null !== f)) {\n                                f.return = e;\n                                e = f;\n                                continue;\n                            }\n                        }\n                        if (null !== e.child) {\n                            e.child.return = e;\n                            e = e.child;\n                            continue;\n                        }\n                    }\n                    if (e === b) break;\n                    for(; null === e.sibling;){\n                        if (null === e.return || e.return === b) return;\n                        e = e.return;\n                    }\n                    e.sibling.return = e.return;\n                    e = e.sibling;\n                }\n            };\n            var Ke = function Ke(a, b, c, d) {\n                for(var e = b.child; null !== e;){\n                    if (5 === e.tag) {\n                        var f = e.stateNode;\n                        c && d && (f = mb(f, e.type, e.memoizedProps, e));\n                        ib(a, f);\n                    } else if (6 === e.tag) f = e.stateNode, c && d && (f = nb(f, e.memoizedProps, e)), ib(a, f);\n                    else if (4 !== e.tag) {\n                        if (13 === e.tag && 0 !== (e.effectTag & 4) && (f = null !== e.memoizedState)) {\n                            var g = e.child;\n                            if (null !== g && (null !== g.child && (g.child.return = g, Ke(a, g, !0, f)), f = g.sibling, null !== f)) {\n                                f.return = e;\n                                e = f;\n                                continue;\n                            }\n                        }\n                        if (null !== e.child) {\n                            e.child.return = e;\n                            e = e.child;\n                            continue;\n                        }\n                    }\n                    if (e === b) break;\n                    for(; null === e.sibling;){\n                        if (null === e.return || e.return === b) return;\n                        e = e.return;\n                    }\n                    e.sibling.return = e.return;\n                    e = e.sibling;\n                }\n            };\n            He = function He(a) {\n                var b = a.stateNode;\n                if (null !== a.firstEffect) {\n                    var c = b.containerInfo, d = hb(c);\n                    Ke(d, a, !1, !1);\n                    b.pendingChildren = d;\n                    Fe(a);\n                    kb(c, d);\n                }\n            };\n            Ie = function Ie(a, b, c, d, e) {\n                var f = a.stateNode, g = a.memoizedProps;\n                if ((a = null === b.firstEffect) && g === d) b.stateNode = f;\n                else {\n                    var l = b.stateNode, h = pd(H.current), k = null;\n                    g !== d && (k = Ia(l, c, g, d, e, h));\n                    a && null === k ? b.stateNode = f : (f = gb(f, k, c, g, d, b, a, l), Ga(f, c, d, e, h) && Fe(b), b.stateNode = f, a ? Fe(b) : _Ge(f, b, !1, !1));\n                }\n            };\n            Je = function Je(a, b, c, d) {\n                c !== d && (a = pd(od.current), c = pd(H.current), b.stateNode = La(d, a, c, b), Fe(b));\n            };\n        } else He = function He() {}, Ie = function Ie() {}, Je = function Je() {};\n        function Le(a, b) {\n            switch(a.tailMode){\n                case \"hidden\":\n                    b = a.tail;\n                    for(var c = null; null !== b;)null !== b.alternate && (c = b), b = b.sibling;\n                    null === c ? a.tail = null : c.sibling = null;\n                    break;\n                case \"collapsed\":\n                    c = a.tail;\n                    for(var d = null; null !== c;)null !== c.alternate && (d = c), c = c.sibling;\n                    null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;\n            }\n        }\n        function Me(a) {\n            switch(a.tag){\n                case 1:\n                    C(a.type) && Gb();\n                    var b = a.effectTag;\n                    return b & 4096 ? (a.effectTag = b & -4097 | 64, a) : null;\n                case 3:\n                    rd();\n                    Hb();\n                    b = a.effectTag;\n                    if (0 !== (b & 64)) throw Error(n(285));\n                    a.effectTag = b & -4097 | 64;\n                    return a;\n                case 5:\n                    return td(a), null;\n                case 13:\n                    return y(I), b = a.effectTag, b & 4096 ? (a.effectTag = b & -4097 | 64, a) : null;\n                case 19:\n                    return y(I), null;\n                case 4:\n                    return rd(), null;\n                case 10:\n                    return yc(a), null;\n                default:\n                    return null;\n            }\n        }\n        function Ne(a, b) {\n            return {\n                value: a,\n                source: b,\n                stack: Ab(b)\n            };\n        }\n        var Oe = \"function\" === typeof WeakSet ? WeakSet : Set;\n        function Pe(a, b) {\n            var c = b.source, d = b.stack;\n            null === d && null !== c && (d = Ab(c));\n            null !== c && ta(c.type);\n            b = b.value;\n            null !== a && 1 === a.tag && ta(a.type);\n            try {\n                console.error(b);\n            } catch (e) {\n                setTimeout(function() {\n                    throw e;\n                });\n            }\n        }\n        function Qe(a, b) {\n            try {\n                b.props = a.memoizedProps, b.state = a.memoizedState, b.componentWillUnmount();\n            } catch (c) {\n                Re(a, c);\n            }\n        }\n        function Se(a) {\n            var b = a.ref;\n            if (null !== b) if (\"function\" === typeof b) try {\n                b(null);\n            } catch (c) {\n                Re(a, c);\n            }\n            else b.current = null;\n        }\n        function Te(a, b) {\n            switch(b.tag){\n                case 0:\n                case 11:\n                case 15:\n                    Ue(2, 0, b);\n                    break;\n                case 1:\n                    if (b.effectTag & 256 && null !== a) {\n                        var c = a.memoizedProps, d = a.memoizedState;\n                        a = b.stateNode;\n                        b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : rc(b.type, c), d);\n                        a.__reactInternalSnapshotBeforeUpdate = b;\n                    }\n                    break;\n                case 3:\n                case 5:\n                case 6:\n                case 4:\n                case 17:\n                    break;\n                default:\n                    throw Error(n(163));\n            }\n        }\n        function Ue(a, b, c) {\n            c = c.updateQueue;\n            c = null !== c ? c.lastEffect : null;\n            if (null !== c) {\n                var d = c = c.next;\n                do {\n                    if (0 !== (d.tag & a)) {\n                        var e = d.destroy;\n                        d.destroy = void 0;\n                        void 0 !== e && e();\n                    }\n                    0 !== (d.tag & b) && (e = d.create, d.destroy = e());\n                    d = d.next;\n                }while (d !== c);\n            }\n        }\n        function Ve(a, b, c) {\n            \"function\" === typeof We && We(b);\n            switch(b.tag){\n                case 0:\n                case 11:\n                case 14:\n                case 15:\n                    a = b.updateQueue;\n                    if (null !== a && (a = a.lastEffect, null !== a)) {\n                        var d = a.next;\n                        hc(97 < c ? 97 : c, function() {\n                            var a = d;\n                            do {\n                                var c = a.destroy;\n                                if (void 0 !== c) {\n                                    var g = b;\n                                    try {\n                                        c();\n                                    } catch (l) {\n                                        Re(g, l);\n                                    }\n                                }\n                                a = a.next;\n                            }while (a !== d);\n                        });\n                    }\n                    break;\n                case 1:\n                    Se(b);\n                    c = b.stateNode;\n                    \"function\" === typeof c.componentWillUnmount && Qe(b, c);\n                    break;\n                case 5:\n                    Se(b);\n                    break;\n                case 4:\n                    Qa ? Xe(a, b, c) : Ra && Ye(b);\n            }\n        }\n        function Ze(a, b, c) {\n            for(var d = b;;)if (Ve(a, d, c), null === d.child || Qa && 4 === d.tag) {\n                if (d === b) break;\n                for(; null === d.sibling;){\n                    if (null === d.return || d.return === b) return;\n                    d = d.return;\n                }\n                d.sibling.return = d.return;\n                d = d.sibling;\n            } else d.child.return = d, d = d.child;\n        }\n        function $e(a) {\n            var b = a.alternate;\n            a.return = null;\n            a.child = null;\n            a.memoizedState = null;\n            a.updateQueue = null;\n            a.dependencies = null;\n            a.alternate = null;\n            a.firstEffect = null;\n            a.lastEffect = null;\n            a.pendingProps = null;\n            a.memoizedProps = null;\n            null !== b && $e(b);\n        }\n        function Ye(a) {\n            if (Ra) {\n                a = a.stateNode.containerInfo;\n                var b = hb(a);\n                lb(a, b);\n            }\n        }\n        function af(a) {\n            return 5 === a.tag || 3 === a.tag || 4 === a.tag;\n        }\n        function bf(a) {\n            if (Qa) {\n                a: {\n                    for(var b = a.return; null !== b;){\n                        if (af(b)) {\n                            var c = b;\n                            break a;\n                        }\n                        b = b.return;\n                    }\n                    throw Error(n(160));\n                }\n                b = c.stateNode;\n                switch(c.tag){\n                    case 5:\n                        var d = !1;\n                        break;\n                    case 3:\n                        b = b.containerInfo;\n                        d = !0;\n                        break;\n                    case 4:\n                        b = b.containerInfo;\n                        d = !0;\n                        break;\n                    default:\n                        throw Error(n(161));\n                }\n                c.effectTag & 16 && (bb(b), c.effectTag &= -17);\n                a: b: for(c = a;;){\n                    for(; null === c.sibling;){\n                        if (null === c.return || af(c.return)) {\n                            c = null;\n                            break a;\n                        }\n                        c = c.return;\n                    }\n                    c.sibling.return = c.return;\n                    for(c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;){\n                        if (c.effectTag & 2) continue b;\n                        if (null === c.child || 4 === c.tag) continue b;\n                        else c.child.return = c, c = c.child;\n                    }\n                    if (!(c.effectTag & 2)) {\n                        c = c.stateNode;\n                        break a;\n                    }\n                }\n                for(var e = a;;){\n                    var f = 5 === e.tag || 6 === e.tag;\n                    if (f) f = f ? e.stateNode : e.stateNode.instance, c ? d ? Za(b, f, c) : Ya(b, f, c) : d ? Ua(b, f) : Ta(b, f);\n                    else if (4 !== e.tag && null !== e.child) {\n                        e.child.return = e;\n                        e = e.child;\n                        continue;\n                    }\n                    if (e === a) break;\n                    for(; null === e.sibling;){\n                        if (null === e.return || e.return === a) return;\n                        e = e.return;\n                    }\n                    e.sibling.return = e.return;\n                    e = e.sibling;\n                }\n            }\n        }\n        function Xe(a, b, c) {\n            for(var d = b, e = !1, f, g;;){\n                if (!e) {\n                    e = d.return;\n                    a: for(;;){\n                        if (null === e) throw Error(n(160));\n                        f = e.stateNode;\n                        switch(e.tag){\n                            case 5:\n                                g = !1;\n                                break a;\n                            case 3:\n                                f = f.containerInfo;\n                                g = !0;\n                                break a;\n                            case 4:\n                                f = f.containerInfo;\n                                g = !0;\n                                break a;\n                        }\n                        e = e.return;\n                    }\n                    e = !0;\n                }\n                if (5 === d.tag || 6 === d.tag) Ze(a, d, c), g ? ab(f, d.stateNode) : $a(f, d.stateNode);\n                else if (4 === d.tag) {\n                    if (null !== d.child) {\n                        f = d.stateNode.containerInfo;\n                        g = !0;\n                        d.child.return = d;\n                        d = d.child;\n                        continue;\n                    }\n                } else if (Ve(a, d, c), null !== d.child) {\n                    d.child.return = d;\n                    d = d.child;\n                    continue;\n                }\n                if (d === b) break;\n                for(; null === d.sibling;){\n                    if (null === d.return || d.return === b) return;\n                    d = d.return;\n                    4 === d.tag && (e = !1);\n                }\n                d.sibling.return = d.return;\n                d = d.sibling;\n            }\n        }\n        function cf(a, b) {\n            if (Qa) switch(b.tag){\n                case 0:\n                case 11:\n                case 14:\n                case 15:\n                    Ue(4, 8, b);\n                    break;\n                case 1:\n                    break;\n                case 5:\n                    var c = b.stateNode;\n                    if (null != c) {\n                        var d = b.memoizedProps;\n                        a = null !== a ? a.memoizedProps : d;\n                        var e = b.type, f = b.updateQueue;\n                        b.updateQueue = null;\n                        null !== f && Xa(c, f, e, a, d, b);\n                    }\n                    break;\n                case 6:\n                    if (null === b.stateNode) throw Error(n(162));\n                    c = b.memoizedProps;\n                    Va(b.stateNode, null !== a ? a.memoizedProps : c, c);\n                    break;\n                case 3:\n                    Sa && (b = b.stateNode, b.hydrate && (b.hydrate = !1, xb(b.containerInfo)));\n                    break;\n                case 12:\n                    break;\n                case 13:\n                    df(b);\n                    ef(b);\n                    break;\n                case 19:\n                    ef(b);\n                    break;\n                case 17:\n                    break;\n                case 20:\n                    break;\n                case 21:\n                    break;\n                default:\n                    throw Error(n(163));\n            }\n            else {\n                switch(b.tag){\n                    case 0:\n                    case 11:\n                    case 14:\n                    case 15:\n                        Ue(4, 8, b);\n                        return;\n                    case 12:\n                        return;\n                    case 13:\n                        df(b);\n                        ef(b);\n                        return;\n                    case 19:\n                        ef(b);\n                        return;\n                    case 3:\n                        Sa && (c = b.stateNode, c.hydrate && (c.hydrate = !1, xb(c.containerInfo)));\n                }\n                a: if (Ra) switch(b.tag){\n                    case 1:\n                    case 5:\n                    case 6:\n                    case 20:\n                        break a;\n                    case 3:\n                    case 4:\n                        b = b.stateNode;\n                        lb(b.containerInfo, b.pendingChildren);\n                        break a;\n                    default:\n                        throw Error(n(163));\n                }\n            }\n        }\n        function df(a) {\n            var b = a;\n            if (null === a.memoizedState) var c = !1;\n            else c = !0, b = a.child, ff = E();\n            if (Qa && null !== b) {\n                a: if (a = b, Qa) for(b = a;;){\n                    if (5 === b.tag) {\n                        var d = b.stateNode;\n                        c ? cb(d) : eb(b.stateNode, b.memoizedProps);\n                    } else if (6 === b.tag) d = b.stateNode, c ? db(d) : fb(d, b.memoizedProps);\n                    else if (13 === b.tag && null !== b.memoizedState && null === b.memoizedState.dehydrated) {\n                        d = b.child.sibling;\n                        d.return = b;\n                        b = d;\n                        continue;\n                    } else if (null !== b.child) {\n                        b.child.return = b;\n                        b = b.child;\n                        continue;\n                    }\n                    if (b === a) break a;\n                    for(; null === b.sibling;){\n                        if (null === b.return || b.return === a) break a;\n                        b = b.return;\n                    }\n                    b.sibling.return = b.return;\n                    b = b.sibling;\n                }\n            }\n        }\n        function ef(a) {\n            var b = a.updateQueue;\n            if (null !== b) {\n                a.updateQueue = null;\n                var c = a.stateNode;\n                null === c && (c = a.stateNode = new Oe());\n                b.forEach(function(b) {\n                    var d = gf.bind(null, a, b);\n                    c.has(b) || (c.add(b), b.then(d, d));\n                });\n            }\n        }\n        var hf = \"function\" === typeof WeakMap ? WeakMap : Map;\n        function jf(a, b, c) {\n            c = Gc(c, null);\n            c.tag = 3;\n            c.payload = {\n                element: null\n            };\n            var d = b.value;\n            c.callback = function() {\n                kf || (kf = !0, lf = d);\n                Pe(a, b);\n            };\n            return c;\n        }\n        function mf(a, b, c) {\n            c = Gc(c, null);\n            c.tag = 3;\n            var d = a.type.getDerivedStateFromError;\n            if (\"function\" === typeof d) {\n                var e = b.value;\n                c.payload = function() {\n                    Pe(a, b);\n                    return d(e);\n                };\n            }\n            var f = a.stateNode;\n            null !== f && \"function\" === typeof f.componentDidCatch && (c.callback = function() {\n                \"function\" !== typeof d && (null === nf ? nf = new Set([\n                    this\n                ]) : nf.add(this), Pe(a, b));\n                var c = b.stack;\n                this.componentDidCatch(b.value, {\n                    componentStack: null !== c ? c : \"\"\n                });\n            });\n            return c;\n        }\n        var of = Math.ceil, pf = q.ReactCurrentDispatcher, qf = q.ReactCurrentOwner, R = 0, rf = 8, S = 16, sf = 32, tf = 0, uf = 1, vf = 2, wf = 3, xf = 4, yf = 5, T = R, U = null, V = null, W = 0, X = tf, zf = null, Af = 1073741823, Bf = 1073741823, Cf = null, Df = 0, Ef = !1, ff = 0, Ff = 500, Y = null, kf = !1, lf = null, nf = null, Gf = !1, Hf = null, If = 90, Jf = null, Kf = 0, Lf = null, Mf = 0;\n        function G() {\n            return (T & (S | sf)) !== R ? 1073741821 - (E() / 10 | 0) : 0 !== Mf ? Mf : Mf = 1073741821 - (E() / 10 | 0);\n        }\n        function Vc(a, b, c) {\n            b = b.mode;\n            if (0 === (b & 2)) return 1073741823;\n            var d = fc();\n            if (0 === (b & 4)) return 99 === d ? 1073741823 : 1073741822;\n            if ((T & S) !== R) return W;\n            if (null !== c) a = mc(a, c.timeoutMs | 0 || 5E3, 250);\n            else switch(d){\n                case 99:\n                    a = 1073741823;\n                    break;\n                case 98:\n                    a = mc(a, 150, 100);\n                    break;\n                case 97:\n                case 96:\n                    a = mc(a, 5E3, 250);\n                    break;\n                case 95:\n                    a = 2;\n                    break;\n                default:\n                    throw Error(n(326));\n            }\n            null !== U && a === W && --a;\n            return a;\n        }\n        function Wc(a, b) {\n            if (50 < Kf) throw Kf = 0, Lf = null, Error(n(185));\n            a = Nf(a, b);\n            if (null !== a) {\n                var c = fc();\n                1073741823 === b ? (T & rf) !== R && (T & (S | sf)) === R ? Of(a) : (Z(a), T === R && F()) : Z(a);\n                (T & 4) === R || 98 !== c && 99 !== c || (null === Jf ? Jf = new Map([\n                    [\n                        a,\n                        b\n                    ]\n                ]) : (c = Jf.get(a), (void 0 === c || c > b) && Jf.set(a, b)));\n            }\n        }\n        function Nf(a, b) {\n            a.expirationTime < b && (a.expirationTime = b);\n            var c = a.alternate;\n            null !== c && c.expirationTime < b && (c.expirationTime = b);\n            var d = a.return, e = null;\n            if (null === d && 3 === a.tag) e = a.stateNode;\n            else for(; null !== d;){\n                c = d.alternate;\n                d.childExpirationTime < b && (d.childExpirationTime = b);\n                null !== c && c.childExpirationTime < b && (c.childExpirationTime = b);\n                if (null === d.return && 3 === d.tag) {\n                    e = d.stateNode;\n                    break;\n                }\n                d = d.return;\n            }\n            null !== e && (U === e && (Pc(b), X === xf && Pf(e, W)), Qf(e, b));\n            return e;\n        }\n        function Rf(a) {\n            var b = a.lastExpiredTime;\n            if (0 !== b) return b;\n            b = a.firstPendingTime;\n            if (!Sf(a, b)) return b;\n            b = a.lastPingedTime;\n            a = a.nextKnownPendingLevel;\n            return b > a ? b : a;\n        }\n        function Z(a) {\n            if (0 !== a.lastExpiredTime) a.callbackExpirationTime = 1073741823, a.callbackPriority = 99, a.callbackNode = jc(Of.bind(null, a));\n            else {\n                var b = Rf(a), c = a.callbackNode;\n                if (0 === b) null !== c && (a.callbackNode = null, a.callbackExpirationTime = 0, a.callbackPriority = 90);\n                else {\n                    var d = G();\n                    1073741823 === b ? d = 99 : 1 === b || 2 === b ? d = 95 : (d = 10 * (1073741821 - b) - 10 * (1073741821 - d), d = 0 >= d ? 99 : 250 >= d ? 98 : 5250 >= d ? 97 : 95);\n                    if (null !== c) {\n                        var e = a.callbackPriority;\n                        if (a.callbackExpirationTime === b && e >= d) return;\n                        c !== $b && Ob(c);\n                    }\n                    a.callbackExpirationTime = b;\n                    a.callbackPriority = d;\n                    b = 1073741823 === b ? jc(Of.bind(null, a)) : ic(d, Tf.bind(null, a), {\n                        timeout: 10 * (1073741821 - b) - E()\n                    });\n                    a.callbackNode = b;\n                }\n            }\n        }\n        function Tf(a, b) {\n            Mf = 0;\n            if (b) return b = G(), Uf(a, b), Z(a), null;\n            var c = Rf(a);\n            if (0 !== c) {\n                b = a.callbackNode;\n                if ((T & (S | sf)) !== R) throw Error(n(327));\n                Vf();\n                a === U && c === W || Wf(a, c);\n                if (null !== V) {\n                    var d = T;\n                    T |= S;\n                    var e = Xf();\n                    do try {\n                        Yf();\n                        break;\n                    } catch (l) {\n                        Zf(a, l);\n                    }\n                    while (1);\n                    wc();\n                    T = d;\n                    pf.current = e;\n                    if (X === uf) throw b = zf, Wf(a, c), Pf(a, c), Z(a), b;\n                    if (null === V) switch(e = a.finishedWork = a.current.alternate, a.finishedExpirationTime = c, d = X, U = null, d){\n                        case tf:\n                        case uf:\n                            throw Error(n(345));\n                        case vf:\n                            Uf(a, 2 < c ? 2 : c);\n                            break;\n                        case wf:\n                            Pf(a, c);\n                            d = a.lastSuspendedTime;\n                            c === d && (a.nextKnownPendingLevel = $f(e));\n                            if (1073741823 === Af && (e = ff + Ff - E(), 10 < e)) {\n                                if (Ef) {\n                                    var f = a.lastPingedTime;\n                                    if (0 === f || f >= c) {\n                                        a.lastPingedTime = c;\n                                        Wf(a, c);\n                                        break;\n                                    }\n                                }\n                                f = Rf(a);\n                                if (0 !== f && f !== c) break;\n                                if (0 !== d && d !== c) {\n                                    a.lastPingedTime = d;\n                                    break;\n                                }\n                                a.timeoutHandle = Ma(ag.bind(null, a), e);\n                                break;\n                            }\n                            ag(a);\n                            break;\n                        case xf:\n                            Pf(a, c);\n                            d = a.lastSuspendedTime;\n                            c === d && (a.nextKnownPendingLevel = $f(e));\n                            if (Ef && (e = a.lastPingedTime, 0 === e || e >= c)) {\n                                a.lastPingedTime = c;\n                                Wf(a, c);\n                                break;\n                            }\n                            e = Rf(a);\n                            if (0 !== e && e !== c) break;\n                            if (0 !== d && d !== c) {\n                                a.lastPingedTime = d;\n                                break;\n                            }\n                            1073741823 !== Bf ? d = 10 * (1073741821 - Bf) - E() : 1073741823 === Af ? d = 0 : (d = 10 * (1073741821 - Af) - 5E3, e = E(), c = 10 * (1073741821 - c) - e, d = e - d, 0 > d && (d = 0), d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3E3 > d ? 3E3 : 4320 > d ? 4320 : 1960 * of(d / 1960)) - d, c < d && (d = c));\n                            if (10 < d) {\n                                a.timeoutHandle = Ma(ag.bind(null, a), d);\n                                break;\n                            }\n                            ag(a);\n                            break;\n                        case yf:\n                            if (1073741823 !== Af && null !== Cf) {\n                                f = Af;\n                                var g = Cf;\n                                d = g.busyMinDurationMs | 0;\n                                0 >= d ? d = 0 : (e = g.busyDelayMs | 0, f = E() - (10 * (1073741821 - f) - (g.timeoutMs | 0 || 5E3)), d = f <= e ? 0 : e + d - f);\n                                if (10 < d) {\n                                    Pf(a, c);\n                                    a.timeoutHandle = Ma(ag.bind(null, a), d);\n                                    break;\n                                }\n                            }\n                            ag(a);\n                            break;\n                        default:\n                            throw Error(n(329));\n                    }\n                    Z(a);\n                    if (a.callbackNode === b) return Tf.bind(null, a);\n                }\n            }\n            return null;\n        }\n        function Of(a) {\n            var b = a.lastExpiredTime;\n            b = 0 !== b ? b : 1073741823;\n            if (a.finishedExpirationTime === b) ag(a);\n            else {\n                if ((T & (S | sf)) !== R) throw Error(n(327));\n                Vf();\n                a === U && b === W || Wf(a, b);\n                if (null !== V) {\n                    var c = T;\n                    T |= S;\n                    var d = Xf();\n                    do try {\n                        bg();\n                        break;\n                    } catch (e) {\n                        Zf(a, e);\n                    }\n                    while (1);\n                    wc();\n                    T = c;\n                    pf.current = d;\n                    if (X === uf) throw c = zf, Wf(a, b), Pf(a, b), Z(a), c;\n                    if (null !== V) throw Error(n(261));\n                    a.finishedWork = a.current.alternate;\n                    a.finishedExpirationTime = b;\n                    U = null;\n                    ag(a);\n                    Z(a);\n                }\n            }\n            return null;\n        }\n        function cg(a, b) {\n            Uf(a, b);\n            Z(a);\n            (T & (S | sf)) === R && F();\n        }\n        function dg() {\n            if (null !== Jf) {\n                var a = Jf;\n                Jf = null;\n                a.forEach(function(a, c) {\n                    Uf(c, a);\n                    Z(c);\n                });\n                F();\n            }\n        }\n        function eg(a, b) {\n            if ((T & (S | sf)) !== R) throw Error(n(187));\n            var c = T;\n            T |= 1;\n            try {\n                return hc(99, a.bind(null, b));\n            } finally{\n                T = c, F();\n            }\n        }\n        function Wf(a, b) {\n            a.finishedWork = null;\n            a.finishedExpirationTime = 0;\n            var c = a.timeoutHandle;\n            c !== Oa && (a.timeoutHandle = Oa, Na(c));\n            if (null !== V) for(c = V.return; null !== c;){\n                var d = c;\n                switch(d.tag){\n                    case 1:\n                        var e = d.type.childContextTypes;\n                        null !== e && void 0 !== e && Gb();\n                        break;\n                    case 3:\n                        rd();\n                        Hb();\n                        break;\n                    case 5:\n                        td(d);\n                        break;\n                    case 4:\n                        rd();\n                        break;\n                    case 13:\n                        y(I);\n                        break;\n                    case 19:\n                        y(I);\n                        break;\n                    case 10:\n                        yc(d);\n                }\n                c = c.return;\n            }\n            U = a;\n            V = fd(a.current, null);\n            W = b;\n            X = tf;\n            zf = null;\n            Bf = Af = 1073741823;\n            Cf = null;\n            Df = 0;\n            Ef = !1;\n        }\n        function Zf(a, b) {\n            do {\n                try {\n                    wc();\n                    Nd();\n                    if (null === V || null === V.return) return X = uf, zf = b, null;\n                    a: {\n                        var c = a, d = V.return, e = V, f = b;\n                        b = W;\n                        e.effectTag |= 2048;\n                        e.firstEffect = e.lastEffect = null;\n                        if (null !== f && \"object\" === typeof f && \"function\" === typeof f.then) {\n                            var g = f, l = 0 !== (I.current & 1), h = d;\n                            do {\n                                var k;\n                                if (k = 13 === h.tag) {\n                                    var p = h.memoizedState;\n                                    if (null !== p) k = null !== p.dehydrated ? !0 : !1;\n                                    else {\n                                        var D = h.memoizedProps;\n                                        k = void 0 === D.fallback ? !1 : !0 !== D.unstable_avoidThisFallback ? !0 : l ? !1 : !0;\n                                    }\n                                }\n                                if (k) {\n                                    var x = h.updateQueue;\n                                    if (null === x) {\n                                        var K = new Set();\n                                        K.add(g);\n                                        h.updateQueue = K;\n                                    } else x.add(g);\n                                    if (0 === (h.mode & 2)) {\n                                        h.effectTag |= 64;\n                                        e.effectTag &= -2981;\n                                        if (1 === e.tag) if (null === e.alternate) e.tag = 17;\n                                        else {\n                                            var Ha = Gc(1073741823, null);\n                                            Ha.tag = 2;\n                                            Ic(e, Ha);\n                                        }\n                                        e.expirationTime = 1073741823;\n                                        break a;\n                                    }\n                                    f = void 0;\n                                    e = b;\n                                    var O = c.pingCache;\n                                    null === O ? (O = c.pingCache = new hf(), f = new Set(), O.set(g, f)) : (f = O.get(g), void 0 === f && (f = new Set(), O.set(g, f)));\n                                    if (!f.has(e)) {\n                                        f.add(e);\n                                        var w = fg.bind(null, c, g, e);\n                                        g.then(w, w);\n                                    }\n                                    h.effectTag |= 4096;\n                                    h.expirationTime = b;\n                                    break a;\n                                }\n                                h = h.return;\n                            }while (null !== h);\n                            f = Error((ta(e.type) || \"A React component\") + \" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.\" + Ab(e));\n                        }\n                        X !== yf && (X = vf);\n                        f = Ne(f, e);\n                        h = d;\n                        do {\n                            switch(h.tag){\n                                case 3:\n                                    g = f;\n                                    h.effectTag |= 4096;\n                                    h.expirationTime = b;\n                                    var r = jf(h, g, b);\n                                    Jc(h, r);\n                                    break a;\n                                case 1:\n                                    g = f;\n                                    var t = h.type, N = h.stateNode;\n                                    if (0 === (h.effectTag & 64) && (\"function\" === typeof t.getDerivedStateFromError || null !== N && \"function\" === typeof N.componentDidCatch && (null === nf || !nf.has(N)))) {\n                                        h.effectTag |= 4096;\n                                        h.expirationTime = b;\n                                        var Mc = mf(h, g, b);\n                                        Jc(h, Mc);\n                                        break a;\n                                    }\n                            }\n                            h = h.return;\n                        }while (null !== h);\n                    }\n                    V = gg(V);\n                } catch (Rb) {\n                    b = Rb;\n                    continue;\n                }\n                break;\n            }while (1);\n        }\n        function Xf() {\n            var a = pf.current;\n            pf.current = Md;\n            return null === a ? Md : a;\n        }\n        function Oc(a, b) {\n            a < Af && 2 < a && (Af = a);\n            null !== b && a < Bf && 2 < a && (Bf = a, Cf = b);\n        }\n        function Pc(a) {\n            a > Df && (Df = a);\n        }\n        function bg() {\n            for(; null !== V;)V = hg(V);\n        }\n        function Yf() {\n            for(; null !== V && !Pb();)V = hg(V);\n        }\n        function hg(a) {\n            var b = ig(a.alternate, a, W);\n            a.memoizedProps = a.pendingProps;\n            null === b && (b = gg(a));\n            qf.current = null;\n            return b;\n        }\n        function gg(a) {\n            V = a;\n            do {\n                var b = V.alternate;\n                a = V.return;\n                if (0 === (V.effectTag & 2048)) {\n                    a: {\n                        var c = b;\n                        b = V;\n                        var d = W, e = b.pendingProps;\n                        switch(b.tag){\n                            case 2:\n                                break;\n                            case 16:\n                                break;\n                            case 15:\n                            case 0:\n                                break;\n                            case 1:\n                                C(b.type) && Gb();\n                                break;\n                            case 3:\n                                rd();\n                                Hb();\n                                e = b.stateNode;\n                                e.pendingContext && (e.context = e.pendingContext, e.pendingContext = null);\n                                (null === c || null === c.child) && ne(b) && Fe(b);\n                                He(b);\n                                break;\n                            case 5:\n                                td(b);\n                                var f = pd(od.current);\n                                d = b.type;\n                                if (null !== c && null != b.stateNode) Ie(c, b, d, e, f), c.ref !== b.ref && (b.effectTag |= 128);\n                                else if (e) {\n                                    c = pd(H.current);\n                                    if (ne(b)) {\n                                        e = b;\n                                        if (!Sa) throw Error(n(175));\n                                        c = ub(e.stateNode, e.type, e.memoizedProps, f, c, e);\n                                        e.updateQueue = c;\n                                        c = null !== c ? !0 : !1;\n                                        c && Fe(b);\n                                    } else {\n                                        var g = Ea(d, e, f, c, b);\n                                        _Ge(g, b, !1, !1);\n                                        b.stateNode = g;\n                                        Ga(g, d, e, f, c) && Fe(b);\n                                    }\n                                    null !== b.ref && (b.effectTag |= 128);\n                                } else if (null === b.stateNode) throw Error(n(166));\n                                break;\n                            case 6:\n                                if (c && null != b.stateNode) Je(c, b, c.memoizedProps, e);\n                                else {\n                                    if (\"string\" !== typeof e && null === b.stateNode) throw Error(n(166));\n                                    c = pd(od.current);\n                                    f = pd(H.current);\n                                    if (ne(b)) {\n                                        c = b;\n                                        if (!Sa) throw Error(n(176));\n                                        (c = vb(c.stateNode, c.memoizedProps, c)) && Fe(b);\n                                    } else b.stateNode = La(e, c, f, b);\n                                }\n                                break;\n                            case 11:\n                                break;\n                            case 13:\n                                y(I);\n                                e = b.memoizedState;\n                                if (0 !== (b.effectTag & 64)) {\n                                    b.expirationTime = d;\n                                    break a;\n                                }\n                                e = null !== e;\n                                f = !1;\n                                null === c ? void 0 !== b.memoizedProps.fallback && ne(b) : (d = c.memoizedState, f = null !== d, e || null === d || (d = c.child.sibling, null !== d && (g = b.firstEffect, null !== g ? (b.firstEffect = d, d.nextEffect = g) : (b.firstEffect = b.lastEffect = d, d.nextEffect = null), d.effectTag = 8)));\n                                if (e && !f && 0 !== (b.mode & 2)) if (null === c && !0 !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (I.current & 1)) X === tf && (X = wf);\n                                else {\n                                    if (X === tf || X === wf) X = xf;\n                                    0 !== Df && null !== U && (Pf(U, W), Qf(U, Df));\n                                }\n                                Ra && e && (b.effectTag |= 4);\n                                Qa && (e || f) && (b.effectTag |= 4);\n                                break;\n                            case 7:\n                                break;\n                            case 8:\n                                break;\n                            case 12:\n                                break;\n                            case 4:\n                                rd();\n                                He(b);\n                                break;\n                            case 10:\n                                yc(b);\n                                break;\n                            case 9:\n                                break;\n                            case 14:\n                                break;\n                            case 17:\n                                C(b.type) && Gb();\n                                break;\n                            case 19:\n                                y(I);\n                                e = b.memoizedState;\n                                if (null === e) break;\n                                f = 0 !== (b.effectTag & 64);\n                                g = e.rendering;\n                                if (null === g) {\n                                    if (f) Le(e, !1);\n                                    else {\n                                        if (X !== tf || null !== c && 0 !== (c.effectTag & 64)) for(c = b.child; null !== c;){\n                                            g = ud(c);\n                                            if (null !== g) {\n                                                b.effectTag |= 64;\n                                                Le(e, !1);\n                                                c = g.updateQueue;\n                                                null !== c && (b.updateQueue = c, b.effectTag |= 4);\n                                                null === e.lastEffect && (b.firstEffect = null);\n                                                b.lastEffect = e.lastEffect;\n                                                c = d;\n                                                for(e = b.child; null !== e;)f = e, d = c, f.effectTag &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g = f.alternate, null === g ? (f.childExpirationTime = 0, f.expirationTime = d, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null) : (f.childExpirationTime = g.childExpirationTime, f.expirationTime = g.expirationTime, f.child = g.child, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, d = g.dependencies, f.dependencies = null === d ? null : {\n                                                    expirationTime: d.expirationTime,\n                                                    firstContext: d.firstContext,\n                                                    responders: d.responders\n                                                }), e = e.sibling;\n                                                z(I, I.current & 1 | 2);\n                                                b = b.child;\n                                                break a;\n                                            }\n                                            c = c.sibling;\n                                        }\n                                    }\n                                } else {\n                                    if (!f) if (c = ud(g), null !== c) {\n                                        if (b.effectTag |= 64, f = !0, c = c.updateQueue, null !== c && (b.updateQueue = c, b.effectTag |= 4), Le(e, !0), null === e.tail && \"hidden\" === e.tailMode) {\n                                            b = b.lastEffect = e.lastEffect;\n                                            null !== b && (b.nextEffect = null);\n                                            break;\n                                        }\n                                    } else E() > e.tailExpiration && 1 < d && (b.effectTag |= 64, f = !0, Le(e, !1), b.expirationTime = b.childExpirationTime = d - 1);\n                                    e.isBackwards ? (g.sibling = b.child, b.child = g) : (c = e.last, null !== c ? c.sibling = g : b.child = g, e.last = g);\n                                }\n                                if (null !== e.tail) {\n                                    0 === e.tailExpiration && (e.tailExpiration = E() + 500);\n                                    c = e.tail;\n                                    e.rendering = c;\n                                    e.tail = c.sibling;\n                                    e.lastEffect = b.lastEffect;\n                                    c.sibling = null;\n                                    e = I.current;\n                                    e = f ? e & 1 | 2 : e & 1;\n                                    z(I, e);\n                                    b = c;\n                                    break a;\n                                }\n                                break;\n                            case 20:\n                                break;\n                            case 21:\n                                break;\n                            default:\n                                throw Error(n(156, b.tag));\n                        }\n                        b = null;\n                    }\n                    c = V;\n                    if (1 === W || 1 !== c.childExpirationTime) {\n                        e = 0;\n                        for(f = c.child; null !== f;)d = f.expirationTime, g = f.childExpirationTime, d > e && (e = d), g > e && (e = g), f = f.sibling;\n                        c.childExpirationTime = e;\n                    }\n                    if (null !== b) return b;\n                    null !== a && 0 === (a.effectTag & 2048) && (null === a.firstEffect && (a.firstEffect = V.firstEffect), null !== V.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = V.firstEffect), a.lastEffect = V.lastEffect), 1 < V.effectTag && (null !== a.lastEffect ? a.lastEffect.nextEffect = V : a.firstEffect = V, a.lastEffect = V));\n                } else {\n                    b = Me(V);\n                    if (null !== b) return b.effectTag &= 2047, b;\n                    null !== a && (a.firstEffect = a.lastEffect = null, a.effectTag |= 2048);\n                }\n                b = V.sibling;\n                if (null !== b) return b;\n                V = a;\n            }while (null !== V);\n            X === tf && (X = yf);\n            return null;\n        }\n        function $f(a) {\n            var b = a.expirationTime;\n            a = a.childExpirationTime;\n            return b > a ? b : a;\n        }\n        function ag(a) {\n            var b = fc();\n            hc(99, jg.bind(null, a, b));\n            return null;\n        }\n        function jg(a, b) {\n            Vf();\n            if ((T & (S | sf)) !== R) throw Error(n(327));\n            var c = a.finishedWork, d = a.finishedExpirationTime;\n            if (null === c) return null;\n            a.finishedWork = null;\n            a.finishedExpirationTime = 0;\n            if (c === a.current) throw Error(n(177));\n            a.callbackNode = null;\n            a.callbackExpirationTime = 0;\n            a.callbackPriority = 90;\n            a.nextKnownPendingLevel = 0;\n            var e = $f(c);\n            a.firstPendingTime = e;\n            d <= a.lastSuspendedTime ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : d <= a.firstSuspendedTime && (a.firstSuspendedTime = d - 1);\n            d <= a.lastPingedTime && (a.lastPingedTime = 0);\n            d <= a.lastExpiredTime && (a.lastExpiredTime = 0);\n            a === U && (V = U = null, W = 0);\n            1 < c.effectTag ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, e = c.firstEffect) : e = c : e = c.firstEffect;\n            if (null !== e) {\n                var f = T;\n                T |= sf;\n                qf.current = null;\n                Ca(a.containerInfo);\n                Y = e;\n                do try {\n                    kg();\n                } catch (jb) {\n                    if (null === Y) throw Error(n(330));\n                    Re(Y, jb);\n                    Y = Y.nextEffect;\n                }\n                while (null !== Y);\n                Y = e;\n                do try {\n                    for(var g = a, l = b; null !== Y;){\n                        var h = Y.effectTag;\n                        h & 16 && Qa && bb(Y.stateNode);\n                        if (h & 128) {\n                            var k = Y.alternate;\n                            if (null !== k) {\n                                var p = k.ref;\n                                null !== p && (\"function\" === typeof p ? p(null) : p.current = null);\n                            }\n                        }\n                        switch(h & 1038){\n                            case 2:\n                                bf(Y);\n                                Y.effectTag &= -3;\n                                break;\n                            case 6:\n                                bf(Y);\n                                Y.effectTag &= -3;\n                                cf(Y.alternate, Y);\n                                break;\n                            case 1024:\n                                Y.effectTag &= -1025;\n                                break;\n                            case 1028:\n                                Y.effectTag &= -1025;\n                                cf(Y.alternate, Y);\n                                break;\n                            case 4:\n                                cf(Y.alternate, Y);\n                                break;\n                            case 8:\n                                var D = g, x = Y, K = l;\n                                Qa ? Xe(D, x, K) : Ze(D, x, K);\n                                $e(x);\n                        }\n                        Y = Y.nextEffect;\n                    }\n                } catch (jb) {\n                    if (null === Y) throw Error(n(330));\n                    Re(Y, jb);\n                    Y = Y.nextEffect;\n                }\n                while (null !== Y);\n                Da(a.containerInfo);\n                a.current = c;\n                Y = e;\n                do try {\n                    for(h = d; null !== Y;){\n                        var Ha = Y.effectTag;\n                        if (Ha & 36) {\n                            var O = Y.alternate;\n                            k = Y;\n                            p = h;\n                            switch(k.tag){\n                                case 0:\n                                case 11:\n                                case 15:\n                                    Ue(16, 32, k);\n                                    break;\n                                case 1:\n                                    var w = k.stateNode;\n                                    if (k.effectTag & 4) if (null === O) w.componentDidMount();\n                                    else {\n                                        var r = k.elementType === k.type ? O.memoizedProps : rc(k.type, O.memoizedProps);\n                                        w.componentDidUpdate(r, O.memoizedState, w.__reactInternalSnapshotBeforeUpdate);\n                                    }\n                                    var t = k.updateQueue;\n                                    null !== t && Qc(k, t, w, p);\n                                    break;\n                                case 3:\n                                    var N = k.updateQueue;\n                                    if (null !== N) {\n                                        g = null;\n                                        if (null !== k.child) switch(k.child.tag){\n                                            case 5:\n                                                g = za(k.child.stateNode);\n                                                break;\n                                            case 1:\n                                                g = k.child.stateNode;\n                                        }\n                                        Qc(k, N, g, p);\n                                    }\n                                    break;\n                                case 5:\n                                    var Mc = k.stateNode;\n                                    null === O && k.effectTag & 4 && Wa(Mc, k.type, k.memoizedProps, k);\n                                    break;\n                                case 6:\n                                    break;\n                                case 4:\n                                    break;\n                                case 12:\n                                    break;\n                                case 13:\n                                    if (Sa && null === k.memoizedState) {\n                                        var Rb = k.alternate;\n                                        if (null !== Rb) {\n                                            var le = Rb.memoizedState;\n                                            if (null !== le) {\n                                                var me = le.dehydrated;\n                                                null !== me && yb(me);\n                                            }\n                                        }\n                                    }\n                                    break;\n                                case 19:\n                                case 17:\n                                case 20:\n                                case 21:\n                                    break;\n                                default:\n                                    throw Error(n(163));\n                            }\n                        }\n                        if (Ha & 128) {\n                            k = void 0;\n                            var Sb = Y.ref;\n                            if (null !== Sb) {\n                                var v = Y.stateNode;\n                                switch(Y.tag){\n                                    case 5:\n                                        k = za(v);\n                                        break;\n                                    default:\n                                        k = v;\n                                }\n                                \"function\" === typeof Sb ? Sb(k) : Sb.current = k;\n                            }\n                        }\n                        Y = Y.nextEffect;\n                    }\n                } catch (jb) {\n                    if (null === Y) throw Error(n(330));\n                    Re(Y, jb);\n                    Y = Y.nextEffect;\n                }\n                while (null !== Y);\n                Y = null;\n                ac();\n                T = f;\n            } else a.current = c;\n            if (Gf) Gf = !1, Hf = a, If = b;\n            else for(Y = e; null !== Y;)b = Y.nextEffect, Y.nextEffect = null, Y = b;\n            b = a.firstPendingTime;\n            0 === b && (nf = null);\n            1073741823 === b ? a === Lf ? Kf++ : (Kf = 0, Lf = a) : Kf = 0;\n            \"function\" === typeof lg && lg(c.stateNode, d);\n            Z(a);\n            if (kf) throw kf = !1, a = lf, lf = null, a;\n            if ((T & rf) !== R) return null;\n            F();\n            return null;\n        }\n        function kg() {\n            for(; null !== Y;){\n                var a = Y.effectTag;\n                0 !== (a & 256) && Te(Y.alternate, Y);\n                0 === (a & 512) || Gf || (Gf = !0, ic(97, function() {\n                    Vf();\n                    return null;\n                }));\n                Y = Y.nextEffect;\n            }\n        }\n        function Vf() {\n            if (90 !== If) {\n                var a = 97 < If ? 97 : If;\n                If = 90;\n                return hc(a, mg);\n            }\n        }\n        function mg() {\n            if (null === Hf) return !1;\n            var a = Hf;\n            Hf = null;\n            if ((T & (S | sf)) !== R) throw Error(n(331));\n            var b = T;\n            T |= sf;\n            for(a = a.current.firstEffect; null !== a;){\n                try {\n                    var c = a;\n                    if (0 !== (c.effectTag & 512)) switch(c.tag){\n                        case 0:\n                        case 11:\n                        case 15:\n                            Ue(128, 0, c), Ue(0, 64, c);\n                    }\n                } catch (d) {\n                    if (null === a) throw Error(n(330));\n                    Re(a, d);\n                }\n                c = a.nextEffect;\n                a.nextEffect = null;\n                a = c;\n            }\n            T = b;\n            F();\n            return !0;\n        }\n        function ng(a, b, c) {\n            b = Ne(c, b);\n            b = jf(a, b, 1073741823);\n            Ic(a, b);\n            a = Nf(a, 1073741823);\n            null !== a && Z(a);\n        }\n        function Re(a, b) {\n            if (3 === a.tag) ng(a, a, b);\n            else for(var c = a.return; null !== c;){\n                if (3 === c.tag) {\n                    ng(c, a, b);\n                    break;\n                } else if (1 === c.tag) {\n                    var d = c.stateNode;\n                    if (\"function\" === typeof c.type.getDerivedStateFromError || \"function\" === typeof d.componentDidCatch && (null === nf || !nf.has(d))) {\n                        a = Ne(b, a);\n                        a = mf(c, a, 1073741823);\n                        Ic(c, a);\n                        c = Nf(c, 1073741823);\n                        null !== c && Z(c);\n                        break;\n                    }\n                }\n                c = c.return;\n            }\n        }\n        function fg(a, b, c) {\n            var d = a.pingCache;\n            null !== d && d.delete(b);\n            U === a && W === c ? X === xf || X === wf && 1073741823 === Af && E() - ff < Ff ? Wf(a, W) : Ef = !0 : Sf(a, c) && (b = a.lastPingedTime, 0 !== b && b < c || (a.lastPingedTime = c, a.finishedExpirationTime === c && (a.finishedExpirationTime = 0, a.finishedWork = null), Z(a)));\n        }\n        function gf(a, b) {\n            var c = a.stateNode;\n            null !== c && c.delete(b);\n            b = 0;\n            0 === b && (b = G(), b = Vc(b, a, null));\n            a = Nf(a, b);\n            null !== a && Z(a);\n        }\n        var ig;\n        ig = function ig(a, b, c) {\n            var d = b.expirationTime;\n            if (null !== a) {\n                var e = b.pendingProps;\n                if (a.memoizedProps !== e || B.current) Bc = !0;\n                else {\n                    if (d < c) {\n                        Bc = !1;\n                        switch(b.tag){\n                            case 3:\n                                ze(b);\n                                oe();\n                                break;\n                            case 5:\n                                sd(b);\n                                if (b.mode & 4 && 1 !== c && Ka(b.type, e)) return b.expirationTime = b.childExpirationTime = 1, null;\n                                break;\n                            case 1:\n                                C(b.type) && Kb(b);\n                                break;\n                            case 4:\n                                qd(b, b.stateNode.containerInfo);\n                                break;\n                            case 10:\n                                xc(b, b.memoizedProps.value);\n                                break;\n                            case 13:\n                                if (null !== b.memoizedState) {\n                                    d = b.child.childExpirationTime;\n                                    if (0 !== d && d >= c) return Be(a, b, c);\n                                    z(I, I.current & 1);\n                                    b = re(a, b, c);\n                                    return null !== b ? b.sibling : null;\n                                }\n                                z(I, I.current & 1);\n                                break;\n                            case 19:\n                                d = b.childExpirationTime >= c;\n                                if (0 !== (a.effectTag & 64)) {\n                                    if (d) return Ee(a, b, c);\n                                    b.effectTag |= 64;\n                                }\n                                e = b.memoizedState;\n                                null !== e && (e.rendering = null, e.tail = null);\n                                z(I, I.current);\n                                if (!d) return null;\n                        }\n                        return re(a, b, c);\n                    }\n                    Bc = !1;\n                }\n            } else Bc = !1;\n            b.expirationTime = 0;\n            switch(b.tag){\n                case 2:\n                    d = b.type;\n                    null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);\n                    a = b.pendingProps;\n                    e = Fb(b, A.current);\n                    Ac(b, c);\n                    e = Jd(null, b, d, a, e, c);\n                    b.effectTag |= 1;\n                    if (\"object\" === typeof e && null !== e && \"function\" === typeof e.render && void 0 === e.$$typeof) {\n                        b.tag = 1;\n                        Nd();\n                        if (C(d)) {\n                            var f = !0;\n                            Kb(b);\n                        } else f = !1;\n                        b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;\n                        var g = d.getDerivedStateFromProps;\n                        \"function\" === typeof g && Uc(b, d, g, a);\n                        e.updater = Xc;\n                        b.stateNode = e;\n                        e._reactInternalFiber = b;\n                        ad(b, d, a, c);\n                        b = ye(null, b, d, !0, f, c);\n                    } else b.tag = 0, Q(null, b, e, c), b = b.child;\n                    return b;\n                case 16:\n                    e = b.elementType;\n                    null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);\n                    a = b.pendingProps;\n                    sa(e);\n                    if (1 !== e._status) throw e._result;\n                    e = e._result;\n                    b.type = e;\n                    f = b.tag = og(e);\n                    a = rc(e, a);\n                    switch(f){\n                        case 0:\n                            b = ve(null, b, e, a, c);\n                            break;\n                        case 1:\n                            b = xe(null, b, e, a, c);\n                            break;\n                        case 11:\n                            b = qe(null, b, e, a, c);\n                            break;\n                        case 14:\n                            b = se(null, b, e, rc(e.type, a), d, c);\n                            break;\n                        default:\n                            throw Error(n(306, e, \"\"));\n                    }\n                    return b;\n                case 0:\n                    return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : rc(d, e), ve(a, b, d, e, c);\n                case 1:\n                    return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : rc(d, e), xe(a, b, d, e, c);\n                case 3:\n                    ze(b);\n                    d = b.updateQueue;\n                    if (null === d) throw Error(n(282));\n                    e = b.memoizedState;\n                    e = null !== e ? e.element : null;\n                    Nc(b, d, b.pendingProps, null, c);\n                    d = b.memoizedState.element;\n                    if (d === e) oe(), b = re(a, b, c);\n                    else {\n                        if (e = b.stateNode.hydrate) Sa ? (ee = tb(b.stateNode.containerInfo), de = b, e = fe = !0) : e = !1;\n                        if (e) for(c = ld(b, null, d, c), b.child = c; c;)c.effectTag = c.effectTag & -3 | 1024, c = c.sibling;\n                        else Q(a, b, d, c), oe();\n                        b = b.child;\n                    }\n                    return b;\n                case 5:\n                    return sd(b), null === a && je(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Ja(d, e) ? g = null : null !== f && Ja(d, f) && (b.effectTag |= 16), we(a, b), b.mode & 4 && 1 !== c && Ka(d, e) ? (b.expirationTime = b.childExpirationTime = 1, b = null) : (Q(a, b, g, c), b = b.child), b;\n                case 6:\n                    return null === a && je(b), null;\n                case 13:\n                    return Be(a, b, c);\n                case 4:\n                    return qd(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = kd(b, null, d, c) : Q(a, b, d, c), b.child;\n                case 11:\n                    return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : rc(d, e), qe(a, b, d, e, c);\n                case 7:\n                    return Q(a, b, b.pendingProps, c), b.child;\n                case 8:\n                    return Q(a, b, b.pendingProps.children, c), b.child;\n                case 12:\n                    return Q(a, b, b.pendingProps.children, c), b.child;\n                case 10:\n                    a: {\n                        d = b.type._context;\n                        e = b.pendingProps;\n                        g = b.memoizedProps;\n                        f = e.value;\n                        xc(b, f);\n                        if (null !== g) {\n                            var l = g.value;\n                            f = oc(l, f) ? 0 : (\"function\" === typeof d._calculateChangedBits ? d._calculateChangedBits(l, f) : 1073741823) | 0;\n                            if (0 === f) {\n                                if (g.children === e.children && !B.current) {\n                                    b = re(a, b, c);\n                                    break a;\n                                }\n                            } else for(l = b.child, null !== l && (l.return = b); null !== l;){\n                                var h = l.dependencies;\n                                if (null !== h) {\n                                    g = l.child;\n                                    for(var k = h.firstContext; null !== k;){\n                                        if (k.context === d && 0 !== (k.observedBits & f)) {\n                                            1 === l.tag && (k = Gc(c, null), k.tag = 2, Ic(l, k));\n                                            l.expirationTime < c && (l.expirationTime = c);\n                                            k = l.alternate;\n                                            null !== k && k.expirationTime < c && (k.expirationTime = c);\n                                            zc(l.return, c);\n                                            h.expirationTime < c && (h.expirationTime = c);\n                                            break;\n                                        }\n                                        k = k.next;\n                                    }\n                                } else g = 10 === l.tag ? l.type === b.type ? null : l.child : l.child;\n                                if (null !== g) g.return = l;\n                                else for(g = l; null !== g;){\n                                    if (g === b) {\n                                        g = null;\n                                        break;\n                                    }\n                                    l = g.sibling;\n                                    if (null !== l) {\n                                        l.return = g.return;\n                                        g = l;\n                                        break;\n                                    }\n                                    g = g.return;\n                                }\n                                l = g;\n                            }\n                        }\n                        Q(a, b, e.children, c);\n                        b = b.child;\n                    }\n                    return b;\n                case 9:\n                    return e = b.type, f = b.pendingProps, d = f.children, Ac(b, c), e = Cc(e, f.unstable_observedBits), d = d(e), b.effectTag |= 1, Q(a, b, d, c), b.child;\n                case 14:\n                    return e = b.type, f = rc(e, b.pendingProps), f = rc(e.type, f), se(a, b, e, f, d, c);\n                case 15:\n                    return ue(a, b, b.type, b.pendingProps, d, c);\n                case 17:\n                    return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : rc(d, e), null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), b.tag = 1, C(d) ? (a = !0, Kb(b)) : a = !1, Ac(b, c), Zc(b, d, e), ad(b, d, e, c), ye(null, b, d, !0, a, c);\n                case 19:\n                    return Ee(a, b, c);\n            }\n            throw Error(n(156, b.tag));\n        };\n        var lg = null, We = null;\n        function pg(a) {\n            if (\"undefined\" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;\n            var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n            if (b.isDisabled || !b.supportsFiber) return !0;\n            try {\n                var c = b.inject(a);\n                lg = function lg(a) {\n                    try {\n                        b.onCommitFiberRoot(c, a, void 0, 64 === (a.current.effectTag & 64));\n                    } catch (e) {}\n                };\n                We = function We(a) {\n                    try {\n                        b.onCommitFiberUnmount(c, a);\n                    } catch (e) {}\n                };\n            } catch (d) {}\n            return !0;\n        }\n        function qg(a, b, c, d) {\n            this.tag = a;\n            this.key = c;\n            this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;\n            this.index = 0;\n            this.ref = null;\n            this.pendingProps = b;\n            this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;\n            this.mode = d;\n            this.effectTag = 0;\n            this.lastEffect = this.firstEffect = this.nextEffect = null;\n            this.childExpirationTime = this.expirationTime = 0;\n            this.alternate = null;\n        }\n        function he(a, b, c, d) {\n            return new qg(a, b, c, d);\n        }\n        function te(a) {\n            a = a.prototype;\n            return !(!a || !a.isReactComponent);\n        }\n        function og(a) {\n            if (\"function\" === typeof a) return te(a) ? 1 : 0;\n            if (void 0 !== a && null !== a) {\n                a = a.$$typeof;\n                if (a === la) return 11;\n                if (a === oa) return 14;\n            }\n            return 2;\n        }\n        function fd(a, b) {\n            var c = a.alternate;\n            null === c ? (c = he(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.effectTag = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);\n            c.childExpirationTime = a.childExpirationTime;\n            c.expirationTime = a.expirationTime;\n            c.child = a.child;\n            c.memoizedProps = a.memoizedProps;\n            c.memoizedState = a.memoizedState;\n            c.updateQueue = a.updateQueue;\n            b = a.dependencies;\n            c.dependencies = null === b ? null : {\n                expirationTime: b.expirationTime,\n                firstContext: b.firstContext,\n                responders: b.responders\n            };\n            c.sibling = a.sibling;\n            c.index = a.index;\n            c.ref = a.ref;\n            return c;\n        }\n        function hd(a, b, c, d, e, f) {\n            var g = 2;\n            d = a;\n            if (\"function\" === typeof a) te(a) && (g = 1);\n            else if (\"string\" === typeof a) g = 5;\n            else a: switch(a){\n                case ea:\n                    return jd(c.children, e, f, b);\n                case ka:\n                    g = 8;\n                    e |= 7;\n                    break;\n                case fa:\n                    g = 8;\n                    e |= 1;\n                    break;\n                case ha:\n                    return a = he(12, c, b, e | 8), a.elementType = ha, a.type = ha, a.expirationTime = f, a;\n                case ma:\n                    return a = he(13, c, b, e), a.type = ma, a.elementType = ma, a.expirationTime = f, a;\n                case na:\n                    return a = he(19, c, b, e), a.elementType = na, a.expirationTime = f, a;\n                default:\n                    if (\"object\" === typeof a && null !== a) switch(a.$$typeof){\n                        case ia:\n                            g = 10;\n                            break a;\n                        case ja:\n                            g = 9;\n                            break a;\n                        case la:\n                            g = 11;\n                            break a;\n                        case oa:\n                            g = 14;\n                            break a;\n                        case pa:\n                            g = 16;\n                            d = null;\n                            break a;\n                    }\n                    throw Error(n(130, null == a ? a : typeof a, \"\"));\n            }\n            b = he(g, c, b, e);\n            b.elementType = a;\n            b.type = d;\n            b.expirationTime = f;\n            return b;\n        }\n        function jd(a, b, c, d) {\n            a = he(7, a, d, b);\n            a.expirationTime = c;\n            return a;\n        }\n        function gd(a, b, c) {\n            a = he(6, a, null, b);\n            a.expirationTime = c;\n            return a;\n        }\n        function id(a, b, c) {\n            b = he(4, null !== a.children ? a.children : [], a.key, b);\n            b.expirationTime = c;\n            b.stateNode = {\n                containerInfo: a.containerInfo,\n                pendingChildren: null,\n                implementation: a.implementation\n            };\n            return b;\n        }\n        function rg(a, b, c) {\n            this.tag = b;\n            this.current = null;\n            this.containerInfo = a;\n            this.pingCache = this.pendingChildren = null;\n            this.finishedExpirationTime = 0;\n            this.finishedWork = null;\n            this.timeoutHandle = Oa;\n            this.pendingContext = this.context = null;\n            this.hydrate = c;\n            this.callbackNode = null;\n            this.callbackPriority = 90;\n            this.lastExpiredTime = this.lastPingedTime = this.nextKnownPendingLevel = this.lastSuspendedTime = this.firstSuspendedTime = this.firstPendingTime = 0;\n        }\n        function Sf(a, b) {\n            var c = a.firstSuspendedTime;\n            a = a.lastSuspendedTime;\n            return 0 !== c && c >= b && a <= b;\n        }\n        function Pf(a, b) {\n            var c = a.firstSuspendedTime, d = a.lastSuspendedTime;\n            c < b && (a.firstSuspendedTime = b);\n            if (d > b || 0 === c) a.lastSuspendedTime = b;\n            b <= a.lastPingedTime && (a.lastPingedTime = 0);\n            b <= a.lastExpiredTime && (a.lastExpiredTime = 0);\n        }\n        function Qf(a, b) {\n            b > a.firstPendingTime && (a.firstPendingTime = b);\n            var c = a.firstSuspendedTime;\n            0 !== c && (b >= c ? a.firstSuspendedTime = a.lastSuspendedTime = a.nextKnownPendingLevel = 0 : b >= a.lastSuspendedTime && (a.lastSuspendedTime = b + 1), b > a.nextKnownPendingLevel && (a.nextKnownPendingLevel = b));\n        }\n        function Uf(a, b) {\n            var c = a.lastExpiredTime;\n            if (0 === c || c > b) a.lastExpiredTime = b;\n        }\n        function sg(a) {\n            var b = a._reactInternalFiber;\n            if (void 0 === b) {\n                if (\"function\" === typeof a.render) throw Error(n(188));\n                throw Error(n(268, Object.keys(a)));\n            }\n            a = xa(b);\n            return null === a ? null : a.stateNode;\n        }\n        function tg(a, b) {\n            a = a.memoizedState;\n            null !== a && null !== a.dehydrated && a.retryTime < b && (a.retryTime = b);\n        }\n        function ug(a, b) {\n            tg(a, b);\n            (a = a.alternate) && tg(a, b);\n        }\n        var vg = {\n            createContainer: function createContainer(a, b, c) {\n                a = new rg(a, b, c);\n                b = he(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);\n                a.current = b;\n                return b.stateNode = a;\n            },\n            updateContainer: function updateContainer(a, b, c, d) {\n                var e = b.current, f = G(), g = Sc.suspense;\n                f = Vc(f, e, g);\n                a: if (c) {\n                    c = c._reactInternalFiber;\n                    b: {\n                        if (ua(c) !== c || 1 !== c.tag) throw Error(n(170));\n                        var l = c;\n                        do {\n                            switch(l.tag){\n                                case 3:\n                                    l = l.stateNode.context;\n                                    break b;\n                                case 1:\n                                    if (C(l.type)) {\n                                        l = l.stateNode.__reactInternalMemoizedMergedChildContext;\n                                        break b;\n                                    }\n                            }\n                            l = l.return;\n                        }while (null !== l);\n                        throw Error(n(171));\n                    }\n                    if (1 === c.tag) {\n                        var h = c.type;\n                        if (C(h)) {\n                            c = Jb(c, h, l);\n                            break a;\n                        }\n                    }\n                    c = l;\n                } else c = Db;\n                null === b.context ? b.context = c : b.pendingContext = c;\n                b = Gc(f, g);\n                b.payload = {\n                    element: a\n                };\n                d = void 0 === d ? null : d;\n                null !== d && (b.callback = d);\n                Ic(e, b);\n                Wc(e, f);\n                return f;\n            },\n            batchedEventUpdates: function batchedEventUpdates(a, b) {\n                var c = T;\n                T |= 2;\n                try {\n                    return a(b);\n                } finally{\n                    T = c, T === R && F();\n                }\n            },\n            batchedUpdates: function batchedUpdates(a, b) {\n                var c = T;\n                T |= 1;\n                try {\n                    return a(b);\n                } finally{\n                    T = c, T === R && F();\n                }\n            },\n            unbatchedUpdates: function unbatchedUpdates(a, b) {\n                var c = T;\n                T &= -2;\n                T |= rf;\n                try {\n                    return a(b);\n                } finally{\n                    T = c, T === R && F();\n                }\n            },\n            deferredUpdates: function deferredUpdates(a) {\n                return hc(97, a);\n            },\n            syncUpdates: function syncUpdates(a, b, c, d) {\n                return hc(99, a.bind(null, b, c, d));\n            },\n            discreteUpdates: function discreteUpdates(a, b, c, d) {\n                var e = T;\n                T |= 4;\n                try {\n                    return hc(98, a.bind(null, b, c, d));\n                } finally{\n                    T = e, T === R && F();\n                }\n            },\n            flushDiscreteUpdates: function flushDiscreteUpdates() {\n                (T & (1 | S | sf)) === R && (dg(), Vf());\n            },\n            flushControlled: function flushControlled(a) {\n                var b = T;\n                T |= 1;\n                try {\n                    hc(99, a);\n                } finally{\n                    T = b, T === R && F();\n                }\n            },\n            flushSync: eg,\n            flushPassiveEffects: Vf,\n            IsThisRendererActing: {\n                current: !1\n            },\n            getPublicRootInstance: function getPublicRootInstance(a) {\n                a = a.current;\n                if (!a.child) return null;\n                switch(a.child.tag){\n                    case 5:\n                        return za(a.child.stateNode);\n                    default:\n                        return a.child.stateNode;\n                }\n            },\n            attemptSynchronousHydration: function attemptSynchronousHydration(a) {\n                switch(a.tag){\n                    case 3:\n                        var b = a.stateNode;\n                        b.hydrate && cg(b, b.firstPendingTime);\n                        break;\n                    case 13:\n                        eg(function() {\n                            return Wc(a, 1073741823);\n                        }), b = mc(G(), 150, 100), ug(a, b);\n                }\n            },\n            attemptUserBlockingHydration: function attemptUserBlockingHydration(a) {\n                if (13 === a.tag) {\n                    var b = mc(G(), 150, 100);\n                    Wc(a, b);\n                    ug(a, b);\n                }\n            },\n            attemptContinuousHydration: function attemptContinuousHydration(a) {\n                if (13 === a.tag) {\n                    G();\n                    var b = lc++;\n                    Wc(a, b);\n                    ug(a, b);\n                }\n            },\n            attemptHydrationAtCurrentPriority: function attemptHydrationAtCurrentPriority(a) {\n                if (13 === a.tag) {\n                    var b = G();\n                    b = Vc(b, a, null);\n                    Wc(a, b);\n                    ug(a, b);\n                }\n            },\n            findHostInstance: sg,\n            findHostInstanceWithWarning: function findHostInstanceWithWarning(a) {\n                return sg(a);\n            },\n            findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(a) {\n                a = ya(a);\n                return null === a ? null : 20 === a.tag ? a.stateNode.instance : a.stateNode;\n            },\n            shouldSuspend: function shouldSuspend() {\n                return !1;\n            },\n            injectIntoDevTools: function injectIntoDevTools(a) {\n                var b = a.findFiberByHostInstance;\n                return pg(aa({}, a, {\n                    overrideHookState: null,\n                    overrideProps: null,\n                    setSuspenseHandler: null,\n                    scheduleUpdate: null,\n                    currentDispatcherRef: q.ReactCurrentDispatcher,\n                    findHostInstanceByFiber: function findHostInstanceByFiber(a) {\n                        a = xa(a);\n                        return null === a ? null : a.stateNode;\n                    },\n                    findFiberByHostInstance: function findFiberByHostInstance(a) {\n                        return b ? b(a) : null;\n                    },\n                    findHostInstancesForRefresh: null,\n                    scheduleRefresh: null,\n                    scheduleRoot: null,\n                    setRefreshHandler: null,\n                    getCurrentFiber: null\n                }));\n            }\n        };\n        module.exports = vg.default || vg;\n        var $$$renderer = module.exports;\n        module.exports = $$$reconciler;\n        return $$$renderer;\n    };\n})(reactReconciler_production_min);\nvar reactReconciler_production_minExports = reactReconciler_production_min.exports;\nvar ReactFiberReconciler = /*@__PURE__*/ getDefaultExportFromCjs(reactReconciler_production_minExports);\n/* eslint-disable no-continue */ /**\n * Checks if two sets of props are equal (recursively)\n *\n * @param {Object} a props A\n * @param {Object} b props B\n * @returns {boolean} props equals?\n *\n */ var propsEqual = function propsEqual(a, b) {\n    var oldPropsKeys = Object.keys(a);\n    var newPropsKeys = Object.keys(b);\n    if (oldPropsKeys.length !== newPropsKeys.length) {\n        return false;\n    }\n    for(var i = 0; i < oldPropsKeys.length; i += 1){\n        var propName = oldPropsKeys[i];\n        if (propName === \"render\" && !a[propName] !== !b[propName]) {\n            return false;\n        }\n        if (propName !== \"children\" && a[propName] !== b[propName]) {\n            if (typeof a[propName] === \"object\" && typeof b[propName] === \"object\" && propsEqual(a[propName], b[propName])) {\n                continue;\n            }\n            return false;\n        }\n        if (propName === \"children\" && (typeof a[propName] === \"string\" || typeof b[propName] === \"string\")) {\n            return a[propName] === b[propName];\n        }\n    }\n    return true;\n};\nvar _excluded = [\n    \"style\",\n    \"children\"\n], _excluded2 = [\n    \"style\"\n];\nvar emptyObject = {};\nvar appendChild = function appendChild(parentInstance, child) {\n    var isParentText = parentInstance.type === \"TEXT\" || parentInstance.type === \"LINK\" || parentInstance.type === \"TSPAN\";\n    var isChildTextInstance = child.type === \"TEXT_INSTANCE\";\n    var isOrphanTextInstance = isChildTextInstance && !isParentText;\n    // Ignore orphan text instances.\n    // Caused by cases such as <>{name && <Text>{name}</Text>}</>\n    if (isOrphanTextInstance) {\n        console.warn(\"Invalid '\" + child.value + \"' string child outside <Text> component\");\n        return;\n    }\n    parentInstance.children.push(child);\n};\nvar createRenderer = function createRenderer(_ref) {\n    var _ref$onChange = _ref.onChange, onChange = _ref$onChange === void 0 ? function() {} : _ref$onChange;\n    return ReactFiberReconciler({\n        schedulePassiveEffects: scheduler__WEBPACK_IMPORTED_MODULE_13__.unstable_scheduleCallback,\n        cancelPassiveEffects: scheduler__WEBPACK_IMPORTED_MODULE_13__.unstable_cancelCallback,\n        supportsMutation: true,\n        isPrimaryRenderer: false,\n        warnsIfNotActing: false,\n        appendInitialChild: appendChild,\n        createInstance: function createInstance(type, _ref2) {\n            var style = _ref2.style;\n            _ref2.children;\n            var props = _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_10__(_ref2, _excluded);\n            return {\n                type: type,\n                box: {},\n                style: style || {},\n                props: props || {},\n                children: []\n            };\n        },\n        createTextInstance: function createTextInstance(text, rootContainerInstance) {\n            return {\n                type: \"TEXT_INSTANCE\",\n                value: text\n            };\n        },\n        finalizeInitialChildren: function finalizeInitialChildren(element, type, props) {\n            return false;\n        },\n        getPublicInstance: function getPublicInstance(instance) {\n            return instance;\n        },\n        prepareForCommit: function prepareForCommit() {\n        // Noop\n        },\n        clearContainer: function clearContainer() {\n        // Noop\n        },\n        prepareUpdate: function prepareUpdate(element, type, oldProps, newProps) {\n            return !propsEqual(oldProps, newProps);\n        },\n        resetAfterCommit: onChange,\n        resetTextContent: function resetTextContent(element) {\n        // Noop\n        },\n        getRootHostContext: function getRootHostContext() {\n            return emptyObject;\n        },\n        getChildHostContext: function getChildHostContext() {\n            return emptyObject;\n        },\n        shouldSetTextContent: function shouldSetTextContent(type, props) {\n            return false;\n        },\n        now: Date.now,\n        useSyncScheduling: true,\n        appendChild: appendChild,\n        appendChildToContainer: function appendChildToContainer(parentInstance, child) {\n            if (parentInstance.type === \"ROOT\") {\n                parentInstance.document = child;\n            } else {\n                appendChild(parentInstance, child);\n            }\n        },\n        insertBefore: function insertBefore(parentInstance, child, beforeChild) {\n            var _parentInstance$child;\n            var index = (_parentInstance$child = parentInstance.children) === null || _parentInstance$child === void 0 ? void 0 : _parentInstance$child.indexOf(beforeChild);\n            if (index === undefined) return;\n            if (index !== -1 && child) parentInstance.children.splice(index, 0, child);\n        },\n        removeChild: function removeChild(parentInstance, child) {\n            var _parentInstance$child2;\n            var index = (_parentInstance$child2 = parentInstance.children) === null || _parentInstance$child2 === void 0 ? void 0 : _parentInstance$child2.indexOf(child);\n            if (index === undefined) return;\n            if (index !== -1) parentInstance.children.splice(index, 1);\n        },\n        removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {\n            var _parentInstance$child3;\n            var index = (_parentInstance$child3 = parentInstance.children) === null || _parentInstance$child3 === void 0 ? void 0 : _parentInstance$child3.indexOf(child);\n            if (index === undefined) return;\n            if (index !== -1) parentInstance.children.splice(index, 1);\n        },\n        commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {\n            textInstance.value = newText;\n        },\n        commitUpdate: function commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n            var style = newProps.style, props = _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_10__(newProps, _excluded2);\n            instance.props = props;\n            instance.style = style;\n        }\n    });\n};\nvar name = \"@react-pdf/renderer\";\nvar version$1 = \"3.4.4\";\nvar license = \"MIT\";\nvar description = \"Create PDF files on the browser and server\";\nvar author = \"Diego Muracciole <diegomuracciole@gmail.com>\";\nvar homepage = \"https://github.com/diegomura/react-pdf#readme\";\nvar type = \"module\";\nvar main = \"./lib/react-pdf.cjs\";\nvar module = \"./lib/react-pdf.js\";\nvar browser = {\n    \"./lib/react-pdf.js\": \"./lib/react-pdf.browser.js\",\n    \"./lib/react-pdf.cjs\": \"./lib/react-pdf.browser.cjs\"\n};\nvar exports = {\n    \".\": {\n        \"import\": \"./lib/react-pdf.js\",\n        require: \"./lib/react-pdf.cjs\",\n        \"default\": \"./lib/react-pdf.js\"\n    }\n};\nvar repository = {\n    type: \"git\",\n    url: \"https://github.com/diegomura/react-pdf.git\",\n    directory: \"packages/renderer\"\n};\nvar scripts = {\n    build: \"rimraf ./lib && rollup -c\",\n    watch: \"rimraf ./lib && rollup -c -w\",\n    size: \"size-limit\",\n    lint: \"eslint src\",\n    test: \"vitest && vitest --config vitest.browser.config.js\"\n};\nvar dependencies = {\n    \"@babel/runtime\": \"^7.20.13\",\n    \"@react-pdf/font\": \"^2.5.1\",\n    \"@react-pdf/layout\": \"^3.12.1\",\n    \"@react-pdf/pdfkit\": \"^3.1.10\",\n    \"@react-pdf/primitives\": \"^3.1.1\",\n    \"@react-pdf/render\": \"^3.4.4\",\n    \"@react-pdf/types\": \"^2.5.0\",\n    events: \"^3.3.0\",\n    \"object-assign\": \"^4.1.1\",\n    \"prop-types\": \"^15.6.2\",\n    queue: \"^6.0.1\",\n    scheduler: \"^0.17.0\"\n};\nvar peerDependencies = {\n    react: \"^16.8.0 || ^17.0.0 || ^18.0.0\"\n};\nvar files = [\n    \"lib\",\n    \"index.d.ts\"\n];\nvar collective = {\n    type: \"opencollective\",\n    url: \"https://opencollective.com/react-pdf\",\n    logo: \"https://opencollective.com/opencollective/logo.txt\"\n};\nvar devDependencies = {\n    \"@size-limit/preset-big-lib\": \"^11.0.1\",\n    assert: \"^2.0.0\",\n    \"browserify-zlib\": \"^0.2.0\",\n    buffer: \"^6.0.3\",\n    process: \"^0.11.10\",\n    \"react-reconciler\": \"0.23.0\",\n    \"size-limit\": \"^11.0.1\",\n    util: \"^0.12.4\"\n};\nvar packageJson = {\n    name: name,\n    version: version$1,\n    license: license,\n    description: description,\n    author: author,\n    homepage: homepage,\n    type: type,\n    main: main,\n    module: module,\n    browser: browser,\n    exports: exports,\n    repository: repository,\n    scripts: scripts,\n    dependencies: dependencies,\n    peerDependencies: peerDependencies,\n    \"lint-staged\": {\n        \"*.js\": [\n            \"yarn lint\",\n            \"prettier --write\"\n        ]\n    },\n    files: files,\n    collective: collective,\n    devDependencies: devDependencies\n};\nvar version = packageJson.version;\nvar fontStore = new _react_pdf_font__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n// We must keep a single renderer instance, otherwise React will complain\nvar renderer;\n// The pdf instance acts as an event emitter for DOM usage.\n// We only want to trigger an update when PDF content changes\nvar events = {};\nvar pdf = function pdf(initialValue) {\n    var onChange = function onChange() {\n        var _events$change;\n        var listeners = ((_events$change = events.change) === null || _events$change === void 0 ? void 0 : _events$change.slice()) || [];\n        for(var i = 0; i < listeners.length; i += 1)listeners[i]();\n    };\n    var container = {\n        type: \"ROOT\",\n        document: null\n    };\n    renderer = renderer || createRenderer({\n        onChange: onChange\n    });\n    var mountNode = renderer.createContainer(container);\n    var updateContainer = function updateContainer(doc, callback) {\n        renderer.updateContainer(doc, mountNode, null, callback);\n    };\n    if (initialValue) updateContainer(initialValue);\n    var render = /*#__PURE__*/ function() {\n        var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_2__().mark(function _callee(compress) {\n            var props, pdfVersion, language, pageLayout, pageMode, ctx, layout, fileStream;\n            return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_2__().wrap(function _callee$(_context) {\n                while(1)switch(_context.prev = _context.next){\n                    case 0:\n                        if (compress === void 0) {\n                            compress = true;\n                        }\n                        props = container.document.props || {};\n                        pdfVersion = props.pdfVersion, language = props.language, pageLayout = props.pageLayout, pageMode = props.pageMode;\n                        ctx = new _react_pdf_pdfkit__WEBPACK_IMPORTED_MODULE_8__[\"default\"]({\n                            compress: compress,\n                            pdfVersion: pdfVersion,\n                            lang: language,\n                            displayTitle: true,\n                            autoFirstPage: false,\n                            pageLayout: pageLayout,\n                            pageMode: pageMode\n                        });\n                        _context.next = 6;\n                        return (0,_react_pdf_layout__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(container.document, fontStore);\n                    case 6:\n                        layout = _context.sent;\n                        fileStream = (0,_react_pdf_render__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(ctx, layout);\n                        return _context.abrupt(\"return\", {\n                            layout: layout,\n                            fileStream: fileStream\n                        });\n                    case 9:\n                    case \"end\":\n                        return _context.stop();\n                }\n            }, _callee);\n        }));\n        return function render(_x) {\n            return _ref.apply(this, arguments);\n        };\n    }();\n    var callOnRender = function callOnRender(params) {\n        if (params === void 0) {\n            params = {};\n        }\n        if (container.document.props.onRender) {\n            container.document.props.onRender(params);\n        }\n    };\n    var toBlob = /*#__PURE__*/ function() {\n        var _ref2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_2__().mark(function _callee2() {\n            var chunks, _yield$render, _INTERNAL__LAYOUT__DATA_, instance;\n            return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_2__().wrap(function _callee2$(_context2) {\n                while(1)switch(_context2.prev = _context2.next){\n                    case 0:\n                        chunks = [];\n                        _context2.next = 3;\n                        return render();\n                    case 3:\n                        _yield$render = _context2.sent;\n                        _INTERNAL__LAYOUT__DATA_ = _yield$render.layout;\n                        instance = _yield$render.fileStream;\n                        return _context2.abrupt(\"return\", new Promise(function(resolve, reject) {\n                            instance.on(\"data\", function(chunk) {\n                                chunks.push(chunk instanceof Uint8Array ? chunk : new Uint8Array(chunk));\n                            });\n                            instance.on(\"end\", function() {\n                                try {\n                                    var blob = new Blob(chunks, {\n                                        type: \"application/pdf\"\n                                    });\n                                    callOnRender({\n                                        blob: blob,\n                                        _INTERNAL__LAYOUT__DATA_: _INTERNAL__LAYOUT__DATA_\n                                    });\n                                    resolve(blob);\n                                } catch (error) {\n                                    reject(error);\n                                }\n                            });\n                        }));\n                    case 7:\n                    case \"end\":\n                        return _context2.stop();\n                }\n            }, _callee2);\n        }));\n        return function toBlob() {\n            return _ref2.apply(this, arguments);\n        };\n    }();\n    // TODO: rename this method to `toStream` in next major release, because it return stream not a buffer\n    var toBuffer = /*#__PURE__*/ function() {\n        var _ref3 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_2__().mark(function _callee3() {\n            var _yield$render2, _INTERNAL__LAYOUT__DATA_, fileStream;\n            return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_2__().wrap(function _callee3$(_context3) {\n                while(1)switch(_context3.prev = _context3.next){\n                    case 0:\n                        _context3.next = 2;\n                        return render();\n                    case 2:\n                        _yield$render2 = _context3.sent;\n                        _INTERNAL__LAYOUT__DATA_ = _yield$render2.layout;\n                        fileStream = _yield$render2.fileStream;\n                        callOnRender({\n                            _INTERNAL__LAYOUT__DATA_: _INTERNAL__LAYOUT__DATA_\n                        });\n                        return _context3.abrupt(\"return\", fileStream);\n                    case 7:\n                    case \"end\":\n                        return _context3.stop();\n                }\n            }, _callee3);\n        }));\n        return function toBuffer() {\n            return _ref3.apply(this, arguments);\n        };\n    }();\n    /*\n   * TODO: remove this method in next major release. it is buggy\n   * see\n   * - https://github.com/diegomura/react-pdf/issues/2112\n   * - https://github.com/diegomura/react-pdf/issues/2095\n   */ var toString = /*#__PURE__*/ function() {\n        var _ref4 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_2__().mark(function _callee4() {\n            var result, _yield$render3, instance;\n            return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_2__().wrap(function _callee4$(_context4) {\n                while(1)switch(_context4.prev = _context4.next){\n                    case 0:\n                        if (true) {\n                            console.warn(\"`toString` is deprecated and will be removed in next major release\");\n                        }\n                        result = \"\";\n                        _context4.next = 4;\n                        return render(false);\n                    case 4:\n                        _yield$render3 = _context4.sent;\n                        instance = _yield$render3.fileStream;\n                        return _context4.abrupt(\"return\", new Promise(function(resolve, reject) {\n                            try {\n                                instance.on(\"data\", function(buffer) {\n                                    result += buffer;\n                                });\n                                instance.on(\"end\", function() {\n                                    callOnRender();\n                                    resolve(result);\n                                });\n                            } catch (error) {\n                                reject(error);\n                            }\n                        }));\n                    case 7:\n                    case \"end\":\n                        return _context4.stop();\n                }\n            }, _callee4);\n        }));\n        return function toString() {\n            return _ref4.apply(this, arguments);\n        };\n    }();\n    var on = function on(event, listener) {\n        if (!events[event]) events[event] = [];\n        events[event].push(listener);\n    };\n    var removeListener = function removeListener(event, listener) {\n        if (!events[event]) return;\n        var idx = events[event].indexOf(listener);\n        if (idx > -1) events[event].splice(idx, 1);\n    };\n    return {\n        on: on,\n        container: container,\n        toBlob: toBlob,\n        toBuffer: toBuffer,\n        toString: toString,\n        removeListener: removeListener,\n        updateContainer: updateContainer\n    };\n};\nvar Font = fontStore;\nvar StyleSheet = {\n    create: function create(s) {\n        return s;\n    }\n};\n/**\n * @param {React.ReactElement} element\n * @returns {Promise<NodeJS.ReadableStream>}\n */ var renderToStream = /*#__PURE__*/ function() {\n    var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_2__().mark(function _callee(element) {\n        var instance, stream;\n        return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_2__().wrap(function _callee$(_context) {\n            while(1)switch(_context.prev = _context.next){\n                case 0:\n                    instance = pdf(element);\n                    _context.next = 3;\n                    return instance.toBuffer();\n                case 3:\n                    stream = _context.sent;\n                    return _context.abrupt(\"return\", stream);\n                case 5:\n                case \"end\":\n                    return _context.stop();\n            }\n        }, _callee);\n    }));\n    return function renderToStream(_x) {\n        return _ref.apply(this, arguments);\n    };\n}();\n/**\n * @param {React.ReactElement} element\n * @param {string} filePath\n * @param {Function} [callback]\n */ var renderToFile = /*#__PURE__*/ function() {\n    var _ref2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__(/*#__PURE__*/ _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_2__().mark(function _callee2(element, filePath, callback) {\n        var output, stream;\n        return _babel_runtime_helpers_regeneratorRuntime__WEBPACK_IMPORTED_MODULE_2__().wrap(function _callee2$(_context2) {\n            while(1)switch(_context2.prev = _context2.next){\n                case 0:\n                    _context2.next = 2;\n                    return renderToStream(element);\n                case 2:\n                    output = _context2.sent;\n                    stream = fs__WEBPACK_IMPORTED_MODULE_4__.createWriteStream(filePath);\n                    output.pipe(stream);\n                    return _context2.abrupt(\"return\", new Promise(function(resolve, reject) {\n                        stream.on(\"finish\", function() {\n                            if (callback) callback(output, filePath);\n                            resolve(output);\n                        });\n                        stream.on(\"error\", reject);\n                    }));\n                case 6:\n                case \"end\":\n                    return _context2.stop();\n            }\n        }, _callee2);\n    }));\n    return function renderToFile(_x2, _x3, _x4) {\n        return _ref2.apply(this, arguments);\n    };\n}();\n/**\n * @param {React.ReactElement} element\n * @returns {Promise<Buffer>}\n */ var renderToBuffer = function renderToBuffer(element) {\n    return renderToStream(element).then(function(stream) {\n        return new Promise(function(resolve, reject) {\n            var chunks = [];\n            stream.on(\"data\", function(chunk) {\n                return chunks.push(chunk);\n            });\n            stream.on(\"end\", function() {\n                return resolve(buffer__WEBPACK_IMPORTED_MODULE_5__.Buffer.concat(chunks));\n            });\n            stream.on(\"error\", function(error) {\n                return reject(error);\n            });\n        });\n    });\n};\nvar renderToString = function renderToString(element) {\n    if (true) {\n        console.warn(\"`renderToString` is deprecated and will be removed in next major release, use `renderToBuffer` instead\");\n    }\n    return renderToBuffer(element).then(function(buffer) {\n        return buffer.toString();\n    });\n};\nvar throwEnvironmentError = function throwEnvironmentError(name) {\n    throw new Error(name + \" is a web specific API. You're either using this component on Node, or your bundler is not loading react-pdf from the appropriate web build.\");\n};\nvar usePDF = function usePDF() {\n    throwEnvironmentError(\"usePDF\");\n};\nvar PDFViewer = function PDFViewer() {\n    throwEnvironmentError(\"PDFViewer\");\n};\nvar PDFDownloadLink = function PDFDownloadLink() {\n    throwEnvironmentError(\"PDFDownloadLink\");\n};\nvar BlobProvider = function BlobProvider() {\n    throwEnvironmentError(\"BlobProvider\");\n};\nvar render = renderToFile;\n// TODO: remove this default export in next major release because it breaks tree-shacking\nvar index = _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_0__({\n    pdf: pdf,\n    Font: Font,\n    version: version,\n    StyleSheet: StyleSheet,\n    usePDF: usePDF,\n    PDFViewer: PDFViewer,\n    BlobProvider: BlobProvider,\n    PDFDownloadLink: PDFDownloadLink,\n    renderToStream: renderToStream,\n    renderToString: renderToString,\n    renderToFile: renderToFile,\n    render: render\n}, _react_pdf_primitives__WEBPACK_IMPORTED_MODULE_1__);\n //# sourceMappingURL=react-pdf.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/renderer/lib/react-pdf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-pdf/stylesheet/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@react-pdf/stylesheet/lib/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ resolveStyles),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   processTransform: () => (/* binding */ processTransform),\n/* harmony export */   transformColor: () => (/* binding */ transformColor)\n/* harmony export */ });\n/* harmony import */ var _react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-pdf/fns */ \"(ssr)/./node_modules/@react-pdf/fns/lib/index.js\");\n/* harmony import */ var postcss_value_parser_lib_parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! postcss-value-parser/lib/parse.js */ \"(ssr)/./node_modules/postcss-value-parser/lib/parse.js\");\n/* harmony import */ var postcss_value_parser_lib_unit_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! postcss-value-parser/lib/unit.js */ \"(ssr)/./node_modules/postcss-value-parser/lib/unit.js\");\n/* harmony import */ var hsl_to_hex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hsl-to-hex */ \"(ssr)/./node_modules/hsl-to-hex/index.js\");\n/* harmony import */ var color_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! color-string */ \"(ssr)/./node_modules/color-string/index.js\");\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/extends.js\");\n/* harmony import */ var media_engine__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! media-engine */ \"(ssr)/./node_modules/media-engine/src/index.js\");\n\n\n\n\n\n\n\n// https://developer.mozilla.org/en-US/docs/Web/CSS/flex#values\n// TODO: change flex defaults to [0, 1, 'auto'] as in spec in next major release\nvar flexDefaults = [\n    1,\n    1,\n    0\n];\n/**\n * @type {(number | 'auto')[]}\n */ var flexAuto = [\n    1,\n    1,\n    \"auto\"\n];\nvar expandFlex = function expandFlex(key, value) {\n    /**\n   * @type {(number | 'auto')[]}\n   */ var defaults = flexDefaults;\n    var matches = [];\n    if (value === \"auto\") {\n        defaults = flexAuto;\n    } else {\n        matches = (\"\" + value).split(\" \");\n    }\n    var flexGrow = matches[0] || defaults[0];\n    var flexShrink = matches[1] || defaults[1];\n    var flexBasis = matches[2] || defaults[2];\n    return {\n        flexGrow: flexGrow,\n        flexShrink: flexShrink,\n        flexBasis: flexBasis\n    };\n};\n/* eslint-disable no-plusplus */ // This file is ran directly with Node - needs to have .js extension\n// eslint-disable-next-line import/extensions\nvar BOX_MODEL_UNITS = \"px,in,mm,cm,pt,%,vw,vh\";\nvar logError = function logError(style, value) {\n    console.error(\"\\n    @react-pdf/stylesheet parsing error:\\n\\n    \" + style + \": \" + value + \",\\n    \" + \" \".repeat(style.length + 2) + \"^\\n    Unsupported \" + style + \" value format\\n  \");\n};\n/**\n * @param {Object} options\n * @param {Function} [options.expandsTo]\n * @param {number} [options.maxValues]\n * @param {boolean} [options.autoSupported]\n */ var expandBoxModel = function expandBoxModel(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp, expandsTo = _ref.expandsTo, _ref$maxValues = _ref.maxValues, maxValues = _ref$maxValues === void 0 ? 1 : _ref$maxValues, _ref$autoSupported = _ref.autoSupported, autoSupported = _ref$autoSupported === void 0 ? false : _ref$autoSupported;\n    return function(model, value) {\n        var _ref2;\n        var nodes = postcss_value_parser_lib_parse_js__WEBPACK_IMPORTED_MODULE_1__(\"\" + value);\n        var parts = [];\n        for(var i = 0; i < nodes.length; i++){\n            var node = nodes[i];\n            // value contains `calc`, `url` or other css function\n            // `,`, `/` or strings that unsupported by margin and padding\n            if (node.type === \"function\" || node.type === \"string\" || node.type === \"div\") {\n                logError(model, value);\n                return {};\n            }\n            if (node.type === \"word\") {\n                if (node.value === \"auto\" && autoSupported) {\n                    parts.push(node.value);\n                } else {\n                    var result = postcss_value_parser_lib_unit_js__WEBPACK_IMPORTED_MODULE_2__(node.value);\n                    // when unit isn't specified this condition is true\n                    if (result && BOX_MODEL_UNITS.includes(result.unit)) {\n                        parts.push(node.value);\n                    } else {\n                        logError(model, value);\n                        return {};\n                    }\n                }\n            }\n        }\n        // checks that we have enough parsed values\n        if (parts.length > maxValues) {\n            logError(model, value);\n            return {};\n        }\n        var first = parts[0];\n        if (expandsTo) {\n            var second = parts[1] || parts[0];\n            var third = parts[2] || parts[0];\n            var fourth = parts[3] || parts[1] || parts[0];\n            return expandsTo({\n                first: first,\n                second: second,\n                third: third,\n                fourth: fourth\n            });\n        }\n        return _ref2 = {}, _ref2[model] = first, _ref2;\n    };\n};\nvar processMargin = expandBoxModel({\n    expandsTo: function expandsTo(_ref) {\n        var first = _ref.first, second = _ref.second, third = _ref.third, fourth = _ref.fourth;\n        return {\n            marginTop: first,\n            marginRight: second,\n            marginBottom: third,\n            marginLeft: fourth\n        };\n    },\n    maxValues: 4,\n    autoSupported: true\n});\nvar processMarginVertical = expandBoxModel({\n    expandsTo: function expandsTo(_ref2) {\n        var first = _ref2.first, second = _ref2.second;\n        return {\n            marginTop: first,\n            marginBottom: second\n        };\n    },\n    maxValues: 2,\n    autoSupported: true\n});\nvar processMarginHorizontal = expandBoxModel({\n    expandsTo: function expandsTo(_ref3) {\n        var first = _ref3.first, second = _ref3.second;\n        return {\n            marginRight: first,\n            marginLeft: second\n        };\n    },\n    maxValues: 2,\n    autoSupported: true\n});\nvar processMarginSingle = expandBoxModel({\n    autoSupported: true\n});\nvar BORDER_SHORTHAND_REGEX = /(-?\\d+(\\.\\d+)?(px|in|mm|cm|pt|vw|vh|px)?)\\s(\\S+)\\s(.+)/;\nvar matchBorderShorthand = function matchBorderShorthand(value) {\n    return value.match(BORDER_SHORTHAND_REGEX) || [];\n};\nvar expandBorders = function expandBorders(key, value) {\n    var match = matchBorderShorthand(\"\" + value);\n    if (match) {\n        var color = match[5] || value;\n        var style = match[4] || value;\n        var width = match[1] || value;\n        if (key.match(/(Top|Right|Bottom|Left)$/)) {\n            var _ref;\n            return _ref = {}, _ref[key + \"Color\"] = color, _ref[key + \"Style\"] = style, _ref[key + \"Width\"] = width, _ref;\n        }\n        if (key.match(/Color$/)) {\n            return {\n                borderTopColor: color,\n                borderRightColor: color,\n                borderBottomColor: color,\n                borderLeftColor: color\n            };\n        }\n        if (key.match(/Style$/)) {\n            return {\n                borderTopStyle: style,\n                borderRightStyle: style,\n                borderBottomStyle: style,\n                borderLeftStyle: style\n            };\n        }\n        if (key.match(/Width$/)) {\n            return {\n                borderTopWidth: width,\n                borderRightWidth: width,\n                borderBottomWidth: width,\n                borderLeftWidth: width\n            };\n        }\n        if (key.match(/Radius$/)) {\n            return {\n                borderTopLeftRadius: value,\n                borderTopRightRadius: value,\n                borderBottomRightRadius: value,\n                borderBottomLeftRadius: value\n            };\n        }\n        return {\n            borderTopColor: color,\n            borderTopStyle: style,\n            borderTopWidth: width,\n            borderRightColor: color,\n            borderRightStyle: style,\n            borderRightWidth: width,\n            borderBottomColor: color,\n            borderBottomStyle: style,\n            borderBottomWidth: width,\n            borderLeftColor: color,\n            borderLeftStyle: style,\n            borderLeftWidth: width\n        };\n    }\n    return value;\n};\nvar processPadding = expandBoxModel({\n    expandsTo: function expandsTo(_ref) {\n        var first = _ref.first, second = _ref.second, third = _ref.third, fourth = _ref.fourth;\n        return {\n            paddingTop: first,\n            paddingRight: second,\n            paddingBottom: third,\n            paddingLeft: fourth\n        };\n    },\n    maxValues: 4\n});\nvar processPaddingVertical = expandBoxModel({\n    expandsTo: function expandsTo(_ref2) {\n        var first = _ref2.first, second = _ref2.second;\n        return {\n            paddingTop: first,\n            paddingBottom: second\n        };\n    },\n    maxValues: 2\n});\nvar processPaddingHorizontal = expandBoxModel({\n    expandsTo: function expandsTo(_ref3) {\n        var first = _ref3.first, second = _ref3.second;\n        return {\n            paddingRight: first,\n            paddingLeft: second\n        };\n    },\n    maxValues: 2\n});\nvar processPaddingSingle = expandBoxModel();\nvar expandObjectPosition = function expandObjectPosition(key, value) {\n    var match = (\"\" + value).split(\" \");\n    return {\n        objectPositionX: (match === null || match === void 0 ? void 0 : match[0]) || value,\n        objectPositionY: (match === null || match === void 0 ? void 0 : match[1]) || value\n    };\n};\nvar Y_AXIS_SHORTHANDS = {\n    top: true,\n    bottom: true\n};\nvar sortTransformOriginPair = function sortTransformOriginPair(a, b) {\n    if (Y_AXIS_SHORTHANDS[a]) return 1;\n    if (Y_AXIS_SHORTHANDS[b]) return -1;\n    return 0;\n};\nvar getTransformOriginPair = function getTransformOriginPair(values) {\n    if (!values || values.length === 0) return [\n        \"center\",\n        \"center\"\n    ];\n    var pair = values.length === 1 ? [\n        values[0],\n        \"center\"\n    ] : values;\n    return pair.sort(sortTransformOriginPair);\n};\n// Transforms shorthand transformOrigin values\nvar expandTransformOrigin = function expandTransformOrigin(key, value) {\n    var match = (\"\" + value).split(\" \");\n    var pair = getTransformOriginPair(match);\n    return {\n        transformOriginX: pair[0],\n        transformOriginY: pair[1]\n    };\n};\nvar expandGap = function expandGap(key, value) {\n    var match = (\"\" + value).split(\" \");\n    return {\n        rowGap: (match === null || match === void 0 ? void 0 : match[0]) || value,\n        columnGap: (match === null || match === void 0 ? void 0 : match[1]) || value\n    };\n};\nvar shorthands = {\n    flex: expandFlex,\n    gap: expandGap,\n    margin: processMargin,\n    marginHorizontal: processMarginHorizontal,\n    marginVertical: processMarginVertical,\n    marginTop: processMarginSingle,\n    marginRight: processMarginSingle,\n    marginBottom: processMarginSingle,\n    marginLeft: processMarginSingle,\n    padding: processPadding,\n    paddingHorizontal: processPaddingHorizontal,\n    paddingVertical: processPaddingVertical,\n    paddingTop: processPaddingSingle,\n    paddingRight: processPaddingSingle,\n    paddingBottom: processPaddingSingle,\n    paddingLeft: processPaddingSingle,\n    border: expandBorders,\n    borderTop: expandBorders,\n    borderRight: expandBorders,\n    borderBottom: expandBorders,\n    borderLeft: expandBorders,\n    borderColor: expandBorders,\n    borderRadius: expandBorders,\n    borderStyle: expandBorders,\n    borderWidth: expandBorders,\n    objectPosition: expandObjectPosition,\n    transformOrigin: expandTransformOrigin\n};\n/**\n * Transforms style key-value\n *\n * @param {string} key style key\n * @param {string} value style value\n * @returns {string | Number} transformed style values\n */ var expandStyle = function expandStyle(key, value) {\n    var _ref;\n    return shorthands[key] ? shorthands[key](key, value) : (_ref = {}, _ref[key] = value, _ref);\n};\n/**\n * Expand the shorthand properties.\n *\n * @param {Object} style object\n * @returns {Object} expanded style object\n */ var expand = function expand(style) {\n    if (!style) return style;\n    var propsArray = Object.keys(style);\n    var resolvedStyle = {};\n    for(var i = 0; i < propsArray.length; i += 1){\n        var key = propsArray[i];\n        var value = style[key];\n        var extended = expandStyle(key, value);\n        var keys = Object.keys(extended);\n        for(var j = 0; j < keys.length; j += 1){\n            var propName = keys[j];\n            var propValue = extended[propName];\n            resolvedStyle[propName] = propValue;\n        }\n    }\n    return resolvedStyle;\n};\n/**\n * Remove nil values from array\n *\n * @template T\n * @param {(T | null | undefined)[]} array\n * @returns {T[]} array without nils\n */ var compact = function compact(array) {\n    return array.filter(Boolean);\n};\n/**\n * Merges style objects array\n *\n * @param {Object[]} styles style objects array\n * @returns {Object} merged style object\n */ var mergeStyles = function mergeStyles(styles) {\n    return styles.reduce(function(acc, style) {\n        var s = Array.isArray(style) ? flatten(style) : style;\n        Object.keys(s).forEach(function(key) {\n            if (s[key] !== null && s[key] !== undefined) {\n                acc[key] = s[key];\n            }\n        });\n        return acc;\n    }, {});\n};\n/**\n * Flattens an array of style objects, into one aggregated style object.\n *\n * @param {Object[]} styles style objects array\n * @returns {Object} flattened style object\n */ var flatten = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(mergeStyles, compact, _react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.castArray);\n/**\n * Parses scalar value in value and unit pairs\n *\n * @param {string} value scalar value\n * @returns {Object} parsed value\n */ var parseValue = function parseValue(value) {\n    var match = /^(-?\\d*\\.?\\d+)(in|mm|cm|pt|vh|vw|px)?$/g.exec(value);\n    return match ? {\n        value: parseFloat(match[1]),\n        unit: match[2] || \"pt\"\n    } : {\n        value: value,\n        unit: undefined\n    };\n};\n/**\n * Transform given scalar value\n *\n * @param {Object} container\n * @param {string} value styles value\n * @returns {Object} transformed value\n */ var transformUnit = function transformUnit(container, value) {\n    var scalar = parseValue(value);\n    var dpi = container.dpi || 72;\n    var mmFactor = 1 / 25.4 * dpi;\n    var cmFactor = 1 / 2.54 * dpi;\n    switch(scalar.unit){\n        case \"in\":\n            return scalar.value * dpi;\n        case \"mm\":\n            return scalar.value * mmFactor;\n        case \"cm\":\n            return scalar.value * cmFactor;\n        case \"vh\":\n            return scalar.value * (container.height / 100);\n        case \"vw\":\n            return scalar.value * (container.width / 100);\n        default:\n            return scalar.value;\n    }\n};\nvar isRgb = function isRgb(value) {\n    return /rgba?/g.test(value);\n};\nvar isHsl = function isHsl(value) {\n    return /hsla?/g.test(value);\n};\n/**\n * Transform rgb color to hexa\n *\n * @param {string} value styles value\n * @returns {Object} transformed value\n */ var parseRgb = function parseRgb(value) {\n    var rgb = color_string__WEBPACK_IMPORTED_MODULE_4__.get.rgb(value);\n    return color_string__WEBPACK_IMPORTED_MODULE_4__.to.hex(rgb);\n};\n/**\n * Transform Hsl color to hexa\n *\n * @param {string} value styles value\n * @returns {Object} transformed value\n */ var parseHsl = function parseHsl(value) {\n    var hsl = color_string__WEBPACK_IMPORTED_MODULE_4__.get.hsl(value).map(Math.round);\n    var hex = hsl_to_hex__WEBPACK_IMPORTED_MODULE_3__.apply(void 0, hsl);\n    return hex.toUpperCase();\n};\n/**\n * Transform given color to hexa\n *\n * @param {string} value styles value\n * @returns {Object} transformed value\n */ var transformColor = function transformColor(value) {\n    if (isRgb(value)) return parseRgb(value);\n    if (isHsl(value)) return parseHsl(value);\n    return value;\n};\nvar parse = function parse(transformString) {\n    var transforms = transformString.trim().split(/\\) |\\)/);\n    // Handle \"initial\", \"inherit\", \"unset\".\n    if (transforms.length === 1) {\n        return [\n            [\n                transforms[0],\n                true\n            ]\n        ];\n    }\n    var parsed = [];\n    for(var i = 0; i < transforms.length; i += 1){\n        var transform = transforms[i];\n        if (transform) {\n            var _transform$split = transform.split(\"(\"), name = _transform$split[0], rawValue = _transform$split[1];\n            var splitChar = rawValue.indexOf(\",\") >= 0 ? \",\" : \" \";\n            var value = rawValue.split(splitChar).map(function(val) {\n                return val.trim();\n            });\n            parsed.push({\n                operation: name,\n                value: value\n            });\n        }\n    }\n    return parsed;\n};\nvar parseAngle = function parseAngle(value) {\n    var unitsRegexp = /(-?\\d*\\.?\\d*)(\\w*)?/i;\n    var _unitsRegexp$exec = unitsRegexp.exec(value), angle = _unitsRegexp$exec[1], unit = _unitsRegexp$exec[2];\n    var number = Number.parseFloat(angle);\n    return unit === \"rad\" ? number * 180 / Math.PI : number;\n};\nvar normalizeTransformOperation = function normalizeTransformOperation(_ref) {\n    var operation = _ref.operation, value = _ref.value;\n    switch(operation){\n        case \"scale\":\n            {\n                var _value$map = value.map(function(num) {\n                    return Number.parseFloat(num);\n                }), scaleX = _value$map[0], _value$map$ = _value$map[1], scaleY = _value$map$ === void 0 ? scaleX : _value$map$;\n                return {\n                    operation: \"scale\",\n                    value: [\n                        scaleX,\n                        scaleY\n                    ]\n                };\n            }\n        case \"scaleX\":\n            {\n                return {\n                    operation: \"scale\",\n                    value: [\n                        Number.parseFloat(value),\n                        1\n                    ]\n                };\n            }\n        case \"scaleY\":\n            {\n                return {\n                    operation: \"scale\",\n                    value: [\n                        1,\n                        Number.parseFloat(value)\n                    ]\n                };\n            }\n        case \"rotate\":\n            {\n                return {\n                    operation: \"rotate\",\n                    value: [\n                        parseAngle(value)\n                    ]\n                };\n            }\n        case \"translate\":\n            {\n                return {\n                    operation: \"translate\",\n                    value: value.map(function(num) {\n                        return Number.parseFloat(num);\n                    })\n                };\n            }\n        case \"translateX\":\n            {\n                return {\n                    operation: \"translate\",\n                    value: [\n                        Number.parseFloat(value),\n                        0\n                    ]\n                };\n            }\n        case \"translateY\":\n            {\n                return {\n                    operation: \"translate\",\n                    value: [\n                        0,\n                        Number.parseFloat(value)\n                    ]\n                };\n            }\n        case \"skew\":\n            {\n                return {\n                    operation: \"skew\",\n                    value: value.map(parseAngle)\n                };\n            }\n        case \"skewX\":\n            {\n                return {\n                    operation: \"skew\",\n                    value: [\n                        parseAngle(value),\n                        0\n                    ]\n                };\n            }\n        case \"skewY\":\n            {\n                return {\n                    operation: \"skew\",\n                    value: [\n                        0,\n                        parseAngle(value)\n                    ]\n                };\n            }\n        default:\n            {\n                return {\n                    operation: operation,\n                    value: value.map(function(num) {\n                        return Number.parseFloat(num);\n                    })\n                };\n            }\n    }\n};\nvar normalize = function normalize(operations) {\n    return operations.map(function(operation) {\n        return normalizeTransformOperation(operation);\n    });\n};\nvar processTransform = function processTransform(value) {\n    if (typeof value !== \"string\") return value;\n    return normalize(parse(value));\n};\nvar FONT_WEIGHTS = {\n    thin: 100,\n    hairline: 100,\n    ultralight: 200,\n    extralight: 200,\n    light: 300,\n    normal: 400,\n    medium: 500,\n    semibold: 600,\n    demibold: 600,\n    bold: 700,\n    ultrabold: 800,\n    extrabold: 800,\n    heavy: 900,\n    black: 900\n};\nvar processFontWeight = function processFontWeight(value) {\n    if (!value) return FONT_WEIGHTS.normal;\n    if (typeof value === \"number\") return value;\n    var lv = value.toLowerCase();\n    if (FONT_WEIGHTS[lv]) return FONT_WEIGHTS[lv];\n    return value;\n};\nvar matchNumber = function matchNumber(value) {\n    return typeof value === \"string\" && /^-?\\d*\\.?\\d*$/.test(value);\n};\nvar castFloat = function castFloat(value) {\n    if (typeof value !== \"string\") return value;\n    if (matchNumber(value)) return parseFloat(value);\n    return value;\n};\nvar offsetKeyword = function offsetKeyword(value) {\n    switch(value){\n        case \"top\":\n        case \"left\":\n            return \"0%\";\n        case \"right\":\n        case \"bottom\":\n            return \"100%\";\n        case \"center\":\n            return \"50%\";\n        default:\n            return null;\n    }\n};\nvar transformObjectPosition = function transformObjectPosition(value) {\n    return offsetKeyword(value) || castFloat(value);\n};\nvar transformTransformOrigin = function transformTransformOrigin(value) {\n    return offsetKeyword(value) || castFloat(value);\n};\nvar handlers = {\n    transform: processTransform,\n    fontWeight: processFontWeight,\n    objectPositionX: transformObjectPosition,\n    objectPositionY: transformObjectPosition,\n    transformOriginX: transformTransformOrigin,\n    transformOriginY: transformTransformOrigin\n};\nvar transformStyle = function transformStyle(key, value, container) {\n    var result = handlers[key] ? handlers[key](value) : value;\n    return transformColor(transformUnit(container, castFloat(result)));\n};\n/**\n * @typedef {Function} Transform\n * @param {Object} style styles object\n * @returns {Object} transformed styles\n */ /**\n * Transform styles values\n *\n * @param {Object} container\n * @returns {Transform} transform function\n */ var transform = function transform(container) {\n    return function(style) {\n        if (!style) return style;\n        var propsArray = Object.keys(style);\n        var resolvedStyle = {};\n        for(var i = 0; i < propsArray.length; i += 1){\n            var key = propsArray[i];\n            var value = style[key];\n            var transformed = transformStyle(key, value, container);\n            resolvedStyle[key] = transformed;\n        }\n        return resolvedStyle;\n    };\n};\n/**\n * Resolves media queries in styles object\n *\n * @param {Object} container\n * @param {Object} styles object\n */ var resolveMediaQueries = function resolveMediaQueries(container, styles) {\n    return Object.keys(styles).reduce(function(acc, key) {\n        var _extends2;\n        if (/@media/.test(key)) {\n            var _matchMedia;\n            return _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_5__({}, acc, media_engine__WEBPACK_IMPORTED_MODULE_6__((_matchMedia = {}, _matchMedia[key] = styles[key], _matchMedia), container));\n        }\n        return _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_5__({}, acc, (_extends2 = {}, _extends2[key] = styles[key], _extends2));\n    }, {});\n};\n/**\n * Resolves styles\n *\n * @param {Object} container\n * @param {Object} style object\n * @returns {Object} resolved style object\n */ var resolveStyles = function resolveStyles(container, style) {\n    var computeMediaQueries = function computeMediaQueries(value) {\n        return resolveMediaQueries(container, value);\n    };\n    return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(transform(container), expand, computeMediaQueries, flatten)(style);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/stylesheet/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-pdf/textkit/lib/textkit.js":
/*!********************************************************!*\
  !*** ./node_modules/@react-pdf/textkit/lib/textkit.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bidi: () => (/* binding */ bidiEngine),\n/* harmony export */   \"default\": () => (/* binding */ layoutEngine),\n/* harmony export */   fontSubstitution: () => (/* binding */ fontSubstitution),\n/* harmony export */   justification: () => (/* binding */ justification),\n/* harmony export */   linebreaker: () => (/* binding */ linebreaker),\n/* harmony export */   scriptItemizer: () => (/* binding */ scriptItemizer),\n/* harmony export */   textDecoration: () => (/* binding */ textDecoration),\n/* harmony export */   wordHyphenation: () => (/* binding */ wordHyphenation)\n/* harmony export */ });\n/* harmony import */ var _react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-pdf/fns */ \"(ssr)/./node_modules/@react-pdf/fns/lib/index.js\");\n/* harmony import */ var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutPropertiesLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js\");\n/* harmony import */ var bidi_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bidi-js */ \"(ssr)/./node_modules/bidi-js/dist/bidi.mjs\");\n/* harmony import */ var _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/createForOfIteratorHelperLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/createForOfIteratorHelperLoose.js\");\n/* harmony import */ var unicode_properties__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unicode-properties */ \"(ssr)/./node_modules/unicode-properties/dist/module.mjs\");\n/* harmony import */ var hyphen__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! hyphen */ \"(ssr)/./node_modules/hyphen/index.js\");\n/* harmony import */ var hyphen_patterns_en_us_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! hyphen/patterns/en-us.js */ \"(ssr)/./node_modules/hyphen/patterns/en-us.js\");\n\n\n\n\n\n\n\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Fragment} Fragment\n */ /**\n * Create attributed string from text fragments\n *\n * @param {Fragment[]} fragments fragments\n * @returns {AttributedString} attributed string\n */ var fromFragments = function fromFragments(fragments) {\n    var offset = 0;\n    var string = \"\";\n    var runs = [];\n    fragments.forEach(function(fragment) {\n        string += fragment.string;\n        runs.push(_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__({}, fragment, {\n            start: offset,\n            end: offset + fragment.string.length,\n            attributes: fragment.attributes || {}\n        }));\n        offset += fragment.string.length;\n    });\n    return {\n        string: string,\n        runs: runs\n    };\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Default word hyphenation engine used when no one provided.\n * Does not perform word hyphenation at all\n *\n * @param {string} word\n * @returns {[string]} same word\n */ var defaultHyphenationEngine = function defaultHyphenationEngine(word) {\n    return [\n        word\n    ];\n};\n/**\n * Wrap words of attribute string\n *\n * @param {Object} engines layout engines\n * @param {Object} options layout options\n */ var wrapWords = function wrapWords(engines, options) {\n    if (engines === void 0) {\n        engines = {};\n    }\n    if (options === void 0) {\n        options = {};\n    }\n    /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string including syllables\n   */ return function(attributedString) {\n        var _engines$wordHyphenat, _engines;\n        var syllables = [];\n        var fragments = [];\n        var hyphenateWord = options.hyphenationCallback || ((_engines$wordHyphenat = (_engines = engines).wordHyphenation) === null || _engines$wordHyphenat === void 0 ? void 0 : _engines$wordHyphenat.call(_engines, options)) || defaultHyphenationEngine;\n        for(var i = 0; i < attributedString.runs.length; i += 1){\n            var string = \"\";\n            var run = attributedString.runs[i];\n            var words = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);\n            for(var j = 0; j < words.length; j += 1){\n                var word = words[j];\n                var parts = hyphenateWord(word);\n                syllables.push.apply(syllables, parts);\n                string += parts.join(\"\");\n            }\n            fragments.push(_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__({}, run, {\n                string: string\n            }));\n        }\n        return _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__({}, fromFragments(fragments), {\n            syllables: syllables\n        });\n    };\n};\n/**\n * @typedef {import('../types.js').Rect} Rect\n */ /**\n * Clone rect\n *\n * @param {Rect} rect rect\n * @returns {Rect} cloned rect\n */ var copy = function copy(rect) {\n    return Object.assign({}, rect);\n};\n/**\n * @typedef {import('../types.js').Rect} Rect\n */ /**\n *\n * @param {Rect} rect rect\n * @param {number} height height\n * @returns {[Rect, Rect]} partitioned rects\n */ var partition = function partition(rect, height) {\n    var a = Object.assign({}, rect, {\n        height: height\n    });\n    var b = Object.assign({}, rect, {\n        y: rect.y + height,\n        height: rect.height - height\n    });\n    return [\n        a,\n        b\n    ];\n};\n/**\n * @typedef {import('../types.js').Rect} Rect\n */ /**\n * Crop upper section of rect\n *\n * @param {number} height height\n * @param {Rect} rect rect\n * @returns {Rect} cropped rect\n */ var crop = function crop(height, rect) {\n    var _partition = partition(rect, height), result = _partition[1];\n    return result;\n};\n/**\n * Get paragraph block height\n *\n * @param {Object}  paragraph block\n * @returns {number} paragraph block height\n */ var height$2 = function height(paragraph) {\n    return paragraph.reduce(function(acc, block) {\n        return acc + block.box.height;\n    }, 0);\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Calculate run scale\n *\n * @param {Run} run run\n * @returns {number} scale\n */ var calculateScale = function calculateScale(run) {\n    var _attributes$font;\n    var attributes = run.attributes || {};\n    var fontSize = attributes.fontSize || 12;\n    var unitsPerEm = (_attributes$font = attributes.font) === null || _attributes$font === void 0 ? void 0 : _attributes$font.unitsPerEm;\n    return unitsPerEm ? fontSize / unitsPerEm : 0;\n};\n/**\n * Get run scale\n *\n * @param {Object}  run\n * @returns {number} scale\n */ var scale = function scale(run) {\n    var _run$attributes;\n    return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.scale) || calculateScale(run);\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Get ligature offset by index\n *\n * Ex. ffi ligature\n *\n *   glyphs:         l  o  f  f  i  m\n *   glyphIndices:   0  1  2  2  2  3\n *   offset:         0  0  0  1  2  0\n *\n * @param {number} index\n * @param {Run} run run\n * @returns {number} ligature offset\n */ var offset = function offset(index, run) {\n    if (!run) return 0;\n    var glyphIndices = run.glyphIndices || [];\n    var value = glyphIndices[index];\n    return glyphIndices.slice(0, index).filter(function(i) {\n        return i === value;\n    }).length;\n};\n/**\n * @typedef {import('../types.js').Font} Font\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Get run font\n *\n * @param {Run} run run\n * @returns {Font | null} font\n */ var getFont = function getFont(run) {\n    var _run$attributes;\n    return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.font) || null;\n};\n/**\n * @typedef {import('../types.js').Font} Font\n * @typedef {import('../types.js').Glyph} Glyph\n */ /**\n * Slice glyph between codePoints range\n * Util for breaking ligatures\n *\n * @param {number} start start code point index\n * @param {number} end end code point index\n * @param {Font} font font to generate new glyph\n * @param {Glyph} glyph glyph to be sliced\n * @returns {Glyph[]} sliced glyph parts\n */ var slice$2 = function slice(start, end, font, glyph) {\n    if (!glyph) return [];\n    if (start === end) return [];\n    if (start === 0 && end === glyph.codePoints.length) return [\n        glyph\n    ];\n    var codePoints = glyph.codePoints.slice(start, end);\n    var string = String.fromCodePoint.apply(String, codePoints);\n    // passing LTR To force fontkit to not reverse the string\n    return font ? font.layout(string, undefined, undefined, undefined, \"ltr\").glyphs : [\n        glyph\n    ];\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Return glyph index at string index, if glyph indices present.\n * Otherwise return string index\n *\n * @param {number} index index\n * @param {Run} run run\n * @returns {number} glyph index\n */ var glyphIndexAt = function glyphIndexAt(index, run) {\n    var _run$glyphIndices;\n    var result = run === null || run === void 0 ? void 0 : (_run$glyphIndices = run.glyphIndices) === null || _run$glyphIndices === void 0 ? void 0 : _run$glyphIndices[index];\n    return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(result) ? index : result;\n};\n/**\n * Returns new array starting with zero, and keeping same relation between consecutive values\n *\n * @param {number[]} array list\n * @returns {number[]} normalized array\n */ var normalize = function normalize(array) {\n    var head = array[0];\n    return array.map(function(value) {\n        return value - head;\n    });\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Slice run between glyph indices range\n *\n * @param {number} start glyph index\n * @param {number} end glyph index\n * @param {Run} run run\n * @returns {Run} sliced run\n */ var slice$1 = function slice(start, end, run) {\n    var _run$glyphs, _run$glyphs2;\n    var runScale = scale(run);\n    var font = getFont(run);\n    // Get glyph start and end indices\n    var startIndex = glyphIndexAt(start, run);\n    var endIndex = glyphIndexAt(end, run);\n    // Get start and end glyph\n    var startGlyph = (_run$glyphs = run.glyphs) === null || _run$glyphs === void 0 ? void 0 : _run$glyphs[startIndex];\n    var endGlyph = (_run$glyphs2 = run.glyphs) === null || _run$glyphs2 === void 0 ? void 0 : _run$glyphs2[endIndex];\n    // Get start ligature chunks (if any)\n    var startOffset = offset(start, run);\n    var startGlyphs = startOffset > 0 ? slice$2(startOffset, Infinity, font, startGlyph) : [];\n    // Get end ligature chunks (if any)\n    var endOffset = offset(end, run);\n    var endGlyphs = slice$2(0, endOffset, font, endGlyph);\n    // Compute new glyphs\n    var sliceStart = startIndex + Math.min(1, startOffset);\n    var glyphs = (run.glyphs || []).slice(sliceStart, endIndex);\n    // Compute new positions\n    var glyphPosition = function glyphPosition(g) {\n        return {\n            xAdvance: g.advanceWidth * runScale\n        };\n    };\n    var startPositions = startGlyphs.map(glyphPosition);\n    var positions = (run.positions || []).slice(sliceStart, endIndex);\n    var endPositions = endGlyphs.map(glyphPosition);\n    return Object.assign({}, run, {\n        start: run.start + start,\n        end: Math.min(run.end, run.start + end),\n        glyphIndices: normalize((run.glyphIndices || []).slice(start, end)),\n        glyphs: [\n            startGlyphs,\n            glyphs,\n            endGlyphs\n        ].flat(),\n        positions: [\n            startPositions,\n            positions,\n            endPositions\n        ].flat()\n    });\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Get run index that contains passed index\n *\n * @param {number} n index\n * @param {Run[]} runs runs\n * @returns {number} run index\n */ var runIndexAt$1 = function runIndexAt(n, runs) {\n    if (!runs) return -1;\n    return runs.findIndex(function(run) {\n        return run.start <= n && n < run.end;\n    });\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Filter runs contained between start and end\n *\n * @param {number} start\n * @param {number} end\n * @param {Run[]} runs\n * @returns {Run[]} filtered runs\n */ var filter = function filter(start, end, runs) {\n    var startIndex = runIndexAt$1(start, runs);\n    var endIndex = Math.max(runIndexAt$1(end - 1, runs), startIndex);\n    return runs.slice(startIndex, endIndex + 1);\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Subtract scalar to run\n *\n * @param {number} n scalar\n * @param {Run} run run\n * @returns {Object} subtracted run\n */ var subtract = function subtract(n, run) {\n    var start = run.start - n;\n    var end = run.end - n;\n    return Object.assign({}, run, {\n        start: start,\n        end: end\n    });\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Slice array of runs\n *\n * @param {number} start offset\n * @param {number} end offset\n * @param {Run[]} runs\n * @returns {Run[]} sliced runs\n */ var sliceRuns = function sliceRuns(start, end, runs) {\n    var sliceFirstRun = function sliceFirstRun(a) {\n        return slice$1(start - a.start, end - a.start, a);\n    };\n    var sliceLastRun = function sliceLastRun(a) {\n        return slice$1(0, end - a.start, a);\n    };\n    return runs.map(function(run, i) {\n        var result = run;\n        var isFirst = i === 0;\n        var isLast = !isFirst && i === runs.length - 1;\n        if (isFirst) result = sliceFirstRun(run);\n        if (isLast) result = sliceLastRun(run);\n        return subtract(start, result);\n    });\n};\n/**\n * Slice attributed string between two indices\n *\n * @param {number} start offset\n * @param {number} end offset\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string\n */ var slice = function slice(start, end, attributedString) {\n    if (attributedString.string.length === 0) return attributedString;\n    var string = attributedString.string.slice(start, end);\n    var filteredRuns = filter(start, end, attributedString.runs);\n    var slicedRuns = sliceRuns(start, end, filteredRuns);\n    return Object.assign({}, attributedString, {\n        string: string,\n        runs: slicedRuns\n    });\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * @param {string} string\n * @returns {number} index\n */ var findCharIndex = function findCharIndex(string) {\n    return string.search(/\\S/g);\n};\n/**\n * @param {string} string\n * @returns {number} index\n */ var findLastCharIndex = function findLastCharIndex(string) {\n    var match = string.match(/\\S/g);\n    return match ? string.lastIndexOf(match[match.length - 1]) : -1;\n};\n/**\n * Removes (strips) whitespace from both ends of the attributted string.\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string\n */ var trim = function trim(attributedString) {\n    var start = findCharIndex(attributedString.string);\n    var end = findLastCharIndex(attributedString.string);\n    return slice(start, end + 1, attributedString);\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Returns empty run\n *\n * @returns {Run} empty run\n */ var empty$1 = function empty() {\n    return {\n        start: 0,\n        end: 0,\n        glyphIndices: [],\n        glyphs: [],\n        positions: [],\n        attributes: {}\n    };\n};\n/**\n * Check if value is a number\n *\n * @template {unknown} T\n * @param {T} value Value to check\n * @returns {value is number} Whether value is a number\n */ var isNumber = function isNumber(value) {\n    return typeof value === \"number\";\n};\n/**\n * Append glyph indices with given length\n *\n * Ex. appendIndices(3, [0, 1, 2, 2]) => [0, 1, 2, 2, 3, 3, 3]\n *\n * @param {number} length length\n * @param {number[]} indices glyph indices\n * @returns {number[]} extended glyph indices\n */ var appendIndices = function appendIndices(length, indices) {\n    var lastIndex = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.last)(indices);\n    var value = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(lastIndex) ? 0 : lastIndex + 1;\n    var newIndices = Array(length).fill(value);\n    return indices.concat(newIndices);\n};\n/**\n * @typedef {import('../types.js').Font} Font\n * @typedef {import('../types.js').Glyph} Glyph\n */ /**\n * Get glyph for a given code point\n *\n * @param {number} [value] codePoint\n * @param {Font} [font] font\n * @returns {Glyph} glyph\n * */ var fromCodePoint = function fromCodePoint(value, font) {\n    return font && value ? font.glyphForCodePoint(value) : null;\n};\n/**\n * @typedef {import('../types.js').Glyph} Glyph\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Append glyph to run\n *\n * @param {Glyph} glyph glyph\n * @param {Run} run run\n * @returns {Run} run with glyph\n */ var appendGlyph = function appendGlyph(glyph, run) {\n    var _glyph$codePoints;\n    var glyphLength = ((_glyph$codePoints = glyph.codePoints) === null || _glyph$codePoints === void 0 ? void 0 : _glyph$codePoints.length) || 0;\n    var end = run.end + glyphLength;\n    var glyphs = run.glyphs.concat(glyph);\n    var glyphIndices = appendIndices(glyphLength, run.glyphIndices);\n    if (!run.positions) return Object.assign({}, run, {\n        end: end,\n        glyphs: glyphs,\n        glyphIndices: glyphIndices\n    });\n    var positions = run.positions.concat({\n        xAdvance: glyph.advanceWidth * scale(run)\n    });\n    return Object.assign({}, run, {\n        end: end,\n        glyphs: glyphs,\n        glyphIndices: glyphIndices,\n        positions: positions\n    });\n};\n/**\n * Append glyph or code point to run\n *\n * @param {Glyph | number | undefined} value glyph or codePoint\n * @param {Run} run run\n * @returns {Run} run with glyph\n */ var append$1 = function append(value, run) {\n    if (!value) return run;\n    var font = getFont(run);\n    var glyph = isNumber(value) ? fromCodePoint(value, font) : value;\n    return appendGlyph(glyph, run);\n};\n/**\n * Get string from array of code points\n *\n * @param {number[]} codePoints points\n * @returns {string} string\n */ var stringFromCodePoints = function stringFromCodePoints(codePoints) {\n    return String.fromCodePoint.apply(String, codePoints || []);\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Glyph} Glyph\n */ /**\n * Append glyph into last run of attributed string\n *\n * @param {Glyph} glyph glyph\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string with new glyph\n */ var append = function append(glyph, attributedString) {\n    var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n    var codePointsString = stringFromCodePoints(codePoints);\n    var string = attributedString.string + codePointsString;\n    var firstRuns = attributedString.runs.slice(0, -1);\n    var lastRun = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.last)(attributedString.runs) || empty$1();\n    var runs = firstRuns.concat(append$1(glyph, lastRun));\n    return Object.assign({}, attributedString, {\n        string: string,\n        runs: runs\n    });\n};\nvar ELLIPSIS_UNICODE = 8230;\nvar ELLIPSIS_STRING = String.fromCharCode(ELLIPSIS_UNICODE);\n/**\n * Get ellipsis codepoint. This may be different in standard and embedded fonts\n *\n * @param {Object} font\n * @returns {Object} ellipsis codepoint\n */ var getEllipsisCodePoint = function getEllipsisCodePoint(font) {\n    if (!font.encode) return ELLIPSIS_UNICODE;\n    var _font$encode = font.encode(ELLIPSIS_STRING), codePoints = _font$encode[0];\n    return parseInt(codePoints[0], 16);\n};\n/**\n * Trucante block with ellipsis\n *\n * @param {Object} block paragraph block\n * @returns {Object} sliced paragraph block\n */ var truncate = function truncate(block) {\n    var _last, _last2, _last2$attributes;\n    var runs = ((_last = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.last)(block)) === null || _last === void 0 ? void 0 : _last.runs) || [];\n    var font = (_last2 = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.last)(runs)) === null || _last2 === void 0 ? void 0 : (_last2$attributes = _last2.attributes) === null || _last2$attributes === void 0 ? void 0 : _last2$attributes.font;\n    if (font) {\n        var _Object$assign;\n        var index = block.length - 1;\n        var codePoint = getEllipsisCodePoint(font);\n        var glyph = font.glyphForCodePoint(codePoint);\n        var lastBlock = append(glyph, trim(block[index]));\n        return Object.assign([], block, (_Object$assign = {}, _Object$assign[index] = lastBlock, _Object$assign));\n    }\n    return block;\n};\n/**\n * @typedef {import('../types.js').Attributes} Attributes\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Omit attribute from run\n *\n * @param {keyof Attributes} value attribute value\n * @param {Run} run run\n * @returns {Run} run without ommited attribute\n */ var omit = function omit(value, run) {\n    var attributes = Object.assign({}, run.attributes);\n    delete attributes[value];\n    return Object.assign({}, run, {\n        attributes: attributes\n    });\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Get run ascent\n *\n * @param {Run} run run\n * @returns {number} ascent\n */ var ascent$1 = function ascent(run) {\n    var _run$attributes, _run$attributes$attac, _run$attributes2, _run$attributes2$font;\n    var attachmentHeight = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$attac = _run$attributes.attachment) === null || _run$attributes$attac === void 0 ? void 0 : _run$attributes$attac.height) || 0;\n    var fontAscent = ((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : (_run$attributes2$font = _run$attributes2.font) === null || _run$attributes2$font === void 0 ? void 0 : _run$attributes2$font.ascent) || 0;\n    return Math.max(attachmentHeight, fontAscent * scale(run));\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Get run descent\n *\n * @param {Run} run run\n * @returns {number} descent\n */ var descent = function descent(run) {\n    var _run$attributes, _run$attributes$font;\n    var fontDescent = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.descent) || 0;\n    return scale(run) * fontDescent;\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Get run lineGap\n *\n * @param {Object} run run\n * @returns {number} lineGap\n */ var lineGap = function lineGap(run) {\n    var _run$attributes, _run$attributes$font;\n    return (((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.lineGap) || 0) * scale(run);\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Get run height\n *\n * @param {Run} run run\n * @returns {number} height\n */ var height$1 = function height(run) {\n    var _run$attributes;\n    var lineHeight = (_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.lineHeight;\n    return lineHeight || lineGap(run) + ascent$1(run) - descent(run);\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Returns attributed string height\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} height\n */ var height = function height(attributedString) {\n    var reducer = function reducer(acc, run) {\n        return Math.max(acc, height$1(run));\n    };\n    return attributedString.runs.reduce(reducer, 0);\n};\n/**\n * @typedef {import('../types.js').Rect} Rect\n */ /**\n * Checks if two rects intersect each other\n *\n * @param {Rect} a rect A\n * @param {Rect} b rect B\n * @returns {boolean} whether rects intersect\n */ var intersects = function intersects(a, b) {\n    var x = Math.max(a.x, b.x);\n    var num1 = Math.min(a.x + a.width, b.x + b.width);\n    var y = Math.max(a.y, b.y);\n    var num2 = Math.min(a.y + a.height, b.y + b.height);\n    return num1 >= x && num2 >= y;\n};\nvar _excluded = [\n    \"excludeRects\"\n];\nvar getLineFragment = function getLineFragment(lineRect, excludeRect) {\n    if (!intersects(excludeRect, lineRect)) return [\n        lineRect\n    ];\n    var eStart = excludeRect.x;\n    var eEnd = excludeRect.x + excludeRect.width;\n    var lStart = lineRect.x;\n    var lEnd = lineRect.x + lineRect.width;\n    var a = Object.assign({}, lineRect, {\n        width: eStart - lStart\n    });\n    var b = Object.assign({}, lineRect, {\n        x: eEnd,\n        width: lEnd - eEnd\n    });\n    return [\n        a,\n        b\n    ].filter(function(r) {\n        return r.width > 0;\n    });\n};\nvar getLineFragments = function getLineFragments(rect, excludeRects) {\n    var fragments = [\n        rect\n    ];\n    var _loop = function _loop() {\n        var excludeRect = excludeRects[i];\n        fragments = fragments.reduce(function(acc, fragment) {\n            var pieces = getLineFragment(fragment, excludeRect);\n            return acc.concat(pieces);\n        }, []);\n    };\n    for(var i = 0; i < excludeRects.length; i += 1){\n        _loop();\n    }\n    return fragments;\n};\nvar generateLineRects = function generateLineRects(container, height) {\n    var excludeRects = container.excludeRects, rect = _babel_runtime_helpers_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_2__(container, _excluded);\n    if (!excludeRects) return [\n        rect\n    ];\n    var lineRects = [];\n    var maxY = Math.max.apply(Math, excludeRects.map(function(r) {\n        return r.y + r.height;\n    }));\n    var currentRect = rect;\n    while(currentRect.y < maxY){\n        var _partition = partition(currentRect, height), lineRect = _partition[0], rest = _partition[1];\n        var lineRectFragments = getLineFragments(lineRect, excludeRects);\n        currentRect = rest;\n        lineRects.push.apply(lineRects, lineRectFragments);\n    }\n    return [].concat(lineRects, [\n        currentRect\n    ]);\n};\nvar ATTACHMENT_CODE$1 = \"￼\"; // 65532\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Rect} Rect\n */ /**\n * Remove attachment attribute if no char present\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string\n */ var purgeAttachments = function purgeAttachments(attributedString) {\n    var shouldPurge = !attributedString.string.includes(ATTACHMENT_CODE$1);\n    if (!shouldPurge) return attributedString;\n    var runs = attributedString.runs.map(function(run) {\n        return omit(\"attachment\", run);\n    });\n    return Object.assign({}, attributedString, {\n        runs: runs\n    });\n};\n/**\n * Layout paragraphs inside rectangle\n *\n * @param {Object} rects rect\n * @param {Object[]} lines attributed strings\n * @param {number} indent\n * @returns {Object} layout blocks\n */ var layoutLines = function layoutLines(rects, lines, indent) {\n    var rect = rects.shift();\n    var currentY = rect.y;\n    return lines.map(function(line, i) {\n        var _line$runs, _line$runs$;\n        var lineIndent = i === 0 ? indent : 0;\n        var style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};\n        var height$1 = Math.max(height(line), style.lineHeight);\n        if (currentY + height$1 > rect.y + rect.height && rects.length > 0) {\n            rect = rects.shift();\n            currentY = rect.y;\n        }\n        var newLine = Object.assign({}, line);\n        delete newLine.syllables;\n        newLine.box = {\n            x: rect.x + lineIndent,\n            y: currentY,\n            width: rect.width - lineIndent,\n            height: height$1\n        };\n        currentY += height$1;\n        return purgeAttachments(newLine);\n    });\n};\n/**\n * Performs line breaking and layout\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n */ var layoutParagraph = function layoutParagraph(engines, options) {\n    /**\n   * @param {Rect} container rect\n   * @param {Object} paragraph attributed string\n   * @returns {Object} layout block\n   */ return function(container, paragraph) {\n        var _paragraph$runs, _paragraph$runs$, _paragraph$runs$$attr;\n        var height$1 = height(paragraph);\n        var indent = ((_paragraph$runs = paragraph.runs) === null || _paragraph$runs === void 0 ? void 0 : (_paragraph$runs$ = _paragraph$runs[0]) === null || _paragraph$runs$ === void 0 ? void 0 : (_paragraph$runs$$attr = _paragraph$runs$.attributes) === null || _paragraph$runs$$attr === void 0 ? void 0 : _paragraph$runs$$attr.indent) || 0;\n        var rects = generateLineRects(container, height$1);\n        var availableWidths = rects.map(function(r) {\n            return r.width;\n        });\n        availableWidths[0] -= indent;\n        var lines = engines.linebreaker(options)(paragraph, availableWidths);\n        return layoutLines(rects, lines, indent);\n    };\n};\n/**\n * Slice block at given height\n *\n * @param {number} height height\n * @param {Object} block paragraph block\n * @returns {number[]} sliced paragraph block\n */ var sliceAtHeight = function sliceAtHeight(height, block) {\n    var newBlock = [];\n    var counter = 0;\n    for(var i = 0; i < block.length; i += 1){\n        var line = block[i];\n        counter += line.box.height;\n        if (counter < height) {\n            newBlock.push(line);\n        } else {\n            break;\n        }\n    }\n    return newBlock;\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Rect} Rect\n */ /**\n * Layout paragraphs inside container until it does not\n * fit anymore, performing line wrapping in the process.\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n * @param {Rect} container container rect\n */ var typesetter = function typesetter(engines, options, container) {\n    /**\n   * @param {AttributedString} attributedStrings attributed strings (paragraphs)\n   * @returns {Object[]} paragraph blocks\n   */ return function(attributedStrings) {\n        var blocks = [];\n        var paragraphs = [].concat(attributedStrings);\n        var layoutBlock = layoutParagraph(engines, options);\n        var maxLines = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(container.maxLines) ? Infinity : container.maxLines;\n        var truncateEllipsis = container.truncateMode === \"ellipsis\";\n        var linesCount = maxLines;\n        var paragraphRect = copy(container);\n        var nextParagraph = paragraphs.shift();\n        while(linesCount > 0 && nextParagraph){\n            var block = layoutBlock(paragraphRect, nextParagraph);\n            var slicedBlock = block.slice(0, linesCount);\n            var linesHeight = height$2(slicedBlock);\n            var shouldTruncate = truncateEllipsis && block.length !== slicedBlock.length;\n            linesCount -= slicedBlock.length;\n            if (paragraphRect.height >= linesHeight) {\n                blocks.push(shouldTruncate ? truncate(slicedBlock) : slicedBlock);\n                paragraphRect = crop(linesHeight, paragraphRect);\n                nextParagraph = paragraphs.shift();\n            } else {\n                blocks.push(truncate(sliceAtHeight(paragraphRect.height, slicedBlock)));\n                break;\n            }\n        }\n        return blocks;\n    };\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Get attributed string start value\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} start\n */ var start = function start(attributedString) {\n    var runs = attributedString.runs;\n    return runs.length === 0 ? 0 : runs[0].start;\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Get attributed string end value\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} end\n */ var end = function end(attributedString) {\n    var runs = attributedString.runs;\n    return runs.length === 0 ? 0 : (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.last)(runs).end;\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Get attributed string length\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} end\n */ var length$1 = function length(attributedString) {\n    return end(attributedString) - start(attributedString);\n};\nvar bidi$2 = (0,bidi_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\nvar getBidiLevels$1 = function getBidiLevels(runs) {\n    return runs.reduce(function(acc, run) {\n        var length = run.end - run.start;\n        var levels = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.repeat)(run.attributes.bidiLevel, length);\n        return acc.concat(levels);\n    }, []);\n};\nvar getReorderedIndices = function getReorderedIndices(string, segments) {\n    // Fill an array with indices\n    var indices = [];\n    for(var i = 0; i < string.length; i += 1){\n        indices[i] = i;\n    }\n    // Reverse each segment in order\n    segments.forEach(function(_ref) {\n        var start = _ref[0], end = _ref[1];\n        var slice = indices.slice(start, end + 1);\n        for(var _i = slice.length - 1; _i >= 0; _i -= 1){\n            indices[end - _i] = slice[_i];\n        }\n    });\n    return indices;\n};\nvar getItemAtIndex = function getItemAtIndex(runs, objectName, index) {\n    for(var i = 0; i < runs.length; i += 1){\n        var run = runs[i];\n        var updatedIndex = run.glyphIndices[index - run.start];\n        if (index >= run.start && index < run.end) {\n            return run[objectName][updatedIndex];\n        }\n    }\n    throw new Error(\"index \" + index + \" out of range\");\n};\nvar reorderLine = function reorderLine(attributedString) {\n    var _attributedString$run;\n    var levels = getBidiLevels$1(attributedString.runs);\n    var direction = (_attributedString$run = attributedString.runs[0]) === null || _attributedString$run === void 0 ? void 0 : _attributedString$run.attributes.direction;\n    var level = direction === \"rtl\" ? 1 : 0;\n    var end = length$1(attributedString) - 1;\n    var paragraphs = [\n        {\n            start: 0,\n            end: end,\n            level: level\n        }\n    ];\n    var embeddingLevels = {\n        paragraphs: paragraphs,\n        levels: levels\n    };\n    var segments = bidi$2.getReorderSegments(attributedString.string, embeddingLevels);\n    // No need for bidi reordering\n    if (segments.length === 0) return attributedString;\n    var indices = getReorderedIndices(attributedString.string, segments);\n    var updatedString = bidi$2.getReorderedString(attributedString.string, embeddingLevels);\n    var updatedRuns = attributedString.runs.map(function(run) {\n        var selectedIndices = indices.slice(run.start, run.end);\n        var updatedGlyphs = [];\n        var updatedPositions = [];\n        var addedGlyphs = new Set();\n        for(var i = 0; i < selectedIndices.length; i += 1){\n            var index = selectedIndices[i];\n            var glyph = getItemAtIndex(attributedString.runs, \"glyphs\", index);\n            if (addedGlyphs.has(glyph.id)) continue;\n            updatedGlyphs.push(glyph);\n            updatedPositions.push(getItemAtIndex(attributedString.runs, \"positions\", index));\n            if (glyph.isLigature) {\n                addedGlyphs.add(glyph.id);\n            }\n        }\n        return _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__({}, run, {\n            glyphs: updatedGlyphs,\n            positions: updatedPositions\n        });\n    });\n    return _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__({}, attributedString, {\n        runs: updatedRuns,\n        string: updatedString\n    });\n};\nvar reorderParagraph = function reorderParagraph(lines) {\n    return lines.map(reorderLine);\n};\n/**\n * Perform bidi reordering\n */ var bidiReordering = function bidiReordering() {\n    /**\n   * @param {Object[]} paragraphs line blocks\n   * @returns {Object[]} paragraphs\n   */ return function(paragraphs) {\n        return paragraphs.map(reorderParagraph);\n    };\n};\n/**\n * @typedef {import('../types.js').Glyph} Glyph\n */ var DUMMY_CODEPOINT = 123;\n/**\n * Resolve string indices based on glyphs code points\n *\n * @param {Glyph[]} glyphs\n * @returns {number[]} glyph indices\n */ var resolve = function resolve(glyphs) {\n    if (glyphs === void 0) {\n        glyphs = [];\n    }\n    return glyphs.reduce(function(acc, glyph) {\n        var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [\n            DUMMY_CODEPOINT\n        ];\n        if (acc.length === 0) return codePoints.map(function() {\n            return 0;\n        });\n        var last = acc[acc.length - 1];\n        var next = codePoints.map(function() {\n            return last + 1;\n        });\n        return [].concat(acc, next);\n    }, []);\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Position} Position\n * @typedef {import('../types.js').Run} Run\n */ /**\n * @param {Run} run\n * @returns {number}\n */ var getCharacterSpacing = function getCharacterSpacing(run) {\n    var _run$attributes;\n    return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.characterSpacing) || 0;\n};\n/**\n * Scale run positions\n *\n * @param {Run} run\n * @param {Position[]} positions\n * @returns {Position[]} scaled positions\n */ var scalePositions = function scalePositions(run, positions) {\n    var runScale = scale(run);\n    var characterSpacing = getCharacterSpacing(run);\n    return positions.map(function(position, i) {\n        var isLast = i === positions.length;\n        var xSpacing = isLast ? 0 : characterSpacing;\n        return Object.assign({}, position, {\n            xAdvance: position.xAdvance * runScale + xSpacing,\n            yAdvance: position.yAdvance * runScale,\n            xOffset: position.xOffset * runScale,\n            yOffset: position.yOffset * runScale\n        });\n    });\n};\n/**\n * Create glyph run\n *\n * @param {string} string string\n */ var layoutRun = function layoutRun(string) {\n    /**\n   * @param {Run} run run\n   * @returns {Run} glyph run\n   */ return function(run) {\n        var start = run.start, end = run.end, _run$attributes2 = run.attributes, attributes = _run$attributes2 === void 0 ? {} : _run$attributes2;\n        var font = attributes.font;\n        if (!font) return _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__({}, run, {\n            glyphs: [],\n            glyphIndices: [],\n            positions: []\n        });\n        var runString = string.slice(start, end);\n        // passing LTR To force fontkit to not reverse the string\n        var glyphRun = font.layout(runString, undefined, undefined, undefined, \"ltr\");\n        var positions = scalePositions(run, glyphRun.positions);\n        var glyphIndices = resolve(glyphRun.glyphs);\n        return _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__({}, run, {\n            positions: positions,\n            glyphIndices: glyphIndices,\n            glyphs: glyphRun.glyphs\n        });\n    };\n};\n/**\n * Generate glyphs for single attributed string\n */ var generateGlyphs = function generateGlyphs() {\n    /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string with glyphs\n   */ return function(attributedString) {\n        var runs = attributedString.runs.map(layoutRun(attributedString.string));\n        return Object.assign({}, attributedString, {\n            runs: runs\n        });\n    };\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Resolves yOffset for run\n *\n * @param {Run} run run\n * @returns {Run} run\n */ var resolveRunYOffset = function resolveRunYOffset(run) {\n    var _run$attributes, _run$attributes$font, _run$attributes2;\n    if (!run.positions) return run;\n    var unitsPerEm = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.unitsPerEm) || 0;\n    var yOffset = (((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : _run$attributes2.yOffset) || 0) * unitsPerEm;\n    var positions = run.positions.map(function(p) {\n        return Object.assign({}, p, {\n            yOffset: yOffset\n        });\n    });\n    return Object.assign({}, run, {\n        positions: positions\n    });\n};\n/**\n * Resolves yOffset for multiple paragraphs\n */ var resolveYOffset = function resolveYOffset() {\n    /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */ return function(attributedString) {\n        var runs = attributedString.runs.map(resolveRunYOffset);\n        return Object.assign({}, attributedString, {\n            runs: runs\n        });\n    };\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Sort runs in ascending order\n *\n * @param {Run[]} runs\n * @returns {Run[]} sorted runs\n */ var sort = function sort(runs) {\n    return runs.sort(function(a, b) {\n        return a.start - b.start || a.end - b.end;\n    });\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Is run empty (start === end)\n *\n * @param {Run} run run\n * @returns {boolean} is run empty\n */ var isEmpty = function isEmpty(run) {\n    return run.start === run.end;\n};\n/**\n * @typedef {import('../types.js').Point} Point\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Sort points in ascending order\n * @param {Point} a first point\n * @param {Point} b second point\n * @returns {number} sort order\n */ var sortPoints = function sortPoints(a, b) {\n    return a[1] - b[1] || a[3] - b[3];\n};\n/**\n * @param {Run[]} runs\n * @returns {Point[]} points\n */ var generatePoints = function generatePoints(runs) {\n    var result = runs.reduce(function(acc, run, i) {\n        return acc.concat([\n            [\n                \"start\",\n                run.start,\n                run.attributes,\n                i\n            ],\n            [\n                \"end\",\n                run.end,\n                run.attributes,\n                i\n            ]\n        ]);\n    }, []);\n    return result.sort(sortPoints);\n};\n/**\n * @param {Run[]} runs\n * @returns {Run} merged runs\n */ var mergeRuns = function mergeRuns(runs) {\n    return runs.reduce(function(acc, run) {\n        var attributes = Object.assign({}, acc.attributes, run.attributes);\n        return Object.assign({}, run, {\n            attributes: attributes\n        });\n    }, {});\n};\n/**\n * @param {Run[]} runs\n * @returns {Run[][]} grouped runs\n */ var groupEmptyRuns = function groupEmptyRuns(runs) {\n    var groups = runs.reduce(function(acc, run) {\n        if (!acc[run.start]) acc[run.start] = [];\n        acc[run.start].push(run);\n        return acc;\n    }, []);\n    return Object.values(groups);\n};\n/**\n * @param {Run[]} runs\n * @returns {Run[]} flattened runs\n */ var flattenEmptyRuns = function flattenEmptyRuns(runs) {\n    return groupEmptyRuns(runs).map(mergeRuns);\n};\n/**\n * @param {Run[]} runs\n * @returns {Run[]} flattened runs\n */ var flattenRegularRuns = function flattenRegularRuns(runs) {\n    var res = [];\n    var points = generatePoints(runs);\n    var start = -1;\n    var attrs = {};\n    var stack = [];\n    for(var i = 0; i < points.length; i += 1){\n        var _points$i = points[i], type = _points$i[0], offset = _points$i[1], attributes = _points$i[2];\n        if (start !== -1 && start < offset) {\n            res.push({\n                start: start,\n                end: offset,\n                attributes: attrs\n            });\n        }\n        if (type === \"start\") {\n            stack.push(attributes);\n            attrs = Object.assign({}, attrs, attributes);\n        } else {\n            attrs = {};\n            for(var j = 0; j < stack.length; j += 1){\n                if (stack[j] === attributes) {\n                    // eslint-disable-next-line no-plusplus\n                    stack.splice(j--, 1);\n                } else {\n                    attrs = Object.assign({}, attrs, stack[j]);\n                }\n            }\n        }\n        start = offset;\n    }\n    return res;\n};\n/**\n * Flatten many runs\n *\n * @param {Run[]} runs\n * @returns {Run[]} flattened runs\n */ var flatten = function flatten(runs) {\n    if (runs === void 0) {\n        runs = [];\n    }\n    var emptyRuns = flattenEmptyRuns(runs.filter(function(run) {\n        return isEmpty(run);\n    }));\n    var regularRuns = flattenRegularRuns(runs.filter(function(run) {\n        return !isEmpty(run);\n    }));\n    return sort(emptyRuns.concat(regularRuns));\n};\n/**\n * Returns empty attributed string\n *\n * @returns {Object} empty attributed string\n */ var empty = function empty() {\n    return {\n        string: \"\",\n        runs: []\n    };\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n *\n * @param {AttributedString} attributedString\n * @returns {AttributedString} attributed string without font\n */ var omitFont = function omitFont(attributedString) {\n    var runs = attributedString.runs.map(function(run) {\n        return omit(\"font\", run);\n    });\n    return Object.assign({}, attributedString, {\n        runs: runs\n    });\n};\n/**\n * Performs font substitution and script itemization on attributed string\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n */ var preprocessRuns = function preprocessRuns(engines, options) {\n    /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} processed attributed string\n   */ return function(attributedString) {\n        if ((0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(attributedString)) return empty();\n        var string = attributedString.string;\n        var fontSubstitution = engines.fontSubstitution, scriptItemizer = engines.scriptItemizer, bidi = engines.bidi;\n        var _omitFont = omitFont(attributedString), omittedFontRuns = _omitFont.runs;\n        var _scriptItemizer = scriptItemizer(options)(attributedString), itemizationRuns = _scriptItemizer.runs;\n        var _fontSubstitution = fontSubstitution(options)(attributedString), substitutedRuns = _fontSubstitution.runs;\n        var _bidi = bidi(options)(attributedString), bidiRuns = _bidi.runs;\n        var runs = bidiRuns.concat(substitutedRuns).concat(itemizationRuns).concat(omittedFontRuns);\n        return {\n            string: string,\n            runs: flatten(runs)\n        };\n    };\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Breaks attributed string into paragraphs\n */ var splitParagraphs = function splitParagraphs() {\n    /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString[]} attributed string array\n   */ return function(attributedString) {\n        var res = [];\n        var start = 0;\n        var breakPoint = attributedString.string.indexOf(\"\\n\") + 1;\n        while(breakPoint > 0){\n            res.push(slice(start, breakPoint, attributedString));\n            start = breakPoint;\n            breakPoint = attributedString.string.indexOf(\"\\n\", breakPoint) + 1;\n        }\n        if (start === 0) {\n            res.push(attributedString);\n        } else if (start < attributedString.string.length) {\n            res.push(slice(start, length$1(attributedString), attributedString));\n        }\n        return res;\n    };\n};\n/**\n * @typedef {import('../types.js').Position} Position\n */ /**\n * Return positions advance width\n *\n * @param {Position[]} positions positions\n * @returns {number} advance width\n */ var advanceWidth$2 = function advanceWidth(positions) {\n    return positions.reduce(function(acc, pos) {\n        return acc + (pos.xAdvance || 0);\n    }, 0);\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Return run advance width\n *\n * @param {Run} run run\n * @returns {number} advance width\n */ var advanceWidth$1 = function advanceWidth(run) {\n    return advanceWidth$2(run.positions || []);\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Returns attributed string advancewidth\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} advance width\n */ var advanceWidth = function advanceWidth(attributedString) {\n    var reducer = function reducer(acc, run) {\n        return acc + advanceWidth$1(run);\n    };\n    return attributedString.runs.reduce(reducer, 0);\n};\n/**\n * @typedef {import('../types.js').Glyph} Glyph\n */ var WHITE_SPACES_CODE = 32;\n/**\n * Check if glyph is white space\n *\n * @param {Glyph} [glyph] glyph\n * @returns {boolean} whether glyph is white space\n * */ var isWhiteSpace = function isWhiteSpace(glyph) {\n    var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n    return codePoints.includes(WHITE_SPACES_CODE);\n};\n/**\n * @typedef {import('../types.js').Position} Position\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Get white space leading positions\n *\n * @param {Run} run run\n * @returns {Position[]} white space leading positions\n */ var leadingPositions = function leadingPositions(run) {\n    var glyphs = run.glyphs || [];\n    var positions = run.positions || [];\n    var leadingWhitespaces = glyphs.findIndex(function(g) {\n        return !isWhiteSpace(g);\n    });\n    return positions.slice(0, leadingWhitespaces);\n};\n/**\n * Get run leading white space offset\n *\n * @param {Run} run run\n * @returns {number} leading white space offset\n */ var leadingOffset$1 = function leadingOffset(run) {\n    var positions = leadingPositions(run);\n    return positions.reduce(function(acc, pos) {\n        return acc + (pos.xAdvance || 0);\n    }, 0);\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Get attributed string leading white space offset\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} leading white space offset\n */ var leadingOffset = function leadingOffset(attributedString) {\n    var runs = attributedString.runs || [];\n    return leadingOffset$1(runs[0]);\n};\n/**\n * @typedef {import('../types.js').Position} Position\n * @typedef {import('../types.js').Run} Run\n */ /**\n * @template T\n * @param {T[]} array\n * @returns {T[]} reversed array\n */ var reverse = function reverse(array) {\n    return [].concat(array).reverse();\n};\n/**\n * Get white space trailing positions\n *\n * @param {Run} run run\n * @returns {Position[]} white space trailing positions\n */ var trailingPositions = function trailingPositions(run) {\n    var glyphs = reverse(run.glyphs || []);\n    var positions = reverse(run.positions || []);\n    var leadingWhitespaces = glyphs.findIndex(function(g) {\n        return !isWhiteSpace(g);\n    });\n    return positions.slice(0, leadingWhitespaces);\n};\n/**\n * Get run trailing white space offset\n *\n * @param {Run} run run\n * @returns {number} trailing white space offset\n */ var trailingOffset$1 = function trailingOffset(run) {\n    var positions = trailingPositions(run);\n    return positions.reduce(function(acc, pos) {\n        return acc + (pos.xAdvance || 0);\n    }, 0);\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Get attributed string trailing white space offset\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} trailing white space offset\n */ var trailingOffset = function trailingOffset(attributedString) {\n    var runs = attributedString.runs || [];\n    return trailingOffset$1((0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.last)(runs));\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Drop last char of run\n *\n * @param {Run} run run\n * @returns {Run} run without last char\n */ var dropLast$1 = function dropLast(run) {\n    return slice$1(0, run.end - run.start - 1, run);\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Drop last glyph\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string with new glyph\n */ var dropLast = function dropLast(attributedString) {\n    var string = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.dropLast)(attributedString.string);\n    var runs = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.adjust)(-1, dropLast$1, attributedString.runs);\n    return Object.assign({}, attributedString, {\n        string: string,\n        runs: runs\n    });\n};\nvar ALIGNMENT_FACTORS = {\n    center: 0.5,\n    right: 1\n};\n/**\n * Remove new line char at the end of line if present\n *\n * @param {Object}  line\n * @returns {Object} line\n */ var removeNewLine = function removeNewLine(line) {\n    return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.last)(line.string) === \"\\n\" ? dropLast(line) : line;\n};\nvar getOverflowLeft = function getOverflowLeft(line) {\n    return leadingOffset(line) + (line.overflowLeft || 0);\n};\nvar getOverflowRight = function getOverflowRight(line) {\n    return trailingOffset(line) + (line.overflowRight || 0);\n};\n/**\n * Ignore whitespace at the start and end of a line for alignment\n *\n * @param {Object}  line\n * @returns {Object} line\n */ var adjustOverflow = function adjustOverflow(line) {\n    var overflowLeft = getOverflowLeft(line);\n    var overflowRight = getOverflowRight(line);\n    var x = line.box.x - overflowLeft;\n    var width = line.box.width + overflowLeft + overflowRight;\n    var box = Object.assign({}, line.box, {\n        x: x,\n        width: width\n    });\n    return Object.assign({}, line, {\n        box: box,\n        overflowLeft: overflowLeft,\n        overflowRight: overflowRight\n    });\n};\n/**\n * Performs line justification by calling appropiate engine\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n * @param {string} align text align\n */ var justifyLine$1 = function justifyLine(engines, options, align) {\n    /**\n   * @param {Object} line lint\n   * @returns {Object} line\n   */ return function(line) {\n        var lineWidth = advanceWidth(line);\n        var alignFactor = ALIGNMENT_FACTORS[align] || 0;\n        var remainingWidth = Math.max(0, line.box.width - lineWidth);\n        var shouldJustify = align === \"justify\" || lineWidth > line.box.width;\n        var x = line.box.x + remainingWidth * alignFactor;\n        var box = Object.assign({}, line.box, {\n            x: x\n        });\n        var newLine = Object.assign({}, line, {\n            box: box\n        });\n        return shouldJustify ? engines.justification(options)(newLine) : newLine;\n    };\n};\nvar finalizeLine = function finalizeLine(line) {\n    var lineAscent = 0;\n    var lineDescent = 0;\n    var lineHeight = 0;\n    var lineXAdvance = 0;\n    var runs = line.runs.map(function(run) {\n        var height = height$1(run);\n        var ascent = ascent$1(run);\n        var descent$1 = descent(run);\n        var xAdvance = advanceWidth$1(run);\n        lineHeight = Math.max(lineHeight, height);\n        lineAscent = Math.max(lineAscent, ascent);\n        lineDescent = Math.max(lineDescent, descent$1);\n        lineXAdvance += xAdvance;\n        return Object.assign({}, run, {\n            height: height,\n            ascent: ascent,\n            descent: descent$1,\n            xAdvance: xAdvance\n        });\n    });\n    return Object.assign({}, line, {\n        runs: runs,\n        height: lineHeight,\n        ascent: lineAscent,\n        descent: lineDescent,\n        xAdvance: lineXAdvance\n    });\n};\n/**\n * Finalize line by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n */ var finalizeBlock = function finalizeBlock(engines, options) {\n    if (engines === void 0) {\n        engines = {};\n    }\n    /**\n   * @param {Object} line lint\n   * @param {number} i line index\n   * @param {Object[]} lines total lines\n   * @returns {Object} line\n   */ return function(line, i, lines) {\n        var _line$runs, _line$runs$;\n        var isLastFragment = i === lines.length - 1;\n        var style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};\n        var align = isLastFragment ? style.alignLastLine : style.align;\n        return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(finalizeLine, engines.textDecoration(options), justifyLine$1(engines, options, align), adjustOverflow, removeNewLine)(line);\n    };\n};\n/**\n * Finalize line block by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n */ var finalizeFragments = function finalizeFragments(engines, options) {\n    /**\n   * @param {Object[]} blocks line blocks\n   * @returns {Object[]} blocks\n   */ return function(blocks) {\n        var blockFinalizer = finalizeBlock(engines, options);\n        return blocks.map(function(block) {\n            return block.map(blockFinalizer);\n        });\n    };\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ var ATTACHMENT_CODE = 0xfffc; // 65532\nvar isReplaceGlyph = function isReplaceGlyph(glyph) {\n    return glyph.codePoints.includes(ATTACHMENT_CODE);\n};\n/**\n * Resolve attachments of run\n *\n * @param {Object}  run\n * @returns {Object} run\n */ var resolveRunAttachments = function resolveRunAttachments(run) {\n    var _run$attributes;\n    if (!run.positions) return run;\n    var glyphs = run.glyphs || [];\n    var attachment = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.attachment) || {};\n    var positions = run.positions.map(function(position, i) {\n        var glyph = glyphs[i];\n        if (attachment && attachment.width && isReplaceGlyph(glyph)) {\n            return Object.assign({}, position, {\n                xAdvance: attachment.width\n            });\n        }\n        return Object.assign({}, position);\n    });\n    return Object.assign({}, run, {\n        positions: positions\n    });\n};\n/**\n * Resolve attachments for multiple paragraphs\n */ var resolveAttachments = function resolveAttachments() {\n    /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */ return function(attributedString) {\n        var runs = attributedString.runs.map(resolveRunAttachments);\n        return Object.assign({}, attributedString, {\n            runs: runs\n        });\n    };\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Attributes} Attributes\n * @typedef {import('../types.js').Run} Run\n */ /**\n * @param {Attributes} a attributes\n * @returns {Attributes} attributes with defaults\n */ var applyAttributes = function applyAttributes(a) {\n    return {\n        align: a.align || (a.direction === \"rtl\" ? \"right\" : \"left\"),\n        alignLastLine: a.alignLastLine || (a.align === \"justify\" ? \"left\" : a.align || \"left\"),\n        attachment: a.attachment || null,\n        backgroundColor: a.backgroundColor || null,\n        bullet: a.bullet || null,\n        characterSpacing: a.characterSpacing || 0,\n        color: a.color || \"black\",\n        direction: a.direction || \"ltr\",\n        features: a.features || [],\n        fill: a.fill !== false,\n        font: a.font || null,\n        fontSize: a.fontSize || 12,\n        hangingPunctuation: a.hangingPunctuation || false,\n        hyphenationFactor: a.hyphenationFactor || 0,\n        indent: a.indent || 0,\n        justificationFactor: a.justificationFactor || 1,\n        lineHeight: a.lineHeight || null,\n        lineSpacing: a.lineSpacing || 0,\n        link: a.link || null,\n        marginLeft: a.marginLeft || a.margin || 0,\n        marginRight: a.marginRight || a.margin || 0,\n        opacity: a.opacity,\n        paddingTop: a.paddingTop || a.padding || 0,\n        paragraphSpacing: a.paragraphSpacing || 0,\n        script: a.script || null,\n        shrinkFactor: a.shrinkFactor || 0,\n        strike: a.strike || false,\n        strikeColor: a.strikeColor || a.color || \"black\",\n        strikeStyle: a.strikeStyle || \"solid\",\n        stroke: a.stroke || false,\n        underline: a.underline || false,\n        underlineColor: a.underlineColor || a.color || \"black\",\n        underlineStyle: a.underlineStyle || \"solid\",\n        verticalAlign: a.verticalAlign || null,\n        wordSpacing: a.wordSpacing || 0,\n        yOffset: a.yOffset || 0\n    };\n};\n/**\n * Apply default style to run\n *\n * @param {Run} run run\n * @returns {Run} run with styles\n */ var applyRunStyles = function applyRunStyles(run) {\n    var attributes = applyAttributes(run.attributes);\n    return Object.assign({}, run, {\n        attributes: attributes\n    });\n};\n/**\n * Apply default attributes for an attributed string\n */ var applyDefaultStyles = function applyDefaultStyles() {\n    /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */ return function(attributedString) {\n        var string = attributedString.string || \"\";\n        var runs = (attributedString.runs || []).map(applyRunStyles);\n        return {\n            string: string,\n            runs: runs\n        };\n    };\n};\n/* eslint-disable no-restricted-syntax */ /**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Apply scaling and yOffset for verticalAlign 'sub' and 'super'.\n */ var verticalAlignment = function verticalAlignment() {\n    /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */ return function(attributedString) {\n        attributedString.runs.forEach(function(run) {\n            var attributes = run.attributes;\n            var verticalAlign = attributes.verticalAlign;\n            if (verticalAlign === \"sub\") {\n                attributes.yOffset = -0.2;\n            } else if (verticalAlign === \"super\") {\n                attributes.yOffset = 0.4;\n            }\n        });\n        return attributedString;\n    };\n};\nvar bidi$1 = (0,bidi_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\nvar getBidiLevels = function getBidiLevels(runs) {\n    return runs.reduce(function(acc, run) {\n        var length = run.end - run.start;\n        var levels = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.repeat)(run.attributes.bidiLevel, length);\n        return acc.concat(levels);\n    }, []);\n};\n/**\n * Perform bidi mirroring\n */ var mirrorString = function mirrorString() {\n    /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */ return function(attributedString) {\n        var levels = getBidiLevels(attributedString.runs);\n        var updatedString = \"\";\n        attributedString.string.split(\"\").forEach(function(char, index) {\n            var isRTL = levels[index] % 2 === 1;\n            var mirroredChar = isRTL ? bidi$1.getMirroredCharacter(attributedString.string.charAt(index)) : null;\n            updatedString += mirroredChar || char;\n        });\n        return _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_1__({}, attributedString, {\n            string: updatedString,\n            levels: levels\n        });\n    };\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Rect} Rect\n */ /**\n * A LayoutEngine is the main object that performs text layout.\n * It accepts an AttributedString and a Container object\n * to layout text into, and uses several helper objects to perform\n * various layout tasks. These objects can be overridden to customize\n * layout behavior.\n *\n * @param {Object} engines engines\n */ var layoutEngine = function layoutEngine(engines) {\n    /**\n   * @param {AttributedString} attributedString attributed string\n   * @param {Rect} container container rect\n   * @param {Object} options layout options\n   * @returns {Object[]} paragraph blocks\n   */ return function(attributedString, container, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var processParagraph = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(resolveYOffset(), resolveAttachments(), verticalAlignment(), wrapWords(engines, options), generateGlyphs(), mirrorString(), preprocessRuns(engines, options));\n        var processParagraphs = function processParagraphs(paragraphs) {\n            return paragraphs.map(processParagraph);\n        };\n        return (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.compose)(finalizeFragments(engines, options), bidiReordering(), typesetter(engines, options, container), processParagraphs, splitParagraphs(), applyDefaultStyles())(attributedString);\n    };\n};\nvar bidi = (0,bidi_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n/**\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string\n */ var bidiEngine = function bidiEngine() {\n    return function(attributedString) {\n        var _attributedString$run;\n        var string = attributedString.string;\n        var direction = (_attributedString$run = attributedString.runs[0]) === null || _attributedString$run === void 0 ? void 0 : _attributedString$run.attributes.direction;\n        var _bidi$getEmbeddingLev = bidi.getEmbeddingLevels(string, direction), levels = _bidi$getEmbeddingLev.levels;\n        var lastLevel = null;\n        var lastIndex = 0;\n        var index = 0;\n        var res = [];\n        for(var i = 0; i < levels.length; i += 1){\n            var level = levels[i];\n            if (level !== lastLevel) {\n                if (lastLevel !== null) {\n                    res.push({\n                        start: lastIndex,\n                        end: index,\n                        attributes: {\n                            bidiLevel: lastLevel\n                        }\n                    });\n                }\n                lastIndex = index;\n                lastLevel = level;\n            }\n            index += 1;\n        }\n        if (lastIndex < string.length) {\n            res.push({\n                start: lastIndex,\n                end: string.length,\n                attributes: {\n                    bidiLevel: lastLevel\n                }\n            });\n        }\n        return {\n            string: string,\n            runs: res\n        };\n    };\n};\n/* eslint-disable no-plusplus */ var INFINITY = 10000;\n/**\n * @param {Object[]} subnodes\n * @param {number[]} widths\n * @param {number} lineNumber\n * @returns {number}\n */ var getNextBreakpoint = function getNextBreakpoint(subnodes, widths, lineNumber) {\n    var position = null;\n    var minimumBadness = Infinity;\n    var sum = {\n        width: 0,\n        stretch: 0,\n        shrink: 0\n    };\n    var lineLength = widths[Math.min(lineNumber, widths.length - 1)];\n    var calculateRatio = function calculateRatio(node) {\n        if (sum.width < lineLength) {\n            return sum.stretch - node.stretch > 0 ? (lineLength - sum.width) / sum.stretch : INFINITY;\n        }\n        if (sum.width > lineLength) {\n            return sum.shrink - node.shrink > 0 ? (lineLength - sum.width) / sum.shrink : INFINITY;\n        }\n        return 0;\n    };\n    for(var i = 0; i < subnodes.length; i += 1){\n        var node = subnodes[i];\n        if (node.type === \"box\") {\n            sum.width += node.width;\n        } else if (node.type === \"glue\") {\n            sum.width += node.width;\n            sum.stretch += node.stretch;\n            sum.shrink += node.shrink;\n        }\n        if (sum.width - sum.shrink > lineLength) {\n            if (position === null) {\n                var j = i === 0 ? i + 1 : i;\n                while(j < subnodes.length && (subnodes[j].type === \"glue\" || subnodes[j].type === \"penalty\")){\n                    j++;\n                }\n                position = j - 1;\n            }\n            break;\n        }\n        if (node.type === \"penalty\" || node.type === \"glue\") {\n            var ratio = calculateRatio(node);\n            var penalty = node.type === \"penalty\" ? node.penalty : 0;\n            var badness = 100 * Math.pow(Math.abs(ratio), 3) + penalty;\n            if (minimumBadness >= badness) {\n                position = i;\n                minimumBadness = badness;\n            }\n        }\n    }\n    return sum.width - sum.shrink > lineLength ? position : null;\n};\n/**\n * @param {Object[]} nodes\n * @param {number[]} widths\n */ var applyBestFit = function applyBestFit(nodes, widths) {\n    var count = 0;\n    var lineNumber = 0;\n    var subnodes = nodes;\n    var breakpoints = [\n        {\n            position: 0\n        }\n    ];\n    while(subnodes.length > 0){\n        var breakpoint = getNextBreakpoint(subnodes, widths, lineNumber);\n        if (breakpoint !== null) {\n            count += breakpoint;\n            breakpoints.push({\n                position: count\n            });\n            subnodes = subnodes.slice(breakpoint + 1, subnodes.length);\n            count++;\n            lineNumber++;\n        } else {\n            subnodes = [];\n        }\n    }\n    return breakpoints;\n};\n/* eslint-disable no-param-reassign */ /* eslint-disable max-classes-per-file */ var Node = /*#__PURE__*/ function() {\n    function Node(data) {\n        this.prev = null;\n        this.next = null;\n        this.data = data;\n    }\n    var _proto = Node.prototype;\n    _proto.toString = function toString() {\n        return this.data.toString();\n    };\n    return Node;\n}();\nvar LinkedList = /*#__PURE__*/ function() {\n    function LinkedList() {\n        this.head = null;\n        this.tail = null;\n        this.listSize = 0;\n        this.listLength = 0;\n    }\n    var _proto2 = LinkedList.prototype;\n    _proto2.isLinked = function isLinked(node) {\n        return !(node && node.prev === null && node.next === null && this.tail !== node && this.head !== node || this.isEmpty());\n    };\n    _proto2.size = function size() {\n        return this.listSize;\n    };\n    _proto2.isEmpty = function isEmpty() {\n        return this.listSize === 0;\n    };\n    _proto2.first = function first() {\n        return this.head;\n    };\n    _proto2.last = function last() {\n        return this.last;\n    };\n    _proto2.toString = function toString() {\n        return this.toArray().toString();\n    };\n    _proto2.toArray = function toArray() {\n        var node = this.head;\n        var result = [];\n        while(node !== null){\n            result.push(node);\n            node = node.next;\n        }\n        return result;\n    };\n    _proto2.forEach = function forEach(fun) {\n        var node = this.head;\n        while(node !== null){\n            fun(node);\n            node = node.next;\n        }\n    };\n    _proto2.contains = function contains(n) {\n        var node = this.head;\n        if (!this.isLinked(n)) {\n            return false;\n        }\n        while(node !== null){\n            if (node === n) {\n                return true;\n            }\n            node = node.next;\n        }\n        return false;\n    };\n    _proto2.at = function at(i) {\n        var node = this.head;\n        var index = 0;\n        if (i >= this.listLength || i < 0) {\n            return null;\n        }\n        while(node !== null){\n            if (i === index) {\n                return node;\n            }\n            node = node.next;\n            index += 1;\n        }\n        return null;\n    };\n    _proto2.insertAfter = function insertAfter(node, newNode) {\n        if (!this.isLinked(node)) {\n            return this;\n        }\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next === null) {\n            this.tail = newNode;\n        } else {\n            node.next.prev = newNode;\n        }\n        node.next = newNode;\n        this.listSize += 1;\n        return this;\n    };\n    _proto2.insertBefore = function insertBefore(node, newNode) {\n        if (!this.isLinked(node)) {\n            return this;\n        }\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev === null) {\n            this.head = newNode;\n        } else {\n            node.prev.next = newNode;\n        }\n        node.prev = newNode;\n        this.listSize += 1;\n        return this;\n    };\n    _proto2.push = function push(node) {\n        if (this.head === null) {\n            this.unshift(node);\n        } else {\n            this.insertAfter(this.tail, node);\n        }\n        return this;\n    };\n    _proto2.unshift = function unshift(node) {\n        if (this.head === null) {\n            this.head = node;\n            this.tail = node;\n            node.prev = null;\n            node.next = null;\n            this.listSize += 1;\n        } else {\n            this.insertBefore(this.head, node);\n        }\n        return this;\n    };\n    _proto2.remove = function remove(node) {\n        if (!this.isLinked(node)) {\n            return this;\n        }\n        if (node.prev === null) {\n            this.head = node.next;\n        } else {\n            node.prev.next = node.next;\n        }\n        if (node.next === null) {\n            this.tail = node.prev;\n        } else {\n            node.next.prev = node.prev;\n        }\n        this.listSize -= 1;\n        return this;\n    };\n    _proto2.pop = function pop() {\n        var node = this.tail;\n        this.tail.prev.next = null;\n        this.tail = this.tail.prev;\n        this.listSize -= 1;\n        node.prev = null;\n        node.next = null;\n        return node;\n    };\n    _proto2.shift = function shift() {\n        var node = this.head;\n        this.head.next.prev = null;\n        this.head = this.head.next;\n        this.listSize -= 1;\n        node.prev = null;\n        node.next = null;\n        return node;\n    };\n    return LinkedList;\n}();\nLinkedList.Node = Node;\n/* eslint-disable no-restricted-properties */ /**\n * @param {Object[]} nodes\n * @param {number[]} lines\n * @param {Object} settings\n * @preserve Knuth and Plass line breaking algorithm in JavaScript\n *\n * Licensed under the new BSD License.\n * Copyright 2009-2010, Bram Stein\n * All rights reserved.\n */ var linebreak = function linebreak(nodes, lines, settings) {\n    var options = {\n        demerits: {\n            line: settings && settings.demerits && settings.demerits.line || 10,\n            flagged: settings && settings.demerits && settings.demerits.flagged || 100,\n            fitness: settings && settings.demerits && settings.demerits.fitness || 3000\n        },\n        tolerance: settings && settings.tolerance || 3\n    };\n    var activeNodes = new LinkedList();\n    var sum = {\n        width: 0,\n        stretch: 0,\n        shrink: 0\n    };\n    var lineLengths = lines;\n    var breaks = [];\n    var tmp = {\n        data: {\n            demerits: Infinity\n        }\n    };\n    function breakpoint(position, demerits, ratio, line, fitnessClass, totals, previous) {\n        return {\n            position: position,\n            demerits: demerits,\n            ratio: ratio,\n            line: line,\n            fitnessClass: fitnessClass,\n            totals: totals || {\n                width: 0,\n                stretch: 0,\n                shrink: 0\n            },\n            previous: previous\n        };\n    }\n    function computeCost(start, end, active, currentLine) {\n        var width = sum.width - active.totals.width;\n        var stretch = 0;\n        var shrink = 0;\n        // If the current line index is within the list of linelengths, use it, otherwise use\n        // the last line length of the list.\n        var lineLength = currentLine < lineLengths.length ? lineLengths[currentLine - 1] : lineLengths[lineLengths.length - 1];\n        if (nodes[end].type === \"penalty\") {\n            width += nodes[end].width;\n        }\n        if (width < lineLength) {\n            // Calculate the stretch ratio\n            stretch = sum.stretch - active.totals.stretch;\n            if (stretch > 0) {\n                return (lineLength - width) / stretch;\n            }\n            return linebreak.infinity;\n        }\n        if (width > lineLength) {\n            // Calculate the shrink ratio\n            shrink = sum.shrink - active.totals.shrink;\n            if (shrink > 0) {\n                return (lineLength - width) / shrink;\n            }\n            return linebreak.infinity;\n        }\n        // perfect match\n        return 0;\n    }\n    // Add width, stretch and shrink values from the current\n    // break point up to the next box or forced penalty.\n    function computeSum(breakPointIndex) {\n        var result = {\n            width: sum.width,\n            stretch: sum.stretch,\n            shrink: sum.shrink\n        };\n        for(var i = breakPointIndex; i < nodes.length; i += 1){\n            if (nodes[i].type === \"glue\") {\n                result.width += nodes[i].width;\n                result.stretch += nodes[i].stretch;\n                result.shrink += nodes[i].shrink;\n            } else if (nodes[i].type === \"box\" || nodes[i].type === \"penalty\" && nodes[i].penalty === -linebreak.infinity && i > breakPointIndex) {\n                break;\n            }\n        }\n        return result;\n    }\n    // The main loop of the algorithm\n    // eslint-disable-next-line no-shadow\n    function mainLoop(node, index, nodes) {\n        var active = activeNodes.first();\n        var next = null;\n        var ratio = 0;\n        var demerits = 0;\n        /**\n     * @type {Object[]}\n     */ var candidates = [];\n        var badness;\n        var currentLine = 0;\n        var tmpSum;\n        var currentClass = 0;\n        var fitnessClass;\n        /**\n     * @type {Object}\n     */ var candidate;\n        var newNode;\n        // The inner loop iterates through all the active nodes with line < currentLine and then\n        // breaks out to insert the new active node candidates before looking at the next active\n        // nodes for the next lines. The result of this is that the active node list is always\n        // sorted by line number.\n        while(active !== null){\n            candidates = [\n                {\n                    demerits: Infinity\n                },\n                {\n                    demerits: Infinity\n                },\n                {\n                    demerits: Infinity\n                },\n                {\n                    demerits: Infinity\n                }\n            ];\n            // Iterate through the linked list of active nodes to find new potential active nodes\n            // and deactivate current active nodes.\n            while(active !== null){\n                next = active.next;\n                currentLine = active.data.line + 1;\n                ratio = computeCost(active.data.position, index, active.data, currentLine);\n                // Deactive nodes when the distance between the current active node and the\n                // current node becomes too large (i.e. it exceeds the stretch limit and the stretch\n                // ratio becomes negative) or when the current node is a forced break (i.e. the end\n                // of the paragraph when we want to remove all active nodes, but possibly have a final\n                // candidate active node---if the paragraph can be set using the given tolerance value.)\n                if (ratio < -1 || node.type === \"penalty\" && node.penalty === -linebreak.infinity) {\n                    activeNodes.remove(active);\n                }\n                // If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the\n                // total demerits and record a candidate active node.\n                if (ratio >= -1 && ratio <= options.tolerance) {\n                    badness = 100 * Math.pow(Math.abs(ratio), 3);\n                    // Positive penalty\n                    if (node.type === \"penalty\" && node.penalty >= 0) {\n                        demerits = Math.pow(options.demerits.line + badness, 2) + Math.pow(node.penalty, 2);\n                    // Negative penalty but not a forced break\n                    } else if (node.type === \"penalty\" && node.penalty !== -linebreak.infinity) {\n                        demerits = Math.pow(options.demerits.line + badness, 2) - Math.pow(node.penalty, 2);\n                    // All other cases\n                    } else {\n                        demerits = Math.pow(options.demerits.line + badness, 2);\n                    }\n                    if (node.type === \"penalty\" && nodes[active.data.position].type === \"penalty\") {\n                        demerits += options.demerits.flagged * node.flagged * nodes[active.data.position].flagged;\n                    }\n                    // Calculate the fitness class for this candidate active node.\n                    if (ratio < -0.5) {\n                        currentClass = 0;\n                    } else if (ratio <= 0.5) {\n                        currentClass = 1;\n                    } else if (ratio <= 1) {\n                        currentClass = 2;\n                    } else {\n                        currentClass = 3;\n                    }\n                    // Add a fitness penalty to the demerits if the fitness classes of two adjacent lines\n                    // differ too much.\n                    if (Math.abs(currentClass - active.data.fitnessClass) > 1) {\n                        demerits += options.demerits.fitness;\n                    }\n                    // Add the total demerits of the active node to get the total demerits of this candidate node.\n                    demerits += active.data.demerits;\n                    // Only store the best candidate for each fitness class\n                    if (demerits < candidates[currentClass].demerits) {\n                        candidates[currentClass] = {\n                            active: active,\n                            demerits: demerits,\n                            ratio: ratio\n                        };\n                    }\n                }\n                active = next;\n                // Stop iterating through active nodes to insert new candidate active nodes in the active list\n                // before moving on to the active nodes for the next line.\n                // TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs\n                // with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.\n                // For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node\n                // list sorted has a higher priority.\n                if (active !== null && active.data.line >= currentLine) {\n                    break;\n                }\n            }\n            tmpSum = computeSum(index);\n            for(fitnessClass = 0; fitnessClass < candidates.length; fitnessClass += 1){\n                candidate = candidates[fitnessClass];\n                if (candidate.demerits < Infinity) {\n                    newNode = new LinkedList.Node(breakpoint(index, candidate.demerits, candidate.ratio, candidate.active.data.line + 1, fitnessClass, tmpSum, candidate.active));\n                    if (active !== null) {\n                        activeNodes.insertBefore(active, newNode);\n                    } else {\n                        activeNodes.push(newNode);\n                    }\n                }\n            }\n        }\n    }\n    // Add an active node for the start of the paragraph.\n    activeNodes.push(new LinkedList.Node(breakpoint(0, 0, 0, 0, 0, undefined, null)));\n    // eslint-disable-next-line no-shadow\n    nodes.forEach(function(node, index, nodes) {\n        if (node.type === \"box\") {\n            sum.width += node.width;\n        } else if (node.type === \"glue\") {\n            if (index > 0 && nodes[index - 1].type === \"box\") {\n                mainLoop(node, index, nodes);\n            }\n            sum.width += node.width;\n            sum.stretch += node.stretch;\n            sum.shrink += node.shrink;\n        } else if (node.type === \"penalty\" && node.penalty !== linebreak.infinity) {\n            mainLoop(node, index, nodes);\n        }\n    });\n    if (activeNodes.size() !== 0) {\n        // Find the best active node (the one with the least total demerits.)\n        activeNodes.forEach(function(node) {\n            if (node.data.demerits < tmp.data.demerits) {\n                tmp = node;\n            }\n        });\n        while(tmp !== null){\n            breaks.push({\n                position: tmp.data.position,\n                ratio: tmp.data.ratio\n            });\n            tmp = tmp.data.previous;\n        }\n        return breaks.reverse();\n    }\n    return [];\n};\nlinebreak.infinity = 10000;\nlinebreak.glue = function(width, value, stretch, shrink) {\n    return {\n        type: \"glue\",\n        value: value,\n        width: width,\n        stretch: stretch,\n        shrink: shrink\n    };\n};\nlinebreak.box = function(width, value, hyphenated) {\n    if (hyphenated === void 0) {\n        hyphenated = false;\n    }\n    return {\n        type: \"box\",\n        width: width,\n        value: value,\n        hyphenated: hyphenated\n    };\n};\nlinebreak.penalty = function(width, penalty, flagged) {\n    return {\n        type: \"penalty\",\n        width: width,\n        penalty: penalty,\n        flagged: flagged\n    };\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Add scalar to run\n *\n * @param {number} n scalar\n * @param {Run} run run\n * @returns {Run} added run\n */ var add = function add(n, run) {\n    var start = run.start + n;\n    var end = run.end + n;\n    return Object.assign({}, run, {\n        start: start,\n        end: end\n    });\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Get run length\n *\n * @param {Run} run run\n * @returns {number} length\n */ var length = function length(run) {\n    return run.end - run.start;\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Concats two runs into one\n *\n * @param {Run} runA first run\n * @param {Run} runB second run\n * @returns {Run} concatenated run\n */ var concat = function concat(runA, runB) {\n    var end = runA.end + length(runB);\n    var glyphs = (runA.glyphs || []).concat(runB.glyphs || []);\n    var positions = (runA.positions || []).concat(runB.positions || []);\n    var attributes = Object.assign({}, runA.attributes, runB.attributes);\n    var runAIndices = runA.glyphIndices || [];\n    var runALastIndex = (0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.last)(runAIndices) || 0;\n    var runBIndices = (runB.glyphIndices || []).map(function(i) {\n        return i + runALastIndex + 1;\n    });\n    var glyphIndices = normalize(runAIndices.concat(runBIndices));\n    return Object.assign({}, runA, {\n        end: end,\n        glyphs: glyphs,\n        positions: positions,\n        attributes: attributes,\n        glyphIndices: glyphIndices\n    });\n};\n/**\n * @typedef {import('../types.js').Glyph} Glyph\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Insert glyph to run in the given index\n *\n * @param {number} index index\n * @param {Glyph} glyph glyph\n * @param {Run} run run\n * @returns {Run} run with glyph\n */ var insertGlyph$1 = function insertGlyph(index, glyph, run) {\n    if (!glyph) return run;\n    // Split resolves ligature splitting in case new glyph breaks some\n    var leadingRun = slice$1(0, index, run);\n    var trailingRun = slice$1(index, Infinity, run);\n    return concat(append$1(glyph, leadingRun), trailingRun);\n};\n/**\n * Insert either glyph or code point to run in the given index\n *\n * @param {number} index index\n * @param {Glyph | number} value glyph or codePoint\n * @param {Run} run run\n * @returns {Run} run with glyph\n */ var insert = function insert(index, value, run) {\n    var font = getFont(run);\n    var glyph = isNumber(value) ? fromCodePoint(value, font) : value;\n    return insertGlyph$1(index, glyph, run);\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Get run index at char index\n *\n * @param {number} n char index\n * @param {AttributedString} string attributed string\n * @returns {number} run index\n */ var runIndexAt = function runIndexAt(n, string) {\n    return runIndexAt$1(n, string.runs);\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Glyph} Glyph\n */ /**\n * Insert glyph into attributed string\n *\n * @param {number} index index\n * @param {Glyph} glyph glyph\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string with new glyph\n */ var insertGlyph = function insertGlyph(index, glyph, attributedString) {\n    var runIndex = runIndexAt(index, attributedString);\n    // Add glyph to the end if run index invalid\n    if (runIndex === -1) return append(glyph, attributedString);\n    var codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n    var string = attributedString.string.slice(0, index) + stringFromCodePoints(codePoints) + attributedString.string.slice(index);\n    var runs = attributedString.runs.map(function(run, i) {\n        if (i === runIndex) return insert(index - run.start, glyph, run);\n        if (i > runIndex) return add(codePoints.length, run);\n        return run;\n    });\n    return Object.assign({}, attributedString, {\n        string: string,\n        runs: runs\n    });\n};\n/**\n * @typedef {import('../types.js').Run} Run\n */ /**\n * Advance width between two string indices\n *\n * @param {number} start glyph index\n * @param {number} end glyph index\n * @param {Run} run run\n * @returns {number} advanced width run\n */ var advanceWidthBetween$1 = function advanceWidthBetween(start, end, run) {\n    var runStart = run.start || 0;\n    var glyphStartIndex = Math.max(0, glyphIndexAt(start - runStart, run));\n    var glyphEndIndex = Math.max(0, glyphIndexAt(end - runStart, run));\n    var positions = (run.positions || []).slice(glyphStartIndex, glyphEndIndex);\n    return advanceWidth$2(positions);\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Advance width between start and end\n * Does not consider ligature splitting for the moment.\n * Check performance impact on supporting this\n *\n * @param {number} start offset\n * @param {number} end offset\n * @param {AttributedString} attributedString\n * @returns {number} advance width\n */ var advanceWidthBetween = function advanceWidthBetween(start, end, attributedString) {\n    var runs = filter(start, end, attributedString.runs);\n    return runs.reduce(function(acc, run) {\n        return acc + advanceWidthBetween$1(start, end, run);\n    }, 0);\n};\n/**\n * @typedef {import('../../types.js').AttributedString} AttributedString\n * @typedef {import('../../types.js').Attributes} Attributes\n */ var HYPHEN = 0x002d;\nvar TOLERANCE_STEPS = 5;\nvar TOLERANCE_LIMIT = 50;\nvar opts = {\n    width: 3,\n    stretch: 6,\n    shrink: 9\n};\n/**\n * Slice attributed string to many lines\n *\n * @param {AttributedString} string attributed string\n * @param {Object[]} nodes\n * @param {Object[]} breaks\n * @returns {AttributedString[]} attributed strings\n */ var breakLines = function breakLines(string, nodes, breaks) {\n    var start = 0;\n    var end = null;\n    var lines = breaks.reduce(function(acc, breakPoint) {\n        var node = nodes[breakPoint.position];\n        var prevNode = nodes[breakPoint.position - 1];\n        // Last breakpoint corresponds to K&P mandatory final glue\n        if (breakPoint.position === nodes.length - 1) return acc;\n        var line;\n        if (node.type === \"penalty\") {\n            end = prevNode.value.end;\n            line = slice(start, end, string);\n            line = insertGlyph(line.length, HYPHEN, line);\n        } else {\n            end = node.value.end;\n            line = slice(start, end, string);\n        }\n        start = end;\n        return [].concat(acc, [\n            line\n        ]);\n    }, []);\n    // Last line\n    lines.push(slice(start, string.string.length, string));\n    return lines;\n};\n/**\n * Return Knuth & Plass nodes based on line and previously calculated syllables\n *\n * @param {AttributedString} attributedString attributed string\n * @param {Object} args attributed string args\n * @param {Object} options layout options\n * @returns {Object[]} attributed strings\n */ var getNodes = function getNodes(attributedString, _ref, options) {\n    var align = _ref.align;\n    var start = 0;\n    var hyphenWidth = 5;\n    var syllables = attributedString.syllables;\n    var hyphenPenalty = options.hyphenationPenalty || (align === \"justify\" ? 100 : 600);\n    var result = syllables.reduce(function(acc, s, index) {\n        var width = advanceWidthBetween(start, start + s.length, attributedString);\n        if (s.trim() === \"\") {\n            var stretch = width * opts.width / opts.stretch;\n            var shrink = width * opts.width / opts.shrink;\n            var value = {\n                start: start,\n                end: start + s.length\n            };\n            acc.push(linebreak.glue(width, value, stretch, shrink));\n        } else {\n            var hyphenated = syllables[index + 1] !== \" \";\n            var _value = {\n                start: start,\n                end: start + s.length\n            };\n            acc.push(linebreak.box(width, _value, hyphenated));\n            if (syllables[index + 1] && hyphenated) {\n                acc.push(linebreak.penalty(hyphenWidth, hyphenPenalty, 1));\n            }\n        }\n        start += s.length;\n        return acc;\n    }, []);\n    result.push(linebreak.glue(0, null, linebreak.infinity, 0));\n    result.push(linebreak.penalty(0, -linebreak.infinity, 1));\n    return result;\n};\n/**\n * @param {AttributedString} attributedString attributed string\n * @returns {Attributes} styles\n */ var getStyles = function getStyles(attributedString) {\n    var _attributedString$run, _attributedString$run2;\n    return ((_attributedString$run = attributedString.runs) === null || _attributedString$run === void 0 ? void 0 : (_attributedString$run2 = _attributedString$run[0]) === null || _attributedString$run2 === void 0 ? void 0 : _attributedString$run2.attributes) || {};\n};\n/**\n * Performs Knuth & Plass line breaking algorithm\n * Fallbacks to best fit algorithm if latter not successful\n *\n * @param {Object} options layout options\n */ var linebreaker = function linebreaker(options) {\n    /**\n   * @param {AttributedString} attributedString attributed string\n   * @param {number[]} availableWidths available widths\n   * @returns {AttributedString[]} attributed strings\n   */ return function(attributedString, availableWidths) {\n        var tolerance = options.tolerance || 4;\n        var style = getStyles(attributedString);\n        var nodes = getNodes(attributedString, style, options);\n        /** @type {Object[]} */ var breaks = linebreak(nodes, availableWidths, {\n            tolerance: tolerance\n        });\n        // Try again with a higher tolerance if the line breaking failed.\n        while(breaks.length === 0 && tolerance < TOLERANCE_LIMIT){\n            tolerance += TOLERANCE_STEPS;\n            breaks = linebreak(nodes, availableWidths, {\n                tolerance: tolerance\n            });\n        }\n        if (breaks.length === 0 || breaks.length === 1 && breaks[0].position === 0) {\n            breaks = applyBestFit(nodes, availableWidths);\n        }\n        return breakLines(attributedString, nodes, breaks.slice(1));\n    };\n};\nvar WHITESPACE_PRIORITY = 1;\nvar LETTER_PRIORITY = 2;\nvar EXPAND_WHITESPACE_FACTOR = {\n    before: 0.5,\n    after: 0.5,\n    priority: WHITESPACE_PRIORITY,\n    unconstrained: false\n};\nvar EXPAND_CHAR_FACTOR = {\n    before: 0.14453125,\n    // 37/256\n    after: 0.14453125,\n    priority: LETTER_PRIORITY,\n    unconstrained: false\n};\nvar SHRINK_WHITESPACE_FACTOR = {\n    before: -0.04296875,\n    // -11/256\n    after: -0.04296875,\n    priority: WHITESPACE_PRIORITY,\n    unconstrained: false\n};\nvar SHRINK_CHAR_FACTOR = {\n    before: -0.04296875,\n    after: -0.04296875,\n    priority: LETTER_PRIORITY,\n    unconstrained: false\n};\nvar getCharFactor = function getCharFactor(direction, options) {\n    var expandCharFactor = options.expandCharFactor || {};\n    var shrinkCharFactor = options.shrinkCharFactor || {};\n    return direction === \"GROW\" ? Object.assign({}, EXPAND_CHAR_FACTOR, expandCharFactor) : Object.assign({}, SHRINK_CHAR_FACTOR, shrinkCharFactor);\n};\nvar getWhitespaceFactor = function getWhitespaceFactor(direction, options) {\n    var expandWhitespaceFactor = options.expandWhitespaceFactor || {};\n    var shrinkWhitespaceFactor = options.shrinkWhitespaceFactor || {};\n    return direction === \"GROW\" ? Object.assign({}, EXPAND_WHITESPACE_FACTOR, expandWhitespaceFactor) : Object.assign({}, SHRINK_WHITESPACE_FACTOR, shrinkWhitespaceFactor);\n};\nvar factor = function factor(direction, options) {\n    return function(glyphs) {\n        var charFactor = getCharFactor(direction, options);\n        var whitespaceFactor = getWhitespaceFactor(direction, options);\n        var factors = [];\n        for(var index = 0; index < glyphs.length; index += 1){\n            var f = void 0;\n            var glyph = glyphs[index];\n            if (isWhiteSpace(glyph)) {\n                f = Object.assign({}, whitespaceFactor);\n                if (index === glyphs.length - 1) {\n                    f.before = 0;\n                    if (index > 0) {\n                        factors[index - 1].after = 0;\n                    }\n                }\n            } else if (glyph.isMark && index > 0) {\n                f = Object.assign({}, factors[index - 1]);\n                f.before = 0;\n                factors[index - 1].after = 0;\n            } else {\n                f = Object.assign({}, charFactor);\n            }\n            factors.push(f);\n        }\n        return factors;\n    };\n};\nvar getFactors = function getFactors(gap, line, options) {\n    var direction = gap > 0 ? \"GROW\" : \"SHRINK\";\n    var getFactor = factor(direction, options);\n    var factors = line.runs.reduce(function(acc, run) {\n        return acc.concat(getFactor(run.glyphs));\n    }, []);\n    factors[0].before = 0;\n    factors[factors.length - 1].after = 0;\n    return factors;\n};\n/* eslint-disable no-multi-assign */ var KASHIDA_PRIORITY = 0;\nvar NULL_PRIORITY = 3;\nvar getDistances = function getDistances(gap, factors) {\n    var total = 0;\n    var priorities = [];\n    var unconstrained = [];\n    for(var _priority = KASHIDA_PRIORITY; _priority <= NULL_PRIORITY; _priority += 1){\n        priorities[_priority] = unconstrained[_priority] = 0;\n    }\n    // sum the factors at each priority\n    for(var j = 0; j < factors.length; j += 1){\n        var f = factors[j];\n        var sum = f.before + f.after;\n        total += sum;\n        priorities[f.priority] += sum;\n        if (f.unconstrained) {\n            unconstrained[f.priority] += sum;\n        }\n    }\n    // choose the priorities that need to be applied\n    var highestPriority = -1;\n    var highestPrioritySum = 0;\n    var remainingGap = gap;\n    var priority;\n    for(priority = KASHIDA_PRIORITY; priority <= NULL_PRIORITY; priority += 1){\n        var prioritySum = priorities[priority];\n        if (prioritySum !== 0) {\n            if (highestPriority === -1) {\n                highestPriority = priority;\n                highestPrioritySum = prioritySum;\n            }\n            // if this priority covers the remaining gap, we're done\n            if (Math.abs(remainingGap) <= Math.abs(prioritySum)) {\n                priorities[priority] = remainingGap / prioritySum;\n                unconstrained[priority] = 0;\n                remainingGap = 0;\n                break;\n            }\n            // mark that we need to use 100% of the adjustment from\n            // this priority, and subtract the space that it consumes\n            priorities[priority] = 1;\n            remainingGap -= prioritySum;\n            // if this priority has unconstrained glyphs, let them consume the remaining space\n            if (unconstrained[priority] !== 0) {\n                unconstrained[priority] = remainingGap / unconstrained[priority];\n                remainingGap = 0;\n                break;\n            }\n        }\n    }\n    // zero out remaining priorities (if any)\n    for(var p = priority + 1; p <= NULL_PRIORITY; p += 1){\n        priorities[p] = 0;\n        unconstrained[p] = 0;\n    }\n    // if there is still space left over, assign it to the highest priority that we saw.\n    // this violates their factors, but it only happens in extreme cases\n    if (remainingGap > 0 && highestPriority > -1) {\n        priorities[highestPriority] = (highestPrioritySum + (gap - total)) / highestPrioritySum;\n    }\n    // create and return an array of distances to add to each glyph's advance\n    var distances = [];\n    for(var index = 0; index < factors.length; index += 1){\n        // the distance to add to this glyph is the sum of the space to add\n        // after this glyph, and the space to add before the next glyph\n        var _f = factors[index];\n        var next = factors[index + 1];\n        var dist = _f.after * priorities[_f.priority];\n        if (next) {\n            dist += next.before * priorities[next.priority];\n        }\n        // if this glyph is unconstrained, add the unconstrained distance as well\n        if (_f.unconstrained) {\n            dist += _f.after * unconstrained[_f.priority];\n            if (next) {\n                dist += next.before * unconstrained[next.priority];\n            }\n        }\n        distances.push(dist);\n    }\n    return distances;\n};\n/**\n * Adjust run positions by given distances\n *\n * @param {number[]} distances\n * @param {Object} line\n * @returns {Object} line\n */ var justifyLine = function justifyLine(distances, line) {\n    var index = 0;\n    for(var _iterator = _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__(line.runs), _step; !(_step = _iterator()).done;){\n        var run = _step.value;\n        for(var _iterator2 = _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__(run.positions), _step2; !(_step2 = _iterator2()).done;){\n            var position = _step2.value;\n            position.xAdvance += distances[index++];\n        }\n    }\n    return line;\n};\n/**\n * A JustificationEngine is used by a Typesetter to perform line fragment\n * justification. This implementation is based on a description of Apple's\n * justification algorithm from a PDF in the Apple Font Tools package.\n *\n * // TODO: Make it immutable\n *\n * @param {Object} options layout options\n */ var justification = function justification(options) {\n    /**\n   * @param {Object} line\n   * @returns {Object} line\n   */ return function(line) {\n        var gap = line.box.width - advanceWidth(line);\n        if (gap === 0) return; // Exact fit\n        var factors = getFactors(gap, line, options);\n        var distances = getDistances(gap, factors);\n        return justifyLine(distances, line);\n    };\n};\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */ /**\n * Returns attributed string ascent\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} ascent\n */ var ascent = function ascent(attributedString) {\n    var reducer = function reducer(acc, run) {\n        return Math.max(acc, ascent$1(run));\n    };\n    return attributedString.runs.reduce(reducer, 0);\n};\n/* eslint-disable no-param-reassign */ // The base font size used for calculating underline thickness.\nvar BASE_FONT_SIZE = 12;\n/**\n * A TextDecorationEngine is used by a Typesetter to generate\n * DecorationLines for a line fragment, including underlines\n * and strikes.\n */ var textDecoration = function textDecoration() {\n    return function(lineFragment) {\n        var x = lineFragment.overflowLeft || 0;\n        var overflowRight = lineFragment.overflowRight || 0;\n        var maxX = advanceWidth(lineFragment) - overflowRight;\n        lineFragment.decorationLines = [];\n        for(var i = 0; i < lineFragment.runs.length; i += 1){\n            var run = lineFragment.runs[i];\n            var width = Math.min(maxX - x, advanceWidth$1(run));\n            var thickness = Math.max(0.5, Math.floor(run.attributes.fontSize / BASE_FONT_SIZE));\n            if (run.attributes.underline) {\n                var rect = {\n                    x: x,\n                    y: ascent(lineFragment) + thickness * 2,\n                    width: width,\n                    height: thickness\n                };\n                var line = {\n                    rect: rect,\n                    opacity: run.attributes.opacity,\n                    color: run.attributes.underlineColor || \"black\",\n                    style: run.attributes.underlineStyle || \"solid\"\n                };\n                lineFragment.decorationLines.push(line);\n            }\n            if (run.attributes.strike) {\n                var y = ascent(lineFragment) - ascent$1(run) / 3;\n                var _rect = {\n                    x: x,\n                    y: y,\n                    width: width,\n                    height: thickness\n                };\n                var _line = {\n                    rect: _rect,\n                    opacity: run.attributes.opacity,\n                    color: run.attributes.strikeColor || \"black\",\n                    style: run.attributes.strikeStyle || \"solid\"\n                };\n                lineFragment.decorationLines.push(_line);\n            }\n            x += width;\n        }\n        return lineFragment;\n    };\n};\nvar ignoredScripts = [\n    \"Common\",\n    \"Inherited\",\n    \"Unknown\"\n];\n/**\n * @typedef {import('../../types.js').AttributedString} AttributedString\n */ /**\n * Resolves unicode script in runs, grouping equal runs together\n */ var scriptItemizer = function scriptItemizer() {\n    /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */ return function(attributedString) {\n        var string = attributedString.string;\n        var lastScript = \"Unknown\";\n        var lastIndex = 0;\n        var index = 0;\n        var res = [];\n        if (!string) return empty();\n        for(var i = 0; i < string.length; i += 1){\n            var char = string[i];\n            var codePoint = char.codePointAt();\n            var script = unicode_properties__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getScript(codePoint);\n            if (script !== lastScript && !ignoredScripts.includes(script)) {\n                if (lastScript !== \"Unknown\") {\n                    res.push({\n                        start: lastIndex,\n                        end: index,\n                        attributes: {\n                            script: lastScript\n                        }\n                    });\n                }\n                lastIndex = index;\n                lastScript = script;\n            }\n            index += char.length;\n        }\n        if (lastIndex < string.length) {\n            res.push({\n                start: lastIndex,\n                end: string.length,\n                attributes: {\n                    script: lastScript\n                }\n            });\n        }\n        return {\n            string: string,\n            runs: res\n        };\n    };\n};\nvar SOFT_HYPHEN = \"\\xad\";\nvar hyphenator = hyphen__WEBPACK_IMPORTED_MODULE_6__(hyphen_patterns_en_us_js__WEBPACK_IMPORTED_MODULE_7__);\n/**\n * @param {string} word\n * @returns {string[]} word parts\n */ var splitHyphen = function splitHyphen(word) {\n    return word.split(SOFT_HYPHEN);\n};\nvar cache = {};\n/**\n * @param {string} word\n * @returns {string[]} word parts\n */ var getParts = function getParts(word) {\n    var base = word.includes(SOFT_HYPHEN) ? word : hyphenator(word);\n    return splitHyphen(base);\n};\nvar wordHyphenation = function wordHyphenation() {\n    /**\n   * @param {string} word word\n   * @returns {string[]} word parts\n   */ return function(word) {\n        var cacheKey = \"_\" + word;\n        if ((0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.isNil)(word)) return [];\n        if (cache[cacheKey]) return cache[cacheKey];\n        cache[cacheKey] = getParts(word);\n        return cache[cacheKey];\n    };\n};\n/**\n * @typedef {import('../../types.js').AttributedString} AttributedString\n * @typedef {import('../../types.js').Run} Run\n */ /**\n * @param {Run} run run\n * @returns {number}\n */ var getFontSize = function getFontSize(run) {\n    return run.attributes.fontSize || 12;\n};\n/**\n * Resolve font runs in an AttributedString, grouping equal\n * runs and performing font substitution where necessary.\n */ var fontSubstitution = function fontSubstitution() {\n    /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */ return function(attributedString) {\n        var string = attributedString.string, runs = attributedString.runs;\n        var lastFont = null;\n        var lastIndex = 0;\n        var index = 0;\n        var res = [];\n        if (!string) return empty();\n        for(var _iterator = _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__(runs), _step; !(_step = _iterator()).done;){\n            var run = _step.value;\n            var _fontSize = getFontSize(run);\n            var defaultFont = run.attributes.font;\n            if (string.length === 0) {\n                res.push({\n                    start: 0,\n                    end: 0,\n                    attributes: {\n                        font: defaultFont\n                    }\n                });\n                break;\n            }\n            for(var _iterator2 = _babel_runtime_helpers_createForOfIteratorHelperLoose__WEBPACK_IMPORTED_MODULE_4__(string.slice(run.start, run.end)), _step2; !(_step2 = _iterator2()).done;){\n                var char = _step2.value;\n                var font = defaultFont;\n                if (font !== lastFont) {\n                    if (lastFont) {\n                        res.push({\n                            start: lastIndex,\n                            end: index,\n                            attributes: {\n                                font: lastFont,\n                                scale: lastFont ? _fontSize / lastFont.unitsPerEm : 0\n                            }\n                        });\n                    }\n                    lastFont = font;\n                    lastIndex = index;\n                }\n                index += char.length;\n            }\n        }\n        if (lastIndex < string.length) {\n            var fontSize = getFontSize((0,_react_pdf_fns__WEBPACK_IMPORTED_MODULE_0__.last)(runs));\n            res.push({\n                start: lastIndex,\n                end: string.length,\n                attributes: {\n                    font: lastFont,\n                    scale: lastFont ? fontSize / lastFont.unitsPerEm : 0\n                }\n            });\n        }\n        return {\n            string: string,\n            runs: res\n        };\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXBkZi90ZXh0a2l0L2xpYi90ZXh0a2l0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEY7QUFDeEM7QUFDMEM7QUFDOUQ7QUFDa0U7QUFDM0Q7QUFDYjtBQUNtQjtBQUUvQzs7O0NBR0MsR0FFRDs7Ozs7Q0FLQyxHQUNELElBQUljLGdCQUFnQixTQUFTQSxjQUFjQyxTQUFTO0lBQ2xELElBQUlDLFNBQVM7SUFDYixJQUFJQyxTQUFTO0lBQ2IsSUFBSUMsT0FBTyxFQUFFO0lBQ2JILFVBQVVJLE9BQU8sQ0FBQyxTQUFVQyxRQUFRO1FBQ2xDSCxVQUFVRyxTQUFTSCxNQUFNO1FBQ3pCQyxLQUFLRyxJQUFJLENBQUNkLDJEQUFRQSxDQUFDLENBQUMsR0FBR2EsVUFBVTtZQUMvQkUsT0FBT047WUFDUE8sS0FBS1AsU0FBU0ksU0FBU0gsTUFBTSxDQUFDTyxNQUFNO1lBQ3BDQyxZQUFZTCxTQUFTSyxVQUFVLElBQUksQ0FBQztRQUN0QztRQUNBVCxVQUFVSSxTQUFTSCxNQUFNLENBQUNPLE1BQU07SUFDbEM7SUFDQSxPQUFPO1FBQ0xQLFFBQVFBO1FBQ1JDLE1BQU1BO0lBQ1I7QUFDRjtBQUVBOztDQUVDLEdBRUQ7Ozs7OztDQU1DLEdBQ0QsSUFBSVEsMkJBQTJCLFNBQVNBLHlCQUF5QkMsSUFBSTtJQUNuRSxPQUFPO1FBQUNBO0tBQUs7QUFDZjtBQUVBOzs7OztDQUtDLEdBQ0QsSUFBSUMsWUFBWSxTQUFTQSxVQUFVQyxPQUFPLEVBQUVDLE9BQU87SUFDakQsSUFBSUQsWUFBWSxLQUFLLEdBQUc7UUFDdEJBLFVBQVUsQ0FBQztJQUNiO0lBQ0EsSUFBSUMsWUFBWSxLQUFLLEdBQUc7UUFDdEJBLFVBQVUsQ0FBQztJQUNiO0lBQ0E7OztHQUdDLEdBQ0QsT0FBTyxTQUFVQyxnQkFBZ0I7UUFDL0IsSUFBSUMsdUJBQXVCQztRQUMzQixJQUFJQyxZQUFZLEVBQUU7UUFDbEIsSUFBSW5CLFlBQVksRUFB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Z0JBQ0Y7Z0JBQ0E7WUFDRjtZQUNBLElBQUssSUFBSXhCLGFBQWFsakIsa0ZBQStCQSxDQUFDTyxPQUFPeUIsS0FBSyxDQUFDRixJQUFJbEIsS0FBSyxFQUFFa0IsSUFBSWpCLEdBQUcsSUFBSXNpQixRQUFRLENBQUMsQ0FBQ0EsU0FBU0QsWUFBVyxFQUFHRCxJQUFJLEVBQUc7Z0JBQy9ILElBQUkxSixPQUFPNEosT0FBT2hmLEtBQUs7Z0JBQ3ZCLElBQUlMLE9BQU80Z0I7Z0JBQ1gsSUFBSTVnQixTQUFTMGdCLFVBQVU7b0JBQ3JCLElBQUlBLFVBQVU7d0JBQ1oxUixJQUFJblMsSUFBSSxDQUFDOzRCQUNQQyxPQUFPdUg7NEJBQ1B0SCxLQUFLb0Q7NEJBQ0xsRCxZQUFZO2dDQUNWK0MsTUFBTTBnQjtnQ0FDTnpnQixPQUFPeWdCLFdBQVdDLFlBQVlELFNBQVMzZ0IsVUFBVSxHQUFHOzRCQUN0RDt3QkFDRjtvQkFDRjtvQkFDQTJnQixXQUFXMWdCO29CQUNYcUUsWUFBWWxFO2dCQUNkO2dCQUNBQSxTQUFTc1YsS0FBS3pZLE1BQU07WUFDdEI7UUFDRjtRQUNBLElBQUlxSCxZQUFZNUgsT0FBT08sTUFBTSxFQUFFO1lBQzdCLElBQUk4QyxXQUFXMmdCLFlBQVlobEIsb0RBQUlBLENBQUNpQjtZQUNoQ3NTLElBQUluUyxJQUFJLENBQUM7Z0JBQ1BDLE9BQU91SDtnQkFDUHRILEtBQUtOLE9BQU9PLE1BQU07Z0JBQ2xCQyxZQUFZO29CQUNWK0MsTUFBTTBnQjtvQkFDTnpnQixPQUFPeWdCLFdBQVc1Z0IsV0FBVzRnQixTQUFTM2dCLFVBQVUsR0FBRztnQkFDckQ7WUFDRjtRQUNGO1FBQ0EsT0FBTztZQUNMdEQsUUFBUUE7WUFDUkMsTUFBTXNTO1FBQ1I7SUFDRjtBQUNGO0FBRXNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVhcm5yZWFjdG5leHQvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXBkZi90ZXh0a2l0L2xpYi90ZXh0a2l0LmpzPzAwMDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOaWwsIGxhc3QsIHJlcGVhdCwgZHJvcExhc3QgYXMgZHJvcExhc3QkMiwgYWRqdXN0LCBjb21wb3NlIH0gZnJvbSAnQHJlYWN0LXBkZi9mbnMnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBiaWRpRmFjdG9yeSBmcm9tICdiaWRpLWpzJztcbmltcG9ydCBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlJztcbmltcG9ydCB1bmljb2RlIGZyb20gJ3VuaWNvZGUtcHJvcGVydGllcyc7XG5pbXBvcnQgaHlwaGVuIGZyb20gJ2h5cGhlbic7XG5pbXBvcnQgcGF0dGVybiBmcm9tICdoeXBoZW4vcGF0dGVybnMvZW4tdXMuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXR0cmlidXRlZFN0cmluZ30gQXR0cmlidXRlZFN0cmluZ1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5GcmFnbWVudH0gRnJhZ21lbnRcbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhdHRyaWJ1dGVkIHN0cmluZyBmcm9tIHRleHQgZnJhZ21lbnRzXG4gKlxuICogQHBhcmFtIHtGcmFnbWVudFtdfSBmcmFnbWVudHMgZnJhZ21lbnRzXG4gKiBAcmV0dXJucyB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZCBzdHJpbmdcbiAqL1xudmFyIGZyb21GcmFnbWVudHMgPSBmdW5jdGlvbiBmcm9tRnJhZ21lbnRzKGZyYWdtZW50cykge1xuICB2YXIgb2Zmc2V0ID0gMDtcbiAgdmFyIHN0cmluZyA9ICcnO1xuICB2YXIgcnVucyA9IFtdO1xuICBmcmFnbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZnJhZ21lbnQpIHtcbiAgICBzdHJpbmcgKz0gZnJhZ21lbnQuc3RyaW5nO1xuICAgIHJ1bnMucHVzaChfZXh0ZW5kcyh7fSwgZnJhZ21lbnQsIHtcbiAgICAgIHN0YXJ0OiBvZmZzZXQsXG4gICAgICBlbmQ6IG9mZnNldCArIGZyYWdtZW50LnN0cmluZy5sZW5ndGgsXG4gICAgICBhdHRyaWJ1dGVzOiBmcmFnbWVudC5hdHRyaWJ1dGVzIHx8IHt9XG4gICAgfSkpO1xuICAgIG9mZnNldCArPSBmcmFnbWVudC5zdHJpbmcubGVuZ3RoO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBzdHJpbmc6IHN0cmluZyxcbiAgICBydW5zOiBydW5zXG4gIH07XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXR0cmlidXRlZFN0cmluZ30gQXR0cmlidXRlZFN0cmluZ1xuICovXG5cbi8qKlxuICogRGVmYXVsdCB3b3JkIGh5cGhlbmF0aW9uIGVuZ2luZSB1c2VkIHdoZW4gbm8gb25lIHByb3ZpZGVkLlxuICogRG9lcyBub3QgcGVyZm9ybSB3b3JkIGh5cGhlbmF0aW9uIGF0IGFsbFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB3b3JkXG4gKiBAcmV0dXJucyB7W3N0cmluZ119IHNhbWUgd29yZFxuICovXG52YXIgZGVmYXVsdEh5cGhlbmF0aW9uRW5naW5lID0gZnVuY3Rpb24gZGVmYXVsdEh5cGhlbmF0aW9uRW5naW5lKHdvcmQpIHtcbiAgcmV0dXJuIFt3b3JkXTtcbn07XG5cbi8qKlxuICogV3JhcCB3b3JkcyBvZiBhdHRyaWJ1dGUgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGVuZ2luZXMgbGF5b3V0IGVuZ2luZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIGxheW91dCBvcHRpb25zXG4gKi9cbnZhciB3cmFwV29yZHMgPSBmdW5jdGlvbiB3cmFwV29yZHMoZW5naW5lcywgb3B0aW9ucykge1xuICBpZiAoZW5naW5lcyA9PT0gdm9pZCAwKSB7XG4gICAgZW5naW5lcyA9IHt9O1xuICB9XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZFN0cmluZyBhdHRyaWJ1dGVkIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZCBzdHJpbmcgaW5jbHVkaW5nIHN5bGxhYmxlc1xuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIChhdHRyaWJ1dGVkU3RyaW5nKSB7XG4gICAgdmFyIF9lbmdpbmVzJHdvcmRIeXBoZW5hdCwgX2VuZ2luZXM7XG4gICAgdmFyIHN5bGxhYmxlcyA9IFtdO1xuICAgIHZhciBmcmFnbWVudHMgPSBbXTtcbiAgICB2YXIgaHlwaGVuYXRlV29yZCA9IG9wdGlvbnMuaHlwaGVuYXRpb25DYWxsYmFjayB8fCAoKF9lbmdpbmVzJHdvcmRIeXBoZW5hdCA9IChfZW5naW5lcyA9IGVuZ2luZXMpLndvcmRIeXBoZW5hdGlvbikgPT09IG51bGwgfHwgX2VuZ2luZXMkd29yZEh5cGhlbmF0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZW5naW5lcyR3b3JkSHlwaGVuYXQuY2FsbChfZW5naW5lcywgb3B0aW9ucykpIHx8IGRlZmF1bHRIeXBoZW5hdGlvbkVuZ2luZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJpYnV0ZWRTdHJpbmcucnVucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIHN0cmluZyA9ICcnO1xuICAgICAgdmFyIHJ1biA9IGF0dHJpYnV0ZWRTdHJpbmcucnVuc1tpXTtcbiAgICAgIHZhciB3b3JkcyA9IGF0dHJpYnV0ZWRTdHJpbmcuc3RyaW5nLnNsaWNlKHJ1bi5zdGFydCwgcnVuLmVuZCkuc3BsaXQoLyhbIF0rKS9nKS5maWx0ZXIoQm9vbGVhbik7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHdvcmRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHZhciB3b3JkID0gd29yZHNbal07XG4gICAgICAgIHZhciBwYXJ0cyA9IGh5cGhlbmF0ZVdvcmQod29yZCk7XG4gICAgICAgIHN5bGxhYmxlcy5wdXNoLmFwcGx5KHN5bGxhYmxlcywgcGFydHMpO1xuICAgICAgICBzdHJpbmcgKz0gcGFydHMuam9pbignJyk7XG4gICAgICB9XG4gICAgICBmcmFnbWVudHMucHVzaChfZXh0ZW5kcyh7fSwgcnVuLCB7XG4gICAgICAgIHN0cmluZzogc3RyaW5nXG4gICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZnJvbUZyYWdtZW50cyhmcmFnbWVudHMpLCB7XG4gICAgICBzeWxsYWJsZXM6IHN5bGxhYmxlc1xuICAgIH0pO1xuICB9O1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlJlY3R9IFJlY3RcbiAqL1xuXG4vKipcbiAqIENsb25lIHJlY3RcbiAqXG4gKiBAcGFyYW0ge1JlY3R9IHJlY3QgcmVjdFxuICogQHJldHVybnMge1JlY3R9IGNsb25lZCByZWN0XG4gKi9cbnZhciBjb3B5ID0gZnVuY3Rpb24gY29weShyZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZWN0KTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5SZWN0fSBSZWN0XG4gKi9cblxuLyoqXG4gKlxuICogQHBhcmFtIHtSZWN0fSByZWN0IHJlY3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgaGVpZ2h0XG4gKiBAcmV0dXJucyB7W1JlY3QsIFJlY3RdfSBwYXJ0aXRpb25lZCByZWN0c1xuICovXG52YXIgcGFydGl0aW9uID0gZnVuY3Rpb24gcGFydGl0aW9uKHJlY3QsIGhlaWdodCkge1xuICB2YXIgYSA9IE9iamVjdC5hc3NpZ24oe30sIHJlY3QsIHtcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9KTtcbiAgdmFyIGIgPSBPYmplY3QuYXNzaWduKHt9LCByZWN0LCB7XG4gICAgeTogcmVjdC55ICsgaGVpZ2h0LFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQgLSBoZWlnaHRcbiAgfSk7XG4gIHJldHVybiBbYSwgYl07XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUmVjdH0gUmVjdFxuICovXG5cbi8qKlxuICogQ3JvcCB1cHBlciBzZWN0aW9uIG9mIHJlY3RcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IGhlaWdodFxuICogQHBhcmFtIHtSZWN0fSByZWN0IHJlY3RcbiAqIEByZXR1cm5zIHtSZWN0fSBjcm9wcGVkIHJlY3RcbiAqL1xudmFyIGNyb3AgPSBmdW5jdGlvbiBjcm9wKGhlaWdodCwgcmVjdCkge1xuICB2YXIgX3BhcnRpdGlvbiA9IHBhcnRpdGlvbihyZWN0LCBoZWlnaHQpLFxuICAgIHJlc3VsdCA9IF9wYXJ0aXRpb25bMV07XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIEdldCBwYXJhZ3JhcGggYmxvY2sgaGVpZ2h0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9ICBwYXJhZ3JhcGggYmxvY2tcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHBhcmFncmFwaCBibG9jayBoZWlnaHRcbiAqL1xudmFyIGhlaWdodCQyID0gZnVuY3Rpb24gaGVpZ2h0KHBhcmFncmFwaCkge1xuICByZXR1cm4gcGFyYWdyYXBoLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBibG9jaykge1xuICAgIHJldHVybiBhY2MgKyBibG9jay5ib3guaGVpZ2h0O1xuICB9LCAwKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5SdW59IFJ1blxuICovXG5cbi8qKlxuICogQ2FsY3VsYXRlIHJ1biBzY2FsZVxuICpcbiAqIEBwYXJhbSB7UnVufSBydW4gcnVuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBzY2FsZVxuICovXG52YXIgY2FsY3VsYXRlU2NhbGUgPSBmdW5jdGlvbiBjYWxjdWxhdGVTY2FsZShydW4pIHtcbiAgdmFyIF9hdHRyaWJ1dGVzJGZvbnQ7XG4gIHZhciBhdHRyaWJ1dGVzID0gcnVuLmF0dHJpYnV0ZXMgfHwge307XG4gIHZhciBmb250U2l6ZSA9IGF0dHJpYnV0ZXMuZm9udFNpemUgfHwgMTI7XG4gIHZhciB1bml0c1BlckVtID0gKF9hdHRyaWJ1dGVzJGZvbnQgPSBhdHRyaWJ1dGVzLmZvbnQpID09PSBudWxsIHx8IF9hdHRyaWJ1dGVzJGZvbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hdHRyaWJ1dGVzJGZvbnQudW5pdHNQZXJFbTtcbiAgcmV0dXJuIHVuaXRzUGVyRW0gPyBmb250U2l6ZSAvIHVuaXRzUGVyRW0gOiAwO1xufTtcblxuLyoqXG4gKiBHZXQgcnVuIHNjYWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9ICBydW5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IHNjYWxlXG4gKi9cbnZhciBzY2FsZSA9IGZ1bmN0aW9uIHNjYWxlKHJ1bikge1xuICB2YXIgX3J1biRhdHRyaWJ1dGVzO1xuICByZXR1cm4gKChfcnVuJGF0dHJpYnV0ZXMgPSBydW4uYXR0cmlidXRlcykgPT09IG51bGwgfHwgX3J1biRhdHRyaWJ1dGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcnVuJGF0dHJpYnV0ZXMuc2NhbGUpIHx8IGNhbGN1bGF0ZVNjYWxlKHJ1bik7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIEdldCBsaWdhdHVyZSBvZmZzZXQgYnkgaW5kZXhcbiAqXG4gKiBFeC4gZmZpIGxpZ2F0dXJlXG4gKlxuICogICBnbHlwaHM6ICAgICAgICAgbCAgbyAgZiAgZiAgaSAgbVxuICogICBnbHlwaEluZGljZXM6ICAgMCAgMSAgMiAgMiAgMiAgM1xuICogICBvZmZzZXQ6ICAgICAgICAgMCAgMCAgMCAgMSAgMiAgMFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtSdW59IHJ1biBydW5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IGxpZ2F0dXJlIG9mZnNldFxuICovXG52YXIgb2Zmc2V0ID0gZnVuY3Rpb24gb2Zmc2V0KGluZGV4LCBydW4pIHtcbiAgaWYgKCFydW4pIHJldHVybiAwO1xuICB2YXIgZ2x5cGhJbmRpY2VzID0gcnVuLmdseXBoSW5kaWNlcyB8fCBbXTtcbiAgdmFyIHZhbHVlID0gZ2x5cGhJbmRpY2VzW2luZGV4XTtcbiAgcmV0dXJuIGdseXBoSW5kaWNlcy5zbGljZSgwLCBpbmRleCkuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGkgPT09IHZhbHVlO1xuICB9KS5sZW5ndGg7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuRm9udH0gRm9udFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5SdW59IFJ1blxuICovXG5cbi8qKlxuICogR2V0IHJ1biBmb250XG4gKlxuICogQHBhcmFtIHtSdW59IHJ1biBydW5cbiAqIEByZXR1cm5zIHtGb250IHwgbnVsbH0gZm9udFxuICovXG52YXIgZ2V0Rm9udCA9IGZ1bmN0aW9uIGdldEZvbnQocnVuKSB7XG4gIHZhciBfcnVuJGF0dHJpYnV0ZXM7XG4gIHJldHVybiAoKF9ydW4kYXR0cmlidXRlcyA9IHJ1bi5hdHRyaWJ1dGVzKSA9PT0gbnVsbCB8fCBfcnVuJGF0dHJpYnV0ZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ydW4kYXR0cmlidXRlcy5mb250KSB8fCBudWxsO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkZvbnR9IEZvbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuR2x5cGh9IEdseXBoXG4gKi9cblxuLyoqXG4gKiBTbGljZSBnbHlwaCBiZXR3ZWVuIGNvZGVQb2ludHMgcmFuZ2VcbiAqIFV0aWwgZm9yIGJyZWFraW5nIGxpZ2F0dXJlc1xuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBzdGFydCBjb2RlIHBvaW50IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIGVuZCBjb2RlIHBvaW50IGluZGV4XG4gKiBAcGFyYW0ge0ZvbnR9IGZvbnQgZm9udCB0byBnZW5lcmF0ZSBuZXcgZ2x5cGhcbiAqIEBwYXJhbSB7R2x5cGh9IGdseXBoIGdseXBoIHRvIGJlIHNsaWNlZFxuICogQHJldHVybnMge0dseXBoW119IHNsaWNlZCBnbHlwaCBwYXJ0c1xuICovXG52YXIgc2xpY2UkMiA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQsIGZvbnQsIGdseXBoKSB7XG4gIGlmICghZ2x5cGgpIHJldHVybiBbXTtcbiAgaWYgKHN0YXJ0ID09PSBlbmQpIHJldHVybiBbXTtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gZ2x5cGguY29kZVBvaW50cy5sZW5ndGgpIHJldHVybiBbZ2x5cGhdO1xuICB2YXIgY29kZVBvaW50cyA9IGdseXBoLmNvZGVQb2ludHMuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gIHZhciBzdHJpbmcgPSBTdHJpbmcuZnJvbUNvZGVQb2ludC5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpO1xuXG4gIC8vIHBhc3NpbmcgTFRSIFRvIGZvcmNlIGZvbnRraXQgdG8gbm90IHJldmVyc2UgdGhlIHN0cmluZ1xuICByZXR1cm4gZm9udCA/IGZvbnQubGF5b3V0KHN0cmluZywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgJ2x0cicpLmdseXBocyA6IFtnbHlwaF07XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIFJldHVybiBnbHlwaCBpbmRleCBhdCBzdHJpbmcgaW5kZXgsIGlmIGdseXBoIGluZGljZXMgcHJlc2VudC5cbiAqIE90aGVyd2lzZSByZXR1cm4gc3RyaW5nIGluZGV4XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IGluZGV4XG4gKiBAcGFyYW0ge1J1bn0gcnVuIHJ1blxuICogQHJldHVybnMge251bWJlcn0gZ2x5cGggaW5kZXhcbiAqL1xudmFyIGdseXBoSW5kZXhBdCA9IGZ1bmN0aW9uIGdseXBoSW5kZXhBdChpbmRleCwgcnVuKSB7XG4gIHZhciBfcnVuJGdseXBoSW5kaWNlcztcbiAgdmFyIHJlc3VsdCA9IHJ1biA9PT0gbnVsbCB8fCBydW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfcnVuJGdseXBoSW5kaWNlcyA9IHJ1bi5nbHlwaEluZGljZXMpID09PSBudWxsIHx8IF9ydW4kZ2x5cGhJbmRpY2VzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcnVuJGdseXBoSW5kaWNlc1tpbmRleF07XG4gIHJldHVybiBpc05pbChyZXN1bHQpID8gaW5kZXggOiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IHN0YXJ0aW5nIHdpdGggemVybywgYW5kIGtlZXBpbmcgc2FtZSByZWxhdGlvbiBiZXR3ZWVuIGNvbnNlY3V0aXZlIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7bnVtYmVyW119IGFycmF5IGxpc3RcbiAqIEByZXR1cm5zIHtudW1iZXJbXX0gbm9ybWFsaXplZCBhcnJheVxuICovXG52YXIgbm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKGFycmF5KSB7XG4gIHZhciBoZWFkID0gYXJyYXlbMF07XG4gIHJldHVybiBhcnJheS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIC0gaGVhZDtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIFNsaWNlIHJ1biBiZXR3ZWVuIGdseXBoIGluZGljZXMgcmFuZ2VcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgZ2x5cGggaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgZ2x5cGggaW5kZXhcbiAqIEBwYXJhbSB7UnVufSBydW4gcnVuXG4gKiBAcmV0dXJucyB7UnVufSBzbGljZWQgcnVuXG4gKi9cbnZhciBzbGljZSQxID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCwgcnVuKSB7XG4gIHZhciBfcnVuJGdseXBocywgX3J1biRnbHlwaHMyO1xuICB2YXIgcnVuU2NhbGUgPSBzY2FsZShydW4pO1xuICB2YXIgZm9udCA9IGdldEZvbnQocnVuKTtcblxuICAvLyBHZXQgZ2x5cGggc3RhcnQgYW5kIGVuZCBpbmRpY2VzXG4gIHZhciBzdGFydEluZGV4ID0gZ2x5cGhJbmRleEF0KHN0YXJ0LCBydW4pO1xuICB2YXIgZW5kSW5kZXggPSBnbHlwaEluZGV4QXQoZW5kLCBydW4pO1xuXG4gIC8vIEdldCBzdGFydCBhbmQgZW5kIGdseXBoXG4gIHZhciBzdGFydEdseXBoID0gKF9ydW4kZ2x5cGhzID0gcnVuLmdseXBocykgPT09IG51bGwgfHwgX3J1biRnbHlwaHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ydW4kZ2x5cGhzW3N0YXJ0SW5kZXhdO1xuICB2YXIgZW5kR2x5cGggPSAoX3J1biRnbHlwaHMyID0gcnVuLmdseXBocykgPT09IG51bGwgfHwgX3J1biRnbHlwaHMyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcnVuJGdseXBoczJbZW5kSW5kZXhdO1xuXG4gIC8vIEdldCBzdGFydCBsaWdhdHVyZSBjaHVua3MgKGlmIGFueSlcbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gb2Zmc2V0KHN0YXJ0LCBydW4pO1xuICB2YXIgc3RhcnRHbHlwaHMgPSBzdGFydE9mZnNldCA+IDAgPyBzbGljZSQyKHN0YXJ0T2Zmc2V0LCBJbmZpbml0eSwgZm9udCwgc3RhcnRHbHlwaCkgOiBbXTtcblxuICAvLyBHZXQgZW5kIGxpZ2F0dXJlIGNodW5rcyAoaWYgYW55KVxuICB2YXIgZW5kT2Zmc2V0ID0gb2Zmc2V0KGVuZCwgcnVuKTtcbiAgdmFyIGVuZEdseXBocyA9IHNsaWNlJDIoMCwgZW5kT2Zmc2V0LCBmb250LCBlbmRHbHlwaCk7XG5cbiAgLy8gQ29tcHV0ZSBuZXcgZ2x5cGhzXG4gIHZhciBzbGljZVN0YXJ0ID0gc3RhcnRJbmRleCArIE1hdGgubWluKDEsIHN0YXJ0T2Zmc2V0KTtcbiAgdmFyIGdseXBocyA9IChydW4uZ2x5cGhzIHx8IFtdKS5zbGljZShzbGljZVN0YXJ0LCBlbmRJbmRleCk7XG5cbiAgLy8gQ29tcHV0ZSBuZXcgcG9zaXRpb25zXG4gIHZhciBnbHlwaFBvc2l0aW9uID0gZnVuY3Rpb24gZ2x5cGhQb3NpdGlvbihnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHhBZHZhbmNlOiBnLmFkdmFuY2VXaWR0aCAqIHJ1blNjYWxlXG4gICAgfTtcbiAgfTtcbiAgdmFyIHN0YXJ0UG9zaXRpb25zID0gc3RhcnRHbHlwaHMubWFwKGdseXBoUG9zaXRpb24pO1xuICB2YXIgcG9zaXRpb25zID0gKHJ1bi5wb3NpdGlvbnMgfHwgW10pLnNsaWNlKHNsaWNlU3RhcnQsIGVuZEluZGV4KTtcbiAgdmFyIGVuZFBvc2l0aW9ucyA9IGVuZEdseXBocy5tYXAoZ2x5cGhQb3NpdGlvbik7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBydW4sIHtcbiAgICBzdGFydDogcnVuLnN0YXJ0ICsgc3RhcnQsXG4gICAgZW5kOiBNYXRoLm1pbihydW4uZW5kLCBydW4uc3RhcnQgKyBlbmQpLFxuICAgIGdseXBoSW5kaWNlczogbm9ybWFsaXplKChydW4uZ2x5cGhJbmRpY2VzIHx8IFtdKS5zbGljZShzdGFydCwgZW5kKSksXG4gICAgZ2x5cGhzOiBbc3RhcnRHbHlwaHMsIGdseXBocywgZW5kR2x5cGhzXS5mbGF0KCksXG4gICAgcG9zaXRpb25zOiBbc3RhcnRQb3NpdGlvbnMsIHBvc2l0aW9ucywgZW5kUG9zaXRpb25zXS5mbGF0KClcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIEdldCBydW4gaW5kZXggdGhhdCBjb250YWlucyBwYXNzZWQgaW5kZXhcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbiBpbmRleFxuICogQHBhcmFtIHtSdW5bXX0gcnVucyBydW5zXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBydW4gaW5kZXhcbiAqL1xudmFyIHJ1bkluZGV4QXQkMSA9IGZ1bmN0aW9uIHJ1bkluZGV4QXQobiwgcnVucykge1xuICBpZiAoIXJ1bnMpIHJldHVybiAtMTtcbiAgcmV0dXJuIHJ1bnMuZmluZEluZGV4KGZ1bmN0aW9uIChydW4pIHtcbiAgICByZXR1cm4gcnVuLnN0YXJ0IDw9IG4gJiYgbiA8IHJ1bi5lbmQ7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlJ1bn0gUnVuXG4gKi9cblxuLyoqXG4gKiBGaWx0ZXIgcnVucyBjb250YWluZWQgYmV0d2VlbiBzdGFydCBhbmQgZW5kXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0XG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcGFyYW0ge1J1bltdfSBydW5zXG4gKiBAcmV0dXJucyB7UnVuW119IGZpbHRlcmVkIHJ1bnNcbiAqL1xudmFyIGZpbHRlciA9IGZ1bmN0aW9uIGZpbHRlcihzdGFydCwgZW5kLCBydW5zKSB7XG4gIHZhciBzdGFydEluZGV4ID0gcnVuSW5kZXhBdCQxKHN0YXJ0LCBydW5zKTtcbiAgdmFyIGVuZEluZGV4ID0gTWF0aC5tYXgocnVuSW5kZXhBdCQxKGVuZCAtIDEsIHJ1bnMpLCBzdGFydEluZGV4KTtcbiAgcmV0dXJuIHJ1bnMuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXggKyAxKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5SdW59IFJ1blxuICovXG5cbi8qKlxuICogU3VidHJhY3Qgc2NhbGFyIHRvIHJ1blxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIHNjYWxhclxuICogQHBhcmFtIHtSdW59IHJ1biBydW5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHN1YnRyYWN0ZWQgcnVuXG4gKi9cbnZhciBzdWJ0cmFjdCA9IGZ1bmN0aW9uIHN1YnRyYWN0KG4sIHJ1bikge1xuICB2YXIgc3RhcnQgPSBydW4uc3RhcnQgLSBuO1xuICB2YXIgZW5kID0gcnVuLmVuZCAtIG47XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBydW4sIHtcbiAgICBzdGFydDogc3RhcnQsXG4gICAgZW5kOiBlbmRcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXR0cmlidXRlZFN0cmluZ30gQXR0cmlidXRlZFN0cmluZ1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5SdW59IFJ1blxuICovXG5cbi8qKlxuICogU2xpY2UgYXJyYXkgb2YgcnVuc1xuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBvZmZzZXRcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgb2Zmc2V0XG4gKiBAcGFyYW0ge1J1bltdfSBydW5zXG4gKiBAcmV0dXJucyB7UnVuW119IHNsaWNlZCBydW5zXG4gKi9cbnZhciBzbGljZVJ1bnMgPSBmdW5jdGlvbiBzbGljZVJ1bnMoc3RhcnQsIGVuZCwgcnVucykge1xuICB2YXIgc2xpY2VGaXJzdFJ1biA9IGZ1bmN0aW9uIHNsaWNlRmlyc3RSdW4oYSkge1xuICAgIHJldHVybiBzbGljZSQxKHN0YXJ0IC0gYS5zdGFydCwgZW5kIC0gYS5zdGFydCwgYSk7XG4gIH07XG4gIHZhciBzbGljZUxhc3RSdW4gPSBmdW5jdGlvbiBzbGljZUxhc3RSdW4oYSkge1xuICAgIHJldHVybiBzbGljZSQxKDAsIGVuZCAtIGEuc3RhcnQsIGEpO1xuICB9O1xuICByZXR1cm4gcnVucy5tYXAoZnVuY3Rpb24gKHJ1biwgaSkge1xuICAgIHZhciByZXN1bHQgPSBydW47XG4gICAgdmFyIGlzRmlyc3QgPSBpID09PSAwO1xuICAgIHZhciBpc0xhc3QgPSAhaXNGaXJzdCAmJiBpID09PSBydW5zLmxlbmd0aCAtIDE7XG4gICAgaWYgKGlzRmlyc3QpIHJlc3VsdCA9IHNsaWNlRmlyc3RSdW4ocnVuKTtcbiAgICBpZiAoaXNMYXN0KSByZXN1bHQgPSBzbGljZUxhc3RSdW4ocnVuKTtcbiAgICByZXR1cm4gc3VidHJhY3Qoc3RhcnQsIHJlc3VsdCk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBTbGljZSBhdHRyaWJ1dGVkIHN0cmluZyBiZXR3ZWVuIHR3byBpbmRpY2VzXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IG9mZnNldFxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBvZmZzZXRcbiAqIEBwYXJhbSB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZFN0cmluZyBhdHRyaWJ1dGVkIHN0cmluZ1xuICogQHJldHVybnMge0F0dHJpYnV0ZWRTdHJpbmd9IGF0dHJpYnV0ZWQgc3RyaW5nXG4gKi9cbnZhciBzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQsIGF0dHJpYnV0ZWRTdHJpbmcpIHtcbiAgaWYgKGF0dHJpYnV0ZWRTdHJpbmcuc3RyaW5nLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGF0dHJpYnV0ZWRTdHJpbmc7XG4gIHZhciBzdHJpbmcgPSBhdHRyaWJ1dGVkU3RyaW5nLnN0cmluZy5zbGljZShzdGFydCwgZW5kKTtcbiAgdmFyIGZpbHRlcmVkUnVucyA9IGZpbHRlcihzdGFydCwgZW5kLCBhdHRyaWJ1dGVkU3RyaW5nLnJ1bnMpO1xuICB2YXIgc2xpY2VkUnVucyA9IHNsaWNlUnVucyhzdGFydCwgZW5kLCBmaWx0ZXJlZFJ1bnMpO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYXR0cmlidXRlZFN0cmluZywge1xuICAgIHN0cmluZzogc3RyaW5nLFxuICAgIHJ1bnM6IHNsaWNlZFJ1bnNcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXR0cmlidXRlZFN0cmluZ30gQXR0cmlidXRlZFN0cmluZ1xuICovXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybnMge251bWJlcn0gaW5kZXhcbiAqL1xudmFyIGZpbmRDaGFySW5kZXggPSBmdW5jdGlvbiBmaW5kQ2hhckluZGV4KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnNlYXJjaCgvXFxTL2cpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBpbmRleFxuICovXG52YXIgZmluZExhc3RDaGFySW5kZXggPSBmdW5jdGlvbiBmaW5kTGFzdENoYXJJbmRleChzdHJpbmcpIHtcbiAgdmFyIG1hdGNoID0gc3RyaW5nLm1hdGNoKC9cXFMvZyk7XG4gIHJldHVybiBtYXRjaCA/IHN0cmluZy5sYXN0SW5kZXhPZihtYXRjaFttYXRjaC5sZW5ndGggLSAxXSkgOiAtMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyAoc3RyaXBzKSB3aGl0ZXNwYWNlIGZyb20gYm90aCBlbmRzIG9mIHRoZSBhdHRyaWJ1dHRlZCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nIGF0dHJpYnV0ZWQgc3RyaW5nXG4gKiBAcmV0dXJucyB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZCBzdHJpbmdcbiAqL1xudmFyIHRyaW0gPSBmdW5jdGlvbiB0cmltKGF0dHJpYnV0ZWRTdHJpbmcpIHtcbiAgdmFyIHN0YXJ0ID0gZmluZENoYXJJbmRleChhdHRyaWJ1dGVkU3RyaW5nLnN0cmluZyk7XG4gIHZhciBlbmQgPSBmaW5kTGFzdENoYXJJbmRleChhdHRyaWJ1dGVkU3RyaW5nLnN0cmluZyk7XG4gIHJldHVybiBzbGljZShzdGFydCwgZW5kICsgMSwgYXR0cmlidXRlZFN0cmluZyk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgZW1wdHkgcnVuXG4gKlxuICogQHJldHVybnMge1J1bn0gZW1wdHkgcnVuXG4gKi9cbnZhciBlbXB0eSQxID0gZnVuY3Rpb24gZW1wdHkoKSB7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IDAsXG4gICAgZW5kOiAwLFxuICAgIGdseXBoSW5kaWNlczogW10sXG4gICAgZ2x5cGhzOiBbXSxcbiAgICBwb3NpdGlvbnM6IFtdLFxuICAgIGF0dHJpYnV0ZXM6IHt9XG4gIH07XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIGEgbnVtYmVyXG4gKlxuICogQHRlbXBsYXRlIHt1bmtub3dufSBUXG4gKiBAcGFyYW0ge1R9IHZhbHVlIFZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7dmFsdWUgaXMgbnVtYmVyfSBXaGV0aGVyIHZhbHVlIGlzIGEgbnVtYmVyXG4gKi9cbnZhciBpc051bWJlciA9IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xufTtcblxuLyoqXG4gKiBBcHBlbmQgZ2x5cGggaW5kaWNlcyB3aXRoIGdpdmVuIGxlbmd0aFxuICpcbiAqIEV4LiBhcHBlbmRJbmRpY2VzKDMsIFswLCAxLCAyLCAyXSkgPT4gWzAsIDEsIDIsIDIsIDMsIDMsIDNdXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBsZW5ndGhcbiAqIEBwYXJhbSB7bnVtYmVyW119IGluZGljZXMgZ2x5cGggaW5kaWNlc1xuICogQHJldHVybnMge251bWJlcltdfSBleHRlbmRlZCBnbHlwaCBpbmRpY2VzXG4gKi9cbnZhciBhcHBlbmRJbmRpY2VzID0gZnVuY3Rpb24gYXBwZW5kSW5kaWNlcyhsZW5ndGgsIGluZGljZXMpIHtcbiAgdmFyIGxhc3RJbmRleCA9IGxhc3QoaW5kaWNlcyk7XG4gIHZhciB2YWx1ZSA9IGlzTmlsKGxhc3RJbmRleCkgPyAwIDogbGFzdEluZGV4ICsgMTtcbiAgdmFyIG5ld0luZGljZXMgPSBBcnJheShsZW5ndGgpLmZpbGwodmFsdWUpO1xuICByZXR1cm4gaW5kaWNlcy5jb25jYXQobmV3SW5kaWNlcyk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuRm9udH0gRm9udFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5HbHlwaH0gR2x5cGhcbiAqL1xuXG4vKipcbiAqIEdldCBnbHlwaCBmb3IgYSBnaXZlbiBjb2RlIHBvaW50XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFt2YWx1ZV0gY29kZVBvaW50XG4gKiBAcGFyYW0ge0ZvbnR9IFtmb250XSBmb250XG4gKiBAcmV0dXJucyB7R2x5cGh9IGdseXBoXG4gKiAqL1xudmFyIGZyb21Db2RlUG9pbnQgPSBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHZhbHVlLCBmb250KSB7XG4gIHJldHVybiBmb250ICYmIHZhbHVlID8gZm9udC5nbHlwaEZvckNvZGVQb2ludCh2YWx1ZSkgOiBudWxsO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkdseXBofSBHbHlwaFxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5SdW59IFJ1blxuICovXG5cbi8qKlxuICogQXBwZW5kIGdseXBoIHRvIHJ1blxuICpcbiAqIEBwYXJhbSB7R2x5cGh9IGdseXBoIGdseXBoXG4gKiBAcGFyYW0ge1J1bn0gcnVuIHJ1blxuICogQHJldHVybnMge1J1bn0gcnVuIHdpdGggZ2x5cGhcbiAqL1xudmFyIGFwcGVuZEdseXBoID0gZnVuY3Rpb24gYXBwZW5kR2x5cGgoZ2x5cGgsIHJ1bikge1xuICB2YXIgX2dseXBoJGNvZGVQb2ludHM7XG4gIHZhciBnbHlwaExlbmd0aCA9ICgoX2dseXBoJGNvZGVQb2ludHMgPSBnbHlwaC5jb2RlUG9pbnRzKSA9PT0gbnVsbCB8fCBfZ2x5cGgkY29kZVBvaW50cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2dseXBoJGNvZGVQb2ludHMubGVuZ3RoKSB8fCAwO1xuICB2YXIgZW5kID0gcnVuLmVuZCArIGdseXBoTGVuZ3RoO1xuICB2YXIgZ2x5cGhzID0gcnVuLmdseXBocy5jb25jYXQoZ2x5cGgpO1xuICB2YXIgZ2x5cGhJbmRpY2VzID0gYXBwZW5kSW5kaWNlcyhnbHlwaExlbmd0aCwgcnVuLmdseXBoSW5kaWNlcyk7XG4gIGlmICghcnVuLnBvc2l0aW9ucykgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJ1biwge1xuICAgIGVuZDogZW5kLFxuICAgIGdseXBoczogZ2x5cGhzLFxuICAgIGdseXBoSW5kaWNlczogZ2x5cGhJbmRpY2VzXG4gIH0pO1xuICB2YXIgcG9zaXRpb25zID0gcnVuLnBvc2l0aW9ucy5jb25jYXQoe1xuICAgIHhBZHZhbmNlOiBnbHlwaC5hZHZhbmNlV2lkdGggKiBzY2FsZShydW4pXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcnVuLCB7XG4gICAgZW5kOiBlbmQsXG4gICAgZ2x5cGhzOiBnbHlwaHMsXG4gICAgZ2x5cGhJbmRpY2VzOiBnbHlwaEluZGljZXMsXG4gICAgcG9zaXRpb25zOiBwb3NpdGlvbnNcbiAgfSk7XG59O1xuXG4vKipcbiAqIEFwcGVuZCBnbHlwaCBvciBjb2RlIHBvaW50IHRvIHJ1blxuICpcbiAqIEBwYXJhbSB7R2x5cGggfCBudW1iZXIgfCB1bmRlZmluZWR9IHZhbHVlIGdseXBoIG9yIGNvZGVQb2ludFxuICogQHBhcmFtIHtSdW59IHJ1biBydW5cbiAqIEByZXR1cm5zIHtSdW59IHJ1biB3aXRoIGdseXBoXG4gKi9cbnZhciBhcHBlbmQkMSA9IGZ1bmN0aW9uIGFwcGVuZCh2YWx1ZSwgcnVuKSB7XG4gIGlmICghdmFsdWUpIHJldHVybiBydW47XG4gIHZhciBmb250ID0gZ2V0Rm9udChydW4pO1xuICB2YXIgZ2x5cGggPSBpc051bWJlcih2YWx1ZSkgPyBmcm9tQ29kZVBvaW50KHZhbHVlLCBmb250KSA6IHZhbHVlO1xuICByZXR1cm4gYXBwZW5kR2x5cGgoZ2x5cGgsIHJ1bik7XG59O1xuXG4vKipcbiAqIEdldCBzdHJpbmcgZnJvbSBhcnJheSBvZiBjb2RlIHBvaW50c1xuICpcbiAqIEBwYXJhbSB7bnVtYmVyW119IGNvZGVQb2ludHMgcG9pbnRzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBzdHJpbmdcbiAqL1xudmFyIHN0cmluZ0Zyb21Db2RlUG9pbnRzID0gZnVuY3Rpb24gc3RyaW5nRnJvbUNvZGVQb2ludHMoY29kZVBvaW50cykge1xuICByZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzIHx8IFtdKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5BdHRyaWJ1dGVkU3RyaW5nfSBBdHRyaWJ1dGVkU3RyaW5nXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkdseXBofSBHbHlwaFxuICovXG5cbi8qKlxuICogQXBwZW5kIGdseXBoIGludG8gbGFzdCBydW4gb2YgYXR0cmlidXRlZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge0dseXBofSBnbHlwaCBnbHlwaFxuICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nIGF0dHJpYnV0ZWQgc3RyaW5nXG4gKiBAcmV0dXJucyB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZCBzdHJpbmcgd2l0aCBuZXcgZ2x5cGhcbiAqL1xudmFyIGFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChnbHlwaCwgYXR0cmlidXRlZFN0cmluZykge1xuICB2YXIgY29kZVBvaW50cyA9IChnbHlwaCA9PT0gbnVsbCB8fCBnbHlwaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ2x5cGguY29kZVBvaW50cykgfHwgW107XG4gIHZhciBjb2RlUG9pbnRzU3RyaW5nID0gc3RyaW5nRnJvbUNvZGVQb2ludHMoY29kZVBvaW50cyk7XG4gIHZhciBzdHJpbmcgPSBhdHRyaWJ1dGVkU3RyaW5nLnN0cmluZyArIGNvZGVQb2ludHNTdHJpbmc7XG4gIHZhciBmaXJzdFJ1bnMgPSBhdHRyaWJ1dGVkU3RyaW5nLnJ1bnMuc2xpY2UoMCwgLTEpO1xuICB2YXIgbGFzdFJ1biA9IGxhc3QoYXR0cmlidXRlZFN0cmluZy5ydW5zKSB8fCBlbXB0eSQxKCk7XG4gIHZhciBydW5zID0gZmlyc3RSdW5zLmNvbmNhdChhcHBlbmQkMShnbHlwaCwgbGFzdFJ1bikpO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYXR0cmlidXRlZFN0cmluZywge1xuICAgIHN0cmluZzogc3RyaW5nLFxuICAgIHJ1bnM6IHJ1bnNcbiAgfSk7XG59O1xuXG52YXIgRUxMSVBTSVNfVU5JQ09ERSA9IDgyMzA7XG52YXIgRUxMSVBTSVNfU1RSSU5HID0gU3RyaW5nLmZyb21DaGFyQ29kZShFTExJUFNJU19VTklDT0RFKTtcblxuLyoqXG4gKiBHZXQgZWxsaXBzaXMgY29kZXBvaW50LiBUaGlzIG1heSBiZSBkaWZmZXJlbnQgaW4gc3RhbmRhcmQgYW5kIGVtYmVkZGVkIGZvbnRzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGZvbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IGVsbGlwc2lzIGNvZGVwb2ludFxuICovXG52YXIgZ2V0RWxsaXBzaXNDb2RlUG9pbnQgPSBmdW5jdGlvbiBnZXRFbGxpcHNpc0NvZGVQb2ludChmb250KSB7XG4gIGlmICghZm9udC5lbmNvZGUpIHJldHVybiBFTExJUFNJU19VTklDT0RFO1xuICB2YXIgX2ZvbnQkZW5jb2RlID0gZm9udC5lbmNvZGUoRUxMSVBTSVNfU1RSSU5HKSxcbiAgICBjb2RlUG9pbnRzID0gX2ZvbnQkZW5jb2RlWzBdO1xuICByZXR1cm4gcGFyc2VJbnQoY29kZVBvaW50c1swXSwgMTYpO1xufTtcblxuLyoqXG4gKiBUcnVjYW50ZSBibG9jayB3aXRoIGVsbGlwc2lzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGJsb2NrIHBhcmFncmFwaCBibG9ja1xuICogQHJldHVybnMge09iamVjdH0gc2xpY2VkIHBhcmFncmFwaCBibG9ja1xuICovXG52YXIgdHJ1bmNhdGUgPSBmdW5jdGlvbiB0cnVuY2F0ZShibG9jaykge1xuICB2YXIgX2xhc3QsIF9sYXN0MiwgX2xhc3QyJGF0dHJpYnV0ZXM7XG4gIHZhciBydW5zID0gKChfbGFzdCA9IGxhc3QoYmxvY2spKSA9PT0gbnVsbCB8fCBfbGFzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2xhc3QucnVucykgfHwgW107XG4gIHZhciBmb250ID0gKF9sYXN0MiA9IGxhc3QocnVucykpID09PSBudWxsIHx8IF9sYXN0MiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9sYXN0MiRhdHRyaWJ1dGVzID0gX2xhc3QyLmF0dHJpYnV0ZXMpID09PSBudWxsIHx8IF9sYXN0MiRhdHRyaWJ1dGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbGFzdDIkYXR0cmlidXRlcy5mb250O1xuICBpZiAoZm9udCkge1xuICAgIHZhciBfT2JqZWN0JGFzc2lnbjtcbiAgICB2YXIgaW5kZXggPSBibG9jay5sZW5ndGggLSAxO1xuICAgIHZhciBjb2RlUG9pbnQgPSBnZXRFbGxpcHNpc0NvZGVQb2ludChmb250KTtcbiAgICB2YXIgZ2x5cGggPSBmb250LmdseXBoRm9yQ29kZVBvaW50KGNvZGVQb2ludCk7XG4gICAgdmFyIGxhc3RCbG9jayA9IGFwcGVuZChnbHlwaCwgdHJpbShibG9ja1tpbmRleF0pKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihbXSwgYmxvY2ssIChfT2JqZWN0JGFzc2lnbiA9IHt9LCBfT2JqZWN0JGFzc2lnbltpbmRleF0gPSBsYXN0QmxvY2ssIF9PYmplY3QkYXNzaWduKSk7XG4gIH1cbiAgcmV0dXJuIGJsb2NrO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkF0dHJpYnV0ZXN9IEF0dHJpYnV0ZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIE9taXQgYXR0cmlidXRlIGZyb20gcnVuXG4gKlxuICogQHBhcmFtIHtrZXlvZiBBdHRyaWJ1dGVzfSB2YWx1ZSBhdHRyaWJ1dGUgdmFsdWVcbiAqIEBwYXJhbSB7UnVufSBydW4gcnVuXG4gKiBAcmV0dXJucyB7UnVufSBydW4gd2l0aG91dCBvbW1pdGVkIGF0dHJpYnV0ZVxuICovXG52YXIgb21pdCA9IGZ1bmN0aW9uIG9taXQodmFsdWUsIHJ1bikge1xuICB2YXIgYXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIHJ1bi5hdHRyaWJ1dGVzKTtcbiAgZGVsZXRlIGF0dHJpYnV0ZXNbdmFsdWVdO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcnVuLCB7XG4gICAgYXR0cmlidXRlczogYXR0cmlidXRlc1xuICB9KTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5SdW59IFJ1blxuICovXG5cbi8qKlxuICogR2V0IHJ1biBhc2NlbnRcbiAqXG4gKiBAcGFyYW0ge1J1bn0gcnVuIHJ1blxuICogQHJldHVybnMge251bWJlcn0gYXNjZW50XG4gKi9cbnZhciBhc2NlbnQkMSA9IGZ1bmN0aW9uIGFzY2VudChydW4pIHtcbiAgdmFyIF9ydW4kYXR0cmlidXRlcywgX3J1biRhdHRyaWJ1dGVzJGF0dGFjLCBfcnVuJGF0dHJpYnV0ZXMyLCBfcnVuJGF0dHJpYnV0ZXMyJGZvbnQ7XG4gIHZhciBhdHRhY2htZW50SGVpZ2h0ID0gKChfcnVuJGF0dHJpYnV0ZXMgPSBydW4uYXR0cmlidXRlcykgPT09IG51bGwgfHwgX3J1biRhdHRyaWJ1dGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3J1biRhdHRyaWJ1dGVzJGF0dGFjID0gX3J1biRhdHRyaWJ1dGVzLmF0dGFjaG1lbnQpID09PSBudWxsIHx8IF9ydW4kYXR0cmlidXRlcyRhdHRhYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3J1biRhdHRyaWJ1dGVzJGF0dGFjLmhlaWdodCkgfHwgMDtcbiAgdmFyIGZvbnRBc2NlbnQgPSAoKF9ydW4kYXR0cmlidXRlczIgPSBydW4uYXR0cmlidXRlcykgPT09IG51bGwgfHwgX3J1biRhdHRyaWJ1dGVzMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9ydW4kYXR0cmlidXRlczIkZm9udCA9IF9ydW4kYXR0cmlidXRlczIuZm9udCkgPT09IG51bGwgfHwgX3J1biRhdHRyaWJ1dGVzMiRmb250ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcnVuJGF0dHJpYnV0ZXMyJGZvbnQuYXNjZW50KSB8fCAwO1xuICByZXR1cm4gTWF0aC5tYXgoYXR0YWNobWVudEhlaWdodCwgZm9udEFzY2VudCAqIHNjYWxlKHJ1bikpO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlJ1bn0gUnVuXG4gKi9cblxuLyoqXG4gKiBHZXQgcnVuIGRlc2NlbnRcbiAqXG4gKiBAcGFyYW0ge1J1bn0gcnVuIHJ1blxuICogQHJldHVybnMge251bWJlcn0gZGVzY2VudFxuICovXG52YXIgZGVzY2VudCA9IGZ1bmN0aW9uIGRlc2NlbnQocnVuKSB7XG4gIHZhciBfcnVuJGF0dHJpYnV0ZXMsIF9ydW4kYXR0cmlidXRlcyRmb250O1xuICB2YXIgZm9udERlc2NlbnQgPSAoKF9ydW4kYXR0cmlidXRlcyA9IHJ1bi5hdHRyaWJ1dGVzKSA9PT0gbnVsbCB8fCBfcnVuJGF0dHJpYnV0ZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfcnVuJGF0dHJpYnV0ZXMkZm9udCA9IF9ydW4kYXR0cmlidXRlcy5mb250KSA9PT0gbnVsbCB8fCBfcnVuJGF0dHJpYnV0ZXMkZm9udCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3J1biRhdHRyaWJ1dGVzJGZvbnQuZGVzY2VudCkgfHwgMDtcbiAgcmV0dXJuIHNjYWxlKHJ1bikgKiBmb250RGVzY2VudDtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5SdW59IFJ1blxuICovXG5cbi8qKlxuICogR2V0IHJ1biBsaW5lR2FwXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJ1biBydW5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IGxpbmVHYXBcbiAqL1xudmFyIGxpbmVHYXAgPSBmdW5jdGlvbiBsaW5lR2FwKHJ1bikge1xuICB2YXIgX3J1biRhdHRyaWJ1dGVzLCBfcnVuJGF0dHJpYnV0ZXMkZm9udDtcbiAgcmV0dXJuICgoKF9ydW4kYXR0cmlidXRlcyA9IHJ1bi5hdHRyaWJ1dGVzKSA9PT0gbnVsbCB8fCBfcnVuJGF0dHJpYnV0ZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfcnVuJGF0dHJpYnV0ZXMkZm9udCA9IF9ydW4kYXR0cmlidXRlcy5mb250KSA9PT0gbnVsbCB8fCBfcnVuJGF0dHJpYnV0ZXMkZm9udCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3J1biRhdHRyaWJ1dGVzJGZvbnQubGluZUdhcCkgfHwgMCkgKiBzY2FsZShydW4pO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlJ1bn0gUnVuXG4gKi9cblxuLyoqXG4gKiBHZXQgcnVuIGhlaWdodFxuICpcbiAqIEBwYXJhbSB7UnVufSBydW4gcnVuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBoZWlnaHRcbiAqL1xudmFyIGhlaWdodCQxID0gZnVuY3Rpb24gaGVpZ2h0KHJ1bikge1xuICB2YXIgX3J1biRhdHRyaWJ1dGVzO1xuICB2YXIgbGluZUhlaWdodCA9IChfcnVuJGF0dHJpYnV0ZXMgPSBydW4uYXR0cmlidXRlcykgPT09IG51bGwgfHwgX3J1biRhdHRyaWJ1dGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcnVuJGF0dHJpYnV0ZXMubGluZUhlaWdodDtcbiAgcmV0dXJuIGxpbmVIZWlnaHQgfHwgbGluZUdhcChydW4pICsgYXNjZW50JDEocnVuKSAtIGRlc2NlbnQocnVuKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5BdHRyaWJ1dGVkU3RyaW5nfSBBdHRyaWJ1dGVkU3RyaW5nXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGF0dHJpYnV0ZWQgc3RyaW5nIGhlaWdodFxuICpcbiAqIEBwYXJhbSB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZFN0cmluZyBhdHRyaWJ1dGVkIHN0cmluZ1xuICogQHJldHVybnMge251bWJlcn0gaGVpZ2h0XG4gKi9cbnZhciBoZWlnaHQgPSBmdW5jdGlvbiBoZWlnaHQoYXR0cmlidXRlZFN0cmluZykge1xuICB2YXIgcmVkdWNlciA9IGZ1bmN0aW9uIHJlZHVjZXIoYWNjLCBydW4pIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoYWNjLCBoZWlnaHQkMShydW4pKTtcbiAgfTtcbiAgcmV0dXJuIGF0dHJpYnV0ZWRTdHJpbmcucnVucy5yZWR1Y2UocmVkdWNlciwgMCk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUmVjdH0gUmVjdFxuICovXG5cbi8qKlxuICogQ2hlY2tzIGlmIHR3byByZWN0cyBpbnRlcnNlY3QgZWFjaCBvdGhlclxuICpcbiAqIEBwYXJhbSB7UmVjdH0gYSByZWN0IEFcbiAqIEBwYXJhbSB7UmVjdH0gYiByZWN0IEJcbiAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIHJlY3RzIGludGVyc2VjdFxuICovXG52YXIgaW50ZXJzZWN0cyA9IGZ1bmN0aW9uIGludGVyc2VjdHMoYSwgYikge1xuICB2YXIgeCA9IE1hdGgubWF4KGEueCwgYi54KTtcbiAgdmFyIG51bTEgPSBNYXRoLm1pbihhLnggKyBhLndpZHRoLCBiLnggKyBiLndpZHRoKTtcbiAgdmFyIHkgPSBNYXRoLm1heChhLnksIGIueSk7XG4gIHZhciBudW0yID0gTWF0aC5taW4oYS55ICsgYS5oZWlnaHQsIGIueSArIGIuaGVpZ2h0KTtcbiAgcmV0dXJuIG51bTEgPj0geCAmJiBudW0yID49IHk7XG59O1xuXG52YXIgX2V4Y2x1ZGVkID0gW1wiZXhjbHVkZVJlY3RzXCJdO1xudmFyIGdldExpbmVGcmFnbWVudCA9IGZ1bmN0aW9uIGdldExpbmVGcmFnbWVudChsaW5lUmVjdCwgZXhjbHVkZVJlY3QpIHtcbiAgaWYgKCFpbnRlcnNlY3RzKGV4Y2x1ZGVSZWN0LCBsaW5lUmVjdCkpIHJldHVybiBbbGluZVJlY3RdO1xuICB2YXIgZVN0YXJ0ID0gZXhjbHVkZVJlY3QueDtcbiAgdmFyIGVFbmQgPSBleGNsdWRlUmVjdC54ICsgZXhjbHVkZVJlY3Qud2lkdGg7XG4gIHZhciBsU3RhcnQgPSBsaW5lUmVjdC54O1xuICB2YXIgbEVuZCA9IGxpbmVSZWN0LnggKyBsaW5lUmVjdC53aWR0aDtcbiAgdmFyIGEgPSBPYmplY3QuYXNzaWduKHt9LCBsaW5lUmVjdCwge1xuICAgIHdpZHRoOiBlU3RhcnQgLSBsU3RhcnRcbiAgfSk7XG4gIHZhciBiID0gT2JqZWN0LmFzc2lnbih7fSwgbGluZVJlY3QsIHtcbiAgICB4OiBlRW5kLFxuICAgIHdpZHRoOiBsRW5kIC0gZUVuZFxuICB9KTtcbiAgcmV0dXJuIFthLCBiXS5maWx0ZXIoZnVuY3Rpb24gKHIpIHtcbiAgICByZXR1cm4gci53aWR0aCA+IDA7XG4gIH0pO1xufTtcbnZhciBnZXRMaW5lRnJhZ21lbnRzID0gZnVuY3Rpb24gZ2V0TGluZUZyYWdtZW50cyhyZWN0LCBleGNsdWRlUmVjdHMpIHtcbiAgdmFyIGZyYWdtZW50cyA9IFtyZWN0XTtcbiAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoKSB7XG4gICAgdmFyIGV4Y2x1ZGVSZWN0ID0gZXhjbHVkZVJlY3RzW2ldO1xuICAgIGZyYWdtZW50cyA9IGZyYWdtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgZnJhZ21lbnQpIHtcbiAgICAgIHZhciBwaWVjZXMgPSBnZXRMaW5lRnJhZ21lbnQoZnJhZ21lbnQsIGV4Y2x1ZGVSZWN0KTtcbiAgICAgIHJldHVybiBhY2MuY29uY2F0KHBpZWNlcyk7XG4gICAgfSwgW10pO1xuICB9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGV4Y2x1ZGVSZWN0cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIF9sb29wKCk7XG4gIH1cbiAgcmV0dXJuIGZyYWdtZW50cztcbn07XG52YXIgZ2VuZXJhdGVMaW5lUmVjdHMgPSBmdW5jdGlvbiBnZW5lcmF0ZUxpbmVSZWN0cyhjb250YWluZXIsIGhlaWdodCkge1xuICB2YXIgZXhjbHVkZVJlY3RzID0gY29udGFpbmVyLmV4Y2x1ZGVSZWN0cyxcbiAgICByZWN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoY29udGFpbmVyLCBfZXhjbHVkZWQpO1xuICBpZiAoIWV4Y2x1ZGVSZWN0cykgcmV0dXJuIFtyZWN0XTtcbiAgdmFyIGxpbmVSZWN0cyA9IFtdO1xuICB2YXIgbWF4WSA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGV4Y2x1ZGVSZWN0cy5tYXAoZnVuY3Rpb24gKHIpIHtcbiAgICByZXR1cm4gci55ICsgci5oZWlnaHQ7XG4gIH0pKTtcbiAgdmFyIGN1cnJlbnRSZWN0ID0gcmVjdDtcbiAgd2hpbGUgKGN1cnJlbnRSZWN0LnkgPCBtYXhZKSB7XG4gICAgdmFyIF9wYXJ0aXRpb24gPSBwYXJ0aXRpb24oY3VycmVudFJlY3QsIGhlaWdodCksXG4gICAgICBsaW5lUmVjdCA9IF9wYXJ0aXRpb25bMF0sXG4gICAgICByZXN0ID0gX3BhcnRpdGlvblsxXTtcbiAgICB2YXIgbGluZVJlY3RGcmFnbWVudHMgPSBnZXRMaW5lRnJhZ21lbnRzKGxpbmVSZWN0LCBleGNsdWRlUmVjdHMpO1xuICAgIGN1cnJlbnRSZWN0ID0gcmVzdDtcbiAgICBsaW5lUmVjdHMucHVzaC5hcHBseShsaW5lUmVjdHMsIGxpbmVSZWN0RnJhZ21lbnRzKTtcbiAgfVxuICByZXR1cm4gW10uY29uY2F0KGxpbmVSZWN0cywgW2N1cnJlbnRSZWN0XSk7XG59O1xuXG52YXIgQVRUQUNITUVOVF9DT0RFJDEgPSBcIlxcdUZGRkNcIjsgLy8gNjU1MzJcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkF0dHJpYnV0ZWRTdHJpbmd9IEF0dHJpYnV0ZWRTdHJpbmdcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUmVjdH0gUmVjdFxuICovXG5cbi8qKlxuICogUmVtb3ZlIGF0dGFjaG1lbnQgYXR0cmlidXRlIGlmIG5vIGNoYXIgcHJlc2VudFxuICpcbiAqIEBwYXJhbSB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZFN0cmluZyBhdHRyaWJ1dGVkIHN0cmluZ1xuICogQHJldHVybnMge0F0dHJpYnV0ZWRTdHJpbmd9IGF0dHJpYnV0ZWQgc3RyaW5nXG4gKi9cbnZhciBwdXJnZUF0dGFjaG1lbnRzID0gZnVuY3Rpb24gcHVyZ2VBdHRhY2htZW50cyhhdHRyaWJ1dGVkU3RyaW5nKSB7XG4gIHZhciBzaG91bGRQdXJnZSA9ICFhdHRyaWJ1dGVkU3RyaW5nLnN0cmluZy5pbmNsdWRlcyhBVFRBQ0hNRU5UX0NPREUkMSk7XG4gIGlmICghc2hvdWxkUHVyZ2UpIHJldHVybiBhdHRyaWJ1dGVkU3RyaW5nO1xuICB2YXIgcnVucyA9IGF0dHJpYnV0ZWRTdHJpbmcucnVucy5tYXAoZnVuY3Rpb24gKHJ1bikge1xuICAgIHJldHVybiBvbWl0KCdhdHRhY2htZW50JywgcnVuKTtcbiAgfSk7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBhdHRyaWJ1dGVkU3RyaW5nLCB7XG4gICAgcnVuczogcnVuc1xuICB9KTtcbn07XG5cbi8qKlxuICogTGF5b3V0IHBhcmFncmFwaHMgaW5zaWRlIHJlY3RhbmdsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0cyByZWN0XG4gKiBAcGFyYW0ge09iamVjdFtdfSBsaW5lcyBhdHRyaWJ1dGVkIHN0cmluZ3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRlbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IGxheW91dCBibG9ja3NcbiAqL1xudmFyIGxheW91dExpbmVzID0gZnVuY3Rpb24gbGF5b3V0TGluZXMocmVjdHMsIGxpbmVzLCBpbmRlbnQpIHtcbiAgdmFyIHJlY3QgPSByZWN0cy5zaGlmdCgpO1xuICB2YXIgY3VycmVudFkgPSByZWN0Lnk7XG4gIHJldHVybiBsaW5lcy5tYXAoZnVuY3Rpb24gKGxpbmUsIGkpIHtcbiAgICB2YXIgX2xpbmUkcnVucywgX2xpbmUkcnVucyQ7XG4gICAgdmFyIGxpbmVJbmRlbnQgPSBpID09PSAwID8gaW5kZW50IDogMDtcbiAgICB2YXIgc3R5bGUgPSAoKF9saW5lJHJ1bnMgPSBsaW5lLnJ1bnMpID09PSBudWxsIHx8IF9saW5lJHJ1bnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfbGluZSRydW5zJCA9IF9saW5lJHJ1bnNbMF0pID09PSBudWxsIHx8IF9saW5lJHJ1bnMkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbGluZSRydW5zJC5hdHRyaWJ1dGVzKSB8fCB7fTtcbiAgICB2YXIgaGVpZ2h0JDEgPSBNYXRoLm1heChoZWlnaHQobGluZSksIHN0eWxlLmxpbmVIZWlnaHQpO1xuICAgIGlmIChjdXJyZW50WSArIGhlaWdodCQxID4gcmVjdC55ICsgcmVjdC5oZWlnaHQgJiYgcmVjdHMubGVuZ3RoID4gMCkge1xuICAgICAgcmVjdCA9IHJlY3RzLnNoaWZ0KCk7XG4gICAgICBjdXJyZW50WSA9IHJlY3QueTtcbiAgICB9XG4gICAgdmFyIG5ld0xpbmUgPSBPYmplY3QuYXNzaWduKHt9LCBsaW5lKTtcbiAgICBkZWxldGUgbmV3TGluZS5zeWxsYWJsZXM7XG4gICAgbmV3TGluZS5ib3ggPSB7XG4gICAgICB4OiByZWN0LnggKyBsaW5lSW5kZW50LFxuICAgICAgeTogY3VycmVudFksXG4gICAgICB3aWR0aDogcmVjdC53aWR0aCAtIGxpbmVJbmRlbnQsXG4gICAgICBoZWlnaHQ6IGhlaWdodCQxXG4gICAgfTtcbiAgICBjdXJyZW50WSArPSBoZWlnaHQkMTtcbiAgICByZXR1cm4gcHVyZ2VBdHRhY2htZW50cyhuZXdMaW5lKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFBlcmZvcm1zIGxpbmUgYnJlYWtpbmcgYW5kIGxheW91dFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBlbmdpbmVzIGVuZ2luZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIGxheW91dCBvcHRpb25zXG4gKi9cbnZhciBsYXlvdXRQYXJhZ3JhcGggPSBmdW5jdGlvbiBsYXlvdXRQYXJhZ3JhcGgoZW5naW5lcywgb3B0aW9ucykge1xuICAvKipcbiAgICogQHBhcmFtIHtSZWN0fSBjb250YWluZXIgcmVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYWdyYXBoIGF0dHJpYnV0ZWQgc3RyaW5nXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGxheW91dCBibG9ja1xuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIChjb250YWluZXIsIHBhcmFncmFwaCkge1xuICAgIHZhciBfcGFyYWdyYXBoJHJ1bnMsIF9wYXJhZ3JhcGgkcnVucyQsIF9wYXJhZ3JhcGgkcnVucyQkYXR0cjtcbiAgICB2YXIgaGVpZ2h0JDEgPSBoZWlnaHQocGFyYWdyYXBoKTtcbiAgICB2YXIgaW5kZW50ID0gKChfcGFyYWdyYXBoJHJ1bnMgPSBwYXJhZ3JhcGgucnVucykgPT09IG51bGwgfHwgX3BhcmFncmFwaCRydW5zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3BhcmFncmFwaCRydW5zJCA9IF9wYXJhZ3JhcGgkcnVuc1swXSkgPT09IG51bGwgfHwgX3BhcmFncmFwaCRydW5zJCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9wYXJhZ3JhcGgkcnVucyQkYXR0ciA9IF9wYXJhZ3JhcGgkcnVucyQuYXR0cmlidXRlcykgPT09IG51bGwgfHwgX3BhcmFncmFwaCRydW5zJCRhdHRyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcGFyYWdyYXBoJHJ1bnMkJGF0dHIuaW5kZW50KSB8fCAwO1xuICAgIHZhciByZWN0cyA9IGdlbmVyYXRlTGluZVJlY3RzKGNvbnRhaW5lciwgaGVpZ2h0JDEpO1xuICAgIHZhciBhdmFpbGFibGVXaWR0aHMgPSByZWN0cy5tYXAoZnVuY3Rpb24gKHIpIHtcbiAgICAgIHJldHVybiByLndpZHRoO1xuICAgIH0pO1xuICAgIGF2YWlsYWJsZVdpZHRoc1swXSAtPSBpbmRlbnQ7XG4gICAgdmFyIGxpbmVzID0gZW5naW5lcy5saW5lYnJlYWtlcihvcHRpb25zKShwYXJhZ3JhcGgsIGF2YWlsYWJsZVdpZHRocyk7XG4gICAgcmV0dXJuIGxheW91dExpbmVzKHJlY3RzLCBsaW5lcywgaW5kZW50KTtcbiAgfTtcbn07XG5cbi8qKlxuICogU2xpY2UgYmxvY2sgYXQgZ2l2ZW4gaGVpZ2h0XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBoZWlnaHRcbiAqIEBwYXJhbSB7T2JqZWN0fSBibG9jayBwYXJhZ3JhcGggYmxvY2tcbiAqIEByZXR1cm5zIHtudW1iZXJbXX0gc2xpY2VkIHBhcmFncmFwaCBibG9ja1xuICovXG52YXIgc2xpY2VBdEhlaWdodCA9IGZ1bmN0aW9uIHNsaWNlQXRIZWlnaHQoaGVpZ2h0LCBibG9jaykge1xuICB2YXIgbmV3QmxvY2sgPSBbXTtcbiAgdmFyIGNvdW50ZXIgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGxpbmUgPSBibG9ja1tpXTtcbiAgICBjb3VudGVyICs9IGxpbmUuYm94LmhlaWdodDtcbiAgICBpZiAoY291bnRlciA8IGhlaWdodCkge1xuICAgICAgbmV3QmxvY2sucHVzaChsaW5lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdCbG9jaztcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5BdHRyaWJ1dGVkU3RyaW5nfSBBdHRyaWJ1dGVkU3RyaW5nXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlJlY3R9IFJlY3RcbiAqL1xuXG4vKipcbiAqIExheW91dCBwYXJhZ3JhcGhzIGluc2lkZSBjb250YWluZXIgdW50aWwgaXQgZG9lcyBub3RcbiAqIGZpdCBhbnltb3JlLCBwZXJmb3JtaW5nIGxpbmUgd3JhcHBpbmcgaW4gdGhlIHByb2Nlc3MuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGVuZ2luZXMgZW5naW5lc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgbGF5b3V0IG9wdGlvbnNcbiAqIEBwYXJhbSB7UmVjdH0gY29udGFpbmVyIGNvbnRhaW5lciByZWN0XG4gKi9cbnZhciB0eXBlc2V0dGVyID0gZnVuY3Rpb24gdHlwZXNldHRlcihlbmdpbmVzLCBvcHRpb25zLCBjb250YWluZXIpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZFN0cmluZ3MgYXR0cmlidXRlZCBzdHJpbmdzIChwYXJhZ3JhcGhzKVxuICAgKiBAcmV0dXJucyB7T2JqZWN0W119IHBhcmFncmFwaCBibG9ja3NcbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAoYXR0cmlidXRlZFN0cmluZ3MpIHtcbiAgICB2YXIgYmxvY2tzID0gW107XG4gICAgdmFyIHBhcmFncmFwaHMgPSBbXS5jb25jYXQoYXR0cmlidXRlZFN0cmluZ3MpO1xuICAgIHZhciBsYXlvdXRCbG9jayA9IGxheW91dFBhcmFncmFwaChlbmdpbmVzLCBvcHRpb25zKTtcbiAgICB2YXIgbWF4TGluZXMgPSBpc05pbChjb250YWluZXIubWF4TGluZXMpID8gSW5maW5pdHkgOiBjb250YWluZXIubWF4TGluZXM7XG4gICAgdmFyIHRydW5jYXRlRWxsaXBzaXMgPSBjb250YWluZXIudHJ1bmNhdGVNb2RlID09PSAnZWxsaXBzaXMnO1xuICAgIHZhciBsaW5lc0NvdW50ID0gbWF4TGluZXM7XG4gICAgdmFyIHBhcmFncmFwaFJlY3QgPSBjb3B5KGNvbnRhaW5lcik7XG4gICAgdmFyIG5leHRQYXJhZ3JhcGggPSBwYXJhZ3JhcGhzLnNoaWZ0KCk7XG4gICAgd2hpbGUgKGxpbmVzQ291bnQgPiAwICYmIG5leHRQYXJhZ3JhcGgpIHtcbiAgICAgIHZhciBibG9jayA9IGxheW91dEJsb2NrKHBhcmFncmFwaFJlY3QsIG5leHRQYXJhZ3JhcGgpO1xuICAgICAgdmFyIHNsaWNlZEJsb2NrID0gYmxvY2suc2xpY2UoMCwgbGluZXNDb3VudCk7XG4gICAgICB2YXIgbGluZXNIZWlnaHQgPSBoZWlnaHQkMihzbGljZWRCbG9jayk7XG4gICAgICB2YXIgc2hvdWxkVHJ1bmNhdGUgPSB0cnVuY2F0ZUVsbGlwc2lzICYmIGJsb2NrLmxlbmd0aCAhPT0gc2xpY2VkQmxvY2subGVuZ3RoO1xuICAgICAgbGluZXNDb3VudCAtPSBzbGljZWRCbG9jay5sZW5ndGg7XG4gICAgICBpZiAocGFyYWdyYXBoUmVjdC5oZWlnaHQgPj0gbGluZXNIZWlnaHQpIHtcbiAgICAgICAgYmxvY2tzLnB1c2goc2hvdWxkVHJ1bmNhdGUgPyB0cnVuY2F0ZShzbGljZWRCbG9jaykgOiBzbGljZWRCbG9jayk7XG4gICAgICAgIHBhcmFncmFwaFJlY3QgPSBjcm9wKGxpbmVzSGVpZ2h0LCBwYXJhZ3JhcGhSZWN0KTtcbiAgICAgICAgbmV4dFBhcmFncmFwaCA9IHBhcmFncmFwaHMuc2hpZnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJsb2Nrcy5wdXNoKHRydW5jYXRlKHNsaWNlQXRIZWlnaHQocGFyYWdyYXBoUmVjdC5oZWlnaHQsIHNsaWNlZEJsb2NrKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJsb2NrcztcbiAgfTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5BdHRyaWJ1dGVkU3RyaW5nfSBBdHRyaWJ1dGVkU3RyaW5nXG4gKi9cblxuLyoqXG4gKiBHZXQgYXR0cmlidXRlZCBzdHJpbmcgc3RhcnQgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge0F0dHJpYnV0ZWRTdHJpbmd9IGF0dHJpYnV0ZWRTdHJpbmcgYXR0cmlidXRlZCBzdHJpbmdcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHN0YXJ0XG4gKi9cbnZhciBzdGFydCA9IGZ1bmN0aW9uIHN0YXJ0KGF0dHJpYnV0ZWRTdHJpbmcpIHtcbiAgdmFyIHJ1bnMgPSBhdHRyaWJ1dGVkU3RyaW5nLnJ1bnM7XG4gIHJldHVybiBydW5zLmxlbmd0aCA9PT0gMCA/IDAgOiBydW5zWzBdLnN0YXJ0O1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkF0dHJpYnV0ZWRTdHJpbmd9IEF0dHJpYnV0ZWRTdHJpbmdcbiAqL1xuXG4vKipcbiAqIEdldCBhdHRyaWJ1dGVkIHN0cmluZyBlbmQgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge0F0dHJpYnV0ZWRTdHJpbmd9IGF0dHJpYnV0ZWRTdHJpbmcgYXR0cmlidXRlZCBzdHJpbmdcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGVuZFxuICovXG52YXIgZW5kID0gZnVuY3Rpb24gZW5kKGF0dHJpYnV0ZWRTdHJpbmcpIHtcbiAgdmFyIHJ1bnMgPSBhdHRyaWJ1dGVkU3RyaW5nLnJ1bnM7XG4gIHJldHVybiBydW5zLmxlbmd0aCA9PT0gMCA/IDAgOiBsYXN0KHJ1bnMpLmVuZDtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5BdHRyaWJ1dGVkU3RyaW5nfSBBdHRyaWJ1dGVkU3RyaW5nXG4gKi9cblxuLyoqXG4gKiBHZXQgYXR0cmlidXRlZCBzdHJpbmcgbGVuZ3RoXG4gKlxuICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nIGF0dHJpYnV0ZWQgc3RyaW5nXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBlbmRcbiAqL1xudmFyIGxlbmd0aCQxID0gZnVuY3Rpb24gbGVuZ3RoKGF0dHJpYnV0ZWRTdHJpbmcpIHtcbiAgcmV0dXJuIGVuZChhdHRyaWJ1dGVkU3RyaW5nKSAtIHN0YXJ0KGF0dHJpYnV0ZWRTdHJpbmcpO1xufTtcblxudmFyIGJpZGkkMiA9IGJpZGlGYWN0b3J5KCk7XG52YXIgZ2V0QmlkaUxldmVscyQxID0gZnVuY3Rpb24gZ2V0QmlkaUxldmVscyhydW5zKSB7XG4gIHJldHVybiBydW5zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBydW4pIHtcbiAgICB2YXIgbGVuZ3RoID0gcnVuLmVuZCAtIHJ1bi5zdGFydDtcbiAgICB2YXIgbGV2ZWxzID0gcmVwZWF0KHJ1bi5hdHRyaWJ1dGVzLmJpZGlMZXZlbCwgbGVuZ3RoKTtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChsZXZlbHMpO1xuICB9LCBbXSk7XG59O1xudmFyIGdldFJlb3JkZXJlZEluZGljZXMgPSBmdW5jdGlvbiBnZXRSZW9yZGVyZWRJbmRpY2VzKHN0cmluZywgc2VnbWVudHMpIHtcbiAgLy8gRmlsbCBhbiBhcnJheSB3aXRoIGluZGljZXNcbiAgdmFyIGluZGljZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpbmRpY2VzW2ldID0gaTtcbiAgfVxuICAvLyBSZXZlcnNlIGVhY2ggc2VnbWVudCBpbiBvcmRlclxuICBzZWdtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIHN0YXJ0ID0gX3JlZlswXSxcbiAgICAgIGVuZCA9IF9yZWZbMV07XG4gICAgdmFyIHNsaWNlID0gaW5kaWNlcy5zbGljZShzdGFydCwgZW5kICsgMSk7XG4gICAgZm9yICh2YXIgX2kgPSBzbGljZS5sZW5ndGggLSAxOyBfaSA+PSAwOyBfaSAtPSAxKSB7XG4gICAgICBpbmRpY2VzW2VuZCAtIF9pXSA9IHNsaWNlW19pXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaW5kaWNlcztcbn07XG52YXIgZ2V0SXRlbUF0SW5kZXggPSBmdW5jdGlvbiBnZXRJdGVtQXRJbmRleChydW5zLCBvYmplY3ROYW1lLCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgcnVuID0gcnVuc1tpXTtcbiAgICB2YXIgdXBkYXRlZEluZGV4ID0gcnVuLmdseXBoSW5kaWNlc1tpbmRleCAtIHJ1bi5zdGFydF07XG4gICAgaWYgKGluZGV4ID49IHJ1bi5zdGFydCAmJiBpbmRleCA8IHJ1bi5lbmQpIHtcbiAgICAgIHJldHVybiBydW5bb2JqZWN0TmFtZV1bdXBkYXRlZEluZGV4XTtcbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiaW5kZXggXCIgKyBpbmRleCArIFwiIG91dCBvZiByYW5nZVwiKTtcbn07XG52YXIgcmVvcmRlckxpbmUgPSBmdW5jdGlvbiByZW9yZGVyTGluZShhdHRyaWJ1dGVkU3RyaW5nKSB7XG4gIHZhciBfYXR0cmlidXRlZFN0cmluZyRydW47XG4gIHZhciBsZXZlbHMgPSBnZXRCaWRpTGV2ZWxzJDEoYXR0cmlidXRlZFN0cmluZy5ydW5zKTtcbiAgdmFyIGRpcmVjdGlvbiA9IChfYXR0cmlidXRlZFN0cmluZyRydW4gPSBhdHRyaWJ1dGVkU3RyaW5nLnJ1bnNbMF0pID09PSBudWxsIHx8IF9hdHRyaWJ1dGVkU3RyaW5nJHJ1biA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2F0dHJpYnV0ZWRTdHJpbmckcnVuLmF0dHJpYnV0ZXMuZGlyZWN0aW9uO1xuICB2YXIgbGV2ZWwgPSBkaXJlY3Rpb24gPT09ICdydGwnID8gMSA6IDA7XG4gIHZhciBlbmQgPSBsZW5ndGgkMShhdHRyaWJ1dGVkU3RyaW5nKSAtIDE7XG4gIHZhciBwYXJhZ3JhcGhzID0gW3tcbiAgICBzdGFydDogMCxcbiAgICBlbmQ6IGVuZCxcbiAgICBsZXZlbDogbGV2ZWxcbiAgfV07XG4gIHZhciBlbWJlZGRpbmdMZXZlbHMgPSB7XG4gICAgcGFyYWdyYXBoczogcGFyYWdyYXBocyxcbiAgICBsZXZlbHM6IGxldmVsc1xuICB9O1xuICB2YXIgc2VnbWVudHMgPSBiaWRpJDIuZ2V0UmVvcmRlclNlZ21lbnRzKGF0dHJpYnV0ZWRTdHJpbmcuc3RyaW5nLCBlbWJlZGRpbmdMZXZlbHMpO1xuXG4gIC8vIE5vIG5lZWQgZm9yIGJpZGkgcmVvcmRlcmluZ1xuICBpZiAoc2VnbWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gYXR0cmlidXRlZFN0cmluZztcbiAgdmFyIGluZGljZXMgPSBnZXRSZW9yZGVyZWRJbmRpY2VzKGF0dHJpYnV0ZWRTdHJpbmcuc3RyaW5nLCBzZWdtZW50cyk7XG4gIHZhciB1cGRhdGVkU3RyaW5nID0gYmlkaSQyLmdldFJlb3JkZXJlZFN0cmluZyhhdHRyaWJ1dGVkU3RyaW5nLnN0cmluZywgZW1iZWRkaW5nTGV2ZWxzKTtcbiAgdmFyIHVwZGF0ZWRSdW5zID0gYXR0cmlidXRlZFN0cmluZy5ydW5zLm1hcChmdW5jdGlvbiAocnVuKSB7XG4gICAgdmFyIHNlbGVjdGVkSW5kaWNlcyA9IGluZGljZXMuc2xpY2UocnVuLnN0YXJ0LCBydW4uZW5kKTtcbiAgICB2YXIgdXBkYXRlZEdseXBocyA9IFtdO1xuICAgIHZhciB1cGRhdGVkUG9zaXRpb25zID0gW107XG4gICAgdmFyIGFkZGVkR2x5cGhzID0gbmV3IFNldCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0ZWRJbmRpY2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgaW5kZXggPSBzZWxlY3RlZEluZGljZXNbaV07XG4gICAgICB2YXIgZ2x5cGggPSBnZXRJdGVtQXRJbmRleChhdHRyaWJ1dGVkU3RyaW5nLnJ1bnMsICdnbHlwaHMnLCBpbmRleCk7XG4gICAgICBpZiAoYWRkZWRHbHlwaHMuaGFzKGdseXBoLmlkKSkgY29udGludWU7XG4gICAgICB1cGRhdGVkR2x5cGhzLnB1c2goZ2x5cGgpO1xuICAgICAgdXBkYXRlZFBvc2l0aW9ucy5wdXNoKGdldEl0ZW1BdEluZGV4KGF0dHJpYnV0ZWRTdHJpbmcucnVucywgJ3Bvc2l0aW9ucycsIGluZGV4KSk7XG4gICAgICBpZiAoZ2x5cGguaXNMaWdhdHVyZSkge1xuICAgICAgICBhZGRlZEdseXBocy5hZGQoZ2x5cGguaWQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIHJ1biwge1xuICAgICAgZ2x5cGhzOiB1cGRhdGVkR2x5cGhzLFxuICAgICAgcG9zaXRpb25zOiB1cGRhdGVkUG9zaXRpb25zXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZWRTdHJpbmcsIHtcbiAgICBydW5zOiB1cGRhdGVkUnVucyxcbiAgICBzdHJpbmc6IHVwZGF0ZWRTdHJpbmdcbiAgfSk7XG59O1xudmFyIHJlb3JkZXJQYXJhZ3JhcGggPSBmdW5jdGlvbiByZW9yZGVyUGFyYWdyYXBoKGxpbmVzKSB7XG4gIHJldHVybiBsaW5lcy5tYXAocmVvcmRlckxpbmUpO1xufTtcblxuLyoqXG4gKiBQZXJmb3JtIGJpZGkgcmVvcmRlcmluZ1xuICovXG52YXIgYmlkaVJlb3JkZXJpbmcgPSBmdW5jdGlvbiBiaWRpUmVvcmRlcmluZygpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0W119IHBhcmFncmFwaHMgbGluZSBibG9ja3NcbiAgICogQHJldHVybnMge09iamVjdFtdfSBwYXJhZ3JhcGhzXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKHBhcmFncmFwaHMpIHtcbiAgICByZXR1cm4gcGFyYWdyYXBocy5tYXAocmVvcmRlclBhcmFncmFwaCk7XG4gIH07XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuR2x5cGh9IEdseXBoXG4gKi9cblxudmFyIERVTU1ZX0NPREVQT0lOVCA9IDEyMztcblxuLyoqXG4gKiBSZXNvbHZlIHN0cmluZyBpbmRpY2VzIGJhc2VkIG9uIGdseXBocyBjb2RlIHBvaW50c1xuICpcbiAqIEBwYXJhbSB7R2x5cGhbXX0gZ2x5cGhzXG4gKiBAcmV0dXJucyB7bnVtYmVyW119IGdseXBoIGluZGljZXNcbiAqL1xudmFyIHJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKGdseXBocykge1xuICBpZiAoZ2x5cGhzID09PSB2b2lkIDApIHtcbiAgICBnbHlwaHMgPSBbXTtcbiAgfVxuICByZXR1cm4gZ2x5cGhzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBnbHlwaCkge1xuICAgIHZhciBjb2RlUG9pbnRzID0gKGdseXBoID09PSBudWxsIHx8IGdseXBoID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnbHlwaC5jb2RlUG9pbnRzKSB8fCBbRFVNTVlfQ09ERVBPSU5UXTtcbiAgICBpZiAoYWNjLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNvZGVQb2ludHMubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuICAgIHZhciBsYXN0ID0gYWNjW2FjYy5sZW5ndGggLSAxXTtcbiAgICB2YXIgbmV4dCA9IGNvZGVQb2ludHMubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBsYXN0ICsgMTtcbiAgICB9KTtcbiAgICByZXR1cm4gW10uY29uY2F0KGFjYywgbmV4dCk7XG4gIH0sIFtdKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5BdHRyaWJ1dGVkU3RyaW5nfSBBdHRyaWJ1dGVkU3RyaW5nXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlBvc2l0aW9ufSBQb3NpdGlvblxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5SdW59IFJ1blxuICovXG5cbi8qKlxuICogQHBhcmFtIHtSdW59IHJ1blxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xudmFyIGdldENoYXJhY3RlclNwYWNpbmcgPSBmdW5jdGlvbiBnZXRDaGFyYWN0ZXJTcGFjaW5nKHJ1bikge1xuICB2YXIgX3J1biRhdHRyaWJ1dGVzO1xuICByZXR1cm4gKChfcnVuJGF0dHJpYnV0ZXMgPSBydW4uYXR0cmlidXRlcykgPT09IG51bGwgfHwgX3J1biRhdHRyaWJ1dGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcnVuJGF0dHJpYnV0ZXMuY2hhcmFjdGVyU3BhY2luZykgfHwgMDtcbn07XG5cbi8qKlxuICogU2NhbGUgcnVuIHBvc2l0aW9uc1xuICpcbiAqIEBwYXJhbSB7UnVufSBydW5cbiAqIEBwYXJhbSB7UG9zaXRpb25bXX0gcG9zaXRpb25zXG4gKiBAcmV0dXJucyB7UG9zaXRpb25bXX0gc2NhbGVkIHBvc2l0aW9uc1xuICovXG52YXIgc2NhbGVQb3NpdGlvbnMgPSBmdW5jdGlvbiBzY2FsZVBvc2l0aW9ucyhydW4sIHBvc2l0aW9ucykge1xuICB2YXIgcnVuU2NhbGUgPSBzY2FsZShydW4pO1xuICB2YXIgY2hhcmFjdGVyU3BhY2luZyA9IGdldENoYXJhY3RlclNwYWNpbmcocnVuKTtcbiAgcmV0dXJuIHBvc2l0aW9ucy5tYXAoZnVuY3Rpb24gKHBvc2l0aW9uLCBpKSB7XG4gICAgdmFyIGlzTGFzdCA9IGkgPT09IHBvc2l0aW9ucy5sZW5ndGg7XG4gICAgdmFyIHhTcGFjaW5nID0gaXNMYXN0ID8gMCA6IGNoYXJhY3RlclNwYWNpbmc7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHBvc2l0aW9uLCB7XG4gICAgICB4QWR2YW5jZTogcG9zaXRpb24ueEFkdmFuY2UgKiBydW5TY2FsZSArIHhTcGFjaW5nLFxuICAgICAgeUFkdmFuY2U6IHBvc2l0aW9uLnlBZHZhbmNlICogcnVuU2NhbGUsXG4gICAgICB4T2Zmc2V0OiBwb3NpdGlvbi54T2Zmc2V0ICogcnVuU2NhbGUsXG4gICAgICB5T2Zmc2V0OiBwb3NpdGlvbi55T2Zmc2V0ICogcnVuU2NhbGVcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBnbHlwaCBydW5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIHN0cmluZ1xuICovXG52YXIgbGF5b3V0UnVuID0gZnVuY3Rpb24gbGF5b3V0UnVuKHN0cmluZykge1xuICAvKipcbiAgICogQHBhcmFtIHtSdW59IHJ1biBydW5cbiAgICogQHJldHVybnMge1J1bn0gZ2x5cGggcnVuXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKHJ1bikge1xuICAgIHZhciBzdGFydCA9IHJ1bi5zdGFydCxcbiAgICAgIGVuZCA9IHJ1bi5lbmQsXG4gICAgICBfcnVuJGF0dHJpYnV0ZXMyID0gcnVuLmF0dHJpYnV0ZXMsXG4gICAgICBhdHRyaWJ1dGVzID0gX3J1biRhdHRyaWJ1dGVzMiA9PT0gdm9pZCAwID8ge30gOiBfcnVuJGF0dHJpYnV0ZXMyO1xuICAgIHZhciBmb250ID0gYXR0cmlidXRlcy5mb250O1xuICAgIGlmICghZm9udCkgcmV0dXJuIF9leHRlbmRzKHt9LCBydW4sIHtcbiAgICAgIGdseXBoczogW10sXG4gICAgICBnbHlwaEluZGljZXM6IFtdLFxuICAgICAgcG9zaXRpb25zOiBbXVxuICAgIH0pO1xuICAgIHZhciBydW5TdHJpbmcgPSBzdHJpbmcuc2xpY2Uoc3RhcnQsIGVuZCk7XG5cbiAgICAvLyBwYXNzaW5nIExUUiBUbyBmb3JjZSBmb250a2l0IHRvIG5vdCByZXZlcnNlIHRoZSBzdHJpbmdcbiAgICB2YXIgZ2x5cGhSdW4gPSBmb250LmxheW91dChydW5TdHJpbmcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsICdsdHInKTtcbiAgICB2YXIgcG9zaXRpb25zID0gc2NhbGVQb3NpdGlvbnMocnVuLCBnbHlwaFJ1bi5wb3NpdGlvbnMpO1xuICAgIHZhciBnbHlwaEluZGljZXMgPSByZXNvbHZlKGdseXBoUnVuLmdseXBocyk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBydW4sIHtcbiAgICAgIHBvc2l0aW9uczogcG9zaXRpb25zLFxuICAgICAgZ2x5cGhJbmRpY2VzOiBnbHlwaEluZGljZXMsXG4gICAgICBnbHlwaHM6IGdseXBoUnVuLmdseXBoc1xuICAgIH0pO1xuICB9O1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBnbHlwaHMgZm9yIHNpbmdsZSBhdHRyaWJ1dGVkIHN0cmluZ1xuICovXG52YXIgZ2VuZXJhdGVHbHlwaHMgPSBmdW5jdGlvbiBnZW5lcmF0ZUdseXBocygpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZFN0cmluZyBhdHRyaWJ1dGVkIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZCBzdHJpbmcgd2l0aCBnbHlwaHNcbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAoYXR0cmlidXRlZFN0cmluZykge1xuICAgIHZhciBydW5zID0gYXR0cmlidXRlZFN0cmluZy5ydW5zLm1hcChsYXlvdXRSdW4oYXR0cmlidXRlZFN0cmluZy5zdHJpbmcpKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYXR0cmlidXRlZFN0cmluZywge1xuICAgICAgcnVuczogcnVuc1xuICAgIH0pO1xuICB9O1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkF0dHJpYnV0ZWRTdHJpbmd9IEF0dHJpYnV0ZWRTdHJpbmdcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIFJlc29sdmVzIHlPZmZzZXQgZm9yIHJ1blxuICpcbiAqIEBwYXJhbSB7UnVufSBydW4gcnVuXG4gKiBAcmV0dXJucyB7UnVufSBydW5cbiAqL1xudmFyIHJlc29sdmVSdW5ZT2Zmc2V0ID0gZnVuY3Rpb24gcmVzb2x2ZVJ1bllPZmZzZXQocnVuKSB7XG4gIHZhciBfcnVuJGF0dHJpYnV0ZXMsIF9ydW4kYXR0cmlidXRlcyRmb250LCBfcnVuJGF0dHJpYnV0ZXMyO1xuICBpZiAoIXJ1bi5wb3NpdGlvbnMpIHJldHVybiBydW47XG4gIHZhciB1bml0c1BlckVtID0gKChfcnVuJGF0dHJpYnV0ZXMgPSBydW4uYXR0cmlidXRlcykgPT09IG51bGwgfHwgX3J1biRhdHRyaWJ1dGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3J1biRhdHRyaWJ1dGVzJGZvbnQgPSBfcnVuJGF0dHJpYnV0ZXMuZm9udCkgPT09IG51bGwgfHwgX3J1biRhdHRyaWJ1dGVzJGZvbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ydW4kYXR0cmlidXRlcyRmb250LnVuaXRzUGVyRW0pIHx8IDA7XG4gIHZhciB5T2Zmc2V0ID0gKCgoX3J1biRhdHRyaWJ1dGVzMiA9IHJ1bi5hdHRyaWJ1dGVzKSA9PT0gbnVsbCB8fCBfcnVuJGF0dHJpYnV0ZXMyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcnVuJGF0dHJpYnV0ZXMyLnlPZmZzZXQpIHx8IDApICogdW5pdHNQZXJFbTtcbiAgdmFyIHBvc2l0aW9ucyA9IHJ1bi5wb3NpdGlvbnMubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHAsIHtcbiAgICAgIHlPZmZzZXQ6IHlPZmZzZXRcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBydW4sIHtcbiAgICBwb3NpdGlvbnM6IHBvc2l0aW9uc1xuICB9KTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZXMgeU9mZnNldCBmb3IgbXVsdGlwbGUgcGFyYWdyYXBoc1xuICovXG52YXIgcmVzb2x2ZVlPZmZzZXQgPSBmdW5jdGlvbiByZXNvbHZlWU9mZnNldCgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZFN0cmluZyBhdHRyaWJ1dGVkIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZCBzdHJpbmdcbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAoYXR0cmlidXRlZFN0cmluZykge1xuICAgIHZhciBydW5zID0gYXR0cmlidXRlZFN0cmluZy5ydW5zLm1hcChyZXNvbHZlUnVuWU9mZnNldCk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGF0dHJpYnV0ZWRTdHJpbmcsIHtcbiAgICAgIHJ1bnM6IHJ1bnNcbiAgICB9KTtcbiAgfTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5SdW59IFJ1blxuICovXG5cbi8qKlxuICogU29ydCBydW5zIGluIGFzY2VuZGluZyBvcmRlclxuICpcbiAqIEBwYXJhbSB7UnVuW119IHJ1bnNcbiAqIEByZXR1cm5zIHtSdW5bXX0gc29ydGVkIHJ1bnNcbiAqL1xudmFyIHNvcnQgPSBmdW5jdGlvbiBzb3J0KHJ1bnMpIHtcbiAgcmV0dXJuIHJ1bnMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhLnN0YXJ0IC0gYi5zdGFydCB8fCBhLmVuZCAtIGIuZW5kO1xuICB9KTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5SdW59IFJ1blxuICovXG5cbi8qKlxuICogSXMgcnVuIGVtcHR5IChzdGFydCA9PT0gZW5kKVxuICpcbiAqIEBwYXJhbSB7UnVufSBydW4gcnVuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gaXMgcnVuIGVtcHR5XG4gKi9cbnZhciBpc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eShydW4pIHtcbiAgcmV0dXJuIHJ1bi5zdGFydCA9PT0gcnVuLmVuZDtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5Qb2ludH0gUG9pbnRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIFNvcnQgcG9pbnRzIGluIGFzY2VuZGluZyBvcmRlclxuICogQHBhcmFtIHtQb2ludH0gYSBmaXJzdCBwb2ludFxuICogQHBhcmFtIHtQb2ludH0gYiBzZWNvbmQgcG9pbnRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHNvcnQgb3JkZXJcbiAqL1xudmFyIHNvcnRQb2ludHMgPSBmdW5jdGlvbiBzb3J0UG9pbnRzKGEsIGIpIHtcbiAgcmV0dXJuIGFbMV0gLSBiWzFdIHx8IGFbM10gLSBiWzNdO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1J1bltdfSBydW5zXG4gKiBAcmV0dXJucyB7UG9pbnRbXX0gcG9pbnRzXG4gKi9cbnZhciBnZW5lcmF0ZVBvaW50cyA9IGZ1bmN0aW9uIGdlbmVyYXRlUG9pbnRzKHJ1bnMpIHtcbiAgdmFyIHJlc3VsdCA9IHJ1bnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHJ1biwgaSkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KFtbJ3N0YXJ0JywgcnVuLnN0YXJ0LCBydW4uYXR0cmlidXRlcywgaV0sIFsnZW5kJywgcnVuLmVuZCwgcnVuLmF0dHJpYnV0ZXMsIGldXSk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIHJlc3VsdC5zb3J0KHNvcnRQb2ludHMpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1J1bltdfSBydW5zXG4gKiBAcmV0dXJucyB7UnVufSBtZXJnZWQgcnVuc1xuICovXG52YXIgbWVyZ2VSdW5zID0gZnVuY3Rpb24gbWVyZ2VSdW5zKHJ1bnMpIHtcbiAgcmV0dXJuIHJ1bnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHJ1bikge1xuICAgIHZhciBhdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgYWNjLmF0dHJpYnV0ZXMsIHJ1bi5hdHRyaWJ1dGVzKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcnVuLCB7XG4gICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzXG4gICAgfSk7XG4gIH0sIHt9KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtSdW5bXX0gcnVuc1xuICogQHJldHVybnMge1J1bltdW119IGdyb3VwZWQgcnVuc1xuICovXG52YXIgZ3JvdXBFbXB0eVJ1bnMgPSBmdW5jdGlvbiBncm91cEVtcHR5UnVucyhydW5zKSB7XG4gIHZhciBncm91cHMgPSBydW5zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBydW4pIHtcbiAgICBpZiAoIWFjY1tydW4uc3RhcnRdKSBhY2NbcnVuLnN0YXJ0XSA9IFtdO1xuICAgIGFjY1tydW4uc3RhcnRdLnB1c2gocnVuKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCBbXSk7XG4gIHJldHVybiBPYmplY3QudmFsdWVzKGdyb3Vwcyk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7UnVuW119IHJ1bnNcbiAqIEByZXR1cm5zIHtSdW5bXX0gZmxhdHRlbmVkIHJ1bnNcbiAqL1xudmFyIGZsYXR0ZW5FbXB0eVJ1bnMgPSBmdW5jdGlvbiBmbGF0dGVuRW1wdHlSdW5zKHJ1bnMpIHtcbiAgcmV0dXJuIGdyb3VwRW1wdHlSdW5zKHJ1bnMpLm1hcChtZXJnZVJ1bnMpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1J1bltdfSBydW5zXG4gKiBAcmV0dXJucyB7UnVuW119IGZsYXR0ZW5lZCBydW5zXG4gKi9cbnZhciBmbGF0dGVuUmVndWxhclJ1bnMgPSBmdW5jdGlvbiBmbGF0dGVuUmVndWxhclJ1bnMocnVucykge1xuICB2YXIgcmVzID0gW107XG4gIHZhciBwb2ludHMgPSBnZW5lcmF0ZVBvaW50cyhydW5zKTtcbiAgdmFyIHN0YXJ0ID0gLTE7XG4gIHZhciBhdHRycyA9IHt9O1xuICB2YXIgc3RhY2sgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgX3BvaW50cyRpID0gcG9pbnRzW2ldLFxuICAgICAgdHlwZSA9IF9wb2ludHMkaVswXSxcbiAgICAgIG9mZnNldCA9IF9wb2ludHMkaVsxXSxcbiAgICAgIGF0dHJpYnV0ZXMgPSBfcG9pbnRzJGlbMl07XG4gICAgaWYgKHN0YXJ0ICE9PSAtMSAmJiBzdGFydCA8IG9mZnNldCkge1xuICAgICAgcmVzLnB1c2goe1xuICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgIGVuZDogb2Zmc2V0LFxuICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyc1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnc3RhcnQnKSB7XG4gICAgICBzdGFjay5wdXNoKGF0dHJpYnV0ZXMpO1xuICAgICAgYXR0cnMgPSBPYmplY3QuYXNzaWduKHt9LCBhdHRycywgYXR0cmlidXRlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF0dHJzID0ge307XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0YWNrLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGlmIChzdGFja1tqXSA9PT0gYXR0cmlidXRlcykge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wbHVzcGx1c1xuICAgICAgICAgIHN0YWNrLnNwbGljZShqLS0sIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGF0dHJzID0gT2JqZWN0LmFzc2lnbih7fSwgYXR0cnMsIHN0YWNrW2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzdGFydCA9IG9mZnNldDtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuLyoqXG4gKiBGbGF0dGVuIG1hbnkgcnVuc1xuICpcbiAqIEBwYXJhbSB7UnVuW119IHJ1bnNcbiAqIEByZXR1cm5zIHtSdW5bXX0gZmxhdHRlbmVkIHJ1bnNcbiAqL1xudmFyIGZsYXR0ZW4gPSBmdW5jdGlvbiBmbGF0dGVuKHJ1bnMpIHtcbiAgaWYgKHJ1bnMgPT09IHZvaWQgMCkge1xuICAgIHJ1bnMgPSBbXTtcbiAgfVxuICB2YXIgZW1wdHlSdW5zID0gZmxhdHRlbkVtcHR5UnVucyhydW5zLmZpbHRlcihmdW5jdGlvbiAocnVuKSB7XG4gICAgcmV0dXJuIGlzRW1wdHkocnVuKTtcbiAgfSkpO1xuICB2YXIgcmVndWxhclJ1bnMgPSBmbGF0dGVuUmVndWxhclJ1bnMocnVucy5maWx0ZXIoZnVuY3Rpb24gKHJ1bikge1xuICAgIHJldHVybiAhaXNFbXB0eShydW4pO1xuICB9KSk7XG4gIHJldHVybiBzb3J0KGVtcHR5UnVucy5jb25jYXQocmVndWxhclJ1bnMpKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBlbXB0eSBhdHRyaWJ1dGVkIHN0cmluZ1xuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IGVtcHR5IGF0dHJpYnV0ZWQgc3RyaW5nXG4gKi9cbnZhciBlbXB0eSA9IGZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4ge1xuICAgIHN0cmluZzogJycsXG4gICAgcnVuczogW11cbiAgfTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5BdHRyaWJ1dGVkU3RyaW5nfSBBdHRyaWJ1dGVkU3RyaW5nXG4gKi9cblxuLyoqXG4gKlxuICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nXG4gKiBAcmV0dXJucyB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZCBzdHJpbmcgd2l0aG91dCBmb250XG4gKi9cbnZhciBvbWl0Rm9udCA9IGZ1bmN0aW9uIG9taXRGb250KGF0dHJpYnV0ZWRTdHJpbmcpIHtcbiAgdmFyIHJ1bnMgPSBhdHRyaWJ1dGVkU3RyaW5nLnJ1bnMubWFwKGZ1bmN0aW9uIChydW4pIHtcbiAgICByZXR1cm4gb21pdCgnZm9udCcsIHJ1bik7XG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYXR0cmlidXRlZFN0cmluZywge1xuICAgIHJ1bnM6IHJ1bnNcbiAgfSk7XG59O1xuXG4vKipcbiAqIFBlcmZvcm1zIGZvbnQgc3Vic3RpdHV0aW9uIGFuZCBzY3JpcHQgaXRlbWl6YXRpb24gb24gYXR0cmlidXRlZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZW5naW5lcyBlbmdpbmVzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBsYXlvdXQgb3B0aW9uc1xuICovXG52YXIgcHJlcHJvY2Vzc1J1bnMgPSBmdW5jdGlvbiBwcmVwcm9jZXNzUnVucyhlbmdpbmVzLCBvcHRpb25zKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0F0dHJpYnV0ZWRTdHJpbmd9IGF0dHJpYnV0ZWRTdHJpbmcgYXR0cmlidXRlZCBzdHJpbmdcbiAgICogQHJldHVybnMge0F0dHJpYnV0ZWRTdHJpbmd9IHByb2Nlc3NlZCBhdHRyaWJ1dGVkIHN0cmluZ1xuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIChhdHRyaWJ1dGVkU3RyaW5nKSB7XG4gICAgaWYgKGlzTmlsKGF0dHJpYnV0ZWRTdHJpbmcpKSByZXR1cm4gZW1wdHkoKTtcbiAgICB2YXIgc3RyaW5nID0gYXR0cmlidXRlZFN0cmluZy5zdHJpbmc7XG4gICAgdmFyIGZvbnRTdWJzdGl0dXRpb24gPSBlbmdpbmVzLmZvbnRTdWJzdGl0dXRpb24sXG4gICAgICBzY3JpcHRJdGVtaXplciA9IGVuZ2luZXMuc2NyaXB0SXRlbWl6ZXIsXG4gICAgICBiaWRpID0gZW5naW5lcy5iaWRpO1xuICAgIHZhciBfb21pdEZvbnQgPSBvbWl0Rm9udChhdHRyaWJ1dGVkU3RyaW5nKSxcbiAgICAgIG9taXR0ZWRGb250UnVucyA9IF9vbWl0Rm9udC5ydW5zO1xuICAgIHZhciBfc2NyaXB0SXRlbWl6ZXIgPSBzY3JpcHRJdGVtaXplcihvcHRpb25zKShhdHRyaWJ1dGVkU3RyaW5nKSxcbiAgICAgIGl0ZW1pemF0aW9uUnVucyA9IF9zY3JpcHRJdGVtaXplci5ydW5zO1xuICAgIHZhciBfZm9udFN1YnN0aXR1dGlvbiA9IGZvbnRTdWJzdGl0dXRpb24ob3B0aW9ucykoYXR0cmlidXRlZFN0cmluZyksXG4gICAgICBzdWJzdGl0dXRlZFJ1bnMgPSBfZm9udFN1YnN0aXR1dGlvbi5ydW5zO1xuICAgIHZhciBfYmlkaSA9IGJpZGkob3B0aW9ucykoYXR0cmlidXRlZFN0cmluZyksXG4gICAgICBiaWRpUnVucyA9IF9iaWRpLnJ1bnM7XG4gICAgdmFyIHJ1bnMgPSBiaWRpUnVucy5jb25jYXQoc3Vic3RpdHV0ZWRSdW5zKS5jb25jYXQoaXRlbWl6YXRpb25SdW5zKS5jb25jYXQob21pdHRlZEZvbnRSdW5zKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgICBydW5zOiBmbGF0dGVuKHJ1bnMpXG4gICAgfTtcbiAgfTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5BdHRyaWJ1dGVkU3RyaW5nfSBBdHRyaWJ1dGVkU3RyaW5nXG4gKi9cblxuLyoqXG4gKiBCcmVha3MgYXR0cmlidXRlZCBzdHJpbmcgaW50byBwYXJhZ3JhcGhzXG4gKi9cbnZhciBzcGxpdFBhcmFncmFwaHMgPSBmdW5jdGlvbiBzcGxpdFBhcmFncmFwaHMoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0F0dHJpYnV0ZWRTdHJpbmd9IGF0dHJpYnV0ZWRTdHJpbmcgYXR0cmlidXRlZCBzdHJpbmdcbiAgICogQHJldHVybnMge0F0dHJpYnV0ZWRTdHJpbmdbXX0gYXR0cmlidXRlZCBzdHJpbmcgYXJyYXlcbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAoYXR0cmlidXRlZFN0cmluZykge1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIHZhciBicmVha1BvaW50ID0gYXR0cmlidXRlZFN0cmluZy5zdHJpbmcuaW5kZXhPZignXFxuJykgKyAxO1xuICAgIHdoaWxlIChicmVha1BvaW50ID4gMCkge1xuICAgICAgcmVzLnB1c2goc2xpY2Uoc3RhcnQsIGJyZWFrUG9pbnQsIGF0dHJpYnV0ZWRTdHJpbmcpKTtcbiAgICAgIHN0YXJ0ID0gYnJlYWtQb2ludDtcbiAgICAgIGJyZWFrUG9pbnQgPSBhdHRyaWJ1dGVkU3RyaW5nLnN0cmluZy5pbmRleE9mKCdcXG4nLCBicmVha1BvaW50KSArIDE7XG4gICAgfVxuICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgcmVzLnB1c2goYXR0cmlidXRlZFN0cmluZyk7XG4gICAgfSBlbHNlIGlmIChzdGFydCA8IGF0dHJpYnV0ZWRTdHJpbmcuc3RyaW5nLmxlbmd0aCkge1xuICAgICAgcmVzLnB1c2goc2xpY2Uoc3RhcnQsIGxlbmd0aCQxKGF0dHJpYnV0ZWRTdHJpbmcpLCBhdHRyaWJ1dGVkU3RyaW5nKSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUG9zaXRpb259IFBvc2l0aW9uXG4gKi9cblxuLyoqXG4gKiBSZXR1cm4gcG9zaXRpb25zIGFkdmFuY2Ugd2lkdGhcbiAqXG4gKiBAcGFyYW0ge1Bvc2l0aW9uW119IHBvc2l0aW9ucyBwb3NpdGlvbnNcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFkdmFuY2Ugd2lkdGhcbiAqL1xudmFyIGFkdmFuY2VXaWR0aCQyID0gZnVuY3Rpb24gYWR2YW5jZVdpZHRoKHBvc2l0aW9ucykge1xuICByZXR1cm4gcG9zaXRpb25zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwb3MpIHtcbiAgICByZXR1cm4gYWNjICsgKHBvcy54QWR2YW5jZSB8fCAwKTtcbiAgfSwgMCk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIFJldHVybiBydW4gYWR2YW5jZSB3aWR0aFxuICpcbiAqIEBwYXJhbSB7UnVufSBydW4gcnVuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhZHZhbmNlIHdpZHRoXG4gKi9cbnZhciBhZHZhbmNlV2lkdGgkMSA9IGZ1bmN0aW9uIGFkdmFuY2VXaWR0aChydW4pIHtcbiAgcmV0dXJuIGFkdmFuY2VXaWR0aCQyKHJ1bi5wb3NpdGlvbnMgfHwgW10pO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkF0dHJpYnV0ZWRTdHJpbmd9IEF0dHJpYnV0ZWRTdHJpbmdcbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYXR0cmlidXRlZCBzdHJpbmcgYWR2YW5jZXdpZHRoXG4gKlxuICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nIGF0dHJpYnV0ZWQgc3RyaW5nXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhZHZhbmNlIHdpZHRoXG4gKi9cbnZhciBhZHZhbmNlV2lkdGggPSBmdW5jdGlvbiBhZHZhbmNlV2lkdGgoYXR0cmlidXRlZFN0cmluZykge1xuICB2YXIgcmVkdWNlciA9IGZ1bmN0aW9uIHJlZHVjZXIoYWNjLCBydW4pIHtcbiAgICByZXR1cm4gYWNjICsgYWR2YW5jZVdpZHRoJDEocnVuKTtcbiAgfTtcbiAgcmV0dXJuIGF0dHJpYnV0ZWRTdHJpbmcucnVucy5yZWR1Y2UocmVkdWNlciwgMCk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuR2x5cGh9IEdseXBoXG4gKi9cblxudmFyIFdISVRFX1NQQUNFU19DT0RFID0gMzI7XG5cbi8qKlxuICogQ2hlY2sgaWYgZ2x5cGggaXMgd2hpdGUgc3BhY2VcbiAqXG4gKiBAcGFyYW0ge0dseXBofSBbZ2x5cGhdIGdseXBoXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciBnbHlwaCBpcyB3aGl0ZSBzcGFjZVxuICogKi9cbnZhciBpc1doaXRlU3BhY2UgPSBmdW5jdGlvbiBpc1doaXRlU3BhY2UoZ2x5cGgpIHtcbiAgdmFyIGNvZGVQb2ludHMgPSAoZ2x5cGggPT09IG51bGwgfHwgZ2x5cGggPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdseXBoLmNvZGVQb2ludHMpIHx8IFtdO1xuICByZXR1cm4gY29kZVBvaW50cy5pbmNsdWRlcyhXSElURV9TUEFDRVNfQ09ERSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUG9zaXRpb259IFBvc2l0aW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlJ1bn0gUnVuXG4gKi9cblxuLyoqXG4gKiBHZXQgd2hpdGUgc3BhY2UgbGVhZGluZyBwb3NpdGlvbnNcbiAqXG4gKiBAcGFyYW0ge1J1bn0gcnVuIHJ1blxuICogQHJldHVybnMge1Bvc2l0aW9uW119IHdoaXRlIHNwYWNlIGxlYWRpbmcgcG9zaXRpb25zXG4gKi9cbnZhciBsZWFkaW5nUG9zaXRpb25zID0gZnVuY3Rpb24gbGVhZGluZ1Bvc2l0aW9ucyhydW4pIHtcbiAgdmFyIGdseXBocyA9IHJ1bi5nbHlwaHMgfHwgW107XG4gIHZhciBwb3NpdGlvbnMgPSBydW4ucG9zaXRpb25zIHx8IFtdO1xuICB2YXIgbGVhZGluZ1doaXRlc3BhY2VzID0gZ2x5cGhzLmZpbmRJbmRleChmdW5jdGlvbiAoZykge1xuICAgIHJldHVybiAhaXNXaGl0ZVNwYWNlKGcpO1xuICB9KTtcbiAgcmV0dXJuIHBvc2l0aW9ucy5zbGljZSgwLCBsZWFkaW5nV2hpdGVzcGFjZXMpO1xufTtcblxuLyoqXG4gKiBHZXQgcnVuIGxlYWRpbmcgd2hpdGUgc3BhY2Ugb2Zmc2V0XG4gKlxuICogQHBhcmFtIHtSdW59IHJ1biBydW5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IGxlYWRpbmcgd2hpdGUgc3BhY2Ugb2Zmc2V0XG4gKi9cbnZhciBsZWFkaW5nT2Zmc2V0JDEgPSBmdW5jdGlvbiBsZWFkaW5nT2Zmc2V0KHJ1bikge1xuICB2YXIgcG9zaXRpb25zID0gbGVhZGluZ1Bvc2l0aW9ucyhydW4pO1xuICByZXR1cm4gcG9zaXRpb25zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwb3MpIHtcbiAgICByZXR1cm4gYWNjICsgKHBvcy54QWR2YW5jZSB8fCAwKTtcbiAgfSwgMCk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXR0cmlidXRlZFN0cmluZ30gQXR0cmlidXRlZFN0cmluZ1xuICovXG5cbi8qKlxuICogR2V0IGF0dHJpYnV0ZWQgc3RyaW5nIGxlYWRpbmcgd2hpdGUgc3BhY2Ugb2Zmc2V0XG4gKlxuICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nIGF0dHJpYnV0ZWQgc3RyaW5nXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBsZWFkaW5nIHdoaXRlIHNwYWNlIG9mZnNldFxuICovXG52YXIgbGVhZGluZ09mZnNldCA9IGZ1bmN0aW9uIGxlYWRpbmdPZmZzZXQoYXR0cmlidXRlZFN0cmluZykge1xuICB2YXIgcnVucyA9IGF0dHJpYnV0ZWRTdHJpbmcucnVucyB8fCBbXTtcbiAgcmV0dXJuIGxlYWRpbmdPZmZzZXQkMShydW5zWzBdKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5Qb3NpdGlvbn0gUG9zaXRpb25cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1RbXX0gYXJyYXlcbiAqIEByZXR1cm5zIHtUW119IHJldmVyc2VkIGFycmF5XG4gKi9cbnZhciByZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShhcnJheSkge1xuICByZXR1cm4gW10uY29uY2F0KGFycmF5KS5yZXZlcnNlKCk7XG59O1xuXG4vKipcbiAqIEdldCB3aGl0ZSBzcGFjZSB0cmFpbGluZyBwb3NpdGlvbnNcbiAqXG4gKiBAcGFyYW0ge1J1bn0gcnVuIHJ1blxuICogQHJldHVybnMge1Bvc2l0aW9uW119IHdoaXRlIHNwYWNlIHRyYWlsaW5nIHBvc2l0aW9uc1xuICovXG52YXIgdHJhaWxpbmdQb3NpdGlvbnMgPSBmdW5jdGlvbiB0cmFpbGluZ1Bvc2l0aW9ucyhydW4pIHtcbiAgdmFyIGdseXBocyA9IHJldmVyc2UocnVuLmdseXBocyB8fCBbXSk7XG4gIHZhciBwb3NpdGlvbnMgPSByZXZlcnNlKHJ1bi5wb3NpdGlvbnMgfHwgW10pO1xuICB2YXIgbGVhZGluZ1doaXRlc3BhY2VzID0gZ2x5cGhzLmZpbmRJbmRleChmdW5jdGlvbiAoZykge1xuICAgIHJldHVybiAhaXNXaGl0ZVNwYWNlKGcpO1xuICB9KTtcbiAgcmV0dXJuIHBvc2l0aW9ucy5zbGljZSgwLCBsZWFkaW5nV2hpdGVzcGFjZXMpO1xufTtcblxuLyoqXG4gKiBHZXQgcnVuIHRyYWlsaW5nIHdoaXRlIHNwYWNlIG9mZnNldFxuICpcbiAqIEBwYXJhbSB7UnVufSBydW4gcnVuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB0cmFpbGluZyB3aGl0ZSBzcGFjZSBvZmZzZXRcbiAqL1xudmFyIHRyYWlsaW5nT2Zmc2V0JDEgPSBmdW5jdGlvbiB0cmFpbGluZ09mZnNldChydW4pIHtcbiAgdmFyIHBvc2l0aW9ucyA9IHRyYWlsaW5nUG9zaXRpb25zKHJ1bik7XG4gIHJldHVybiBwb3NpdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBvcykge1xuICAgIHJldHVybiBhY2MgKyAocG9zLnhBZHZhbmNlIHx8IDApO1xuICB9LCAwKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5BdHRyaWJ1dGVkU3RyaW5nfSBBdHRyaWJ1dGVkU3RyaW5nXG4gKi9cblxuLyoqXG4gKiBHZXQgYXR0cmlidXRlZCBzdHJpbmcgdHJhaWxpbmcgd2hpdGUgc3BhY2Ugb2Zmc2V0XG4gKlxuICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nIGF0dHJpYnV0ZWQgc3RyaW5nXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB0cmFpbGluZyB3aGl0ZSBzcGFjZSBvZmZzZXRcbiAqL1xudmFyIHRyYWlsaW5nT2Zmc2V0ID0gZnVuY3Rpb24gdHJhaWxpbmdPZmZzZXQoYXR0cmlidXRlZFN0cmluZykge1xuICB2YXIgcnVucyA9IGF0dHJpYnV0ZWRTdHJpbmcucnVucyB8fCBbXTtcbiAgcmV0dXJuIHRyYWlsaW5nT2Zmc2V0JDEobGFzdChydW5zKSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIERyb3AgbGFzdCBjaGFyIG9mIHJ1blxuICpcbiAqIEBwYXJhbSB7UnVufSBydW4gcnVuXG4gKiBAcmV0dXJucyB7UnVufSBydW4gd2l0aG91dCBsYXN0IGNoYXJcbiAqL1xudmFyIGRyb3BMYXN0JDEgPSBmdW5jdGlvbiBkcm9wTGFzdChydW4pIHtcbiAgcmV0dXJuIHNsaWNlJDEoMCwgcnVuLmVuZCAtIHJ1bi5zdGFydCAtIDEsIHJ1bik7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXR0cmlidXRlZFN0cmluZ30gQXR0cmlidXRlZFN0cmluZ1xuICovXG5cbi8qKlxuICogRHJvcCBsYXN0IGdseXBoXG4gKlxuICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nIGF0dHJpYnV0ZWQgc3RyaW5nXG4gKiBAcmV0dXJucyB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZCBzdHJpbmcgd2l0aCBuZXcgZ2x5cGhcbiAqL1xudmFyIGRyb3BMYXN0ID0gZnVuY3Rpb24gZHJvcExhc3QoYXR0cmlidXRlZFN0cmluZykge1xuICB2YXIgc3RyaW5nID0gZHJvcExhc3QkMihhdHRyaWJ1dGVkU3RyaW5nLnN0cmluZyk7XG4gIHZhciBydW5zID0gYWRqdXN0KC0xLCBkcm9wTGFzdCQxLCBhdHRyaWJ1dGVkU3RyaW5nLnJ1bnMpO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYXR0cmlidXRlZFN0cmluZywge1xuICAgIHN0cmluZzogc3RyaW5nLFxuICAgIHJ1bnM6IHJ1bnNcbiAgfSk7XG59O1xuXG52YXIgQUxJR05NRU5UX0ZBQ1RPUlMgPSB7XG4gIGNlbnRlcjogMC41LFxuICByaWdodDogMVxufTtcblxuLyoqXG4gKiBSZW1vdmUgbmV3IGxpbmUgY2hhciBhdCB0aGUgZW5kIG9mIGxpbmUgaWYgcHJlc2VudFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSAgbGluZVxuICogQHJldHVybnMge09iamVjdH0gbGluZVxuICovXG52YXIgcmVtb3ZlTmV3TGluZSA9IGZ1bmN0aW9uIHJlbW92ZU5ld0xpbmUobGluZSkge1xuICByZXR1cm4gbGFzdChsaW5lLnN0cmluZykgPT09ICdcXG4nID8gZHJvcExhc3QobGluZSkgOiBsaW5lO1xufTtcbnZhciBnZXRPdmVyZmxvd0xlZnQgPSBmdW5jdGlvbiBnZXRPdmVyZmxvd0xlZnQobGluZSkge1xuICByZXR1cm4gbGVhZGluZ09mZnNldChsaW5lKSArIChsaW5lLm92ZXJmbG93TGVmdCB8fCAwKTtcbn07XG52YXIgZ2V0T3ZlcmZsb3dSaWdodCA9IGZ1bmN0aW9uIGdldE92ZXJmbG93UmlnaHQobGluZSkge1xuICByZXR1cm4gdHJhaWxpbmdPZmZzZXQobGluZSkgKyAobGluZS5vdmVyZmxvd1JpZ2h0IHx8IDApO1xufTtcblxuLyoqXG4gKiBJZ25vcmUgd2hpdGVzcGFjZSBhdCB0aGUgc3RhcnQgYW5kIGVuZCBvZiBhIGxpbmUgZm9yIGFsaWdubWVudFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSAgbGluZVxuICogQHJldHVybnMge09iamVjdH0gbGluZVxuICovXG52YXIgYWRqdXN0T3ZlcmZsb3cgPSBmdW5jdGlvbiBhZGp1c3RPdmVyZmxvdyhsaW5lKSB7XG4gIHZhciBvdmVyZmxvd0xlZnQgPSBnZXRPdmVyZmxvd0xlZnQobGluZSk7XG4gIHZhciBvdmVyZmxvd1JpZ2h0ID0gZ2V0T3ZlcmZsb3dSaWdodChsaW5lKTtcbiAgdmFyIHggPSBsaW5lLmJveC54IC0gb3ZlcmZsb3dMZWZ0O1xuICB2YXIgd2lkdGggPSBsaW5lLmJveC53aWR0aCArIG92ZXJmbG93TGVmdCArIG92ZXJmbG93UmlnaHQ7XG4gIHZhciBib3ggPSBPYmplY3QuYXNzaWduKHt9LCBsaW5lLmJveCwge1xuICAgIHg6IHgsXG4gICAgd2lkdGg6IHdpZHRoXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgbGluZSwge1xuICAgIGJveDogYm94LFxuICAgIG92ZXJmbG93TGVmdDogb3ZlcmZsb3dMZWZ0LFxuICAgIG92ZXJmbG93UmlnaHQ6IG92ZXJmbG93UmlnaHRcbiAgfSk7XG59O1xuXG4vKipcbiAqIFBlcmZvcm1zIGxpbmUganVzdGlmaWNhdGlvbiBieSBjYWxsaW5nIGFwcHJvcGlhdGUgZW5naW5lXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGVuZ2luZXMgZW5naW5lc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgbGF5b3V0IG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBhbGlnbiB0ZXh0IGFsaWduXG4gKi9cbnZhciBqdXN0aWZ5TGluZSQxID0gZnVuY3Rpb24ganVzdGlmeUxpbmUoZW5naW5lcywgb3B0aW9ucywgYWxpZ24pIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBsaW5lIGxpbnRcbiAgICogQHJldHVybnMge09iamVjdH0gbGluZVxuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgdmFyIGxpbmVXaWR0aCA9IGFkdmFuY2VXaWR0aChsaW5lKTtcbiAgICB2YXIgYWxpZ25GYWN0b3IgPSBBTElHTk1FTlRfRkFDVE9SU1thbGlnbl0gfHwgMDtcbiAgICB2YXIgcmVtYWluaW5nV2lkdGggPSBNYXRoLm1heCgwLCBsaW5lLmJveC53aWR0aCAtIGxpbmVXaWR0aCk7XG4gICAgdmFyIHNob3VsZEp1c3RpZnkgPSBhbGlnbiA9PT0gJ2p1c3RpZnknIHx8IGxpbmVXaWR0aCA+IGxpbmUuYm94LndpZHRoO1xuICAgIHZhciB4ID0gbGluZS5ib3gueCArIHJlbWFpbmluZ1dpZHRoICogYWxpZ25GYWN0b3I7XG4gICAgdmFyIGJveCA9IE9iamVjdC5hc3NpZ24oe30sIGxpbmUuYm94LCB7XG4gICAgICB4OiB4XG4gICAgfSk7XG4gICAgdmFyIG5ld0xpbmUgPSBPYmplY3QuYXNzaWduKHt9LCBsaW5lLCB7XG4gICAgICBib3g6IGJveFxuICAgIH0pO1xuICAgIHJldHVybiBzaG91bGRKdXN0aWZ5ID8gZW5naW5lcy5qdXN0aWZpY2F0aW9uKG9wdGlvbnMpKG5ld0xpbmUpIDogbmV3TGluZTtcbiAgfTtcbn07XG52YXIgZmluYWxpemVMaW5lID0gZnVuY3Rpb24gZmluYWxpemVMaW5lKGxpbmUpIHtcbiAgdmFyIGxpbmVBc2NlbnQgPSAwO1xuICB2YXIgbGluZURlc2NlbnQgPSAwO1xuICB2YXIgbGluZUhlaWdodCA9IDA7XG4gIHZhciBsaW5lWEFkdmFuY2UgPSAwO1xuICB2YXIgcnVucyA9IGxpbmUucnVucy5tYXAoZnVuY3Rpb24gKHJ1bikge1xuICAgIHZhciBoZWlnaHQgPSBoZWlnaHQkMShydW4pO1xuICAgIHZhciBhc2NlbnQgPSBhc2NlbnQkMShydW4pO1xuICAgIHZhciBkZXNjZW50JDEgPSBkZXNjZW50KHJ1bik7XG4gICAgdmFyIHhBZHZhbmNlID0gYWR2YW5jZVdpZHRoJDEocnVuKTtcbiAgICBsaW5lSGVpZ2h0ID0gTWF0aC5tYXgobGluZUhlaWdodCwgaGVpZ2h0KTtcbiAgICBsaW5lQXNjZW50ID0gTWF0aC5tYXgobGluZUFzY2VudCwgYXNjZW50KTtcbiAgICBsaW5lRGVzY2VudCA9IE1hdGgubWF4KGxpbmVEZXNjZW50LCBkZXNjZW50JDEpO1xuICAgIGxpbmVYQWR2YW5jZSArPSB4QWR2YW5jZTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcnVuLCB7XG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIGFzY2VudDogYXNjZW50LFxuICAgICAgZGVzY2VudDogZGVzY2VudCQxLFxuICAgICAgeEFkdmFuY2U6IHhBZHZhbmNlXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgbGluZSwge1xuICAgIHJ1bnM6IHJ1bnMsXG4gICAgaGVpZ2h0OiBsaW5lSGVpZ2h0LFxuICAgIGFzY2VudDogbGluZUFzY2VudCxcbiAgICBkZXNjZW50OiBsaW5lRGVzY2VudCxcbiAgICB4QWR2YW5jZTogbGluZVhBZHZhbmNlXG4gIH0pO1xufTtcblxuLyoqXG4gKiBGaW5hbGl6ZSBsaW5lIGJ5IHBlcmZvcm1pbmcgbGluZSBqdXN0aWZpY2F0aW9uXG4gKiBhbmQgdGV4dCBkZWNvcmF0aW9uICh1c2luZyBhcHByb3BpYXRlIGVuZ2luZXMpXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGVuZ2luZXMgZW5naW5lc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgbGF5b3V0IG9wdGlvbnNcbiAqL1xudmFyIGZpbmFsaXplQmxvY2sgPSBmdW5jdGlvbiBmaW5hbGl6ZUJsb2NrKGVuZ2luZXMsIG9wdGlvbnMpIHtcbiAgaWYgKGVuZ2luZXMgPT09IHZvaWQgMCkge1xuICAgIGVuZ2luZXMgPSB7fTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IGxpbmUgbGludFxuICAgKiBAcGFyYW0ge251bWJlcn0gaSBsaW5lIGluZGV4XG4gICAqIEBwYXJhbSB7T2JqZWN0W119IGxpbmVzIHRvdGFsIGxpbmVzXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGxpbmVcbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAobGluZSwgaSwgbGluZXMpIHtcbiAgICB2YXIgX2xpbmUkcnVucywgX2xpbmUkcnVucyQ7XG4gICAgdmFyIGlzTGFzdEZyYWdtZW50ID0gaSA9PT0gbGluZXMubGVuZ3RoIC0gMTtcbiAgICB2YXIgc3R5bGUgPSAoKF9saW5lJHJ1bnMgPSBsaW5lLnJ1bnMpID09PSBudWxsIHx8IF9saW5lJHJ1bnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfbGluZSRydW5zJCA9IF9saW5lJHJ1bnNbMF0pID09PSBudWxsIHx8IF9saW5lJHJ1bnMkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbGluZSRydW5zJC5hdHRyaWJ1dGVzKSB8fCB7fTtcbiAgICB2YXIgYWxpZ24gPSBpc0xhc3RGcmFnbWVudCA/IHN0eWxlLmFsaWduTGFzdExpbmUgOiBzdHlsZS5hbGlnbjtcbiAgICByZXR1cm4gY29tcG9zZShmaW5hbGl6ZUxpbmUsIGVuZ2luZXMudGV4dERlY29yYXRpb24ob3B0aW9ucyksIGp1c3RpZnlMaW5lJDEoZW5naW5lcywgb3B0aW9ucywgYWxpZ24pLCBhZGp1c3RPdmVyZmxvdywgcmVtb3ZlTmV3TGluZSkobGluZSk7XG4gIH07XG59O1xuXG4vKipcbiAqIEZpbmFsaXplIGxpbmUgYmxvY2sgYnkgcGVyZm9ybWluZyBsaW5lIGp1c3RpZmljYXRpb25cbiAqIGFuZCB0ZXh0IGRlY29yYXRpb24gKHVzaW5nIGFwcHJvcGlhdGUgZW5naW5lcylcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZW5naW5lcyBlbmdpbmVzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBsYXlvdXQgb3B0aW9uc1xuICovXG52YXIgZmluYWxpemVGcmFnbWVudHMgPSBmdW5jdGlvbiBmaW5hbGl6ZUZyYWdtZW50cyhlbmdpbmVzLCBvcHRpb25zKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdFtdfSBibG9ja3MgbGluZSBibG9ja3NcbiAgICogQHJldHVybnMge09iamVjdFtdfSBibG9ja3NcbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAoYmxvY2tzKSB7XG4gICAgdmFyIGJsb2NrRmluYWxpemVyID0gZmluYWxpemVCbG9jayhlbmdpbmVzLCBvcHRpb25zKTtcbiAgICByZXR1cm4gYmxvY2tzLm1hcChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICAgIHJldHVybiBibG9jay5tYXAoYmxvY2tGaW5hbGl6ZXIpO1xuICAgIH0pO1xuICB9O1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkF0dHJpYnV0ZWRTdHJpbmd9IEF0dHJpYnV0ZWRTdHJpbmdcbiAqL1xuXG52YXIgQVRUQUNITUVOVF9DT0RFID0gMHhmZmZjOyAvLyA2NTUzMlxuXG52YXIgaXNSZXBsYWNlR2x5cGggPSBmdW5jdGlvbiBpc1JlcGxhY2VHbHlwaChnbHlwaCkge1xuICByZXR1cm4gZ2x5cGguY29kZVBvaW50cy5pbmNsdWRlcyhBVFRBQ0hNRU5UX0NPREUpO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlIGF0dGFjaG1lbnRzIG9mIHJ1blxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSAgcnVuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBydW5cbiAqL1xudmFyIHJlc29sdmVSdW5BdHRhY2htZW50cyA9IGZ1bmN0aW9uIHJlc29sdmVSdW5BdHRhY2htZW50cyhydW4pIHtcbiAgdmFyIF9ydW4kYXR0cmlidXRlcztcbiAgaWYgKCFydW4ucG9zaXRpb25zKSByZXR1cm4gcnVuO1xuICB2YXIgZ2x5cGhzID0gcnVuLmdseXBocyB8fCBbXTtcbiAgdmFyIGF0dGFjaG1lbnQgPSAoKF9ydW4kYXR0cmlidXRlcyA9IHJ1bi5hdHRyaWJ1dGVzKSA9PT0gbnVsbCB8fCBfcnVuJGF0dHJpYnV0ZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ydW4kYXR0cmlidXRlcy5hdHRhY2htZW50KSB8fCB7fTtcbiAgdmFyIHBvc2l0aW9ucyA9IHJ1bi5wb3NpdGlvbnMubWFwKGZ1bmN0aW9uIChwb3NpdGlvbiwgaSkge1xuICAgIHZhciBnbHlwaCA9IGdseXBoc1tpXTtcbiAgICBpZiAoYXR0YWNobWVudCAmJiBhdHRhY2htZW50LndpZHRoICYmIGlzUmVwbGFjZUdseXBoKGdseXBoKSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHBvc2l0aW9uLCB7XG4gICAgICAgIHhBZHZhbmNlOiBhdHRhY2htZW50LndpZHRoXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHBvc2l0aW9uKTtcbiAgfSk7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBydW4sIHtcbiAgICBwb3NpdGlvbnM6IHBvc2l0aW9uc1xuICB9KTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZSBhdHRhY2htZW50cyBmb3IgbXVsdGlwbGUgcGFyYWdyYXBoc1xuICovXG52YXIgcmVzb2x2ZUF0dGFjaG1lbnRzID0gZnVuY3Rpb24gcmVzb2x2ZUF0dGFjaG1lbnRzKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nIGF0dHJpYnV0ZWQgc3RyaW5nXG4gICAqIEByZXR1cm5zIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkIHN0cmluZ1xuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIChhdHRyaWJ1dGVkU3RyaW5nKSB7XG4gICAgdmFyIHJ1bnMgPSBhdHRyaWJ1dGVkU3RyaW5nLnJ1bnMubWFwKHJlc29sdmVSdW5BdHRhY2htZW50cyk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGF0dHJpYnV0ZWRTdHJpbmcsIHtcbiAgICAgIHJ1bnM6IHJ1bnNcbiAgICB9KTtcbiAgfTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5BdHRyaWJ1dGVkU3RyaW5nfSBBdHRyaWJ1dGVkU3RyaW5nXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkF0dHJpYnV0ZXN9IEF0dHJpYnV0ZXNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7QXR0cmlidXRlc30gYSBhdHRyaWJ1dGVzXG4gKiBAcmV0dXJucyB7QXR0cmlidXRlc30gYXR0cmlidXRlcyB3aXRoIGRlZmF1bHRzXG4gKi9cbnZhciBhcHBseUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiBhcHBseUF0dHJpYnV0ZXMoYSkge1xuICByZXR1cm4ge1xuICAgIGFsaWduOiBhLmFsaWduIHx8IChhLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAncmlnaHQnIDogJ2xlZnQnKSxcbiAgICBhbGlnbkxhc3RMaW5lOiBhLmFsaWduTGFzdExpbmUgfHwgKGEuYWxpZ24gPT09ICdqdXN0aWZ5JyA/ICdsZWZ0JyA6IGEuYWxpZ24gfHwgJ2xlZnQnKSxcbiAgICBhdHRhY2htZW50OiBhLmF0dGFjaG1lbnQgfHwgbnVsbCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGEuYmFja2dyb3VuZENvbG9yIHx8IG51bGwsXG4gICAgYnVsbGV0OiBhLmJ1bGxldCB8fCBudWxsLFxuICAgIGNoYXJhY3RlclNwYWNpbmc6IGEuY2hhcmFjdGVyU3BhY2luZyB8fCAwLFxuICAgIGNvbG9yOiBhLmNvbG9yIHx8ICdibGFjaycsXG4gICAgZGlyZWN0aW9uOiBhLmRpcmVjdGlvbiB8fCAnbHRyJyxcbiAgICBmZWF0dXJlczogYS5mZWF0dXJlcyB8fCBbXSxcbiAgICBmaWxsOiBhLmZpbGwgIT09IGZhbHNlLFxuICAgIGZvbnQ6IGEuZm9udCB8fCBudWxsLFxuICAgIGZvbnRTaXplOiBhLmZvbnRTaXplIHx8IDEyLFxuICAgIGhhbmdpbmdQdW5jdHVhdGlvbjogYS5oYW5naW5nUHVuY3R1YXRpb24gfHwgZmFsc2UsXG4gICAgaHlwaGVuYXRpb25GYWN0b3I6IGEuaHlwaGVuYXRpb25GYWN0b3IgfHwgMCxcbiAgICBpbmRlbnQ6IGEuaW5kZW50IHx8IDAsXG4gICAganVzdGlmaWNhdGlvbkZhY3RvcjogYS5qdXN0aWZpY2F0aW9uRmFjdG9yIHx8IDEsXG4gICAgbGluZUhlaWdodDogYS5saW5lSGVpZ2h0IHx8IG51bGwsXG4gICAgbGluZVNwYWNpbmc6IGEubGluZVNwYWNpbmcgfHwgMCxcbiAgICBsaW5rOiBhLmxpbmsgfHwgbnVsbCxcbiAgICBtYXJnaW5MZWZ0OiBhLm1hcmdpbkxlZnQgfHwgYS5tYXJnaW4gfHwgMCxcbiAgICBtYXJnaW5SaWdodDogYS5tYXJnaW5SaWdodCB8fCBhLm1hcmdpbiB8fCAwLFxuICAgIG9wYWNpdHk6IGEub3BhY2l0eSxcbiAgICBwYWRkaW5nVG9wOiBhLnBhZGRpbmdUb3AgfHwgYS5wYWRkaW5nIHx8IDAsXG4gICAgcGFyYWdyYXBoU3BhY2luZzogYS5wYXJhZ3JhcGhTcGFjaW5nIHx8IDAsXG4gICAgc2NyaXB0OiBhLnNjcmlwdCB8fCBudWxsLFxuICAgIHNocmlua0ZhY3RvcjogYS5zaHJpbmtGYWN0b3IgfHwgMCxcbiAgICBzdHJpa2U6IGEuc3RyaWtlIHx8IGZhbHNlLFxuICAgIHN0cmlrZUNvbG9yOiBhLnN0cmlrZUNvbG9yIHx8IGEuY29sb3IgfHwgJ2JsYWNrJyxcbiAgICBzdHJpa2VTdHlsZTogYS5zdHJpa2VTdHlsZSB8fCAnc29saWQnLFxuICAgIHN0cm9rZTogYS5zdHJva2UgfHwgZmFsc2UsXG4gICAgdW5kZXJsaW5lOiBhLnVuZGVybGluZSB8fCBmYWxzZSxcbiAgICB1bmRlcmxpbmVDb2xvcjogYS51bmRlcmxpbmVDb2xvciB8fCBhLmNvbG9yIHx8ICdibGFjaycsXG4gICAgdW5kZXJsaW5lU3R5bGU6IGEudW5kZXJsaW5lU3R5bGUgfHwgJ3NvbGlkJyxcbiAgICB2ZXJ0aWNhbEFsaWduOiBhLnZlcnRpY2FsQWxpZ24gfHwgbnVsbCxcbiAgICB3b3JkU3BhY2luZzogYS53b3JkU3BhY2luZyB8fCAwLFxuICAgIHlPZmZzZXQ6IGEueU9mZnNldCB8fCAwXG4gIH07XG59O1xuXG4vKipcbiAqIEFwcGx5IGRlZmF1bHQgc3R5bGUgdG8gcnVuXG4gKlxuICogQHBhcmFtIHtSdW59IHJ1biBydW5cbiAqIEByZXR1cm5zIHtSdW59IHJ1biB3aXRoIHN0eWxlc1xuICovXG52YXIgYXBwbHlSdW5TdHlsZXMgPSBmdW5jdGlvbiBhcHBseVJ1blN0eWxlcyhydW4pIHtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBhcHBseUF0dHJpYnV0ZXMocnVuLmF0dHJpYnV0ZXMpO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcnVuLCB7XG4gICAgYXR0cmlidXRlczogYXR0cmlidXRlc1xuICB9KTtcbn07XG5cbi8qKlxuICogQXBwbHkgZGVmYXVsdCBhdHRyaWJ1dGVzIGZvciBhbiBhdHRyaWJ1dGVkIHN0cmluZ1xuICovXG52YXIgYXBwbHlEZWZhdWx0U3R5bGVzID0gZnVuY3Rpb24gYXBwbHlEZWZhdWx0U3R5bGVzKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nIGF0dHJpYnV0ZWQgc3RyaW5nXG4gICAqIEByZXR1cm5zIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkIHN0cmluZ1xuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIChhdHRyaWJ1dGVkU3RyaW5nKSB7XG4gICAgdmFyIHN0cmluZyA9IGF0dHJpYnV0ZWRTdHJpbmcuc3RyaW5nIHx8ICcnO1xuICAgIHZhciBydW5zID0gKGF0dHJpYnV0ZWRTdHJpbmcucnVucyB8fCBbXSkubWFwKGFwcGx5UnVuU3R5bGVzKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgICBydW5zOiBydW5zXG4gICAgfTtcbiAgfTtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5BdHRyaWJ1dGVkU3RyaW5nfSBBdHRyaWJ1dGVkU3RyaW5nXG4gKi9cblxuLyoqXG4gKiBBcHBseSBzY2FsaW5nIGFuZCB5T2Zmc2V0IGZvciB2ZXJ0aWNhbEFsaWduICdzdWInIGFuZCAnc3VwZXInLlxuICovXG52YXIgdmVydGljYWxBbGlnbm1lbnQgPSBmdW5jdGlvbiB2ZXJ0aWNhbEFsaWdubWVudCgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZFN0cmluZyBhdHRyaWJ1dGVkIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZCBzdHJpbmdcbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAoYXR0cmlidXRlZFN0cmluZykge1xuICAgIGF0dHJpYnV0ZWRTdHJpbmcucnVucy5mb3JFYWNoKGZ1bmN0aW9uIChydW4pIHtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gcnVuLmF0dHJpYnV0ZXM7XG4gICAgICB2YXIgdmVydGljYWxBbGlnbiA9IGF0dHJpYnV0ZXMudmVydGljYWxBbGlnbjtcbiAgICAgIGlmICh2ZXJ0aWNhbEFsaWduID09PSAnc3ViJykge1xuICAgICAgICBhdHRyaWJ1dGVzLnlPZmZzZXQgPSAtMC4yO1xuICAgICAgfSBlbHNlIGlmICh2ZXJ0aWNhbEFsaWduID09PSAnc3VwZXInKSB7XG4gICAgICAgIGF0dHJpYnV0ZXMueU9mZnNldCA9IDAuNDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYXR0cmlidXRlZFN0cmluZztcbiAgfTtcbn07XG5cbnZhciBiaWRpJDEgPSBiaWRpRmFjdG9yeSgpO1xudmFyIGdldEJpZGlMZXZlbHMgPSBmdW5jdGlvbiBnZXRCaWRpTGV2ZWxzKHJ1bnMpIHtcbiAgcmV0dXJuIHJ1bnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHJ1bikge1xuICAgIHZhciBsZW5ndGggPSBydW4uZW5kIC0gcnVuLnN0YXJ0O1xuICAgIHZhciBsZXZlbHMgPSByZXBlYXQocnVuLmF0dHJpYnV0ZXMuYmlkaUxldmVsLCBsZW5ndGgpO1xuICAgIHJldHVybiBhY2MuY29uY2F0KGxldmVscyk7XG4gIH0sIFtdKTtcbn07XG5cbi8qKlxuICogUGVyZm9ybSBiaWRpIG1pcnJvcmluZ1xuICovXG52YXIgbWlycm9yU3RyaW5nID0gZnVuY3Rpb24gbWlycm9yU3RyaW5nKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nIGF0dHJpYnV0ZWQgc3RyaW5nXG4gICAqIEByZXR1cm5zIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkIHN0cmluZ1xuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIChhdHRyaWJ1dGVkU3RyaW5nKSB7XG4gICAgdmFyIGxldmVscyA9IGdldEJpZGlMZXZlbHMoYXR0cmlidXRlZFN0cmluZy5ydW5zKTtcbiAgICB2YXIgdXBkYXRlZFN0cmluZyA9ICcnO1xuICAgIGF0dHJpYnV0ZWRTdHJpbmcuc3RyaW5nLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGFyLCBpbmRleCkge1xuICAgICAgdmFyIGlzUlRMID0gbGV2ZWxzW2luZGV4XSAlIDIgPT09IDE7XG4gICAgICB2YXIgbWlycm9yZWRDaGFyID0gaXNSVEwgPyBiaWRpJDEuZ2V0TWlycm9yZWRDaGFyYWN0ZXIoYXR0cmlidXRlZFN0cmluZy5zdHJpbmcuY2hhckF0KGluZGV4KSkgOiBudWxsO1xuICAgICAgdXBkYXRlZFN0cmluZyArPSBtaXJyb3JlZENoYXIgfHwgY2hhcjtcbiAgICB9KTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZWRTdHJpbmcsIHtcbiAgICAgIHN0cmluZzogdXBkYXRlZFN0cmluZyxcbiAgICAgIGxldmVsczogbGV2ZWxzXG4gICAgfSk7XG4gIH07XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXR0cmlidXRlZFN0cmluZ30gQXR0cmlidXRlZFN0cmluZ1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5SZWN0fSBSZWN0XG4gKi9cblxuLyoqXG4gKiBBIExheW91dEVuZ2luZSBpcyB0aGUgbWFpbiBvYmplY3QgdGhhdCBwZXJmb3JtcyB0ZXh0IGxheW91dC5cbiAqIEl0IGFjY2VwdHMgYW4gQXR0cmlidXRlZFN0cmluZyBhbmQgYSBDb250YWluZXIgb2JqZWN0XG4gKiB0byBsYXlvdXQgdGV4dCBpbnRvLCBhbmQgdXNlcyBzZXZlcmFsIGhlbHBlciBvYmplY3RzIHRvIHBlcmZvcm1cbiAqIHZhcmlvdXMgbGF5b3V0IHRhc2tzLiBUaGVzZSBvYmplY3RzIGNhbiBiZSBvdmVycmlkZGVuIHRvIGN1c3RvbWl6ZVxuICogbGF5b3V0IGJlaGF2aW9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBlbmdpbmVzIGVuZ2luZXNcbiAqL1xudmFyIGxheW91dEVuZ2luZSA9IGZ1bmN0aW9uIGxheW91dEVuZ2luZShlbmdpbmVzKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0F0dHJpYnV0ZWRTdHJpbmd9IGF0dHJpYnV0ZWRTdHJpbmcgYXR0cmlidXRlZCBzdHJpbmdcbiAgICogQHBhcmFtIHtSZWN0fSBjb250YWluZXIgY29udGFpbmVyIHJlY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgbGF5b3V0IG9wdGlvbnNcbiAgICogQHJldHVybnMge09iamVjdFtdfSBwYXJhZ3JhcGggYmxvY2tzXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKGF0dHJpYnV0ZWRTdHJpbmcsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgdmFyIHByb2Nlc3NQYXJhZ3JhcGggPSBjb21wb3NlKHJlc29sdmVZT2Zmc2V0KCksIHJlc29sdmVBdHRhY2htZW50cygpLCB2ZXJ0aWNhbEFsaWdubWVudCgpLCB3cmFwV29yZHMoZW5naW5lcywgb3B0aW9ucyksIGdlbmVyYXRlR2x5cGhzKCksIG1pcnJvclN0cmluZygpLCBwcmVwcm9jZXNzUnVucyhlbmdpbmVzLCBvcHRpb25zKSk7XG4gICAgdmFyIHByb2Nlc3NQYXJhZ3JhcGhzID0gZnVuY3Rpb24gcHJvY2Vzc1BhcmFncmFwaHMocGFyYWdyYXBocykge1xuICAgICAgcmV0dXJuIHBhcmFncmFwaHMubWFwKHByb2Nlc3NQYXJhZ3JhcGgpO1xuICAgIH07XG4gICAgcmV0dXJuIGNvbXBvc2UoZmluYWxpemVGcmFnbWVudHMoZW5naW5lcywgb3B0aW9ucyksIGJpZGlSZW9yZGVyaW5nKCksIHR5cGVzZXR0ZXIoZW5naW5lcywgb3B0aW9ucywgY29udGFpbmVyKSwgcHJvY2Vzc1BhcmFncmFwaHMsIHNwbGl0UGFyYWdyYXBocygpLCBhcHBseURlZmF1bHRTdHlsZXMoKSkoYXR0cmlidXRlZFN0cmluZyk7XG4gIH07XG59O1xuXG52YXIgYmlkaSA9IGJpZGlGYWN0b3J5KCk7XG5cbi8qKlxuICogQHBhcmFtICB7T2JqZWN0fSAgbGF5b3V0IG9wdGlvbnNcbiAqIEBwYXJhbSAge09iamVjdH0gIGF0dHJpYnV0ZWQgc3RyaW5nXG4gKiBAcmV0dXJuIHtPYmplY3R9IGF0dHJpYnV0ZWQgc3RyaW5nXG4gKi9cbnZhciBiaWRpRW5naW5lID0gZnVuY3Rpb24gYmlkaUVuZ2luZSgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhdHRyaWJ1dGVkU3RyaW5nKSB7XG4gICAgdmFyIF9hdHRyaWJ1dGVkU3RyaW5nJHJ1bjtcbiAgICB2YXIgc3RyaW5nID0gYXR0cmlidXRlZFN0cmluZy5zdHJpbmc7XG4gICAgdmFyIGRpcmVjdGlvbiA9IChfYXR0cmlidXRlZFN0cmluZyRydW4gPSBhdHRyaWJ1dGVkU3RyaW5nLnJ1bnNbMF0pID09PSBudWxsIHx8IF9hdHRyaWJ1dGVkU3RyaW5nJHJ1biA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2F0dHJpYnV0ZWRTdHJpbmckcnVuLmF0dHJpYnV0ZXMuZGlyZWN0aW9uO1xuICAgIHZhciBfYmlkaSRnZXRFbWJlZGRpbmdMZXYgPSBiaWRpLmdldEVtYmVkZGluZ0xldmVscyhzdHJpbmcsIGRpcmVjdGlvbiksXG4gICAgICBsZXZlbHMgPSBfYmlkaSRnZXRFbWJlZGRpbmdMZXYubGV2ZWxzO1xuICAgIHZhciBsYXN0TGV2ZWwgPSBudWxsO1xuICAgIHZhciBsYXN0SW5kZXggPSAwO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGV2ZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgbGV2ZWwgPSBsZXZlbHNbaV07XG4gICAgICBpZiAobGV2ZWwgIT09IGxhc3RMZXZlbCkge1xuICAgICAgICBpZiAobGFzdExldmVsICE9PSBudWxsKSB7XG4gICAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgICAgc3RhcnQ6IGxhc3RJbmRleCxcbiAgICAgICAgICAgIGVuZDogaW5kZXgsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgIGJpZGlMZXZlbDogbGFzdExldmVsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEluZGV4ID0gaW5kZXg7XG4gICAgICAgIGxhc3RMZXZlbCA9IGxldmVsO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gMTtcbiAgICB9XG4gICAgaWYgKGxhc3RJbmRleCA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgc3RhcnQ6IGxhc3RJbmRleCxcbiAgICAgICAgZW5kOiBzdHJpbmcubGVuZ3RoLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgYmlkaUxldmVsOiBsYXN0TGV2ZWxcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzdHJpbmc6IHN0cmluZyxcbiAgICAgIHJ1bnM6IHJlc1xuICAgIH07XG4gIH07XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wbHVzcGx1cyAqL1xudmFyIElORklOSVRZID0gMTAwMDA7XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3RbXX0gc3Vibm9kZXNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHdpZHRoc1xuICogQHBhcmFtIHtudW1iZXJ9IGxpbmVOdW1iZXJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbnZhciBnZXROZXh0QnJlYWtwb2ludCA9IGZ1bmN0aW9uIGdldE5leHRCcmVha3BvaW50KHN1Ym5vZGVzLCB3aWR0aHMsIGxpbmVOdW1iZXIpIHtcbiAgdmFyIHBvc2l0aW9uID0gbnVsbDtcbiAgdmFyIG1pbmltdW1CYWRuZXNzID0gSW5maW5pdHk7XG4gIHZhciBzdW0gPSB7XG4gICAgd2lkdGg6IDAsXG4gICAgc3RyZXRjaDogMCxcbiAgICBzaHJpbms6IDBcbiAgfTtcbiAgdmFyIGxpbmVMZW5ndGggPSB3aWR0aHNbTWF0aC5taW4obGluZU51bWJlciwgd2lkdGhzLmxlbmd0aCAtIDEpXTtcbiAgdmFyIGNhbGN1bGF0ZVJhdGlvID0gZnVuY3Rpb24gY2FsY3VsYXRlUmF0aW8obm9kZSkge1xuICAgIGlmIChzdW0ud2lkdGggPCBsaW5lTGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc3VtLnN0cmV0Y2ggLSBub2RlLnN0cmV0Y2ggPiAwID8gKGxpbmVMZW5ndGggLSBzdW0ud2lkdGgpIC8gc3VtLnN0cmV0Y2ggOiBJTkZJTklUWTtcbiAgICB9XG4gICAgaWYgKHN1bS53aWR0aCA+IGxpbmVMZW5ndGgpIHtcbiAgICAgIHJldHVybiBzdW0uc2hyaW5rIC0gbm9kZS5zaHJpbmsgPiAwID8gKGxpbmVMZW5ndGggLSBzdW0ud2lkdGgpIC8gc3VtLnNocmluayA6IElORklOSVRZO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJub2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBub2RlID0gc3Vibm9kZXNbaV07XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ2JveCcpIHtcbiAgICAgIHN1bS53aWR0aCArPSBub2RlLndpZHRoO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAnZ2x1ZScpIHtcbiAgICAgIHN1bS53aWR0aCArPSBub2RlLndpZHRoO1xuICAgICAgc3VtLnN0cmV0Y2ggKz0gbm9kZS5zdHJldGNoO1xuICAgICAgc3VtLnNocmluayArPSBub2RlLnNocmluaztcbiAgICB9XG4gICAgaWYgKHN1bS53aWR0aCAtIHN1bS5zaHJpbmsgPiBsaW5lTGVuZ3RoKSB7XG4gICAgICBpZiAocG9zaXRpb24gPT09IG51bGwpIHtcbiAgICAgICAgdmFyIGogPSBpID09PSAwID8gaSArIDEgOiBpO1xuICAgICAgICB3aGlsZSAoaiA8IHN1Ym5vZGVzLmxlbmd0aCAmJiAoc3Vibm9kZXNbal0udHlwZSA9PT0gJ2dsdWUnIHx8IHN1Ym5vZGVzW2pdLnR5cGUgPT09ICdwZW5hbHR5JykpIHtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgICAgcG9zaXRpb24gPSBqIC0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAobm9kZS50eXBlID09PSAncGVuYWx0eScgfHwgbm9kZS50eXBlID09PSAnZ2x1ZScpIHtcbiAgICAgIHZhciByYXRpbyA9IGNhbGN1bGF0ZVJhdGlvKG5vZGUpO1xuICAgICAgdmFyIHBlbmFsdHkgPSBub2RlLnR5cGUgPT09ICdwZW5hbHR5JyA/IG5vZGUucGVuYWx0eSA6IDA7XG4gICAgICB2YXIgYmFkbmVzcyA9IDEwMCAqIE1hdGgucG93KE1hdGguYWJzKHJhdGlvKSwgMykgKyBwZW5hbHR5O1xuICAgICAgaWYgKG1pbmltdW1CYWRuZXNzID49IGJhZG5lc3MpIHtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBtaW5pbXVtQmFkbmVzcyA9IGJhZG5lc3M7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBzdW0ud2lkdGggLSBzdW0uc2hyaW5rID4gbGluZUxlbmd0aCA/IHBvc2l0aW9uIDogbnVsbDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3RbXX0gbm9kZXNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHdpZHRoc1xuICovXG52YXIgYXBwbHlCZXN0Rml0ID0gZnVuY3Rpb24gYXBwbHlCZXN0Rml0KG5vZGVzLCB3aWR0aHMpIHtcbiAgdmFyIGNvdW50ID0gMDtcbiAgdmFyIGxpbmVOdW1iZXIgPSAwO1xuICB2YXIgc3Vibm9kZXMgPSBub2RlcztcbiAgdmFyIGJyZWFrcG9pbnRzID0gW3tcbiAgICBwb3NpdGlvbjogMFxuICB9XTtcbiAgd2hpbGUgKHN1Ym5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgYnJlYWtwb2ludCA9IGdldE5leHRCcmVha3BvaW50KHN1Ym5vZGVzLCB3aWR0aHMsIGxpbmVOdW1iZXIpO1xuICAgIGlmIChicmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICBjb3VudCArPSBicmVha3BvaW50O1xuICAgICAgYnJlYWtwb2ludHMucHVzaCh7XG4gICAgICAgIHBvc2l0aW9uOiBjb3VudFxuICAgICAgfSk7XG4gICAgICBzdWJub2RlcyA9IHN1Ym5vZGVzLnNsaWNlKGJyZWFrcG9pbnQgKyAxLCBzdWJub2Rlcy5sZW5ndGgpO1xuICAgICAgY291bnQrKztcbiAgICAgIGxpbmVOdW1iZXIrKztcbiAgICB9IGVsc2Uge1xuICAgICAgc3Vibm9kZXMgPSBbXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJyZWFrcG9pbnRzO1xufTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbi8qIGVzbGludC1kaXNhYmxlIG1heC1jbGFzc2VzLXBlci1maWxlICovXG52YXIgTm9kZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE5vZGUoZGF0YSkge1xuICAgIHRoaXMucHJldiA9IG51bGw7XG4gICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICB9XG4gIHZhciBfcHJvdG8gPSBOb2RlLnByb3RvdHlwZTtcbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YS50b1N0cmluZygpO1xuICB9O1xuICByZXR1cm4gTm9kZTtcbn0oKTtcbnZhciBMaW5rZWRMaXN0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGlua2VkTGlzdCgpIHtcbiAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5saXN0U2l6ZSA9IDA7XG4gICAgdGhpcy5saXN0TGVuZ3RoID0gMDtcbiAgfVxuICB2YXIgX3Byb3RvMiA9IExpbmtlZExpc3QucHJvdG90eXBlO1xuICBfcHJvdG8yLmlzTGlua2VkID0gZnVuY3Rpb24gaXNMaW5rZWQobm9kZSkge1xuICAgIHJldHVybiAhKG5vZGUgJiYgbm9kZS5wcmV2ID09PSBudWxsICYmIG5vZGUubmV4dCA9PT0gbnVsbCAmJiB0aGlzLnRhaWwgIT09IG5vZGUgJiYgdGhpcy5oZWFkICE9PSBub2RlIHx8IHRoaXMuaXNFbXB0eSgpKTtcbiAgfTtcbiAgX3Byb3RvMi5zaXplID0gZnVuY3Rpb24gc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5saXN0U2l6ZTtcbiAgfTtcbiAgX3Byb3RvMi5pc0VtcHR5ID0gZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5saXN0U2l6ZSA9PT0gMDtcbiAgfTtcbiAgX3Byb3RvMi5maXJzdCA9IGZ1bmN0aW9uIGZpcnN0KCkge1xuICAgIHJldHVybiB0aGlzLmhlYWQ7XG4gIH07XG4gIF9wcm90bzIubGFzdCA9IGZ1bmN0aW9uIGxhc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMubGFzdDtcbiAgfTtcbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXkoKS50b1N0cmluZygpO1xuICB9O1xuICBfcHJvdG8yLnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgIHZhciBub2RlID0gdGhpcy5oZWFkO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0LnB1c2gobm9kZSk7XG4gICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBfcHJvdG8yLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZ1bikge1xuICAgIHZhciBub2RlID0gdGhpcy5oZWFkO1xuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBmdW4obm9kZSk7XG4gICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgIH1cbiAgfTtcbiAgX3Byb3RvMi5jb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKG4pIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuaGVhZDtcbiAgICBpZiAoIXRoaXMuaXNMaW5rZWQobikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIGlmIChub2RlID09PSBuKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuICBfcHJvdG8yLmF0ID0gZnVuY3Rpb24gYXQoaSkge1xuICAgIHZhciBub2RlID0gdGhpcy5oZWFkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGkgPj0gdGhpcy5saXN0TGVuZ3RoIHx8IGkgPCAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIGlmIChpID09PSBpbmRleCkge1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgICBpbmRleCArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbiAgX3Byb3RvMi5pbnNlcnRBZnRlciA9IGZ1bmN0aW9uIGluc2VydEFmdGVyKG5vZGUsIG5ld05vZGUpIHtcbiAgICBpZiAoIXRoaXMuaXNMaW5rZWQobm9kZSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBuZXdOb2RlLnByZXYgPSBub2RlO1xuICAgIG5ld05vZGUubmV4dCA9IG5vZGUubmV4dDtcbiAgICBpZiAobm9kZS5uZXh0ID09PSBudWxsKSB7XG4gICAgICB0aGlzLnRhaWwgPSBuZXdOb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLm5leHQucHJldiA9IG5ld05vZGU7XG4gICAgfVxuICAgIG5vZGUubmV4dCA9IG5ld05vZGU7XG4gICAgdGhpcy5saXN0U2l6ZSArPSAxO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBfcHJvdG8yLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIGluc2VydEJlZm9yZShub2RlLCBuZXdOb2RlKSB7XG4gICAgaWYgKCF0aGlzLmlzTGlua2VkKG5vZGUpKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgbmV3Tm9kZS5wcmV2ID0gbm9kZS5wcmV2O1xuICAgIG5ld05vZGUubmV4dCA9IG5vZGU7XG4gICAgaWYgKG5vZGUucHJldiA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5oZWFkID0gbmV3Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5wcmV2Lm5leHQgPSBuZXdOb2RlO1xuICAgIH1cbiAgICBub2RlLnByZXYgPSBuZXdOb2RlO1xuICAgIHRoaXMubGlzdFNpemUgKz0gMTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgX3Byb3RvMi5wdXNoID0gZnVuY3Rpb24gcHVzaChub2RlKSB7XG4gICAgaWYgKHRoaXMuaGVhZCA9PT0gbnVsbCkge1xuICAgICAgdGhpcy51bnNoaWZ0KG5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmluc2VydEFmdGVyKHRoaXMudGFpbCwgbm9kZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBfcHJvdG8yLnVuc2hpZnQgPSBmdW5jdGlvbiB1bnNoaWZ0KG5vZGUpIHtcbiAgICBpZiAodGhpcy5oZWFkID09PSBudWxsKSB7XG4gICAgICB0aGlzLmhlYWQgPSBub2RlO1xuICAgICAgdGhpcy50YWlsID0gbm9kZTtcbiAgICAgIG5vZGUucHJldiA9IG51bGw7XG4gICAgICBub2RlLm5leHQgPSBudWxsO1xuICAgICAgdGhpcy5saXN0U2l6ZSArPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmluc2VydEJlZm9yZSh0aGlzLmhlYWQsIG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgX3Byb3RvMi5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUobm9kZSkge1xuICAgIGlmICghdGhpcy5pc0xpbmtlZChub2RlKSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmIChub2RlLnByZXYgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuaGVhZCA9IG5vZGUubmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5wcmV2Lm5leHQgPSBub2RlLm5leHQ7XG4gICAgfVxuICAgIGlmIChub2RlLm5leHQgPT09IG51bGwpIHtcbiAgICAgIHRoaXMudGFpbCA9IG5vZGUucHJldjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5uZXh0LnByZXYgPSBub2RlLnByZXY7XG4gICAgfVxuICAgIHRoaXMubGlzdFNpemUgLT0gMTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgX3Byb3RvMi5wb3AgPSBmdW5jdGlvbiBwb3AoKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnRhaWw7XG4gICAgdGhpcy50YWlsLnByZXYubmV4dCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gdGhpcy50YWlsLnByZXY7XG4gICAgdGhpcy5saXN0U2l6ZSAtPSAxO1xuICAgIG5vZGUucHJldiA9IG51bGw7XG4gICAgbm9kZS5uZXh0ID0gbnVsbDtcbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcbiAgX3Byb3RvMi5zaGlmdCA9IGZ1bmN0aW9uIHNoaWZ0KCkge1xuICAgIHZhciBub2RlID0gdGhpcy5oZWFkO1xuICAgIHRoaXMuaGVhZC5uZXh0LnByZXYgPSBudWxsO1xuICAgIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIHRoaXMubGlzdFNpemUgLT0gMTtcbiAgICBub2RlLnByZXYgPSBudWxsO1xuICAgIG5vZGUubmV4dCA9IG51bGw7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG4gIHJldHVybiBMaW5rZWRMaXN0O1xufSgpO1xuTGlua2VkTGlzdC5Ob2RlID0gTm9kZTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzICovXG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3RbXX0gbm9kZXNcbiAqIEBwYXJhbSB7bnVtYmVyW119IGxpbmVzXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ3NcbiAqIEBwcmVzZXJ2ZSBLbnV0aCBhbmQgUGxhc3MgbGluZSBicmVha2luZyBhbGdvcml0aG0gaW4gSmF2YVNjcmlwdFxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBuZXcgQlNEIExpY2Vuc2UuXG4gKiBDb3B5cmlnaHQgMjAwOS0yMDEwLCBCcmFtIFN0ZWluXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICovXG52YXIgbGluZWJyZWFrID0gZnVuY3Rpb24gbGluZWJyZWFrKG5vZGVzLCBsaW5lcywgc2V0dGluZ3MpIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgZGVtZXJpdHM6IHtcbiAgICAgIGxpbmU6IHNldHRpbmdzICYmIHNldHRpbmdzLmRlbWVyaXRzICYmIHNldHRpbmdzLmRlbWVyaXRzLmxpbmUgfHwgMTAsXG4gICAgICBmbGFnZ2VkOiBzZXR0aW5ncyAmJiBzZXR0aW5ncy5kZW1lcml0cyAmJiBzZXR0aW5ncy5kZW1lcml0cy5mbGFnZ2VkIHx8IDEwMCxcbiAgICAgIGZpdG5lc3M6IHNldHRpbmdzICYmIHNldHRpbmdzLmRlbWVyaXRzICYmIHNldHRpbmdzLmRlbWVyaXRzLmZpdG5lc3MgfHwgMzAwMFxuICAgIH0sXG4gICAgdG9sZXJhbmNlOiBzZXR0aW5ncyAmJiBzZXR0aW5ncy50b2xlcmFuY2UgfHwgM1xuICB9O1xuICB2YXIgYWN0aXZlTm9kZXMgPSBuZXcgTGlua2VkTGlzdCgpO1xuICB2YXIgc3VtID0ge1xuICAgIHdpZHRoOiAwLFxuICAgIHN0cmV0Y2g6IDAsXG4gICAgc2hyaW5rOiAwXG4gIH07XG4gIHZhciBsaW5lTGVuZ3RocyA9IGxpbmVzO1xuICB2YXIgYnJlYWtzID0gW107XG4gIHZhciB0bXAgPSB7XG4gICAgZGF0YToge1xuICAgICAgZGVtZXJpdHM6IEluZmluaXR5XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBicmVha3BvaW50KHBvc2l0aW9uLCBkZW1lcml0cywgcmF0aW8sIGxpbmUsIGZpdG5lc3NDbGFzcywgdG90YWxzLCBwcmV2aW91cykge1xuICAgIHJldHVybiB7XG4gICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICBkZW1lcml0czogZGVtZXJpdHMsXG4gICAgICByYXRpbzogcmF0aW8sXG4gICAgICBsaW5lOiBsaW5lLFxuICAgICAgZml0bmVzc0NsYXNzOiBmaXRuZXNzQ2xhc3MsXG4gICAgICB0b3RhbHM6IHRvdGFscyB8fCB7XG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBzdHJldGNoOiAwLFxuICAgICAgICBzaHJpbms6IDBcbiAgICAgIH0sXG4gICAgICBwcmV2aW91czogcHJldmlvdXNcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGNvbXB1dGVDb3N0KHN0YXJ0LCBlbmQsIGFjdGl2ZSwgY3VycmVudExpbmUpIHtcbiAgICB2YXIgd2lkdGggPSBzdW0ud2lkdGggLSBhY3RpdmUudG90YWxzLndpZHRoO1xuICAgIHZhciBzdHJldGNoID0gMDtcbiAgICB2YXIgc2hyaW5rID0gMDtcbiAgICAvLyBJZiB0aGUgY3VycmVudCBsaW5lIGluZGV4IGlzIHdpdGhpbiB0aGUgbGlzdCBvZiBsaW5lbGVuZ3RocywgdXNlIGl0LCBvdGhlcndpc2UgdXNlXG4gICAgLy8gdGhlIGxhc3QgbGluZSBsZW5ndGggb2YgdGhlIGxpc3QuXG4gICAgdmFyIGxpbmVMZW5ndGggPSBjdXJyZW50TGluZSA8IGxpbmVMZW5ndGhzLmxlbmd0aCA/IGxpbmVMZW5ndGhzW2N1cnJlbnRMaW5lIC0gMV0gOiBsaW5lTGVuZ3Roc1tsaW5lTGVuZ3Rocy5sZW5ndGggLSAxXTtcbiAgICBpZiAobm9kZXNbZW5kXS50eXBlID09PSAncGVuYWx0eScpIHtcbiAgICAgIHdpZHRoICs9IG5vZGVzW2VuZF0ud2lkdGg7XG4gICAgfVxuICAgIGlmICh3aWR0aCA8IGxpbmVMZW5ndGgpIHtcbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgc3RyZXRjaCByYXRpb1xuICAgICAgc3RyZXRjaCA9IHN1bS5zdHJldGNoIC0gYWN0aXZlLnRvdGFscy5zdHJldGNoO1xuICAgICAgaWYgKHN0cmV0Y2ggPiAwKSB7XG4gICAgICAgIHJldHVybiAobGluZUxlbmd0aCAtIHdpZHRoKSAvIHN0cmV0Y2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGluZWJyZWFrLmluZmluaXR5O1xuICAgIH1cbiAgICBpZiAod2lkdGggPiBsaW5lTGVuZ3RoKSB7XG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIHNocmluayByYXRpb1xuICAgICAgc2hyaW5rID0gc3VtLnNocmluayAtIGFjdGl2ZS50b3RhbHMuc2hyaW5rO1xuICAgICAgaWYgKHNocmluayA+IDApIHtcbiAgICAgICAgcmV0dXJuIChsaW5lTGVuZ3RoIC0gd2lkdGgpIC8gc2hyaW5rO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxpbmVicmVhay5pbmZpbml0eTtcbiAgICB9XG5cbiAgICAvLyBwZXJmZWN0IG1hdGNoXG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvLyBBZGQgd2lkdGgsIHN0cmV0Y2ggYW5kIHNocmluayB2YWx1ZXMgZnJvbSB0aGUgY3VycmVudFxuICAvLyBicmVhayBwb2ludCB1cCB0byB0aGUgbmV4dCBib3ggb3IgZm9yY2VkIHBlbmFsdHkuXG4gIGZ1bmN0aW9uIGNvbXB1dGVTdW0oYnJlYWtQb2ludEluZGV4KSB7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIHdpZHRoOiBzdW0ud2lkdGgsXG4gICAgICBzdHJldGNoOiBzdW0uc3RyZXRjaCxcbiAgICAgIHNocmluazogc3VtLnNocmlua1xuICAgIH07XG4gICAgZm9yICh2YXIgaSA9IGJyZWFrUG9pbnRJbmRleDsgaSA8IG5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAobm9kZXNbaV0udHlwZSA9PT0gJ2dsdWUnKSB7XG4gICAgICAgIHJlc3VsdC53aWR0aCArPSBub2Rlc1tpXS53aWR0aDtcbiAgICAgICAgcmVzdWx0LnN0cmV0Y2ggKz0gbm9kZXNbaV0uc3RyZXRjaDtcbiAgICAgICAgcmVzdWx0LnNocmluayArPSBub2Rlc1tpXS5zaHJpbms7XG4gICAgICB9IGVsc2UgaWYgKG5vZGVzW2ldLnR5cGUgPT09ICdib3gnIHx8IG5vZGVzW2ldLnR5cGUgPT09ICdwZW5hbHR5JyAmJiBub2Rlc1tpXS5wZW5hbHR5ID09PSAtbGluZWJyZWFrLmluZmluaXR5ICYmIGkgPiBicmVha1BvaW50SW5kZXgpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBUaGUgbWFpbiBsb29wIG9mIHRoZSBhbGdvcml0aG1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuICBmdW5jdGlvbiBtYWluTG9vcChub2RlLCBpbmRleCwgbm9kZXMpIHtcbiAgICB2YXIgYWN0aXZlID0gYWN0aXZlTm9kZXMuZmlyc3QoKTtcbiAgICB2YXIgbmV4dCA9IG51bGw7XG4gICAgdmFyIHJhdGlvID0gMDtcbiAgICB2YXIgZGVtZXJpdHMgPSAwO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtPYmplY3RbXX1cbiAgICAgKi9cbiAgICB2YXIgY2FuZGlkYXRlcyA9IFtdO1xuICAgIHZhciBiYWRuZXNzO1xuICAgIHZhciBjdXJyZW50TGluZSA9IDA7XG4gICAgdmFyIHRtcFN1bTtcbiAgICB2YXIgY3VycmVudENsYXNzID0gMDtcbiAgICB2YXIgZml0bmVzc0NsYXNzO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdmFyIGNhbmRpZGF0ZTtcbiAgICB2YXIgbmV3Tm9kZTtcblxuICAgIC8vIFRoZSBpbm5lciBsb29wIGl0ZXJhdGVzIHRocm91Z2ggYWxsIHRoZSBhY3RpdmUgbm9kZXMgd2l0aCBsaW5lIDwgY3VycmVudExpbmUgYW5kIHRoZW5cbiAgICAvLyBicmVha3Mgb3V0IHRvIGluc2VydCB0aGUgbmV3IGFjdGl2ZSBub2RlIGNhbmRpZGF0ZXMgYmVmb3JlIGxvb2tpbmcgYXQgdGhlIG5leHQgYWN0aXZlXG4gICAgLy8gbm9kZXMgZm9yIHRoZSBuZXh0IGxpbmVzLiBUaGUgcmVzdWx0IG9mIHRoaXMgaXMgdGhhdCB0aGUgYWN0aXZlIG5vZGUgbGlzdCBpcyBhbHdheXNcbiAgICAvLyBzb3J0ZWQgYnkgbGluZSBudW1iZXIuXG4gICAgd2hpbGUgKGFjdGl2ZSAhPT0gbnVsbCkge1xuICAgICAgY2FuZGlkYXRlcyA9IFt7XG4gICAgICAgIGRlbWVyaXRzOiBJbmZpbml0eVxuICAgICAgfSwge1xuICAgICAgICBkZW1lcml0czogSW5maW5pdHlcbiAgICAgIH0sIHtcbiAgICAgICAgZGVtZXJpdHM6IEluZmluaXR5XG4gICAgICB9LCB7XG4gICAgICAgIGRlbWVyaXRzOiBJbmZpbml0eVxuICAgICAgfV07XG5cbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCB0aGUgbGlua2VkIGxpc3Qgb2YgYWN0aXZlIG5vZGVzIHRvIGZpbmQgbmV3IHBvdGVudGlhbCBhY3RpdmUgbm9kZXNcbiAgICAgIC8vIGFuZCBkZWFjdGl2YXRlIGN1cnJlbnQgYWN0aXZlIG5vZGVzLlxuICAgICAgd2hpbGUgKGFjdGl2ZSAhPT0gbnVsbCkge1xuICAgICAgICBuZXh0ID0gYWN0aXZlLm5leHQ7XG4gICAgICAgIGN1cnJlbnRMaW5lID0gYWN0aXZlLmRhdGEubGluZSArIDE7XG4gICAgICAgIHJhdGlvID0gY29tcHV0ZUNvc3QoYWN0aXZlLmRhdGEucG9zaXRpb24sIGluZGV4LCBhY3RpdmUuZGF0YSwgY3VycmVudExpbmUpO1xuXG4gICAgICAgIC8vIERlYWN0aXZlIG5vZGVzIHdoZW4gdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIGN1cnJlbnQgYWN0aXZlIG5vZGUgYW5kIHRoZVxuICAgICAgICAvLyBjdXJyZW50IG5vZGUgYmVjb21lcyB0b28gbGFyZ2UgKGkuZS4gaXQgZXhjZWVkcyB0aGUgc3RyZXRjaCBsaW1pdCBhbmQgdGhlIHN0cmV0Y2hcbiAgICAgICAgLy8gcmF0aW8gYmVjb21lcyBuZWdhdGl2ZSkgb3Igd2hlbiB0aGUgY3VycmVudCBub2RlIGlzIGEgZm9yY2VkIGJyZWFrIChpLmUuIHRoZSBlbmRcbiAgICAgICAgLy8gb2YgdGhlIHBhcmFncmFwaCB3aGVuIHdlIHdhbnQgdG8gcmVtb3ZlIGFsbCBhY3RpdmUgbm9kZXMsIGJ1dCBwb3NzaWJseSBoYXZlIGEgZmluYWxcbiAgICAgICAgLy8gY2FuZGlkYXRlIGFjdGl2ZSBub2RlLS0taWYgdGhlIHBhcmFncmFwaCBjYW4gYmUgc2V0IHVzaW5nIHRoZSBnaXZlbiB0b2xlcmFuY2UgdmFsdWUuKVxuICAgICAgICBpZiAocmF0aW8gPCAtMSB8fCBub2RlLnR5cGUgPT09ICdwZW5hbHR5JyAmJiBub2RlLnBlbmFsdHkgPT09IC1saW5lYnJlYWsuaW5maW5pdHkpIHtcbiAgICAgICAgICBhY3RpdmVOb2Rlcy5yZW1vdmUoYWN0aXZlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoZSByYXRpbyBpcyB3aXRoaW4gdGhlIHZhbGlkIHJhbmdlIG9mIC0xIDw9IHJhdGlvIDw9IHRvbGVyYW5jZSBjYWxjdWxhdGUgdGhlXG4gICAgICAgIC8vIHRvdGFsIGRlbWVyaXRzIGFuZCByZWNvcmQgYSBjYW5kaWRhdGUgYWN0aXZlIG5vZGUuXG4gICAgICAgIGlmIChyYXRpbyA+PSAtMSAmJiByYXRpbyA8PSBvcHRpb25zLnRvbGVyYW5jZSkge1xuICAgICAgICAgIGJhZG5lc3MgPSAxMDAgKiBNYXRoLnBvdyhNYXRoLmFicyhyYXRpbyksIDMpO1xuXG4gICAgICAgICAgLy8gUG9zaXRpdmUgcGVuYWx0eVxuICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdwZW5hbHR5JyAmJiBub2RlLnBlbmFsdHkgPj0gMCkge1xuICAgICAgICAgICAgZGVtZXJpdHMgPSBNYXRoLnBvdyhvcHRpb25zLmRlbWVyaXRzLmxpbmUgKyBiYWRuZXNzLCAyKSArIE1hdGgucG93KG5vZGUucGVuYWx0eSwgMik7XG4gICAgICAgICAgICAvLyBOZWdhdGl2ZSBwZW5hbHR5IGJ1dCBub3QgYSBmb3JjZWQgYnJlYWtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gJ3BlbmFsdHknICYmIG5vZGUucGVuYWx0eSAhPT0gLWxpbmVicmVhay5pbmZpbml0eSkge1xuICAgICAgICAgICAgZGVtZXJpdHMgPSBNYXRoLnBvdyhvcHRpb25zLmRlbWVyaXRzLmxpbmUgKyBiYWRuZXNzLCAyKSAtIE1hdGgucG93KG5vZGUucGVuYWx0eSwgMik7XG4gICAgICAgICAgICAvLyBBbGwgb3RoZXIgY2FzZXNcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVtZXJpdHMgPSBNYXRoLnBvdyhvcHRpb25zLmRlbWVyaXRzLmxpbmUgKyBiYWRuZXNzLCAyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ3BlbmFsdHknICYmIG5vZGVzW2FjdGl2ZS5kYXRhLnBvc2l0aW9uXS50eXBlID09PSAncGVuYWx0eScpIHtcbiAgICAgICAgICAgIGRlbWVyaXRzICs9IG9wdGlvbnMuZGVtZXJpdHMuZmxhZ2dlZCAqIG5vZGUuZmxhZ2dlZCAqIG5vZGVzW2FjdGl2ZS5kYXRhLnBvc2l0aW9uXS5mbGFnZ2VkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZml0bmVzcyBjbGFzcyBmb3IgdGhpcyBjYW5kaWRhdGUgYWN0aXZlIG5vZGUuXG4gICAgICAgICAgaWYgKHJhdGlvIDwgLTAuNSkge1xuICAgICAgICAgICAgY3VycmVudENsYXNzID0gMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJhdGlvIDw9IDAuNSkge1xuICAgICAgICAgICAgY3VycmVudENsYXNzID0gMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJhdGlvIDw9IDEpIHtcbiAgICAgICAgICAgIGN1cnJlbnRDbGFzcyA9IDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnRDbGFzcyA9IDM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQWRkIGEgZml0bmVzcyBwZW5hbHR5IHRvIHRoZSBkZW1lcml0cyBpZiB0aGUgZml0bmVzcyBjbGFzc2VzIG9mIHR3byBhZGphY2VudCBsaW5lc1xuICAgICAgICAgIC8vIGRpZmZlciB0b28gbXVjaC5cbiAgICAgICAgICBpZiAoTWF0aC5hYnMoY3VycmVudENsYXNzIC0gYWN0aXZlLmRhdGEuZml0bmVzc0NsYXNzKSA+IDEpIHtcbiAgICAgICAgICAgIGRlbWVyaXRzICs9IG9wdGlvbnMuZGVtZXJpdHMuZml0bmVzcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBBZGQgdGhlIHRvdGFsIGRlbWVyaXRzIG9mIHRoZSBhY3RpdmUgbm9kZSB0byBnZXQgdGhlIHRvdGFsIGRlbWVyaXRzIG9mIHRoaXMgY2FuZGlkYXRlIG5vZGUuXG4gICAgICAgICAgZGVtZXJpdHMgKz0gYWN0aXZlLmRhdGEuZGVtZXJpdHM7XG5cbiAgICAgICAgICAvLyBPbmx5IHN0b3JlIHRoZSBiZXN0IGNhbmRpZGF0ZSBmb3IgZWFjaCBmaXRuZXNzIGNsYXNzXG4gICAgICAgICAgaWYgKGRlbWVyaXRzIDwgY2FuZGlkYXRlc1tjdXJyZW50Q2xhc3NdLmRlbWVyaXRzKSB7XG4gICAgICAgICAgICBjYW5kaWRhdGVzW2N1cnJlbnRDbGFzc10gPSB7XG4gICAgICAgICAgICAgIGFjdGl2ZTogYWN0aXZlLFxuICAgICAgICAgICAgICBkZW1lcml0czogZGVtZXJpdHMsXG4gICAgICAgICAgICAgIHJhdGlvOiByYXRpb1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYWN0aXZlID0gbmV4dDtcblxuICAgICAgICAvLyBTdG9wIGl0ZXJhdGluZyB0aHJvdWdoIGFjdGl2ZSBub2RlcyB0byBpbnNlcnQgbmV3IGNhbmRpZGF0ZSBhY3RpdmUgbm9kZXMgaW4gdGhlIGFjdGl2ZSBsaXN0XG4gICAgICAgIC8vIGJlZm9yZSBtb3Zpbmcgb24gdG8gdGhlIGFjdGl2ZSBub2RlcyBmb3IgdGhlIG5leHQgbGluZS5cbiAgICAgICAgLy8gVE9ETzogVGhlIEtudXRoIGFuZCBQbGFzcyBwYXBlciBzdWdnZXN0cyBhIGNvbmRpdGlvbmFsIGZvciBjdXJyZW50TGluZSA8IGowLiBUaGlzIG1lYW5zIHBhcmFncmFwaHNcbiAgICAgICAgLy8gd2l0aCBpZGVudGljYWwgbGluZSBsZW5ndGhzIHdpbGwgbm90IGJlIHNvcnRlZCBieSBsaW5lIG51bWJlci4gRmluZCBvdXQgaWYgdGhhdCBpcyBhIGRlc2lyYWJsZSBvdXRjb21lLlxuICAgICAgICAvLyBGb3Igbm93IEkgbGVmdCB0aGlzIG91dCwgYXMgaXQgb25seSBhZGRzIG1pbmltYWwgb3ZlcmhlYWQgdG8gdGhlIGFsZ29yaXRobSBhbmQga2VlcGluZyB0aGUgYWN0aXZlIG5vZGVcbiAgICAgICAgLy8gbGlzdCBzb3J0ZWQgaGFzIGEgaGlnaGVyIHByaW9yaXR5LlxuICAgICAgICBpZiAoYWN0aXZlICE9PSBudWxsICYmIGFjdGl2ZS5kYXRhLmxpbmUgPj0gY3VycmVudExpbmUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdG1wU3VtID0gY29tcHV0ZVN1bShpbmRleCk7XG4gICAgICBmb3IgKGZpdG5lc3NDbGFzcyA9IDA7IGZpdG5lc3NDbGFzcyA8IGNhbmRpZGF0ZXMubGVuZ3RoOyBmaXRuZXNzQ2xhc3MgKz0gMSkge1xuICAgICAgICBjYW5kaWRhdGUgPSBjYW5kaWRhdGVzW2ZpdG5lc3NDbGFzc107XG4gICAgICAgIGlmIChjYW5kaWRhdGUuZGVtZXJpdHMgPCBJbmZpbml0eSkge1xuICAgICAgICAgIG5ld05vZGUgPSBuZXcgTGlua2VkTGlzdC5Ob2RlKGJyZWFrcG9pbnQoaW5kZXgsIGNhbmRpZGF0ZS5kZW1lcml0cywgY2FuZGlkYXRlLnJhdGlvLCBjYW5kaWRhdGUuYWN0aXZlLmRhdGEubGluZSArIDEsIGZpdG5lc3NDbGFzcywgdG1wU3VtLCBjYW5kaWRhdGUuYWN0aXZlKSk7XG4gICAgICAgICAgaWYgKGFjdGl2ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgYWN0aXZlTm9kZXMuaW5zZXJ0QmVmb3JlKGFjdGl2ZSwgbmV3Tm9kZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjdGl2ZU5vZGVzLnB1c2gobmV3Tm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGFuIGFjdGl2ZSBub2RlIGZvciB0aGUgc3RhcnQgb2YgdGhlIHBhcmFncmFwaC5cbiAgYWN0aXZlTm9kZXMucHVzaChuZXcgTGlua2VkTGlzdC5Ob2RlKGJyZWFrcG9pbnQoMCwgMCwgMCwgMCwgMCwgdW5kZWZpbmVkLCBudWxsKSkpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSwgaW5kZXgsIG5vZGVzKSB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ2JveCcpIHtcbiAgICAgIHN1bS53aWR0aCArPSBub2RlLndpZHRoO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAnZ2x1ZScpIHtcbiAgICAgIGlmIChpbmRleCA+IDAgJiYgbm9kZXNbaW5kZXggLSAxXS50eXBlID09PSAnYm94Jykge1xuICAgICAgICBtYWluTG9vcChub2RlLCBpbmRleCwgbm9kZXMpO1xuICAgICAgfVxuICAgICAgc3VtLndpZHRoICs9IG5vZGUud2lkdGg7XG4gICAgICBzdW0uc3RyZXRjaCArPSBub2RlLnN0cmV0Y2g7XG4gICAgICBzdW0uc2hyaW5rICs9IG5vZGUuc2hyaW5rO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAncGVuYWx0eScgJiYgbm9kZS5wZW5hbHR5ICE9PSBsaW5lYnJlYWsuaW5maW5pdHkpIHtcbiAgICAgIG1haW5Mb29wKG5vZGUsIGluZGV4LCBub2Rlcyk7XG4gICAgfVxuICB9KTtcbiAgaWYgKGFjdGl2ZU5vZGVzLnNpemUoKSAhPT0gMCkge1xuICAgIC8vIEZpbmQgdGhlIGJlc3QgYWN0aXZlIG5vZGUgKHRoZSBvbmUgd2l0aCB0aGUgbGVhc3QgdG90YWwgZGVtZXJpdHMuKVxuICAgIGFjdGl2ZU5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmRhdGEuZGVtZXJpdHMgPCB0bXAuZGF0YS5kZW1lcml0cykge1xuICAgICAgICB0bXAgPSBub2RlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHdoaWxlICh0bXAgIT09IG51bGwpIHtcbiAgICAgIGJyZWFrcy5wdXNoKHtcbiAgICAgICAgcG9zaXRpb246IHRtcC5kYXRhLnBvc2l0aW9uLFxuICAgICAgICByYXRpbzogdG1wLmRhdGEucmF0aW9cbiAgICAgIH0pO1xuICAgICAgdG1wID0gdG1wLmRhdGEucHJldmlvdXM7XG4gICAgfVxuICAgIHJldHVybiBicmVha3MucmV2ZXJzZSgpO1xuICB9XG4gIHJldHVybiBbXTtcbn07XG5saW5lYnJlYWsuaW5maW5pdHkgPSAxMDAwMDtcbmxpbmVicmVhay5nbHVlID0gZnVuY3Rpb24gKHdpZHRoLCB2YWx1ZSwgc3RyZXRjaCwgc2hyaW5rKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ2dsdWUnLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgc3RyZXRjaDogc3RyZXRjaCxcbiAgICBzaHJpbms6IHNocmlua1xuICB9O1xufTtcbmxpbmVicmVhay5ib3ggPSBmdW5jdGlvbiAod2lkdGgsIHZhbHVlLCBoeXBoZW5hdGVkKSB7XG4gIGlmIChoeXBoZW5hdGVkID09PSB2b2lkIDApIHtcbiAgICBoeXBoZW5hdGVkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnYm94JyxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGh5cGhlbmF0ZWQ6IGh5cGhlbmF0ZWRcbiAgfTtcbn07XG5saW5lYnJlYWsucGVuYWx0eSA9IGZ1bmN0aW9uICh3aWR0aCwgcGVuYWx0eSwgZmxhZ2dlZCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdwZW5hbHR5JyxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgcGVuYWx0eTogcGVuYWx0eSxcbiAgICBmbGFnZ2VkOiBmbGFnZ2VkXG4gIH07XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIEFkZCBzY2FsYXIgdG8gcnVuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG4gc2NhbGFyXG4gKiBAcGFyYW0ge1J1bn0gcnVuIHJ1blxuICogQHJldHVybnMge1J1bn0gYWRkZWQgcnVuXG4gKi9cbnZhciBhZGQgPSBmdW5jdGlvbiBhZGQobiwgcnVuKSB7XG4gIHZhciBzdGFydCA9IHJ1bi5zdGFydCArIG47XG4gIHZhciBlbmQgPSBydW4uZW5kICsgbjtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJ1biwge1xuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBlbmQ6IGVuZFxuICB9KTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vdHlwZXMuanMnKS5SdW59IFJ1blxuICovXG5cbi8qKlxuICogR2V0IHJ1biBsZW5ndGhcbiAqXG4gKiBAcGFyYW0ge1J1bn0gcnVuIHJ1blxuICogQHJldHVybnMge251bWJlcn0gbGVuZ3RoXG4gKi9cbnZhciBsZW5ndGggPSBmdW5jdGlvbiBsZW5ndGgocnVuKSB7XG4gIHJldHVybiBydW4uZW5kIC0gcnVuLnN0YXJ0O1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlJ1bn0gUnVuXG4gKi9cblxuLyoqXG4gKiBDb25jYXRzIHR3byBydW5zIGludG8gb25lXG4gKlxuICogQHBhcmFtIHtSdW59IHJ1bkEgZmlyc3QgcnVuXG4gKiBAcGFyYW0ge1J1bn0gcnVuQiBzZWNvbmQgcnVuXG4gKiBAcmV0dXJucyB7UnVufSBjb25jYXRlbmF0ZWQgcnVuXG4gKi9cbnZhciBjb25jYXQgPSBmdW5jdGlvbiBjb25jYXQocnVuQSwgcnVuQikge1xuICB2YXIgZW5kID0gcnVuQS5lbmQgKyBsZW5ndGgocnVuQik7XG4gIHZhciBnbHlwaHMgPSAocnVuQS5nbHlwaHMgfHwgW10pLmNvbmNhdChydW5CLmdseXBocyB8fCBbXSk7XG4gIHZhciBwb3NpdGlvbnMgPSAocnVuQS5wb3NpdGlvbnMgfHwgW10pLmNvbmNhdChydW5CLnBvc2l0aW9ucyB8fCBbXSk7XG4gIHZhciBhdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgcnVuQS5hdHRyaWJ1dGVzLCBydW5CLmF0dHJpYnV0ZXMpO1xuICB2YXIgcnVuQUluZGljZXMgPSBydW5BLmdseXBoSW5kaWNlcyB8fCBbXTtcbiAgdmFyIHJ1bkFMYXN0SW5kZXggPSBsYXN0KHJ1bkFJbmRpY2VzKSB8fCAwO1xuICB2YXIgcnVuQkluZGljZXMgPSAocnVuQi5nbHlwaEluZGljZXMgfHwgW10pLm1hcChmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpICsgcnVuQUxhc3RJbmRleCArIDE7XG4gIH0pO1xuICB2YXIgZ2x5cGhJbmRpY2VzID0gbm9ybWFsaXplKHJ1bkFJbmRpY2VzLmNvbmNhdChydW5CSW5kaWNlcykpO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcnVuQSwge1xuICAgIGVuZDogZW5kLFxuICAgIGdseXBoczogZ2x5cGhzLFxuICAgIHBvc2l0aW9uczogcG9zaXRpb25zLFxuICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgZ2x5cGhJbmRpY2VzOiBnbHlwaEluZGljZXNcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuR2x5cGh9IEdseXBoXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLlJ1bn0gUnVuXG4gKi9cblxuLyoqXG4gKiBJbnNlcnQgZ2x5cGggdG8gcnVuIGluIHRoZSBnaXZlbiBpbmRleFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBpbmRleFxuICogQHBhcmFtIHtHbHlwaH0gZ2x5cGggZ2x5cGhcbiAqIEBwYXJhbSB7UnVufSBydW4gcnVuXG4gKiBAcmV0dXJucyB7UnVufSBydW4gd2l0aCBnbHlwaFxuICovXG52YXIgaW5zZXJ0R2x5cGgkMSA9IGZ1bmN0aW9uIGluc2VydEdseXBoKGluZGV4LCBnbHlwaCwgcnVuKSB7XG4gIGlmICghZ2x5cGgpIHJldHVybiBydW47XG5cbiAgLy8gU3BsaXQgcmVzb2x2ZXMgbGlnYXR1cmUgc3BsaXR0aW5nIGluIGNhc2UgbmV3IGdseXBoIGJyZWFrcyBzb21lXG4gIHZhciBsZWFkaW5nUnVuID0gc2xpY2UkMSgwLCBpbmRleCwgcnVuKTtcbiAgdmFyIHRyYWlsaW5nUnVuID0gc2xpY2UkMShpbmRleCwgSW5maW5pdHksIHJ1bik7XG4gIHJldHVybiBjb25jYXQoYXBwZW5kJDEoZ2x5cGgsIGxlYWRpbmdSdW4pLCB0cmFpbGluZ1J1bik7XG59O1xuXG4vKipcbiAqIEluc2VydCBlaXRoZXIgZ2x5cGggb3IgY29kZSBwb2ludCB0byBydW4gaW4gdGhlIGdpdmVuIGluZGV4XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IGluZGV4XG4gKiBAcGFyYW0ge0dseXBoIHwgbnVtYmVyfSB2YWx1ZSBnbHlwaCBvciBjb2RlUG9pbnRcbiAqIEBwYXJhbSB7UnVufSBydW4gcnVuXG4gKiBAcmV0dXJucyB7UnVufSBydW4gd2l0aCBnbHlwaFxuICovXG52YXIgaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KGluZGV4LCB2YWx1ZSwgcnVuKSB7XG4gIHZhciBmb250ID0gZ2V0Rm9udChydW4pO1xuICB2YXIgZ2x5cGggPSBpc051bWJlcih2YWx1ZSkgPyBmcm9tQ29kZVBvaW50KHZhbHVlLCBmb250KSA6IHZhbHVlO1xuICByZXR1cm4gaW5zZXJ0R2x5cGgkMShpbmRleCwgZ2x5cGgsIHJ1bik7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXR0cmlidXRlZFN0cmluZ30gQXR0cmlidXRlZFN0cmluZ1xuICovXG5cbi8qKlxuICogR2V0IHJ1biBpbmRleCBhdCBjaGFyIGluZGV4XG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IG4gY2hhciBpbmRleFxuICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBzdHJpbmcgYXR0cmlidXRlZCBzdHJpbmdcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHJ1biBpbmRleFxuICovXG52YXIgcnVuSW5kZXhBdCA9IGZ1bmN0aW9uIHJ1bkluZGV4QXQobiwgc3RyaW5nKSB7XG4gIHJldHVybiBydW5JbmRleEF0JDEobiwgc3RyaW5nLnJ1bnMpO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi90eXBlcy5qcycpLkF0dHJpYnV0ZWRTdHJpbmd9IEF0dHJpYnV0ZWRTdHJpbmdcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuR2x5cGh9IEdseXBoXG4gKi9cblxuLyoqXG4gKiBJbnNlcnQgZ2x5cGggaW50byBhdHRyaWJ1dGVkIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBpbmRleFxuICogQHBhcmFtIHtHbHlwaH0gZ2x5cGggZ2x5cGhcbiAqIEBwYXJhbSB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZFN0cmluZyBhdHRyaWJ1dGVkIHN0cmluZ1xuICogQHJldHVybnMge0F0dHJpYnV0ZWRTdHJpbmd9IGF0dHJpYnV0ZWQgc3RyaW5nIHdpdGggbmV3IGdseXBoXG4gKi9cbnZhciBpbnNlcnRHbHlwaCA9IGZ1bmN0aW9uIGluc2VydEdseXBoKGluZGV4LCBnbHlwaCwgYXR0cmlidXRlZFN0cmluZykge1xuICB2YXIgcnVuSW5kZXggPSBydW5JbmRleEF0KGluZGV4LCBhdHRyaWJ1dGVkU3RyaW5nKTtcblxuICAvLyBBZGQgZ2x5cGggdG8gdGhlIGVuZCBpZiBydW4gaW5kZXggaW52YWxpZFxuICBpZiAocnVuSW5kZXggPT09IC0xKSByZXR1cm4gYXBwZW5kKGdseXBoLCBhdHRyaWJ1dGVkU3RyaW5nKTtcbiAgdmFyIGNvZGVQb2ludHMgPSAoZ2x5cGggPT09IG51bGwgfHwgZ2x5cGggPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdseXBoLmNvZGVQb2ludHMpIHx8IFtdO1xuICB2YXIgc3RyaW5nID0gYXR0cmlidXRlZFN0cmluZy5zdHJpbmcuc2xpY2UoMCwgaW5kZXgpICsgc3RyaW5nRnJvbUNvZGVQb2ludHMoY29kZVBvaW50cykgKyBhdHRyaWJ1dGVkU3RyaW5nLnN0cmluZy5zbGljZShpbmRleCk7XG4gIHZhciBydW5zID0gYXR0cmlidXRlZFN0cmluZy5ydW5zLm1hcChmdW5jdGlvbiAocnVuLCBpKSB7XG4gICAgaWYgKGkgPT09IHJ1bkluZGV4KSByZXR1cm4gaW5zZXJ0KGluZGV4IC0gcnVuLnN0YXJ0LCBnbHlwaCwgcnVuKTtcbiAgICBpZiAoaSA+IHJ1bkluZGV4KSByZXR1cm4gYWRkKGNvZGVQb2ludHMubGVuZ3RoLCBydW4pO1xuICAgIHJldHVybiBydW47XG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgYXR0cmlidXRlZFN0cmluZywge1xuICAgIHN0cmluZzogc3RyaW5nLFxuICAgIHJ1bnM6IHJ1bnNcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuUnVufSBSdW5cbiAqL1xuXG4vKipcbiAqIEFkdmFuY2Ugd2lkdGggYmV0d2VlbiB0d28gc3RyaW5nIGluZGljZXNcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgZ2x5cGggaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgZ2x5cGggaW5kZXhcbiAqIEBwYXJhbSB7UnVufSBydW4gcnVuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhZHZhbmNlZCB3aWR0aCBydW5cbiAqL1xudmFyIGFkdmFuY2VXaWR0aEJldHdlZW4kMSA9IGZ1bmN0aW9uIGFkdmFuY2VXaWR0aEJldHdlZW4oc3RhcnQsIGVuZCwgcnVuKSB7XG4gIHZhciBydW5TdGFydCA9IHJ1bi5zdGFydCB8fCAwO1xuICB2YXIgZ2x5cGhTdGFydEluZGV4ID0gTWF0aC5tYXgoMCwgZ2x5cGhJbmRleEF0KHN0YXJ0IC0gcnVuU3RhcnQsIHJ1bikpO1xuICB2YXIgZ2x5cGhFbmRJbmRleCA9IE1hdGgubWF4KDAsIGdseXBoSW5kZXhBdChlbmQgLSBydW5TdGFydCwgcnVuKSk7XG4gIHZhciBwb3NpdGlvbnMgPSAocnVuLnBvc2l0aW9ucyB8fCBbXSkuc2xpY2UoZ2x5cGhTdGFydEluZGV4LCBnbHlwaEVuZEluZGV4KTtcbiAgcmV0dXJuIGFkdmFuY2VXaWR0aCQyKHBvc2l0aW9ucyk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXR0cmlidXRlZFN0cmluZ30gQXR0cmlidXRlZFN0cmluZ1xuICovXG5cbi8qKlxuICogQWR2YW5jZSB3aWR0aCBiZXR3ZWVuIHN0YXJ0IGFuZCBlbmRcbiAqIERvZXMgbm90IGNvbnNpZGVyIGxpZ2F0dXJlIHNwbGl0dGluZyBmb3IgdGhlIG1vbWVudC5cbiAqIENoZWNrIHBlcmZvcm1hbmNlIGltcGFjdCBvbiBzdXBwb3J0aW5nIHRoaXNcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgb2Zmc2V0XG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIG9mZnNldFxuICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhZHZhbmNlIHdpZHRoXG4gKi9cbnZhciBhZHZhbmNlV2lkdGhCZXR3ZWVuID0gZnVuY3Rpb24gYWR2YW5jZVdpZHRoQmV0d2VlbihzdGFydCwgZW5kLCBhdHRyaWJ1dGVkU3RyaW5nKSB7XG4gIHZhciBydW5zID0gZmlsdGVyKHN0YXJ0LCBlbmQsIGF0dHJpYnV0ZWRTdHJpbmcucnVucyk7XG4gIHJldHVybiBydW5zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBydW4pIHtcbiAgICByZXR1cm4gYWNjICsgYWR2YW5jZVdpZHRoQmV0d2VlbiQxKHN0YXJ0LCBlbmQsIHJ1bik7XG4gIH0sIDApO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy5qcycpLkF0dHJpYnV0ZWRTdHJpbmd9IEF0dHJpYnV0ZWRTdHJpbmdcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzLmpzJykuQXR0cmlidXRlc30gQXR0cmlidXRlc1xuICovXG5cbnZhciBIWVBIRU4gPSAweDAwMmQ7XG52YXIgVE9MRVJBTkNFX1NURVBTID0gNTtcbnZhciBUT0xFUkFOQ0VfTElNSVQgPSA1MDtcbnZhciBvcHRzID0ge1xuICB3aWR0aDogMyxcbiAgc3RyZXRjaDogNixcbiAgc2hyaW5rOiA5XG59O1xuXG4vKipcbiAqIFNsaWNlIGF0dHJpYnV0ZWQgc3RyaW5nIHRvIG1hbnkgbGluZXNcbiAqXG4gKiBAcGFyYW0ge0F0dHJpYnV0ZWRTdHJpbmd9IHN0cmluZyBhdHRyaWJ1dGVkIHN0cmluZ1xuICogQHBhcmFtIHtPYmplY3RbXX0gbm9kZXNcbiAqIEBwYXJhbSB7T2JqZWN0W119IGJyZWFrc1xuICogQHJldHVybnMge0F0dHJpYnV0ZWRTdHJpbmdbXX0gYXR0cmlidXRlZCBzdHJpbmdzXG4gKi9cbnZhciBicmVha0xpbmVzID0gZnVuY3Rpb24gYnJlYWtMaW5lcyhzdHJpbmcsIG5vZGVzLCBicmVha3MpIHtcbiAgdmFyIHN0YXJ0ID0gMDtcbiAgdmFyIGVuZCA9IG51bGw7XG4gIHZhciBsaW5lcyA9IGJyZWFrcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYnJlYWtQb2ludCkge1xuICAgIHZhciBub2RlID0gbm9kZXNbYnJlYWtQb2ludC5wb3NpdGlvbl07XG4gICAgdmFyIHByZXZOb2RlID0gbm9kZXNbYnJlYWtQb2ludC5wb3NpdGlvbiAtIDFdO1xuXG4gICAgLy8gTGFzdCBicmVha3BvaW50IGNvcnJlc3BvbmRzIHRvIEsmUCBtYW5kYXRvcnkgZmluYWwgZ2x1ZVxuICAgIGlmIChicmVha1BvaW50LnBvc2l0aW9uID09PSBub2Rlcy5sZW5ndGggLSAxKSByZXR1cm4gYWNjO1xuICAgIHZhciBsaW5lO1xuICAgIGlmIChub2RlLnR5cGUgPT09ICdwZW5hbHR5Jykge1xuICAgICAgZW5kID0gcHJldk5vZGUudmFsdWUuZW5kO1xuICAgICAgbGluZSA9IHNsaWNlKHN0YXJ0LCBlbmQsIHN0cmluZyk7XG4gICAgICBsaW5lID0gaW5zZXJ0R2x5cGgobGluZS5sZW5ndGgsIEhZUEhFTiwgbGluZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuZCA9IG5vZGUudmFsdWUuZW5kO1xuICAgICAgbGluZSA9IHNsaWNlKHN0YXJ0LCBlbmQsIHN0cmluZyk7XG4gICAgfVxuICAgIHN0YXJ0ID0gZW5kO1xuICAgIHJldHVybiBbXS5jb25jYXQoYWNjLCBbbGluZV0pO1xuICB9LCBbXSk7XG5cbiAgLy8gTGFzdCBsaW5lXG4gIGxpbmVzLnB1c2goc2xpY2Uoc3RhcnQsIHN0cmluZy5zdHJpbmcubGVuZ3RoLCBzdHJpbmcpKTtcbiAgcmV0dXJuIGxpbmVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gS251dGggJiBQbGFzcyBub2RlcyBiYXNlZCBvbiBsaW5lIGFuZCBwcmV2aW91c2x5IGNhbGN1bGF0ZWQgc3lsbGFibGVzXG4gKlxuICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nIGF0dHJpYnV0ZWQgc3RyaW5nXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncyBhdHRyaWJ1dGVkIHN0cmluZyBhcmdzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBsYXlvdXQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdFtdfSBhdHRyaWJ1dGVkIHN0cmluZ3NcbiAqL1xudmFyIGdldE5vZGVzID0gZnVuY3Rpb24gZ2V0Tm9kZXMoYXR0cmlidXRlZFN0cmluZywgX3JlZiwgb3B0aW9ucykge1xuICB2YXIgYWxpZ24gPSBfcmVmLmFsaWduO1xuICB2YXIgc3RhcnQgPSAwO1xuICB2YXIgaHlwaGVuV2lkdGggPSA1O1xuICB2YXIgc3lsbGFibGVzID0gYXR0cmlidXRlZFN0cmluZy5zeWxsYWJsZXM7XG4gIHZhciBoeXBoZW5QZW5hbHR5ID0gb3B0aW9ucy5oeXBoZW5hdGlvblBlbmFsdHkgfHwgKGFsaWduID09PSAnanVzdGlmeScgPyAxMDAgOiA2MDApO1xuICB2YXIgcmVzdWx0ID0gc3lsbGFibGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzLCBpbmRleCkge1xuICAgIHZhciB3aWR0aCA9IGFkdmFuY2VXaWR0aEJldHdlZW4oc3RhcnQsIHN0YXJ0ICsgcy5sZW5ndGgsIGF0dHJpYnV0ZWRTdHJpbmcpO1xuICAgIGlmIChzLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgIHZhciBzdHJldGNoID0gd2lkdGggKiBvcHRzLndpZHRoIC8gb3B0cy5zdHJldGNoO1xuICAgICAgdmFyIHNocmluayA9IHdpZHRoICogb3B0cy53aWR0aCAvIG9wdHMuc2hyaW5rO1xuICAgICAgdmFyIHZhbHVlID0ge1xuICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgIGVuZDogc3RhcnQgKyBzLmxlbmd0aFxuICAgICAgfTtcbiAgICAgIGFjYy5wdXNoKGxpbmVicmVhay5nbHVlKHdpZHRoLCB2YWx1ZSwgc3RyZXRjaCwgc2hyaW5rKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBoeXBoZW5hdGVkID0gc3lsbGFibGVzW2luZGV4ICsgMV0gIT09ICcgJztcbiAgICAgIHZhciBfdmFsdWUgPSB7XG4gICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgZW5kOiBzdGFydCArIHMubGVuZ3RoXG4gICAgICB9O1xuICAgICAgYWNjLnB1c2gobGluZWJyZWFrLmJveCh3aWR0aCwgX3ZhbHVlLCBoeXBoZW5hdGVkKSk7XG4gICAgICBpZiAoc3lsbGFibGVzW2luZGV4ICsgMV0gJiYgaHlwaGVuYXRlZCkge1xuICAgICAgICBhY2MucHVzaChsaW5lYnJlYWsucGVuYWx0eShoeXBoZW5XaWR0aCwgaHlwaGVuUGVuYWx0eSwgMSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdGFydCArPSBzLmxlbmd0aDtcbiAgICByZXR1cm4gYWNjO1xuICB9LCBbXSk7XG4gIHJlc3VsdC5wdXNoKGxpbmVicmVhay5nbHVlKDAsIG51bGwsIGxpbmVicmVhay5pbmZpbml0eSwgMCkpO1xuICByZXN1bHQucHVzaChsaW5lYnJlYWsucGVuYWx0eSgwLCAtbGluZWJyZWFrLmluZmluaXR5LCAxKSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZFN0cmluZyBhdHRyaWJ1dGVkIHN0cmluZ1xuICogQHJldHVybnMge0F0dHJpYnV0ZXN9IHN0eWxlc1xuICovXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gZ2V0U3R5bGVzKGF0dHJpYnV0ZWRTdHJpbmcpIHtcbiAgdmFyIF9hdHRyaWJ1dGVkU3RyaW5nJHJ1biwgX2F0dHJpYnV0ZWRTdHJpbmckcnVuMjtcbiAgcmV0dXJuICgoX2F0dHJpYnV0ZWRTdHJpbmckcnVuID0gYXR0cmlidXRlZFN0cmluZy5ydW5zKSA9PT0gbnVsbCB8fCBfYXR0cmlidXRlZFN0cmluZyRydW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfYXR0cmlidXRlZFN0cmluZyRydW4yID0gX2F0dHJpYnV0ZWRTdHJpbmckcnVuWzBdKSA9PT0gbnVsbCB8fCBfYXR0cmlidXRlZFN0cmluZyRydW4yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYXR0cmlidXRlZFN0cmluZyRydW4yLmF0dHJpYnV0ZXMpIHx8IHt9O1xufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBLbnV0aCAmIFBsYXNzIGxpbmUgYnJlYWtpbmcgYWxnb3JpdGhtXG4gKiBGYWxsYmFja3MgdG8gYmVzdCBmaXQgYWxnb3JpdGhtIGlmIGxhdHRlciBub3Qgc3VjY2Vzc2Z1bFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIGxheW91dCBvcHRpb25zXG4gKi9cbnZhciBsaW5lYnJlYWtlciA9IGZ1bmN0aW9uIGxpbmVicmVha2VyKG9wdGlvbnMpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QXR0cmlidXRlZFN0cmluZ30gYXR0cmlidXRlZFN0cmluZyBhdHRyaWJ1dGVkIHN0cmluZ1xuICAgKiBAcGFyYW0ge251bWJlcltdfSBhdmFpbGFibGVXaWR0aHMgYXZhaWxhYmxlIHdpZHRoc1xuICAgKiBAcmV0dXJucyB7QXR0cmlidXRlZFN0cmluZ1tdfSBhdHRyaWJ1dGVkIHN0cmluZ3NcbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAoYXR0cmlidXRlZFN0cmluZywgYXZhaWxhYmxlV2lkdGhzKSB7XG4gICAgdmFyIHRvbGVyYW5jZSA9IG9wdGlvbnMudG9sZXJhbmNlIHx8IDQ7XG4gICAgdmFyIHN0eWxlID0gZ2V0U3R5bGVzKGF0dHJpYnV0ZWRTdHJpbmcpO1xuICAgIHZhciBub2RlcyA9IGdldE5vZGVzKGF0dHJpYnV0ZWRTdHJpbmcsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIC8qKiBAdHlwZSB7T2JqZWN0W119ICovXG4gICAgdmFyIGJyZWFrcyA9IGxpbmVicmVhayhub2RlcywgYXZhaWxhYmxlV2lkdGhzLCB7XG4gICAgICB0b2xlcmFuY2U6IHRvbGVyYW5jZVxuICAgIH0pO1xuXG4gICAgLy8gVHJ5IGFnYWluIHdpdGggYSBoaWdoZXIgdG9sZXJhbmNlIGlmIHRoZSBsaW5lIGJyZWFraW5nIGZhaWxlZC5cbiAgICB3aGlsZSAoYnJlYWtzLmxlbmd0aCA9PT0gMCAmJiB0b2xlcmFuY2UgPCBUT0xFUkFOQ0VfTElNSVQpIHtcbiAgICAgIHRvbGVyYW5jZSArPSBUT0xFUkFOQ0VfU1RFUFM7XG4gICAgICBicmVha3MgPSBsaW5lYnJlYWsobm9kZXMsIGF2YWlsYWJsZVdpZHRocywge1xuICAgICAgICB0b2xlcmFuY2U6IHRvbGVyYW5jZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChicmVha3MubGVuZ3RoID09PSAwIHx8IGJyZWFrcy5sZW5ndGggPT09IDEgJiYgYnJlYWtzWzBdLnBvc2l0aW9uID09PSAwKSB7XG4gICAgICBicmVha3MgPSBhcHBseUJlc3RGaXQobm9kZXMsIGF2YWlsYWJsZVdpZHRocyk7XG4gICAgfVxuICAgIHJldHVybiBicmVha0xpbmVzKGF0dHJpYnV0ZWRTdHJpbmcsIG5vZGVzLCBicmVha3Muc2xpY2UoMSkpO1xuICB9O1xufTtcblxudmFyIFdISVRFU1BBQ0VfUFJJT1JJVFkgPSAxO1xudmFyIExFVFRFUl9QUklPUklUWSA9IDI7XG52YXIgRVhQQU5EX1dISVRFU1BBQ0VfRkFDVE9SID0ge1xuICBiZWZvcmU6IDAuNSxcbiAgYWZ0ZXI6IDAuNSxcbiAgcHJpb3JpdHk6IFdISVRFU1BBQ0VfUFJJT1JJVFksXG4gIHVuY29uc3RyYWluZWQ6IGZhbHNlXG59O1xudmFyIEVYUEFORF9DSEFSX0ZBQ1RPUiA9IHtcbiAgYmVmb3JlOiAwLjE0NDUzMTI1LFxuICAvLyAzNy8yNTZcbiAgYWZ0ZXI6IDAuMTQ0NTMxMjUsXG4gIHByaW9yaXR5OiBMRVRURVJfUFJJT1JJVFksXG4gIHVuY29uc3RyYWluZWQ6IGZhbHNlXG59O1xudmFyIFNIUklOS19XSElURVNQQUNFX0ZBQ1RPUiA9IHtcbiAgYmVmb3JlOiAtMC4wNDI5Njg3NSxcbiAgLy8gLTExLzI1NlxuICBhZnRlcjogLTAuMDQyOTY4NzUsXG4gIHByaW9yaXR5OiBXSElURVNQQUNFX1BSSU9SSVRZLFxuICB1bmNvbnN0cmFpbmVkOiBmYWxzZVxufTtcbnZhciBTSFJJTktfQ0hBUl9GQUNUT1IgPSB7XG4gIGJlZm9yZTogLTAuMDQyOTY4NzUsXG4gIGFmdGVyOiAtMC4wNDI5Njg3NSxcbiAgcHJpb3JpdHk6IExFVFRFUl9QUklPUklUWSxcbiAgdW5jb25zdHJhaW5lZDogZmFsc2Vcbn07XG52YXIgZ2V0Q2hhckZhY3RvciA9IGZ1bmN0aW9uIGdldENoYXJGYWN0b3IoZGlyZWN0aW9uLCBvcHRpb25zKSB7XG4gIHZhciBleHBhbmRDaGFyRmFjdG9yID0gb3B0aW9ucy5leHBhbmRDaGFyRmFjdG9yIHx8IHt9O1xuICB2YXIgc2hyaW5rQ2hhckZhY3RvciA9IG9wdGlvbnMuc2hyaW5rQ2hhckZhY3RvciB8fCB7fTtcbiAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gJ0dST1cnID8gT2JqZWN0LmFzc2lnbih7fSwgRVhQQU5EX0NIQVJfRkFDVE9SLCBleHBhbmRDaGFyRmFjdG9yKSA6IE9iamVjdC5hc3NpZ24oe30sIFNIUklOS19DSEFSX0ZBQ1RPUiwgc2hyaW5rQ2hhckZhY3Rvcik7XG59O1xudmFyIGdldFdoaXRlc3BhY2VGYWN0b3IgPSBmdW5jdGlvbiBnZXRXaGl0ZXNwYWNlRmFjdG9yKGRpcmVjdGlvbiwgb3B0aW9ucykge1xuICB2YXIgZXhwYW5kV2hpdGVzcGFjZUZhY3RvciA9IG9wdGlvbnMuZXhwYW5kV2hpdGVzcGFjZUZhY3RvciB8fCB7fTtcbiAgdmFyIHNocmlua1doaXRlc3BhY2VGYWN0b3IgPSBvcHRpb25zLnNocmlua1doaXRlc3BhY2VGYWN0b3IgfHwge307XG4gIHJldHVybiBkaXJlY3Rpb24gPT09ICdHUk9XJyA/IE9iamVjdC5hc3NpZ24oe30sIEVYUEFORF9XSElURVNQQUNFX0ZBQ1RPUiwgZXhwYW5kV2hpdGVzcGFjZUZhY3RvcikgOiBPYmplY3QuYXNzaWduKHt9LCBTSFJJTktfV0hJVEVTUEFDRV9GQUNUT1IsIHNocmlua1doaXRlc3BhY2VGYWN0b3IpO1xufTtcbnZhciBmYWN0b3IgPSBmdW5jdGlvbiBmYWN0b3IoZGlyZWN0aW9uLCBvcHRpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZ2x5cGhzKSB7XG4gICAgdmFyIGNoYXJGYWN0b3IgPSBnZXRDaGFyRmFjdG9yKGRpcmVjdGlvbiwgb3B0aW9ucyk7XG4gICAgdmFyIHdoaXRlc3BhY2VGYWN0b3IgPSBnZXRXaGl0ZXNwYWNlRmFjdG9yKGRpcmVjdGlvbiwgb3B0aW9ucyk7XG4gICAgdmFyIGZhY3RvcnMgPSBbXTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgZ2x5cGhzLmxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAgdmFyIGYgPSB2b2lkIDA7XG4gICAgICB2YXIgZ2x5cGggPSBnbHlwaHNbaW5kZXhdO1xuICAgICAgaWYgKGlzV2hpdGVTcGFjZShnbHlwaCkpIHtcbiAgICAgICAgZiA9IE9iamVjdC5hc3NpZ24oe30sIHdoaXRlc3BhY2VGYWN0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPT09IGdseXBocy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgZi5iZWZvcmUgPSAwO1xuICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgIGZhY3RvcnNbaW5kZXggLSAxXS5hZnRlciA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGdseXBoLmlzTWFyayAmJiBpbmRleCA+IDApIHtcbiAgICAgICAgZiA9IE9iamVjdC5hc3NpZ24oe30sIGZhY3RvcnNbaW5kZXggLSAxXSk7XG4gICAgICAgIGYuYmVmb3JlID0gMDtcbiAgICAgICAgZmFjdG9yc1tpbmRleCAtIDFdLmFmdGVyID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGYgPSBPYmplY3QuYXNzaWduKHt9LCBjaGFyRmFjdG9yKTtcbiAgICAgIH1cbiAgICAgIGZhY3RvcnMucHVzaChmKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhY3RvcnM7XG4gIH07XG59O1xudmFyIGdldEZhY3RvcnMgPSBmdW5jdGlvbiBnZXRGYWN0b3JzKGdhcCwgbGluZSwgb3B0aW9ucykge1xuICB2YXIgZGlyZWN0aW9uID0gZ2FwID4gMCA/ICdHUk9XJyA6ICdTSFJJTksnO1xuICB2YXIgZ2V0RmFjdG9yID0gZmFjdG9yKGRpcmVjdGlvbiwgb3B0aW9ucyk7XG4gIHZhciBmYWN0b3JzID0gbGluZS5ydW5zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBydW4pIHtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChnZXRGYWN0b3IocnVuLmdseXBocykpO1xuICB9LCBbXSk7XG4gIGZhY3RvcnNbMF0uYmVmb3JlID0gMDtcbiAgZmFjdG9yc1tmYWN0b3JzLmxlbmd0aCAtIDFdLmFmdGVyID0gMDtcbiAgcmV0dXJuIGZhY3RvcnM7XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1tdWx0aS1hc3NpZ24gKi9cbnZhciBLQVNISURBX1BSSU9SSVRZID0gMDtcbnZhciBOVUxMX1BSSU9SSVRZID0gMztcbnZhciBnZXREaXN0YW5jZXMgPSBmdW5jdGlvbiBnZXREaXN0YW5jZXMoZ2FwLCBmYWN0b3JzKSB7XG4gIHZhciB0b3RhbCA9IDA7XG4gIHZhciBwcmlvcml0aWVzID0gW107XG4gIHZhciB1bmNvbnN0cmFpbmVkID0gW107XG4gIGZvciAodmFyIF9wcmlvcml0eSA9IEtBU0hJREFfUFJJT1JJVFk7IF9wcmlvcml0eSA8PSBOVUxMX1BSSU9SSVRZOyBfcHJpb3JpdHkgKz0gMSkge1xuICAgIHByaW9yaXRpZXNbX3ByaW9yaXR5XSA9IHVuY29uc3RyYWluZWRbX3ByaW9yaXR5XSA9IDA7XG4gIH1cblxuICAvLyBzdW0gdGhlIGZhY3RvcnMgYXQgZWFjaCBwcmlvcml0eVxuICBmb3IgKHZhciBqID0gMDsgaiA8IGZhY3RvcnMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICB2YXIgZiA9IGZhY3RvcnNbal07XG4gICAgdmFyIHN1bSA9IGYuYmVmb3JlICsgZi5hZnRlcjtcbiAgICB0b3RhbCArPSBzdW07XG4gICAgcHJpb3JpdGllc1tmLnByaW9yaXR5XSArPSBzdW07XG4gICAgaWYgKGYudW5jb25zdHJhaW5lZCkge1xuICAgICAgdW5jb25zdHJhaW5lZFtmLnByaW9yaXR5XSArPSBzdW07XG4gICAgfVxuICB9XG5cbiAgLy8gY2hvb3NlIHRoZSBwcmlvcml0aWVzIHRoYXQgbmVlZCB0byBiZSBhcHBsaWVkXG4gIHZhciBoaWdoZXN0UHJpb3JpdHkgPSAtMTtcbiAgdmFyIGhpZ2hlc3RQcmlvcml0eVN1bSA9IDA7XG4gIHZhciByZW1haW5pbmdHYXAgPSBnYXA7XG4gIHZhciBwcmlvcml0eTtcbiAgZm9yIChwcmlvcml0eSA9IEtBU0hJREFfUFJJT1JJVFk7IHByaW9yaXR5IDw9IE5VTExfUFJJT1JJVFk7IHByaW9yaXR5ICs9IDEpIHtcbiAgICB2YXIgcHJpb3JpdHlTdW0gPSBwcmlvcml0aWVzW3ByaW9yaXR5XTtcbiAgICBpZiAocHJpb3JpdHlTdW0gIT09IDApIHtcbiAgICAgIGlmIChoaWdoZXN0UHJpb3JpdHkgPT09IC0xKSB7XG4gICAgICAgIGhpZ2hlc3RQcmlvcml0eSA9IHByaW9yaXR5O1xuICAgICAgICBoaWdoZXN0UHJpb3JpdHlTdW0gPSBwcmlvcml0eVN1bTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgdGhpcyBwcmlvcml0eSBjb3ZlcnMgdGhlIHJlbWFpbmluZyBnYXAsIHdlJ3JlIGRvbmVcbiAgICAgIGlmIChNYXRoLmFicyhyZW1haW5pbmdHYXApIDw9IE1hdGguYWJzKHByaW9yaXR5U3VtKSkge1xuICAgICAgICBwcmlvcml0aWVzW3ByaW9yaXR5XSA9IHJlbWFpbmluZ0dhcCAvIHByaW9yaXR5U3VtO1xuICAgICAgICB1bmNvbnN0cmFpbmVkW3ByaW9yaXR5XSA9IDA7XG4gICAgICAgIHJlbWFpbmluZ0dhcCA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCB0byB1c2UgMTAwJSBvZiB0aGUgYWRqdXN0bWVudCBmcm9tXG4gICAgICAvLyB0aGlzIHByaW9yaXR5LCBhbmQgc3VidHJhY3QgdGhlIHNwYWNlIHRoYXQgaXQgY29uc3VtZXNcbiAgICAgIHByaW9yaXRpZXNbcHJpb3JpdHldID0gMTtcbiAgICAgIHJlbWFpbmluZ0dhcCAtPSBwcmlvcml0eVN1bTtcblxuICAgICAgLy8gaWYgdGhpcyBwcmlvcml0eSBoYXMgdW5jb25zdHJhaW5lZCBnbHlwaHMsIGxldCB0aGVtIGNvbnN1bWUgdGhlIHJlbWFpbmluZyBzcGFjZVxuICAgICAgaWYgKHVuY29uc3RyYWluZWRbcHJpb3JpdHldICE9PSAwKSB7XG4gICAgICAgIHVuY29uc3RyYWluZWRbcHJpb3JpdHldID0gcmVtYWluaW5nR2FwIC8gdW5jb25zdHJhaW5lZFtwcmlvcml0eV07XG4gICAgICAgIHJlbWFpbmluZ0dhcCA9IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHplcm8gb3V0IHJlbWFpbmluZyBwcmlvcml0aWVzIChpZiBhbnkpXG4gIGZvciAodmFyIHAgPSBwcmlvcml0eSArIDE7IHAgPD0gTlVMTF9QUklPUklUWTsgcCArPSAxKSB7XG4gICAgcHJpb3JpdGllc1twXSA9IDA7XG4gICAgdW5jb25zdHJhaW5lZFtwXSA9IDA7XG4gIH1cblxuICAvLyBpZiB0aGVyZSBpcyBzdGlsbCBzcGFjZSBsZWZ0IG92ZXIsIGFzc2lnbiBpdCB0byB0aGUgaGlnaGVzdCBwcmlvcml0eSB0aGF0IHdlIHNhdy5cbiAgLy8gdGhpcyB2aW9sYXRlcyB0aGVpciBmYWN0b3JzLCBidXQgaXQgb25seSBoYXBwZW5zIGluIGV4dHJlbWUgY2FzZXNcbiAgaWYgKHJlbWFpbmluZ0dhcCA+IDAgJiYgaGlnaGVzdFByaW9yaXR5ID4gLTEpIHtcbiAgICBwcmlvcml0aWVzW2hpZ2hlc3RQcmlvcml0eV0gPSAoaGlnaGVzdFByaW9yaXR5U3VtICsgKGdhcCAtIHRvdGFsKSkgLyBoaWdoZXN0UHJpb3JpdHlTdW07XG4gIH1cblxuICAvLyBjcmVhdGUgYW5kIHJldHVybiBhbiBhcnJheSBvZiBkaXN0YW5jZXMgdG8gYWRkIHRvIGVhY2ggZ2x5cGgncyBhZHZhbmNlXG4gIHZhciBkaXN0YW5jZXMgPSBbXTtcbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGZhY3RvcnMubGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgLy8gdGhlIGRpc3RhbmNlIHRvIGFkZCB0byB0aGlzIGdseXBoIGlzIHRoZSBzdW0gb2YgdGhlIHNwYWNlIHRvIGFkZFxuICAgIC8vIGFmdGVyIHRoaXMgZ2x5cGgsIGFuZCB0aGUgc3BhY2UgdG8gYWRkIGJlZm9yZSB0aGUgbmV4dCBnbHlwaFxuICAgIHZhciBfZiA9IGZhY3RvcnNbaW5kZXhdO1xuICAgIHZhciBuZXh0ID0gZmFjdG9yc1tpbmRleCArIDFdO1xuICAgIHZhciBkaXN0ID0gX2YuYWZ0ZXIgKiBwcmlvcml0aWVzW19mLnByaW9yaXR5XTtcbiAgICBpZiAobmV4dCkge1xuICAgICAgZGlzdCArPSBuZXh0LmJlZm9yZSAqIHByaW9yaXRpZXNbbmV4dC5wcmlvcml0eV07XG4gICAgfVxuXG4gICAgLy8gaWYgdGhpcyBnbHlwaCBpcyB1bmNvbnN0cmFpbmVkLCBhZGQgdGhlIHVuY29uc3RyYWluZWQgZGlzdGFuY2UgYXMgd2VsbFxuICAgIGlmIChfZi51bmNvbnN0cmFpbmVkKSB7XG4gICAgICBkaXN0ICs9IF9mLmFmdGVyICogdW5jb25zdHJhaW5lZFtfZi5wcmlvcml0eV07XG4gICAgICBpZiAobmV4dCkge1xuICAgICAgICBkaXN0ICs9IG5leHQuYmVmb3JlICogdW5jb25zdHJhaW5lZFtuZXh0LnByaW9yaXR5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgZGlzdGFuY2VzLnB1c2goZGlzdCk7XG4gIH1cbiAgcmV0dXJuIGRpc3RhbmNlcztcbn07XG5cbi8qKlxuICogQWRqdXN0IHJ1biBwb3NpdGlvbnMgYnkgZ2l2ZW4gZGlzdGFuY2VzXG4gKlxuICogQHBhcmFtIHtudW1iZXJbXX0gZGlzdGFuY2VzXG4gKiBAcGFyYW0ge09iamVjdH0gbGluZVxuICogQHJldHVybnMge09iamVjdH0gbGluZVxuICovXG52YXIganVzdGlmeUxpbmUgPSBmdW5jdGlvbiBqdXN0aWZ5TGluZShkaXN0YW5jZXMsIGxpbmUpIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgZm9yICh2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShsaW5lLnJ1bnMpLCBfc3RlcDsgIShfc3RlcCA9IF9pdGVyYXRvcigpKS5kb25lOykge1xuICAgIHZhciBydW4gPSBfc3RlcC52YWx1ZTtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShydW4ucG9zaXRpb25zKSwgX3N0ZXAyOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIoKSkuZG9uZTspIHtcbiAgICAgIHZhciBwb3NpdGlvbiA9IF9zdGVwMi52YWx1ZTtcbiAgICAgIHBvc2l0aW9uLnhBZHZhbmNlICs9IGRpc3RhbmNlc1tpbmRleCsrXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxpbmU7XG59O1xuXG4vKipcbiAqIEEgSnVzdGlmaWNhdGlvbkVuZ2luZSBpcyB1c2VkIGJ5IGEgVHlwZXNldHRlciB0byBwZXJmb3JtIGxpbmUgZnJhZ21lbnRcbiAqIGp1c3RpZmljYXRpb24uIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgb24gYSBkZXNjcmlwdGlvbiBvZiBBcHBsZSdzXG4gKiBqdXN0aWZpY2F0aW9uIGFsZ29yaXRobSBmcm9tIGEgUERGIGluIHRoZSBBcHBsZSBGb250IFRvb2xzIHBhY2thZ2UuXG4gKlxuICogLy8gVE9ETzogTWFrZSBpdCBpbW11dGFibGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBsYXlvdXQgb3B0aW9uc1xuICovXG52YXIganVzdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIGp1c3RpZmljYXRpb24ob3B0aW9ucykge1xuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IGxpbmVcbiAgICogQHJldHVybnMge09iamVjdH0gbGluZVxuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgdmFyIGdhcCA9IGxpbmUuYm94LndpZHRoIC0gYWR2YW5jZVdpZHRoKGxpbmUpO1xuICAgIGlmIChnYXAgPT09IDApIHJldHVybjsgLy8gRXhhY3QgZml0XG5cbiAgICB2YXIgZmFjdG9ycyA9IGdldEZhY3RvcnMoZ2FwLCBsaW5lLCBvcHRpb25zKTtcbiAgICB2YXIgZGlzdGFuY2VzID0gZ2V0RGlzdGFuY2VzKGdhcCwgZmFjdG9ycyk7XG4gICAgcmV0dXJuIGp1c3RpZnlMaW5lKGRpc3RhbmNlcywgbGluZSk7XG4gIH07XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3R5cGVzLmpzJykuQXR0cmlidXRlZFN0cmluZ30gQXR0cmlidXRlZFN0cmluZ1xuICovXG5cbi8qKlxuICogUmV0dXJucyBhdHRyaWJ1dGVkIHN0cmluZyBhc2NlbnRcbiAqXG4gKiBAcGFyYW0ge0F0dHJpYnV0ZWRTdHJpbmd9IGF0dHJpYnV0ZWRTdHJpbmcgYXR0cmlidXRlZCBzdHJpbmdcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFzY2VudFxuICovXG52YXIgYXNjZW50ID0gZnVuY3Rpb24gYXNjZW50KGF0dHJpYnV0ZWRTdHJpbmcpIHtcbiAgdmFyIHJlZHVjZXIgPSBmdW5jdGlvbiByZWR1Y2VyKGFjYywgcnVuKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KGFjYywgYXNjZW50JDEocnVuKSk7XG4gIH07XG4gIHJldHVybiBhdHRyaWJ1dGVkU3RyaW5nLnJ1bnMucmVkdWNlKHJlZHVjZXIsIDApO1xufTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cblxuXG4vLyBUaGUgYmFzZSBmb250IHNpemUgdXNlZCBmb3IgY2FsY3VsYXRpbmcgdW5kZXJsaW5lIHRoaWNrbmVzcy5cbnZhciBCQVNFX0ZPTlRfU0laRSA9IDEyO1xuXG4vKipcbiAqIEEgVGV4dERlY29yYXRpb25FbmdpbmUgaXMgdXNlZCBieSBhIFR5cGVzZXR0ZXIgdG8gZ2VuZXJhdGVcbiAqIERlY29yYXRpb25MaW5lcyBmb3IgYSBsaW5lIGZyYWdtZW50LCBpbmNsdWRpbmcgdW5kZXJsaW5lc1xuICogYW5kIHN0cmlrZXMuXG4gKi9cbnZhciB0ZXh0RGVjb3JhdGlvbiA9IGZ1bmN0aW9uIHRleHREZWNvcmF0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGxpbmVGcmFnbWVudCkge1xuICAgIHZhciB4ID0gbGluZUZyYWdtZW50Lm92ZXJmbG93TGVmdCB8fCAwO1xuICAgIHZhciBvdmVyZmxvd1JpZ2h0ID0gbGluZUZyYWdtZW50Lm92ZXJmbG93UmlnaHQgfHwgMDtcbiAgICB2YXIgbWF4WCA9IGFkdmFuY2VXaWR0aChsaW5lRnJhZ21lbnQpIC0gb3ZlcmZsb3dSaWdodDtcbiAgICBsaW5lRnJhZ21lbnQuZGVjb3JhdGlvbkxpbmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lRnJhZ21lbnQucnVucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIHJ1biA9IGxpbmVGcmFnbWVudC5ydW5zW2ldO1xuICAgICAgdmFyIHdpZHRoID0gTWF0aC5taW4obWF4WCAtIHgsIGFkdmFuY2VXaWR0aCQxKHJ1bikpO1xuICAgICAgdmFyIHRoaWNrbmVzcyA9IE1hdGgubWF4KDAuNSwgTWF0aC5mbG9vcihydW4uYXR0cmlidXRlcy5mb250U2l6ZSAvIEJBU0VfRk9OVF9TSVpFKSk7XG4gICAgICBpZiAocnVuLmF0dHJpYnV0ZXMudW5kZXJsaW5lKSB7XG4gICAgICAgIHZhciByZWN0ID0ge1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogYXNjZW50KGxpbmVGcmFnbWVudCkgKyB0aGlja25lc3MgKiAyLFxuICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IHRoaWNrbmVzc1xuICAgICAgICB9O1xuICAgICAgICB2YXIgbGluZSA9IHtcbiAgICAgICAgICByZWN0OiByZWN0LFxuICAgICAgICAgIG9wYWNpdHk6IHJ1bi5hdHRyaWJ1dGVzLm9wYWNpdHksXG4gICAgICAgICAgY29sb3I6IHJ1bi5hdHRyaWJ1dGVzLnVuZGVybGluZUNvbG9yIHx8ICdibGFjaycsXG4gICAgICAgICAgc3R5bGU6IHJ1bi5hdHRyaWJ1dGVzLnVuZGVybGluZVN0eWxlIHx8ICdzb2xpZCdcbiAgICAgICAgfTtcbiAgICAgICAgbGluZUZyYWdtZW50LmRlY29yYXRpb25MaW5lcy5wdXNoKGxpbmUpO1xuICAgICAgfVxuICAgICAgaWYgKHJ1bi5hdHRyaWJ1dGVzLnN0cmlrZSkge1xuICAgICAgICB2YXIgeSA9IGFzY2VudChsaW5lRnJhZ21lbnQpIC0gYXNjZW50JDEocnVuKSAvIDM7XG4gICAgICAgIHZhciBfcmVjdCA9IHtcbiAgICAgICAgICB4OiB4LFxuICAgICAgICAgIHk6IHksXG4gICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgIGhlaWdodDogdGhpY2tuZXNzXG4gICAgICAgIH07XG4gICAgICAgIHZhciBfbGluZSA9IHtcbiAgICAgICAgICByZWN0OiBfcmVjdCxcbiAgICAgICAgICBvcGFjaXR5OiBydW4uYXR0cmlidXRlcy5vcGFjaXR5LFxuICAgICAgICAgIGNvbG9yOiBydW4uYXR0cmlidXRlcy5zdHJpa2VDb2xvciB8fCAnYmxhY2snLFxuICAgICAgICAgIHN0eWxlOiBydW4uYXR0cmlidXRlcy5zdHJpa2VTdHlsZSB8fCAnc29saWQnXG4gICAgICAgIH07XG4gICAgICAgIGxpbmVGcmFnbWVudC5kZWNvcmF0aW9uTGluZXMucHVzaChfbGluZSk7XG4gICAgICB9XG4gICAgICB4ICs9IHdpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gbGluZUZyYWdtZW50O1xuICB9O1xufTtcblxudmFyIGlnbm9yZWRTY3JpcHRzID0gWydDb21tb24nLCAnSW5oZXJpdGVkJywgJ1Vua25vd24nXTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi90eXBlcy5qcycpLkF0dHJpYnV0ZWRTdHJpbmd9IEF0dHJpYnV0ZWRTdHJpbmdcbiAqL1xuXG4vKipcbiAqIFJlc29sdmVzIHVuaWNvZGUgc2NyaXB0IGluIHJ1bnMsIGdyb3VwaW5nIGVxdWFsIHJ1bnMgdG9nZXRoZXJcbiAqL1xudmFyIHNjcmlwdEl0ZW1pemVyID0gZnVuY3Rpb24gc2NyaXB0SXRlbWl6ZXIoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0F0dHJpYnV0ZWRTdHJpbmd9IGF0dHJpYnV0ZWRTdHJpbmcgYXR0cmlidXRlZCBzdHJpbmdcbiAgICogQHJldHVybnMge0F0dHJpYnV0ZWRTdHJpbmd9IGF0dHJpYnV0ZWQgc3RyaW5nXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKGF0dHJpYnV0ZWRTdHJpbmcpIHtcbiAgICB2YXIgc3RyaW5nID0gYXR0cmlidXRlZFN0cmluZy5zdHJpbmc7XG4gICAgdmFyIGxhc3RTY3JpcHQgPSAnVW5rbm93bic7XG4gICAgdmFyIGxhc3RJbmRleCA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgaWYgKCFzdHJpbmcpIHJldHVybiBlbXB0eSgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgY2hhciA9IHN0cmluZ1tpXTtcbiAgICAgIHZhciBjb2RlUG9pbnQgPSBjaGFyLmNvZGVQb2ludEF0KCk7XG4gICAgICB2YXIgc2NyaXB0ID0gdW5pY29kZS5nZXRTY3JpcHQoY29kZVBvaW50KTtcbiAgICAgIGlmIChzY3JpcHQgIT09IGxhc3RTY3JpcHQgJiYgIWlnbm9yZWRTY3JpcHRzLmluY2x1ZGVzKHNjcmlwdCkpIHtcbiAgICAgICAgaWYgKGxhc3RTY3JpcHQgIT09ICdVbmtub3duJykge1xuICAgICAgICAgIHJlcy5wdXNoKHtcbiAgICAgICAgICAgIHN0YXJ0OiBsYXN0SW5kZXgsXG4gICAgICAgICAgICBlbmQ6IGluZGV4LFxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICBzY3JpcHQ6IGxhc3RTY3JpcHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgbGFzdFNjcmlwdCA9IHNjcmlwdDtcbiAgICAgIH1cbiAgICAgIGluZGV4ICs9IGNoYXIubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAobGFzdEluZGV4IDwgc3RyaW5nLmxlbmd0aCkge1xuICAgICAgcmVzLnB1c2goe1xuICAgICAgICBzdGFydDogbGFzdEluZGV4LFxuICAgICAgICBlbmQ6IHN0cmluZy5sZW5ndGgsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBzY3JpcHQ6IGxhc3RTY3JpcHRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzdHJpbmc6IHN0cmluZyxcbiAgICAgIHJ1bnM6IHJlc1xuICAgIH07XG4gIH07XG59O1xuXG52YXIgU09GVF9IWVBIRU4gPSBcIlxceEFEXCI7XG52YXIgaHlwaGVuYXRvciA9IGh5cGhlbihwYXR0ZXJuKTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gd29yZFxuICogQHJldHVybnMge3N0cmluZ1tdfSB3b3JkIHBhcnRzXG4gKi9cbnZhciBzcGxpdEh5cGhlbiA9IGZ1bmN0aW9uIHNwbGl0SHlwaGVuKHdvcmQpIHtcbiAgcmV0dXJuIHdvcmQuc3BsaXQoU09GVF9IWVBIRU4pO1xufTtcbnZhciBjYWNoZSA9IHt9O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB3b3JkXG4gKiBAcmV0dXJucyB7c3RyaW5nW119IHdvcmQgcGFydHNcbiAqL1xudmFyIGdldFBhcnRzID0gZnVuY3Rpb24gZ2V0UGFydHMod29yZCkge1xuICB2YXIgYmFzZSA9IHdvcmQuaW5jbHVkZXMoU09GVF9IWVBIRU4pID8gd29yZCA6IGh5cGhlbmF0b3Iod29yZCk7XG4gIHJldHVybiBzcGxpdEh5cGhlbihiYXNlKTtcbn07XG52YXIgd29yZEh5cGhlbmF0aW9uID0gZnVuY3Rpb24gd29yZEh5cGhlbmF0aW9uKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHdvcmQgd29yZFxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119IHdvcmQgcGFydHNcbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAod29yZCkge1xuICAgIHZhciBjYWNoZUtleSA9IFwiX1wiICsgd29yZDtcbiAgICBpZiAoaXNOaWwod29yZCkpIHJldHVybiBbXTtcbiAgICBpZiAoY2FjaGVbY2FjaGVLZXldKSByZXR1cm4gY2FjaGVbY2FjaGVLZXldO1xuICAgIGNhY2hlW2NhY2hlS2V5XSA9IGdldFBhcnRzKHdvcmQpO1xuICAgIHJldHVybiBjYWNoZVtjYWNoZUtleV07XG4gIH07XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uLy4uL3R5cGVzLmpzJykuQXR0cmlidXRlZFN0cmluZ30gQXR0cmlidXRlZFN0cmluZ1xuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMuanMnKS5SdW59IFJ1blxuICovXG5cbi8qKlxuICogQHBhcmFtIHtSdW59IHJ1biBydW5cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbnZhciBnZXRGb250U2l6ZSA9IGZ1bmN0aW9uIGdldEZvbnRTaXplKHJ1bikge1xuICByZXR1cm4gcnVuLmF0dHJpYnV0ZXMuZm9udFNpemUgfHwgMTI7XG59O1xuXG4vKipcbiAqIFJlc29sdmUgZm9udCBydW5zIGluIGFuIEF0dHJpYnV0ZWRTdHJpbmcsIGdyb3VwaW5nIGVxdWFsXG4gKiBydW5zIGFuZCBwZXJmb3JtaW5nIGZvbnQgc3Vic3RpdHV0aW9uIHdoZXJlIG5lY2Vzc2FyeS5cbiAqL1xudmFyIGZvbnRTdWJzdGl0dXRpb24gPSBmdW5jdGlvbiBmb250U3Vic3RpdHV0aW9uKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkU3RyaW5nIGF0dHJpYnV0ZWQgc3RyaW5nXG4gICAqIEByZXR1cm5zIHtBdHRyaWJ1dGVkU3RyaW5nfSBhdHRyaWJ1dGVkIHN0cmluZ1xuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uIChhdHRyaWJ1dGVkU3RyaW5nKSB7XG4gICAgdmFyIHN0cmluZyA9IGF0dHJpYnV0ZWRTdHJpbmcuc3RyaW5nLFxuICAgICAgcnVucyA9IGF0dHJpYnV0ZWRTdHJpbmcucnVucztcbiAgICB2YXIgbGFzdEZvbnQgPSBudWxsO1xuICAgIHZhciBsYXN0SW5kZXggPSAwO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGlmICghc3RyaW5nKSByZXR1cm4gZW1wdHkoKTtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKHJ1bnMpLCBfc3RlcDsgIShfc3RlcCA9IF9pdGVyYXRvcigpKS5kb25lOykge1xuICAgICAgdmFyIHJ1biA9IF9zdGVwLnZhbHVlO1xuICAgICAgdmFyIF9mb250U2l6ZSA9IGdldEZvbnRTaXplKHJ1bik7XG4gICAgICB2YXIgZGVmYXVsdEZvbnQgPSBydW4uYXR0cmlidXRlcy5mb250O1xuICAgICAgaWYgKHN0cmluZy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmVzLnB1c2goe1xuICAgICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICAgIGVuZDogMCxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBmb250OiBkZWZhdWx0Rm9udFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2Uoc3RyaW5nLnNsaWNlKHJ1bi5zdGFydCwgcnVuLmVuZCkpLCBfc3RlcDI7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMigpKS5kb25lOykge1xuICAgICAgICB2YXIgY2hhciA9IF9zdGVwMi52YWx1ZTtcbiAgICAgICAgdmFyIGZvbnQgPSBkZWZhdWx0Rm9udDtcbiAgICAgICAgaWYgKGZvbnQgIT09IGxhc3RGb250KSB7XG4gICAgICAgICAgaWYgKGxhc3RGb250KSB7XG4gICAgICAgICAgICByZXMucHVzaCh7XG4gICAgICAgICAgICAgIHN0YXJ0OiBsYXN0SW5kZXgsXG4gICAgICAgICAgICAgIGVuZDogaW5kZXgsXG4gICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBmb250OiBsYXN0Rm9udCxcbiAgICAgICAgICAgICAgICBzY2FsZTogbGFzdEZvbnQgPyBfZm9udFNpemUgLyBsYXN0Rm9udC51bml0c1BlckVtIDogMFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGFzdEZvbnQgPSBmb250O1xuICAgICAgICAgIGxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ICs9IGNoYXIubGVuZ3RoO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobGFzdEluZGV4IDwgc3RyaW5nLmxlbmd0aCkge1xuICAgICAgdmFyIGZvbnRTaXplID0gZ2V0Rm9udFNpemUobGFzdChydW5zKSk7XG4gICAgICByZXMucHVzaCh7XG4gICAgICAgIHN0YXJ0OiBsYXN0SW5kZXgsXG4gICAgICAgIGVuZDogc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGZvbnQ6IGxhc3RGb250LFxuICAgICAgICAgIHNjYWxlOiBsYXN0Rm9udCA/IGZvbnRTaXplIC8gbGFzdEZvbnQudW5pdHNQZXJFbSA6IDBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzdHJpbmc6IHN0cmluZyxcbiAgICAgIHJ1bnM6IHJlc1xuICAgIH07XG4gIH07XG59O1xuXG5leHBvcnQgeyBiaWRpRW5naW5lIGFzIGJpZGksIGxheW91dEVuZ2luZSBhcyBkZWZhdWx0LCBmb250U3Vic3RpdHV0aW9uLCBqdXN0aWZpY2F0aW9uLCBsaW5lYnJlYWtlciwgc2NyaXB0SXRlbWl6ZXIsIHRleHREZWNvcmF0aW9uLCB3b3JkSHlwaGVuYXRpb24gfTtcbiJdLCJuYW1lcyI6WyJpc05pbCIsImxhc3QiLCJyZXBlYXQiLCJkcm9wTGFzdCIsImRyb3BMYXN0JDIiLCJhZGp1c3QiLCJjb21wb3NlIiwiX2V4dGVuZHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImJpZGlGYWN0b3J5IiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSIsInVuaWNvZGUiLCJoeXBoZW4iLCJwYXR0ZXJuIiwiZnJvbUZyYWdtZW50cyIsImZyYWdtZW50cyIsIm9mZnNldCIsInN0cmluZyIsInJ1bnMiLCJmb3JFYWNoIiwiZnJhZ21lbnQiLCJwdXNoIiwic3RhcnQiLCJlbmQiLCJsZW5ndGgiLCJhdHRyaWJ1dGVzIiwiZGVmYXVsdEh5cGhlbmF0aW9uRW5naW5lIiwid29yZCIsIndyYXBXb3JkcyIsImVuZ2luZXMiLCJvcHRpb25zIiwiYXR0cmlidXRlZFN0cmluZyIsIl9lbmdpbmVzJHdvcmRIeXBoZW5hdCIsIl9lbmdpbmVzIiwic3lsbGFibGVzIiwiaHlwaGVuYXRlV29yZCIsImh5cGhlbmF0aW9uQ2FsbGJhY2siLCJ3b3JkSHlwaGVuYXRpb24iLCJjYWxsIiwiaSIsInJ1biIsIndvcmRzIiwic2xpY2UiLCJzcGxpdCIsImZpbHRlciIsIkJvb2xlYW4iLCJqIiwicGFydHMiLCJhcHBseSIsImpvaW4iLCJjb3B5IiwicmVjdCIsIk9iamVjdCIsImFzc2lnbiIsInBhcnRpdGlvbiIsImhlaWdodCIsImEiLCJiIiwieSIsImNyb3AiLCJfcGFydGl0aW9uIiwicmVzdWx0IiwiaGVpZ2h0JDIiLCJwYXJhZ3JhcGgiLCJyZWR1Y2UiLCJhY2MiLCJibG9jayIsImJveCIsImNhbGN1bGF0ZVNjYWxlIiwiX2F0dHJpYnV0ZXMkZm9udCIsImZvbnRTaXplIiwidW5pdHNQZXJFbSIsImZvbnQiLCJzY2FsZSIsIl9ydW4kYXR0cmlidXRlcyIsImluZGV4IiwiZ2x5cGhJbmRpY2VzIiwidmFsdWUiLCJnZXRGb250Iiwic2xpY2UkMiIsImdseXBoIiwiY29kZVBvaW50cyIsIlN0cmluZyIsImZyb21Db2RlUG9pbnQiLCJsYXlvdXQiLCJ1bmRlZmluZWQiLCJnbHlwaHMiLCJnbHlwaEluZGV4QXQiLCJfcnVuJGdseXBoSW5kaWNlcyIsIm5vcm1hbGl6ZSIsImFycmF5IiwiaGVhZCIsIm1hcCIsInNsaWNlJDEiLCJfcnVuJGdseXBocyIsIl9ydW4kZ2x5cGhzMiIsInJ1blNjYWxlIiwic3RhcnRJbmRleCIsImVuZEluZGV4Iiwic3RhcnRHbHlwaCIsImVuZEdseXBoIiwic3RhcnRPZmZzZXQiLCJzdGFydEdseXBocyIsIkluZmluaXR5IiwiZW5kT2Zmc2V0IiwiZW5kR2x5cGhzIiwic2xpY2VTdGFydCIsIk1hdGgiLCJtaW4iLCJnbHlwaFBvc2l0aW9uIiwiZyIsInhBZHZhbmNlIiwiYWR2YW5jZVdpZHRoIiwic3RhcnRQb3NpdGlvbnMiLCJwb3NpdGlvbnMiLCJlbmRQb3NpdGlvbnMiLCJmbGF0IiwicnVuSW5kZXhBdCQxIiwicnVuSW5kZXhBdCIsIm4iLCJmaW5kSW5kZXgiLCJtYXgiLCJzdWJ0cmFjdCIsInNsaWNlUnVucyIsInNsaWNlRmlyc3RSdW4iLCJzbGljZUxhc3RSdW4iLCJpc0ZpcnN0IiwiaXNMYXN0IiwiZmlsdGVyZWRSdW5zIiwic2xpY2VkUnVucyIsImZpbmRDaGFySW5kZXgiLCJzZWFyY2giLCJmaW5kTGFzdENoYXJJbmRleCIsIm1hdGNoIiwibGFzdEluZGV4T2YiLCJ0cmltIiwiZW1wdHkkMSIsImVtcHR5IiwiaXNOdW1iZXIiLCJhcHBlbmRJbmRpY2VzIiwiaW5kaWNlcyIsImxhc3RJbmRleCIsIm5ld0luZGljZXMiLCJBcnJheSIsImZpbGwiLCJjb25jYXQiLCJnbHlwaEZvckNvZGVQb2ludCIsImFwcGVuZEdseXBoIiwiX2dseXBoJGNvZGVQb2ludHMiLCJnbHlwaExlbmd0aCIsImFwcGVuZCQxIiwiYXBwZW5kIiwic3RyaW5nRnJvbUNvZGVQb2ludHMiLCJjb2RlUG9pbnRzU3RyaW5nIiwiZmlyc3RSdW5zIiwibGFzdFJ1biIsIkVMTElQU0lTX1VOSUNPREUiLCJFTExJUFNJU19TVFJJTkciLCJmcm9tQ2hhckNvZGUiLCJnZXRFbGxpcHNpc0NvZGVQb2ludCIsImVuY29kZSIsIl9mb250JGVuY29kZSIsInBhcnNlSW50IiwidHJ1bmNhdGUiLCJfbGFzdCIsIl9sYXN0MiIsIl9sYXN0MiRhdHRyaWJ1dGVzIiwiX09iamVjdCRhc3NpZ24iLCJjb2RlUG9pbnQiLCJsYXN0QmxvY2siLCJvbWl0IiwiYXNjZW50JDEiLCJhc2NlbnQiLCJfcnVuJGF0dHJpYnV0ZXMkYXR0YWMiLCJfcnVuJGF0dHJpYnV0ZXMyIiwiX3J1biRhdHRyaWJ1dGVzMiRmb250IiwiYXR0YWNobWVudEhlaWdodCIsImF0dGFjaG1lbnQiLCJmb250QXNjZW50IiwiZGVzY2VudCIsIl9ydW4kYXR0cmlidXRlcyRmb250IiwiZm9udERlc2NlbnQiLCJsaW5lR2FwIiwiaGVpZ2h0JDEiLCJsaW5lSGVpZ2h0IiwicmVkdWNlciIsImludGVyc2VjdHMiLCJ4IiwibnVtMSIsIndpZHRoIiwibnVtMiIsIl9leGNsdWRlZCIsImdldExpbmVGcmFnbWVudCIsImxpbmVSZWN0IiwiZXhjbHVkZVJlY3QiLCJlU3RhcnQiLCJlRW5kIiwibFN0YXJ0IiwibEVuZCIsInIiLCJnZXRMaW5lRnJhZ21lbnRzIiwiZXhjbHVkZVJlY3RzIiwiX2xvb3AiLCJwaWVjZXMiLCJnZW5lcmF0ZUxpbmVSZWN0cyIsImNvbnRhaW5lciIsImxpbmVSZWN0cyIsIm1heFkiLCJjdXJyZW50UmVjdCIsInJlc3QiLCJsaW5lUmVjdEZyYWdtZW50cyIsIkFUVEFDSE1FTlRfQ09ERSQxIiwicHVyZ2VBdHRhY2htZW50cyIsInNob3VsZFB1cmdlIiwiaW5jbHVkZXMiLCJsYXlvdXRMaW5lcyIsInJlY3RzIiwibGluZXMiLCJpbmRlbnQiLCJzaGlmdCIsImN1cnJlbnRZIiwibGluZSIsIl9saW5lJHJ1bnMiLCJfbGluZSRydW5zJCIsImxpbmVJbmRlbnQiLCJzdHlsZSIsIm5ld0xpbmUiLCJsYXlvdXRQYXJhZ3JhcGgiLCJfcGFyYWdyYXBoJHJ1bnMiLCJfcGFyYWdyYXBoJHJ1bnMkIiwiX3BhcmFncmFwaCRydW5zJCRhdHRyIiwiYXZhaWxhYmxlV2lkdGhzIiwibGluZWJyZWFrZXIiLCJzbGljZUF0SGVpZ2h0IiwibmV3QmxvY2siLCJjb3VudGVyIiwidHlwZXNldHRlciIsImF0dHJpYnV0ZWRTdHJpbmdzIiwiYmxvY2tzIiwicGFyYWdyYXBocyIsImxheW91dEJsb2NrIiwibWF4TGluZXMiLCJ0cnVuY2F0ZUVsbGlwc2lzIiwidHJ1bmNhdGVNb2RlIiwibGluZXNDb3VudCIsInBhcmFncmFwaFJlY3QiLCJuZXh0UGFyYWdyYXBoIiwic2xpY2VkQmxvY2siLCJsaW5lc0hlaWdodCIsInNob3VsZFRydW5jYXRlIiwibGVuZ3RoJDEiLCJiaWRpJDIiLCJnZXRCaWRpTGV2ZWxzJDEiLCJnZXRCaWRpTGV2ZWxzIiwibGV2ZWxzIiwiYmlkaUxldmVsIiwiZ2V0UmVvcmRlcmVkSW5kaWNlcyIsInNlZ21lbnRzIiwiX3JlZiIsIl9pIiwiZ2V0SXRlbUF0SW5kZXgiLCJvYmplY3ROYW1lIiwidXBkYXRlZEluZGV4IiwiRXJyb3IiLCJyZW9yZGVyTGluZSIsIl9hdHRyaWJ1dGVkU3RyaW5nJHJ1biIsImRpcmVjdGlvbiIsImxldmVsIiwiZW1iZWRkaW5nTGV2ZWxzIiwiZ2V0UmVvcmRlclNlZ21lbnRzIiwidXBkYXRlZFN0cmluZyIsImdldFJlb3JkZXJlZFN0cmluZyIsInVwZGF0ZWRSdW5zIiwic2VsZWN0ZWRJbmRpY2VzIiwidXBkYXRlZEdseXBocyIsInVwZGF0ZWRQb3NpdGlvbnMiLCJhZGRlZEdseXBocyIsIlNldCIsImhhcyIsImlkIiwiaXNMaWdhdHVyZSIsImFkZCIsInJlb3JkZXJQYXJhZ3JhcGgiLCJiaWRpUmVvcmRlcmluZyIsIkRVTU1ZX0NPREVQT0lOVCIsInJlc29sdmUiLCJuZXh0IiwiZ2V0Q2hhcmFjdGVyU3BhY2luZyIsImNoYXJhY3RlclNwYWNpbmciLCJzY2FsZVBvc2l0aW9ucyIsInBvc2l0aW9uIiwieFNwYWNpbmciLCJ5QWR2YW5jZSIsInhPZmZzZXQiLCJ5T2Zmc2V0IiwibGF5b3V0UnVuIiwicnVuU3RyaW5nIiwiZ2x5cGhSdW4iLCJnZW5lcmF0ZUdseXBocyIsInJlc29sdmVSdW5ZT2Zmc2V0IiwicCIsInJlc29sdmVZT2Zmc2V0Iiwic29ydCIsImlzRW1wdHkiLCJzb3J0UG9pbnRzIiwiZ2VuZXJhdGVQb2ludHMiLCJtZXJnZVJ1bnMiLCJncm91cEVtcHR5UnVucyIsImdyb3VwcyIsInZhbHVlcyIsImZsYXR0ZW5FbXB0eVJ1bnMiLCJmbGF0dGVuUmVndWxhclJ1bnMiLCJyZXMiLCJwb2ludHMiLCJhdHRycyIsInN0YWNrIiwiX3BvaW50cyRpIiwidHlwZSIsInNwbGljZSIsImZsYXR0ZW4iLCJlbXB0eVJ1bnMiLCJyZWd1bGFyUnVucyIsIm9taXRGb250IiwicHJlcHJvY2Vzc1J1bnMiLCJmb250U3Vic3RpdHV0aW9uIiwic2NyaXB0SXRlbWl6ZXIiLCJiaWRpIiwiX29taXRGb250Iiwib21pdHRlZEZvbnRSdW5zIiwiX3NjcmlwdEl0ZW1pemVyIiwiaXRlbWl6YXRpb25SdW5zIiwiX2ZvbnRTdWJzdGl0dXRpb24iLCJzdWJzdGl0dXRlZFJ1bnMiLCJfYmlkaSIsImJpZGlSdW5zIiwic3BsaXRQYXJhZ3JhcGhzIiwiYnJlYWtQb2ludCIsImluZGV4T2YiLCJhZHZhbmNlV2lkdGgkMiIsInBvcyIsImFkdmFuY2VXaWR0aCQxIiwiV0hJVEVfU1BBQ0VTX0NPREUiLCJpc1doaXRlU3BhY2UiLCJsZWFkaW5nUG9zaXRpb25zIiwibGVhZGluZ1doaXRlc3BhY2VzIiwibGVhZGluZ09mZnNldCQxIiwibGVhZGluZ09mZnNldCIsInJldmVyc2UiLCJ0cmFpbGluZ1Bvc2l0aW9ucyIsInRyYWlsaW5nT2Zmc2V0JDEiLCJ0cmFpbGluZ09mZnNldCIsImRyb3BMYXN0JDEiLCJBTElHTk1FTlRfRkFDVE9SUyIsImNlbnRlciIsInJpZ2h0IiwicmVtb3ZlTmV3TGluZSIsImdldE92ZXJmbG93TGVmdCIsIm92ZXJmbG93TGVmdCIsImdldE92ZXJmbG93UmlnaHQiLCJvdmVyZmxvd1JpZ2h0IiwiYWRqdXN0T3ZlcmZsb3ciLCJqdXN0aWZ5TGluZSQxIiwianVzdGlmeUxpbmUiLCJhbGlnbiIsImxpbmVXaWR0aCIsImFsaWduRmFjdG9yIiwicmVtYWluaW5nV2lkdGgiLCJzaG91bGRKdXN0aWZ5IiwianVzdGlmaWNhdGlvbiIsImZpbmFsaXplTGluZSIsImxpbmVBc2NlbnQiLCJsaW5lRGVzY2VudCIsImxpbmVYQWR2YW5jZSIsImRlc2NlbnQkMSIsImZpbmFsaXplQmxvY2siLCJpc0xhc3RGcmFnbWVudCIsImFsaWduTGFzdExpbmUiLCJ0ZXh0RGVjb3JhdGlvbiIsImZpbmFsaXplRnJhZ21lbnRzIiwiYmxvY2tGaW5hbGl6ZXIiLCJBVFRBQ0hNRU5UX0NPREUiLCJpc1JlcGxhY2VHbHlwaCIsInJlc29sdmVSdW5BdHRhY2htZW50cyIsInJlc29sdmVBdHRhY2htZW50cyIsImFwcGx5QXR0cmlidXRlcyIsImJhY2tncm91bmRDb2xvciIsImJ1bGxldCIsImNvbG9yIiwiZmVhdHVyZXMiLCJoYW5naW5nUHVuY3R1YXRpb24iLCJoeXBoZW5hdGlvbkZhY3RvciIsImp1c3RpZmljYXRpb25GYWN0b3IiLCJsaW5lU3BhY2luZyIsImxpbmsiLCJtYXJnaW5MZWZ0IiwibWFyZ2luIiwibWFyZ2luUmlnaHQiLCJvcGFjaXR5IiwicGFkZGluZ1RvcCIsInBhZGRpbmciLCJwYXJhZ3JhcGhTcGFjaW5nIiwic2NyaXB0Iiwic2hyaW5rRmFjdG9yIiwic3RyaWtlIiwic3RyaWtlQ29sb3IiLCJzdHJpa2VTdHlsZSIsInN0cm9rZSIsInVuZGVybGluZSIsInVuZGVybGluZUNvbG9yIiwidW5kZXJsaW5lU3R5bGUiLCJ2ZXJ0aWNhbEFsaWduIiwid29yZFNwYWNpbmciLCJhcHBseVJ1blN0eWxlcyIsImFwcGx5RGVmYXVsdFN0eWxlcyIsInZlcnRpY2FsQWxpZ25tZW50IiwiYmlkaSQxIiwibWlycm9yU3RyaW5nIiwiY2hhciIsImlzUlRMIiwibWlycm9yZWRDaGFyIiwiZ2V0TWlycm9yZWRDaGFyYWN0ZXIiLCJjaGFyQXQiLCJsYXlvdXRFbmdpbmUiLCJwcm9jZXNzUGFyYWdyYXBoIiwicHJvY2Vzc1BhcmFncmFwaHMiLCJiaWRpRW5naW5lIiwiX2JpZGkkZ2V0RW1iZWRkaW5nTGV2IiwiZ2V0RW1iZWRkaW5nTGV2ZWxzIiwibGFzdExldmVsIiwiSU5GSU5JVFkiLCJnZXROZXh0QnJlYWtwb2ludCIsInN1Ym5vZGVzIiwid2lkdGhzIiwibGluZU51bWJlciIsIm1pbmltdW1CYWRuZXNzIiwic3VtIiwic3RyZXRjaCIsInNocmluayIsImxpbmVMZW5ndGgiLCJjYWxjdWxhdGVSYXRpbyIsIm5vZGUiLCJyYXRpbyIsInBlbmFsdHkiLCJiYWRuZXNzIiwicG93IiwiYWJzIiwiYXBwbHlCZXN0Rml0Iiwibm9kZXMiLCJjb3VudCIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludCIsIk5vZGUiLCJkYXRhIiwicHJldiIsIl9wcm90byIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiTGlua2VkTGlzdCIsInRhaWwiLCJsaXN0U2l6ZSIsImxpc3RMZW5ndGgiLCJfcHJvdG8yIiwiaXNMaW5rZWQiLCJzaXplIiwiZmlyc3QiLCJ0b0FycmF5IiwiZnVuIiwiY29udGFpbnMiLCJhdCIsImluc2VydEFmdGVyIiwibmV3Tm9kZSIsImluc2VydEJlZm9yZSIsInVuc2hpZnQiLCJyZW1vdmUiLCJwb3AiLCJsaW5lYnJlYWsiLCJzZXR0aW5ncyIsImRlbWVyaXRzIiwiZmxhZ2dlZCIsImZpdG5lc3MiLCJ0b2xlcmFuY2UiLCJhY3RpdmVOb2RlcyIsImxpbmVMZW5ndGhzIiwiYnJlYWtzIiwidG1wIiwiZml0bmVzc0NsYXNzIiwidG90YWxzIiwicHJldmlvdXMiLCJjb21wdXRlQ29zdCIsImFjdGl2ZSIsImN1cnJlbnRMaW5lIiwiaW5maW5pdHkiLCJjb21wdXRlU3VtIiwiYnJlYWtQb2ludEluZGV4IiwibWFpbkxvb3AiLCJjYW5kaWRhdGVzIiwidG1wU3VtIiwiY3VycmVudENsYXNzIiwiY2FuZGlkYXRlIiwiZ2x1ZSIsImh5cGhlbmF0ZWQiLCJydW5BIiwicnVuQiIsInJ1bkFJbmRpY2VzIiwicnVuQUxhc3RJbmRleCIsInJ1bkJJbmRpY2VzIiwiaW5zZXJ0R2x5cGgkMSIsImluc2VydEdseXBoIiwibGVhZGluZ1J1biIsInRyYWlsaW5nUnVuIiwiaW5zZXJ0IiwicnVuSW5kZXgiLCJhZHZhbmNlV2lkdGhCZXR3ZWVuJDEiLCJhZHZhbmNlV2lkdGhCZXR3ZWVuIiwicnVuU3RhcnQiLCJnbHlwaFN0YXJ0SW5kZXgiLCJnbHlwaEVuZEluZGV4IiwiSFlQSEVOIiwiVE9MRVJBTkNFX1NURVBTIiwiVE9MRVJBTkNFX0xJTUlUIiwib3B0cyIsImJyZWFrTGluZXMiLCJwcmV2Tm9kZSIsImdldE5vZGVzIiwiaHlwaGVuV2lkdGgiLCJoeXBoZW5QZW5hbHR5IiwiaHlwaGVuYXRpb25QZW5hbHR5IiwicyIsIl92YWx1ZSIsImdldFN0eWxlcyIsIl9hdHRyaWJ1dGVkU3RyaW5nJHJ1bjIiLCJXSElURVNQQUNFX1BSSU9SSVRZIiwiTEVUVEVSX1BSSU9SSVRZIiwiRVhQQU5EX1dISVRFU1BBQ0VfRkFDVE9SIiwiYmVmb3JlIiwiYWZ0ZXIiLCJwcmlvcml0eSIsInVuY29uc3RyYWluZWQiLCJFWFBBTkRfQ0hBUl9GQUNUT1IiLCJTSFJJTktfV0hJVEVTUEFDRV9GQUNUT1IiLCJTSFJJTktfQ0hBUl9GQUNUT1IiLCJnZXRDaGFyRmFjdG9yIiwiZXhwYW5kQ2hhckZhY3RvciIsInNocmlua0NoYXJGYWN0b3IiLCJnZXRXaGl0ZXNwYWNlRmFjdG9yIiwiZXhwYW5kV2hpdGVzcGFjZUZhY3RvciIsInNocmlua1doaXRlc3BhY2VGYWN0b3IiLCJmYWN0b3IiLCJjaGFyRmFjdG9yIiwid2hpdGVzcGFjZUZhY3RvciIsImZhY3RvcnMiLCJmIiwiaXNNYXJrIiwiZ2V0RmFjdG9ycyIsImdhcCIsImdldEZhY3RvciIsIktBU0hJREFfUFJJT1JJVFkiLCJOVUxMX1BSSU9SSVRZIiwiZ2V0RGlzdGFuY2VzIiwidG90YWwiLCJwcmlvcml0aWVzIiwiX3ByaW9yaXR5IiwiaGlnaGVzdFByaW9yaXR5IiwiaGlnaGVzdFByaW9yaXR5U3VtIiwicmVtYWluaW5nR2FwIiwicHJpb3JpdHlTdW0iLCJkaXN0YW5jZXMiLCJfZiIsImRpc3QiLCJfaXRlcmF0b3IiLCJfc3RlcCIsImRvbmUiLCJfaXRlcmF0b3IyIiwiX3N0ZXAyIiwiQkFTRV9GT05UX1NJWkUiLCJsaW5lRnJhZ21lbnQiLCJtYXhYIiwiZGVjb3JhdGlvbkxpbmVzIiwidGhpY2tuZXNzIiwiZmxvb3IiLCJfcmVjdCIsIl9saW5lIiwiaWdub3JlZFNjcmlwdHMiLCJsYXN0U2NyaXB0IiwiY29kZVBvaW50QXQiLCJnZXRTY3JpcHQiLCJTT0ZUX0hZUEhFTiIsImh5cGhlbmF0b3IiLCJzcGxpdEh5cGhlbiIsImNhY2hlIiwiZ2V0UGFydHMiLCJiYXNlIiwiY2FjaGVLZXkiLCJnZXRGb250U2l6ZSIsImxhc3RGb250IiwiX2ZvbnRTaXplIiwiZGVmYXVsdEZvbnQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-pdf/textkit/lib/textkit.js\n");

/***/ })

};
;