/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hsl-to-hex";
exports.ids = ["vendor-chunks/hsl-to-hex"];
exports.modules = {

/***/ "(ssr)/./node_modules/hsl-to-hex/index.js":
/*!******************************************!*\
  !*** ./node_modules/hsl-to-hex/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// In our case, there's only one dependency\nvar toRgb = __webpack_require__(/*! hsl-to-rgb-for-reals */ \"(ssr)/./node_modules/hsl-to-rgb-for-reals/converter.js\");\n// Typically all dependencies should be declared at the top of the file.\n// Now let's define an API for our module, we're taking hue, saturation and luminosity values and outputting a CSS compatible hex string.\n// Hue is in degrees, between 0 and 359. Since degrees a cyclical in nature, we'll support numbers greater than 359 or less than 0 by \"spinning\" them around until they fall within the 0 to 359 range.\n// Saturation and luminosity are both percentages, we'll represent these percentages with whole numbers between 0 and 100. For these numbers we'll need to enforce a maximum and a minimum, anything below 0 will become 0, anything above 100 will become 100.\n// Let's write some utility functions to handle this logic:\nfunction max(val, n) {\n    return val > n ? n : val;\n}\nfunction min(val, n) {\n    return val < n ? n : val;\n}\nfunction cycle(val) {\n    // for safety:\n    val = max(val, 1e7);\n    val = min(val, -1e7);\n    // cycle value:\n    while(val < 0){\n        val += 360;\n    }\n    while(val > 359){\n        val -= 360;\n    }\n    return val;\n}\n// Now for the main piece, the `hsl` function:\nfunction hsl(hue, saturation, luminosity) {\n    // resolve degrees to 0 - 359 range\n    hue = cycle(hue);\n    // enforce constraints\n    saturation = min(max(saturation, 100), 0);\n    luminosity = min(max(luminosity, 100), 0);\n    // convert to 0 to 1 range used by hsl-to-rgb-for-reals\n    saturation /= 100;\n    luminosity /= 100;\n    // let hsl-to-rgb-for-reals do the hard work\n    var rgb = toRgb(hue, saturation, luminosity);\n    // convert each value in the returned RGB array\n    // to a 2 character hex value, join the array into\n    // a string, prefixed with a hash\n    return \"#\" + rgb.map(function(n) {\n        return (256 + n).toString(16).substr(-2);\n    }).join(\"\");\n}\n// In order to make our code into a bona fide module we have to export it:\nmodule.exports = hsl;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHNsLXRvLWhleC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSwyQ0FBMkM7QUFFM0MsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFcEIsd0VBQXdFO0FBRXhFLHlJQUF5STtBQUN6SSx1TUFBdU07QUFDdk0sK1BBQStQO0FBQy9QLDJEQUEyRDtBQUUzRCxTQUFTQyxJQUFLQyxHQUFHLEVBQUVDLENBQUM7SUFDbEIsT0FBTyxNQUFPQSxJQUFLQSxJQUFJRDtBQUN6QjtBQUVBLFNBQVNFLElBQUtGLEdBQUcsRUFBRUMsQ0FBQztJQUNsQixPQUFPLE1BQU9BLElBQUtBLElBQUlEO0FBQ3pCO0FBRUEsU0FBU0csTUFBT0gsR0FBRztJQUNqQixjQUFjO0lBQ2RBLE1BQU1ELElBQUlDLEtBQUs7SUFDZkEsTUFBTUUsSUFBSUYsS0FBSyxDQUFDO0lBQ2hCLGVBQWU7SUFDZixNQUFPQSxNQUFNLEVBQUc7UUFBRUEsT0FBTztJQUFJO0lBQzdCLE1BQU9BLE1BQU0sSUFBSztRQUFFQSxPQUFPO0lBQUk7SUFDL0IsT0FBT0E7QUFDVDtBQUVBLDhDQUE4QztBQUU5QyxTQUFTSSxJQUFLQyxHQUFHLEVBQUVDLFVBQVUsRUFBRUMsVUFBVTtJQUN2QyxtQ0FBbUM7SUFDbkNGLE1BQU1GLE1BQU1FO0lBRVosc0JBQXNCO0lBQ3RCQyxhQUFhSixJQUFJSCxJQUFJTyxZQUFZLE1BQU07SUFDdkNDLGFBQWFMLElBQUlILElBQUlRLFlBQVksTUFBTTtJQUV2Qyx1REFBdUQ7SUFDdkRELGNBQWM7SUFDZEMsY0FBYztJQUVkLDRDQUE0QztJQUM1QyxJQUFJQyxNQUFNWCxNQUFNUSxLQUFLQyxZQUFZQztJQUVqQywrQ0FBK0M7SUFDL0Msa0RBQWtEO0lBQ2xELGlDQUFpQztJQUNqQyxPQUFPLE1BQU1DLElBQ1ZDLEdBQUcsQ0FBQyxTQUFVUixDQUFDO1FBQ2QsT0FBTyxDQUFDLE1BQU1BLENBQUFBLEVBQUdTLFFBQVEsQ0FBQyxJQUFJQyxNQUFNLENBQUMsQ0FBQztJQUN4QyxHQUNDQyxJQUFJLENBQUM7QUFDVjtBQUVBLDBFQUEwRTtBQUUxRUMsT0FBT0MsT0FBTyxHQUFHViIsInNvdXJjZXMiOlsid2VicGFjazovL2xlYXJucmVhY3RuZXh0Ly4vbm9kZV9tb2R1bGVzL2hzbC10by1oZXgvaW5kZXguanM/NzFjMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbiBvdXIgY2FzZSwgdGhlcmUncyBvbmx5IG9uZSBkZXBlbmRlbmN5XG5cbnZhciB0b1JnYiA9IHJlcXVpcmUoJ2hzbC10by1yZ2ItZm9yLXJlYWxzJylcblxuLy8gVHlwaWNhbGx5IGFsbCBkZXBlbmRlbmNpZXMgc2hvdWxkIGJlIGRlY2xhcmVkIGF0IHRoZSB0b3Agb2YgdGhlIGZpbGUuXG5cbi8vIE5vdyBsZXQncyBkZWZpbmUgYW4gQVBJIGZvciBvdXIgbW9kdWxlLCB3ZSdyZSB0YWtpbmcgaHVlLCBzYXR1cmF0aW9uIGFuZCBsdW1pbm9zaXR5IHZhbHVlcyBhbmQgb3V0cHV0dGluZyBhIENTUyBjb21wYXRpYmxlIGhleCBzdHJpbmcuXG4vLyBIdWUgaXMgaW4gZGVncmVlcywgYmV0d2VlbiAwIGFuZCAzNTkuIFNpbmNlIGRlZ3JlZXMgYSBjeWNsaWNhbCBpbiBuYXR1cmUsIHdlJ2xsIHN1cHBvcnQgbnVtYmVycyBncmVhdGVyIHRoYW4gMzU5IG9yIGxlc3MgdGhhbiAwIGJ5IFwic3Bpbm5pbmdcIiB0aGVtIGFyb3VuZCB1bnRpbCB0aGV5IGZhbGwgd2l0aGluIHRoZSAwIHRvIDM1OSByYW5nZS5cbi8vIFNhdHVyYXRpb24gYW5kIGx1bWlub3NpdHkgYXJlIGJvdGggcGVyY2VudGFnZXMsIHdlJ2xsIHJlcHJlc2VudCB0aGVzZSBwZXJjZW50YWdlcyB3aXRoIHdob2xlIG51bWJlcnMgYmV0d2VlbiAwIGFuZCAxMDAuIEZvciB0aGVzZSBudW1iZXJzIHdlJ2xsIG5lZWQgdG8gZW5mb3JjZSBhIG1heGltdW0gYW5kIGEgbWluaW11bSwgYW55dGhpbmcgYmVsb3cgMCB3aWxsIGJlY29tZSAwLCBhbnl0aGluZyBhYm92ZSAxMDAgd2lsbCBiZWNvbWUgMTAwLlxuLy8gTGV0J3Mgd3JpdGUgc29tZSB1dGlsaXR5IGZ1bmN0aW9ucyB0byBoYW5kbGUgdGhpcyBsb2dpYzpcblxuZnVuY3Rpb24gbWF4ICh2YWwsIG4pIHtcbiAgcmV0dXJuICh2YWwgPiBuKSA/IG4gOiB2YWxcbn1cblxuZnVuY3Rpb24gbWluICh2YWwsIG4pIHtcbiAgcmV0dXJuICh2YWwgPCBuKSA/IG4gOiB2YWxcbn1cblxuZnVuY3Rpb24gY3ljbGUgKHZhbCkge1xuICAvLyBmb3Igc2FmZXR5OlxuICB2YWwgPSBtYXgodmFsLCAxZTcpXG4gIHZhbCA9IG1pbih2YWwsIC0xZTcpXG4gIC8vIGN5Y2xlIHZhbHVlOlxuICB3aGlsZSAodmFsIDwgMCkgeyB2YWwgKz0gMzYwIH1cbiAgd2hpbGUgKHZhbCA+IDM1OSkgeyB2YWwgLT0gMzYwIH1cbiAgcmV0dXJuIHZhbFxufVxuXG4vLyBOb3cgZm9yIHRoZSBtYWluIHBpZWNlLCB0aGUgYGhzbGAgZnVuY3Rpb246XG5cbmZ1bmN0aW9uIGhzbCAoaHVlLCBzYXR1cmF0aW9uLCBsdW1pbm9zaXR5KSB7XG4gIC8vIHJlc29sdmUgZGVncmVlcyB0byAwIC0gMzU5IHJhbmdlXG4gIGh1ZSA9IGN5Y2xlKGh1ZSlcblxuICAvLyBlbmZvcmNlIGNvbnN0cmFpbnRzXG4gIHNhdHVyYXRpb24gPSBtaW4obWF4KHNhdHVyYXRpb24sIDEwMCksIDApXG4gIGx1bWlub3NpdHkgPSBtaW4obWF4KGx1bWlub3NpdHksIDEwMCksIDApXG5cbiAgLy8gY29udmVydCB0byAwIHRvIDEgcmFuZ2UgdXNlZCBieSBoc2wtdG8tcmdiLWZvci1yZWFsc1xuICBzYXR1cmF0aW9uIC89IDEwMFxuICBsdW1pbm9zaXR5IC89IDEwMFxuXG4gIC8vIGxldCBoc2wtdG8tcmdiLWZvci1yZWFscyBkbyB0aGUgaGFyZCB3b3JrXG4gIHZhciByZ2IgPSB0b1JnYihodWUsIHNhdHVyYXRpb24sIGx1bWlub3NpdHkpXG5cbiAgLy8gY29udmVydCBlYWNoIHZhbHVlIGluIHRoZSByZXR1cm5lZCBSR0IgYXJyYXlcbiAgLy8gdG8gYSAyIGNoYXJhY3RlciBoZXggdmFsdWUsIGpvaW4gdGhlIGFycmF5IGludG9cbiAgLy8gYSBzdHJpbmcsIHByZWZpeGVkIHdpdGggYSBoYXNoXG4gIHJldHVybiAnIycgKyByZ2JcbiAgICAubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICByZXR1cm4gKDI1NiArIG4pLnRvU3RyaW5nKDE2KS5zdWJzdHIoLTIpXG4gICAgfSlcbiAgICAuam9pbignJylcbn1cblxuLy8gSW4gb3JkZXIgdG8gbWFrZSBvdXIgY29kZSBpbnRvIGEgYm9uYSBmaWRlIG1vZHVsZSB3ZSBoYXZlIHRvIGV4cG9ydCBpdDpcblxubW9kdWxlLmV4cG9ydHMgPSBoc2xcbiJdLCJuYW1lcyI6WyJ0b1JnYiIsInJlcXVpcmUiLCJtYXgiLCJ2YWwiLCJuIiwibWluIiwiY3ljbGUiLCJoc2wiLCJodWUiLCJzYXR1cmF0aW9uIiwibHVtaW5vc2l0eSIsInJnYiIsIm1hcCIsInRvU3RyaW5nIiwic3Vic3RyIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hsl-to-hex/index.js\n");

/***/ })

};
;