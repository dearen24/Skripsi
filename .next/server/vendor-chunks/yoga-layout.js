/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/yoga-layout";
exports.ids = ["vendor-chunks/yoga-layout"];
exports.modules = {

/***/ "(ssr)/./node_modules/yoga-layout/binaries/wasm-async-node.js":
/*!**************************************************************!*\
  !*** ./node_modules/yoga-layout/binaries/wasm-async-node.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var loadYoga = (()=>{\n    var _scriptDir = typeof document !== \"undefined\" && document.currentScript ? document.currentScript.src : undefined;\n    if (true) _scriptDir = _scriptDir || __filename;\n    return function(loadYoga) {\n        loadYoga = loadYoga || {};\n        var g;\n        g || (g = typeof loadYoga !== \"undefined\" ? loadYoga : {});\n        var aa, q;\n        g.ready = new Promise(function(a, b) {\n            aa = a;\n            q = b;\n        });\n        var ba = Object.assign({}, g), ca = \"\", da, ea, fs = __webpack_require__(/*! fs */ \"fs\"), fa = __webpack_require__(/*! path */ \"path\");\n        ca = __dirname + \"/\";\n        da = (a)=>{\n            var b = ha(a);\n            if (b) return b;\n            a = a.startsWith(\"file://\") ? new URL(a) : fa.normalize(a);\n            return fs.readFileSync(a, void 0);\n        };\n        ea = (a)=>{\n            a = da(a);\n            a.buffer || (a = new Uint8Array(a));\n            return a;\n        };\n        1 < process.argv.length && process.argv[1].replace(/\\\\/g, \"/\");\n        process.argv.slice(2);\n        process.on(\"uncaughtException\", function(a) {\n            throw a;\n        });\n        process.on(\"unhandledRejection\", function(a) {\n            throw a;\n        });\n        g.inspect = function() {\n            return \"[Emscripten Module object]\";\n        };\n        var ia = g.print || console.log.bind(console), v = g.printErr || console.warn.bind(console);\n        Object.assign(g, ba);\n        ba = null;\n        var ja;\n        g.wasmBinary && (ja = g.wasmBinary);\n        var noExitRuntime = g.noExitRuntime || !0;\n        \"object\" != typeof WebAssembly && w(\"no native wasm support detected\");\n        var ka, la = !1;\n        function ma(a, b, c) {\n            c = b + c;\n            for(var d = \"\"; !(b >= c);){\n                var e = a[b++];\n                if (!e) break;\n                if (e & 128) {\n                    var f = a[b++] & 63;\n                    if (192 == (e & 224)) d += String.fromCharCode((e & 31) << 6 | f);\n                    else {\n                        var h = a[b++] & 63;\n                        e = 224 == (e & 240) ? (e & 15) << 12 | f << 6 | h : (e & 7) << 18 | f << 12 | h << 6 | a[b++] & 63;\n                        65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));\n                    }\n                } else d += String.fromCharCode(e);\n            }\n            return d;\n        }\n        var na, oa, x, z, pa, A, C, qa, ra;\n        function sa() {\n            var a = ka.buffer;\n            na = a;\n            g.HEAP8 = oa = new Int8Array(a);\n            g.HEAP16 = z = new Int16Array(a);\n            g.HEAP32 = A = new Int32Array(a);\n            g.HEAPU8 = x = new Uint8Array(a);\n            g.HEAPU16 = pa = new Uint16Array(a);\n            g.HEAPU32 = C = new Uint32Array(a);\n            g.HEAPF32 = qa = new Float32Array(a);\n            g.HEAPF64 = ra = new Float64Array(a);\n        }\n        var ta, ua = [], va = [], wa = [];\n        function xa() {\n            var a = g.preRun.shift();\n            ua.unshift(a);\n        }\n        var D = 0, ya = null, E = null;\n        function w(a) {\n            if (g.onAbort) g.onAbort(a);\n            a = \"Aborted(\" + a + \")\";\n            v(a);\n            la = !0;\n            a = new WebAssembly.RuntimeError(a + \". Build with -sASSERTIONS for more info.\");\n            q(a);\n            throw a;\n        }\n        var za = \"data:application/octet-stream;base64,\", F;\n        F = \"data:application/octet-stream;base64,\";\n        if (!F.startsWith(za)) {\n            var Aa = F;\n            F = g.locateFile ? g.locateFile(Aa, ca) : ca + Aa;\n        }\n        function Ba() {\n            var a = F;\n            try {\n                if (a == F && ja) return new Uint8Array(ja);\n                var b = ha(a);\n                if (b) return b;\n                if (ea) return ea(a);\n                throw \"both async and sync fetching of the wasm failed\";\n            } catch (c) {\n                w(c);\n            }\n        }\n        function Ca() {\n            return Promise.resolve().then(function() {\n                return Ba();\n            });\n        }\n        function Da(a) {\n            for(; 0 < a.length;)a.shift()(g);\n        }\n        function Ea(a) {\n            if (void 0 === a) return \"_unknown\";\n            a = a.replace(/[^a-zA-Z0-9_]/g, \"$\");\n            var b = a.charCodeAt(0);\n            return 48 <= b && 57 >= b ? \"_\" + a : a;\n        }\n        function Fa(a, b) {\n            a = Ea(a);\n            return function() {\n                return b.apply(this, arguments);\n            };\n        }\n        var H = [\n            {},\n            {\n                value: void 0\n            },\n            {\n                value: null\n            },\n            {\n                value: !0\n            },\n            {\n                value: !1\n            }\n        ], Ga = [];\n        function Ha(a) {\n            var b = Error, c = Fa(a, function(d) {\n                this.name = a;\n                this.message = d;\n                d = Error(d).stack;\n                void 0 !== d && (this.stack = this.toString() + \"\\n\" + d.replace(/^Error(:[^\\n]*)?\\n/, \"\"));\n            });\n            c.prototype = Object.create(b.prototype);\n            c.prototype.constructor = c;\n            c.prototype.toString = function() {\n                return void 0 === this.message ? this.name : this.name + \": \" + this.message;\n            };\n            return c;\n        }\n        var I = void 0;\n        function J(a) {\n            throw new I(a);\n        }\n        var K = (a)=>{\n            a || J(\"Cannot use deleted val. handle = \" + a);\n            return H[a].value;\n        }, Ia = (a)=>{\n            switch(a){\n                case void 0:\n                    return 1;\n                case null:\n                    return 2;\n                case !0:\n                    return 3;\n                case !1:\n                    return 4;\n                default:\n                    var b = Ga.length ? Ga.pop() : H.length;\n                    H[b] = {\n                        ga: 1,\n                        value: a\n                    };\n                    return b;\n            }\n        }, Ja = void 0, Ka = void 0;\n        function L(a) {\n            for(var b = \"\"; x[a];)b += Ka[x[a++]];\n            return b;\n        }\n        var M = [];\n        function La() {\n            for(; M.length;){\n                var a = M.pop();\n                a.L.Z = !1;\n                a[\"delete\"]();\n            }\n        }\n        var N = void 0, O = {};\n        function Ma(a, b) {\n            for(void 0 === b && J(\"ptr should not be undefined\"); a.P;)b = a.aa(b), a = a.P;\n            return b;\n        }\n        var P = {};\n        function Na(a) {\n            a = Oa(a);\n            var b = L(a);\n            Q(a);\n            return b;\n        }\n        function Pa(a, b) {\n            var c = P[a];\n            void 0 === c && J(b + \" has unknown type \" + Na(a));\n            return c;\n        }\n        function Qa() {}\n        var Ra = !1;\n        function Sa(a) {\n            --a.count.value;\n            0 === a.count.value && (a.S ? a.T.V(a.S) : a.O.M.V(a.N));\n        }\n        function Ta(a, b, c) {\n            if (b === c) return a;\n            if (void 0 === c.P) return null;\n            a = Ta(a, b, c.P);\n            return null === a ? null : c.na(a);\n        }\n        var Ua = {};\n        function Va(a, b) {\n            b = Ma(a, b);\n            return O[b];\n        }\n        var Wa = void 0;\n        function Xa(a) {\n            throw new Wa(a);\n        }\n        function Ya(a, b) {\n            b.O && b.N || Xa(\"makeClassHandle requires ptr and ptrType\");\n            !!b.T !== !!b.S && Xa(\"Both smartPtrType and smartPtr must be specified\");\n            b.count = {\n                value: 1\n            };\n            return R(Object.create(a, {\n                L: {\n                    value: b\n                }\n            }));\n        }\n        function R(a) {\n            if (\"undefined\" === typeof FinalizationRegistry) return R = (b)=>b, a;\n            Ra = new FinalizationRegistry((b)=>{\n                Sa(b.L);\n            });\n            R = (b)=>{\n                var c = b.L;\n                c.S && Ra.register(b, {\n                    L: c\n                }, b);\n                return b;\n            };\n            Qa = (b)=>{\n                Ra.unregister(b);\n            };\n            return R(a);\n        }\n        var Za = {};\n        function $a(a) {\n            for(; a.length;){\n                var b = a.pop();\n                a.pop()(b);\n            }\n        }\n        function S(a) {\n            return this.fromWireType(A[a >> 2]);\n        }\n        var T = {}, ab = {};\n        function U(a, b, c) {\n            function d(k) {\n                k = c(k);\n                k.length !== a.length && Xa(\"Mismatched type converter count\");\n                for(var m = 0; m < a.length; ++m)V(a[m], k[m]);\n            }\n            a.forEach(function(k) {\n                ab[k] = b;\n            });\n            var e = Array(b.length), f = [], h = 0;\n            b.forEach((k, m)=>{\n                P.hasOwnProperty(k) ? e[m] = P[k] : (f.push(k), T.hasOwnProperty(k) || (T[k] = []), T[k].push(()=>{\n                    e[m] = P[k];\n                    ++h;\n                    h === f.length && d(e);\n                }));\n            });\n            0 === f.length && d(e);\n        }\n        function bb(a) {\n            switch(a){\n                case 1:\n                    return 0;\n                case 2:\n                    return 1;\n                case 4:\n                    return 2;\n                case 8:\n                    return 3;\n                default:\n                    throw new TypeError(\"Unknown type size: \" + a);\n            }\n        }\n        function V(a, b, c = {}) {\n            if (!(\"argPackAdvance\" in b)) throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");\n            var d = b.name;\n            a || J('type \"' + d + '\" must have a positive integer typeid pointer');\n            if (P.hasOwnProperty(a)) {\n                if (c.ua) return;\n                J(\"Cannot register type '\" + d + \"' twice\");\n            }\n            P[a] = b;\n            delete ab[a];\n            T.hasOwnProperty(a) && (b = T[a], delete T[a], b.forEach((e)=>e()));\n        }\n        function cb(a) {\n            J(a.L.O.M.name + \" instance already deleted\");\n        }\n        function W() {}\n        function db(a, b, c) {\n            if (void 0 === a[b].R) {\n                var d = a[b];\n                a[b] = function() {\n                    a[b].R.hasOwnProperty(arguments.length) || J(\"Function '\" + c + \"' called with an invalid number of arguments (\" + arguments.length + \") - expects one of (\" + a[b].R + \")!\");\n                    return a[b].R[arguments.length].apply(this, arguments);\n                };\n                a[b].R = [];\n                a[b].R[d.Y] = d;\n            }\n        }\n        function eb(a, b) {\n            g.hasOwnProperty(a) ? (J(\"Cannot register public name '\" + a + \"' twice\"), db(g, a, a), g.hasOwnProperty(void 0) && J(\"Cannot register multiple overloads of a function with the same number of arguments (undefined)!\"), g[a].R[void 0] = b) : g[a] = b;\n        }\n        function fb(a, b, c, d, e, f, h, k) {\n            this.name = a;\n            this.constructor = b;\n            this.W = c;\n            this.V = d;\n            this.P = e;\n            this.pa = f;\n            this.aa = h;\n            this.na = k;\n            this.ja = [];\n        }\n        function gb(a, b, c) {\n            for(; b !== c;)b.aa || J(\"Expected null or instance of \" + c.name + \", got an instance of \" + b.name), a = b.aa(a), b = b.P;\n            return a;\n        }\n        function hb(a, b) {\n            if (null === b) return this.ea && J(\"null is not a valid \" + this.name), 0;\n            b.L || J('Cannot pass \"' + ib(b) + '\" as a ' + this.name);\n            b.L.N || J(\"Cannot pass deleted object as a pointer of type \" + this.name);\n            return gb(b.L.N, b.L.O.M, this.M);\n        }\n        function jb(a, b) {\n            if (null === b) {\n                this.ea && J(\"null is not a valid \" + this.name);\n                if (this.da) {\n                    var c = this.fa();\n                    null !== a && a.push(this.V, c);\n                    return c;\n                }\n                return 0;\n            }\n            b.L || J('Cannot pass \"' + ib(b) + '\" as a ' + this.name);\n            b.L.N || J(\"Cannot pass deleted object as a pointer of type \" + this.name);\n            !this.ba && b.L.O.ba && J(\"Cannot convert argument of type \" + (b.L.T ? b.L.T.name : b.L.O.name) + \" to parameter type \" + this.name);\n            c = gb(b.L.N, b.L.O.M, this.M);\n            if (this.da) switch(void 0 === b.L.S && J(\"Passing raw pointer to smart pointer is illegal\"), this.Ba){\n                case 0:\n                    b.L.T === this ? c = b.L.S : J(\"Cannot convert argument of type \" + (b.L.T ? b.L.T.name : b.L.O.name) + \" to parameter type \" + this.name);\n                    break;\n                case 1:\n                    c = b.L.S;\n                    break;\n                case 2:\n                    if (b.L.T === this) c = b.L.S;\n                    else {\n                        var d = b.clone();\n                        c = this.xa(c, Ia(function() {\n                            d[\"delete\"]();\n                        }));\n                        null !== a && a.push(this.V, c);\n                    }\n                    break;\n                default:\n                    J(\"Unsupporting sharing policy\");\n            }\n            return c;\n        }\n        function kb(a, b) {\n            if (null === b) return this.ea && J(\"null is not a valid \" + this.name), 0;\n            b.L || J('Cannot pass \"' + ib(b) + '\" as a ' + this.name);\n            b.L.N || J(\"Cannot pass deleted object as a pointer of type \" + this.name);\n            b.L.O.ba && J(\"Cannot convert argument of type \" + b.L.O.name + \" to parameter type \" + this.name);\n            return gb(b.L.N, b.L.O.M, this.M);\n        }\n        function Y(a, b, c, d) {\n            this.name = a;\n            this.M = b;\n            this.ea = c;\n            this.ba = d;\n            this.da = !1;\n            this.V = this.xa = this.fa = this.ka = this.Ba = this.wa = void 0;\n            void 0 !== b.P ? this.toWireType = jb : (this.toWireType = d ? hb : kb, this.U = null);\n        }\n        function lb(a, b) {\n            g.hasOwnProperty(a) || Xa(\"Replacing nonexistant public symbol\");\n            g[a] = b;\n            g[a].Y = void 0;\n        }\n        function ob(a, b) {\n            var c = [];\n            return function() {\n                c.length = 0;\n                Object.assign(c, arguments);\n                if (a.includes(\"j\")) {\n                    var d = g[\"dynCall_\" + a];\n                    d = c && c.length ? d.apply(null, [\n                        b\n                    ].concat(c)) : d.call(null, b);\n                } else d = ta.get(b).apply(null, c);\n                return d;\n            };\n        }\n        function Z(a, b) {\n            a = L(a);\n            var c = a.includes(\"j\") ? ob(a, b) : ta.get(b);\n            \"function\" != typeof c && J(\"unknown function pointer with signature \" + a + \": \" + b);\n            return c;\n        }\n        var pb = void 0;\n        function qb(a, b) {\n            function c(f) {\n                e[f] || P[f] || (ab[f] ? ab[f].forEach(c) : (d.push(f), e[f] = !0));\n            }\n            var d = [], e = {};\n            b.forEach(c);\n            throw new pb(a + \": \" + d.map(Na).join([\n                \", \"\n            ]));\n        }\n        function rb(a, b, c, d, e) {\n            var f = b.length;\n            2 > f && J(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n            var h = null !== b[1] && null !== c, k = !1;\n            for(c = 1; c < b.length; ++c)if (null !== b[c] && void 0 === b[c].U) {\n                k = !0;\n                break;\n            }\n            var m = \"void\" !== b[0].name, l = f - 2, n = Array(l), p = [], r = [];\n            return function() {\n                arguments.length !== l && J(\"function \" + a + \" called with \" + arguments.length + \" arguments, expected \" + l + \" args!\");\n                r.length = 0;\n                p.length = h ? 2 : 1;\n                p[0] = e;\n                if (h) {\n                    var u = b[1].toWireType(r, this);\n                    p[1] = u;\n                }\n                for(var t = 0; t < l; ++t)n[t] = b[t + 2].toWireType(r, arguments[t]), p.push(n[t]);\n                t = d.apply(null, p);\n                if (k) $a(r);\n                else for(var y = h ? 1 : 2; y < b.length; y++){\n                    var B = 1 === y ? u : n[y - 2];\n                    null !== b[y].U && b[y].U(B);\n                }\n                u = m ? b[0].fromWireType(t) : void 0;\n                return u;\n            };\n        }\n        function sb(a, b) {\n            for(var c = [], d = 0; d < a; d++)c.push(C[b + 4 * d >> 2]);\n            return c;\n        }\n        function tb(a) {\n            4 < a && 0 === --H[a].ga && (H[a] = void 0, Ga.push(a));\n        }\n        function ib(a) {\n            if (null === a) return \"null\";\n            var b = typeof a;\n            return \"object\" === b || \"array\" === b || \"function\" === b ? a.toString() : \"\" + a;\n        }\n        function ub(a, b) {\n            switch(b){\n                case 2:\n                    return function(c) {\n                        return this.fromWireType(qa[c >> 2]);\n                    };\n                case 3:\n                    return function(c) {\n                        return this.fromWireType(ra[c >> 3]);\n                    };\n                default:\n                    throw new TypeError(\"Unknown float type: \" + a);\n            }\n        }\n        function vb(a, b, c) {\n            switch(b){\n                case 0:\n                    return c ? function(d) {\n                        return oa[d];\n                    } : function(d) {\n                        return x[d];\n                    };\n                case 1:\n                    return c ? function(d) {\n                        return z[d >> 1];\n                    } : function(d) {\n                        return pa[d >> 1];\n                    };\n                case 2:\n                    return c ? function(d) {\n                        return A[d >> 2];\n                    } : function(d) {\n                        return C[d >> 2];\n                    };\n                default:\n                    throw new TypeError(\"Unknown integer type: \" + a);\n            }\n        }\n        function wb(a, b) {\n            for(var c = \"\", d = 0; !(d >= b / 2); ++d){\n                var e = z[a + 2 * d >> 1];\n                if (0 == e) break;\n                c += String.fromCharCode(e);\n            }\n            return c;\n        }\n        function xb(a, b, c) {\n            void 0 === c && (c = 2147483647);\n            if (2 > c) return 0;\n            c -= 2;\n            var d = b;\n            c = c < 2 * a.length ? c / 2 : a.length;\n            for(var e = 0; e < c; ++e)z[b >> 1] = a.charCodeAt(e), b += 2;\n            z[b >> 1] = 0;\n            return b - d;\n        }\n        function yb(a) {\n            return 2 * a.length;\n        }\n        function zb(a, b) {\n            for(var c = 0, d = \"\"; !(c >= b / 4);){\n                var e = A[a + 4 * c >> 2];\n                if (0 == e) break;\n                ++c;\n                65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);\n            }\n            return d;\n        }\n        function Ab(a, b, c) {\n            void 0 === c && (c = 2147483647);\n            if (4 > c) return 0;\n            var d = b;\n            c = d + c - 4;\n            for(var e = 0; e < a.length; ++e){\n                var f = a.charCodeAt(e);\n                if (55296 <= f && 57343 >= f) {\n                    var h = a.charCodeAt(++e);\n                    f = 65536 + ((f & 1023) << 10) | h & 1023;\n                }\n                A[b >> 2] = f;\n                b += 4;\n                if (b + 4 > c) break;\n            }\n            A[b >> 2] = 0;\n            return b - d;\n        }\n        function Bb(a) {\n            for(var b = 0, c = 0; c < a.length; ++c){\n                var d = a.charCodeAt(c);\n                55296 <= d && 57343 >= d && ++c;\n                b += 4;\n            }\n            return b;\n        }\n        var Cb = {};\n        function Db(a) {\n            var b = Cb[a];\n            return void 0 === b ? L(a) : b;\n        }\n        var Eb = [];\n        function Fb(a) {\n            var b = Eb.length;\n            Eb.push(a);\n            return b;\n        }\n        function Gb(a, b) {\n            for(var c = Array(a), d = 0; d < a; ++d)c[d] = Pa(C[b + 4 * d >> 2], \"parameter \" + d);\n            return c;\n        }\n        var Hb = [], Ib = [\n            null,\n            [],\n            []\n        ];\n        I = g.BindingError = Ha(\"BindingError\");\n        g.count_emval_handles = function() {\n            for(var a = 0, b = 5; b < H.length; ++b)void 0 !== H[b] && ++a;\n            return a;\n        };\n        g.get_first_emval = function() {\n            for(var a = 5; a < H.length; ++a)if (void 0 !== H[a]) return H[a];\n            return null;\n        };\n        Ja = g.PureVirtualError = Ha(\"PureVirtualError\");\n        for(var Jb = Array(256), Kb = 0; 256 > Kb; ++Kb)Jb[Kb] = String.fromCharCode(Kb);\n        Ka = Jb;\n        g.getInheritedInstanceCount = function() {\n            return Object.keys(O).length;\n        };\n        g.getLiveInheritedInstances = function() {\n            var a = [], b;\n            for(b in O)O.hasOwnProperty(b) && a.push(O[b]);\n            return a;\n        };\n        g.flushPendingDeletes = La;\n        g.setDelayFunction = function(a) {\n            N = a;\n            M.length && N && N(La);\n        };\n        Wa = g.InternalError = Ha(\"InternalError\");\n        W.prototype.isAliasOf = function(a) {\n            if (!(this instanceof W && a instanceof W)) return !1;\n            var b = this.L.O.M, c = this.L.N, d = a.L.O.M;\n            for(a = a.L.N; b.P;)c = b.aa(c), b = b.P;\n            for(; d.P;)a = d.aa(a), d = d.P;\n            return b === d && c === a;\n        };\n        W.prototype.clone = function() {\n            this.L.N || cb(this);\n            if (this.L.$) return this.L.count.value += 1, this;\n            var a = R, b = Object, c = b.create, d = Object.getPrototypeOf(this), e = this.L;\n            a = a(c.call(b, d, {\n                L: {\n                    value: {\n                        count: e.count,\n                        Z: e.Z,\n                        $: e.$,\n                        N: e.N,\n                        O: e.O,\n                        S: e.S,\n                        T: e.T\n                    }\n                }\n            }));\n            a.L.count.value += 1;\n            a.L.Z = !1;\n            return a;\n        };\n        W.prototype[\"delete\"] = function() {\n            this.L.N || cb(this);\n            this.L.Z && !this.L.$ && J(\"Object already scheduled for deletion\");\n            Qa(this);\n            Sa(this.L);\n            this.L.$ || (this.L.S = void 0, this.L.N = void 0);\n        };\n        W.prototype.isDeleted = function() {\n            return !this.L.N;\n        };\n        W.prototype.deleteLater = function() {\n            this.L.N || cb(this);\n            this.L.Z && !this.L.$ && J(\"Object already scheduled for deletion\");\n            M.push(this);\n            1 === M.length && N && N(La);\n            this.L.Z = !0;\n            return this;\n        };\n        Y.prototype.qa = function(a) {\n            this.ka && (a = this.ka(a));\n            return a;\n        };\n        Y.prototype.ha = function(a) {\n            this.V && this.V(a);\n        };\n        Y.prototype.argPackAdvance = 8;\n        Y.prototype.readValueFromPointer = S;\n        Y.prototype.deleteObject = function(a) {\n            if (null !== a) a[\"delete\"]();\n        };\n        Y.prototype.fromWireType = function(a) {\n            function b() {\n                return this.da ? Ya(this.M.W, {\n                    O: this.wa,\n                    N: c,\n                    T: this,\n                    S: a\n                }) : Ya(this.M.W, {\n                    O: this,\n                    N: a\n                });\n            }\n            var c = this.qa(a);\n            if (!c) return this.ha(a), null;\n            var d = Va(this.M, c);\n            if (void 0 !== d) {\n                if (0 === d.L.count.value) return d.L.N = c, d.L.S = a, d.clone();\n                d = d.clone();\n                this.ha(a);\n                return d;\n            }\n            d = this.M.pa(c);\n            d = Ua[d];\n            if (!d) return b.call(this);\n            d = this.ba ? d.la : d.pointerType;\n            var e = Ta(c, this.M, d.M);\n            return null === e ? b.call(this) : this.da ? Ya(d.M.W, {\n                O: d,\n                N: e,\n                T: this,\n                S: a\n            }) : Ya(d.M.W, {\n                O: d,\n                N: e\n            });\n        };\n        pb = g.UnboundTypeError = Ha(\"UnboundTypeError\");\n        function ha(a) {\n            if (a.startsWith(za)) return a = a.slice(za.length), a = Buffer.from(a, \"base64\"), new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\n        }\n        var Mb = {\n            p: function(a, b, c) {\n                a = L(a);\n                b = Pa(b, \"wrapper\");\n                c = K(c);\n                var d = [].slice, e = b.M, f = e.W, h = e.P.W, k = e.P.constructor;\n                a = Fa(a, function() {\n                    e.P.ja.forEach((function(l) {\n                        if (this[l] === h[l]) throw new Ja(\"Pure virtual function \" + l + \" must be implemented in JavaScript\");\n                    }).bind(this));\n                    Object.defineProperty(this, \"__parent\", {\n                        value: f\n                    });\n                    this.__construct.apply(this, d.call(arguments));\n                });\n                f.__construct = function() {\n                    this === f && J(\"Pass correct 'this' to __construct\");\n                    var l = k.implement.apply(void 0, [\n                        this\n                    ].concat(d.call(arguments)));\n                    Qa(l);\n                    var n = l.L;\n                    l.notifyOnDestruction();\n                    n.$ = !0;\n                    Object.defineProperties(this, {\n                        L: {\n                            value: n\n                        }\n                    });\n                    R(this);\n                    l = n.N;\n                    l = Ma(e, l);\n                    O.hasOwnProperty(l) ? J(\"Tried to register registered instance: \" + l) : O[l] = this;\n                };\n                f.__destruct = function() {\n                    this === f && J(\"Pass correct 'this' to __destruct\");\n                    Qa(this);\n                    var l = this.L.N;\n                    l = Ma(e, l);\n                    O.hasOwnProperty(l) ? delete O[l] : J(\"Tried to unregister unregistered instance: \" + l);\n                };\n                a.prototype = Object.create(f);\n                for(var m in c)a.prototype[m] = c[m];\n                return Ia(a);\n            },\n            j: function(a) {\n                var b = Za[a];\n                delete Za[a];\n                var c = b.fa, d = b.V, e = b.ia, f = e.map((h)=>h.ta).concat(e.map((h)=>h.za));\n                U([\n                    a\n                ], f, (h)=>{\n                    var k = {};\n                    e.forEach((m, l)=>{\n                        var n = h[l], p = m.ra, r = m.sa, u = h[l + e.length], t = m.ya, y = m.Aa;\n                        k[m.oa] = {\n                            read: (B)=>n.fromWireType(p(r, B)),\n                            write: (B, X)=>{\n                                var G = [];\n                                t(y, B, u.toWireType(G, X));\n                                $a(G);\n                            }\n                        };\n                    });\n                    return [\n                        {\n                            name: b.name,\n                            fromWireType: function(m) {\n                                var l = {}, n;\n                                for(n in k)l[n] = k[n].read(m);\n                                d(m);\n                                return l;\n                            },\n                            toWireType: function(m, l) {\n                                for(var n in k)if (!(n in l)) throw new TypeError('Missing field:  \"' + n + '\"');\n                                var p = c();\n                                for(n in k)k[n].write(p, l[n]);\n                                null !== m && m.push(d, p);\n                                return p;\n                            },\n                            argPackAdvance: 8,\n                            readValueFromPointer: S,\n                            U: d\n                        }\n                    ];\n                });\n            },\n            v: function() {},\n            B: function(a, b, c, d, e) {\n                var f = bb(c);\n                b = L(b);\n                V(a, {\n                    name: b,\n                    fromWireType: function(h) {\n                        return !!h;\n                    },\n                    toWireType: function(h, k) {\n                        return k ? d : e;\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: function(h) {\n                        if (1 === c) var k = oa;\n                        else if (2 === c) k = z;\n                        else if (4 === c) k = A;\n                        else throw new TypeError(\"Unknown boolean type size: \" + b);\n                        return this.fromWireType(k[h >> f]);\n                    },\n                    U: null\n                });\n            },\n            f: function(a, b, c, d, e, f, h, k, m, l, n, p, r) {\n                n = L(n);\n                f = Z(e, f);\n                k && (k = Z(h, k));\n                l && (l = Z(m, l));\n                r = Z(p, r);\n                var u = Ea(n);\n                eb(u, function() {\n                    qb(\"Cannot construct \" + n + \" due to unbound types\", [\n                        d\n                    ]);\n                });\n                U([\n                    a,\n                    b,\n                    c\n                ], d ? [\n                    d\n                ] : [], function(t) {\n                    t = t[0];\n                    if (d) {\n                        var y = t.M;\n                        var B = y.W;\n                    } else B = W.prototype;\n                    t = Fa(u, function() {\n                        if (Object.getPrototypeOf(this) !== X) throw new I(\"Use 'new' to construct \" + n);\n                        if (void 0 === G.X) throw new I(n + \" has no accessible constructor\");\n                        var mb = G.X[arguments.length];\n                        if (void 0 === mb) throw new I(\"Tried to invoke ctor of \" + n + \" with invalid number of parameters (\" + arguments.length + \") - expected (\" + Object.keys(G.X).toString() + \") parameters instead!\");\n                        return mb.apply(this, arguments);\n                    });\n                    var X = Object.create(B, {\n                        constructor: {\n                            value: t\n                        }\n                    });\n                    t.prototype = X;\n                    var G = new fb(n, t, X, r, y, f, k, l);\n                    y = new Y(n, G, !0, !1);\n                    B = new Y(n + \"*\", G, !1, !1);\n                    var nb = new Y(n + \" const*\", G, !1, !0);\n                    Ua[a] = {\n                        pointerType: B,\n                        la: nb\n                    };\n                    lb(u, t);\n                    return [\n                        y,\n                        B,\n                        nb\n                    ];\n                });\n            },\n            c: function(a, b, c, d, e, f, h) {\n                var k = sb(c, d);\n                b = L(b);\n                f = Z(e, f);\n                U([], [\n                    a\n                ], function(m) {\n                    function l() {\n                        qb(\"Cannot call \" + n + \" due to unbound types\", k);\n                    }\n                    m = m[0];\n                    var n = m.name + \".\" + b;\n                    b.startsWith(\"@@\") && (b = Symbol[b.substring(2)]);\n                    var p = m.M.constructor;\n                    void 0 === p[b] ? (l.Y = c - 1, p[b] = l) : (db(p, b, n), p[b].R[c - 1] = l);\n                    U([], k, function(r) {\n                        r = [\n                            r[0],\n                            null\n                        ].concat(r.slice(1));\n                        r = rb(n, r, null, f, h);\n                        void 0 === p[b].R ? (r.Y = c - 1, p[b] = r) : p[b].R[c - 1] = r;\n                        return [];\n                    });\n                    return [];\n                });\n            },\n            o: function(a, b, c, d, e, f) {\n                0 < b || w();\n                var h = sb(b, c);\n                e = Z(d, e);\n                U([], [\n                    a\n                ], function(k) {\n                    k = k[0];\n                    var m = \"constructor \" + k.name;\n                    void 0 === k.M.X && (k.M.X = []);\n                    if (void 0 !== k.M.X[b - 1]) throw new I(\"Cannot register multiple constructors with identical number of parameters (\" + (b - 1) + \") for class '\" + k.name + \"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");\n                    k.M.X[b - 1] = ()=>{\n                        qb(\"Cannot construct \" + k.name + \" due to unbound types\", h);\n                    };\n                    U([], h, function(l) {\n                        l.splice(1, 0, null);\n                        k.M.X[b - 1] = rb(m, l, null, e, f);\n                        return [];\n                    });\n                    return [];\n                });\n            },\n            a: function(a, b, c, d, e, f, h, k) {\n                var m = sb(c, d);\n                b = L(b);\n                f = Z(e, f);\n                U([], [\n                    a\n                ], function(l) {\n                    function n() {\n                        qb(\"Cannot call \" + p + \" due to unbound types\", m);\n                    }\n                    l = l[0];\n                    var p = l.name + \".\" + b;\n                    b.startsWith(\"@@\") && (b = Symbol[b.substring(2)]);\n                    k && l.M.ja.push(b);\n                    var r = l.M.W, u = r[b];\n                    void 0 === u || void 0 === u.R && u.className !== l.name && u.Y === c - 2 ? (n.Y = c - 2, n.className = l.name, r[b] = n) : (db(r, b, p), r[b].R[c - 2] = n);\n                    U([], m, function(t) {\n                        t = rb(p, t, l, f, h);\n                        void 0 === r[b].R ? (t.Y = c - 2, r[b] = t) : r[b].R[c - 2] = t;\n                        return [];\n                    });\n                    return [];\n                });\n            },\n            A: function(a, b) {\n                b = L(b);\n                V(a, {\n                    name: b,\n                    fromWireType: function(c) {\n                        var d = K(c);\n                        tb(c);\n                        return d;\n                    },\n                    toWireType: function(c, d) {\n                        return Ia(d);\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: S,\n                    U: null\n                });\n            },\n            m: function(a, b, c) {\n                c = bb(c);\n                b = L(b);\n                V(a, {\n                    name: b,\n                    fromWireType: function(d) {\n                        return d;\n                    },\n                    toWireType: function(d, e) {\n                        return e;\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: ub(b, c),\n                    U: null\n                });\n            },\n            d: function(a, b, c, d, e) {\n                b = L(b);\n                -1 === e && (e = 4294967295);\n                e = bb(c);\n                var f = (k)=>k;\n                if (0 === d) {\n                    var h = 32 - 8 * c;\n                    f = (k)=>k << h >>> h;\n                }\n                c = b.includes(\"unsigned\") ? function(k, m) {\n                    return m >>> 0;\n                } : function(k, m) {\n                    return m;\n                };\n                V(a, {\n                    name: b,\n                    fromWireType: f,\n                    toWireType: c,\n                    argPackAdvance: 8,\n                    readValueFromPointer: vb(b, e, 0 !== d),\n                    U: null\n                });\n            },\n            b: function(a, b, c) {\n                function d(f) {\n                    f >>= 2;\n                    var h = C;\n                    return new e(na, h[f + 1], h[f]);\n                }\n                var e = [\n                    Int8Array,\n                    Uint8Array,\n                    Int16Array,\n                    Uint16Array,\n                    Int32Array,\n                    Uint32Array,\n                    Float32Array,\n                    Float64Array\n                ][b];\n                c = L(c);\n                V(a, {\n                    name: c,\n                    fromWireType: d,\n                    argPackAdvance: 8,\n                    readValueFromPointer: d\n                }, {\n                    ua: !0\n                });\n            },\n            n: function(a, b) {\n                b = L(b);\n                var c = \"std::string\" === b;\n                V(a, {\n                    name: b,\n                    fromWireType: function(d) {\n                        var e = C[d >> 2], f = d + 4;\n                        if (c) for(var h = f, k = 0; k <= e; ++k){\n                            var m = f + k;\n                            if (k == e || 0 == x[m]) {\n                                h = h ? ma(x, h, m - h) : \"\";\n                                if (void 0 === l) var l = h;\n                                else l += String.fromCharCode(0), l += h;\n                                h = m + 1;\n                            }\n                        }\n                        else {\n                            l = Array(e);\n                            for(k = 0; k < e; ++k)l[k] = String.fromCharCode(x[f + k]);\n                            l = l.join(\"\");\n                        }\n                        Q(d);\n                        return l;\n                    },\n                    toWireType: function(d, e) {\n                        e instanceof ArrayBuffer && (e = new Uint8Array(e));\n                        var f, h = \"string\" == typeof e;\n                        h || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array || J(\"Cannot pass non-string to std::string\");\n                        if (c && h) {\n                            var k = 0;\n                            for(f = 0; f < e.length; ++f){\n                                var m = e.charCodeAt(f);\n                                127 >= m ? k++ : 2047 >= m ? k += 2 : 55296 <= m && 57343 >= m ? (k += 4, ++f) : k += 3;\n                            }\n                            f = k;\n                        } else f = e.length;\n                        k = Lb(4 + f + 1);\n                        m = k + 4;\n                        C[k >> 2] = f;\n                        if (c && h) {\n                            if (h = m, m = f + 1, f = x, 0 < m) {\n                                m = h + m - 1;\n                                for(var l = 0; l < e.length; ++l){\n                                    var n = e.charCodeAt(l);\n                                    if (55296 <= n && 57343 >= n) {\n                                        var p = e.charCodeAt(++l);\n                                        n = 65536 + ((n & 1023) << 10) | p & 1023;\n                                    }\n                                    if (127 >= n) {\n                                        if (h >= m) break;\n                                        f[h++] = n;\n                                    } else {\n                                        if (2047 >= n) {\n                                            if (h + 1 >= m) break;\n                                            f[h++] = 192 | n >> 6;\n                                        } else {\n                                            if (65535 >= n) {\n                                                if (h + 2 >= m) break;\n                                                f[h++] = 224 | n >> 12;\n                                            } else {\n                                                if (h + 3 >= m) break;\n                                                f[h++] = 240 | n >> 18;\n                                                f[h++] = 128 | n >> 12 & 63;\n                                            }\n                                            f[h++] = 128 | n >> 6 & 63;\n                                        }\n                                        f[h++] = 128 | n & 63;\n                                    }\n                                }\n                                f[h] = 0;\n                            }\n                        } else if (h) for(h = 0; h < f; ++h)l = e.charCodeAt(h), 255 < l && (Q(m), J(\"String has UTF-16 code units that do not fit in 8 bits\")), x[m + h] = l;\n                        else for(h = 0; h < f; ++h)x[m + h] = e[h];\n                        null !== d && d.push(Q, k);\n                        return k;\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: S,\n                    U: function(d) {\n                        Q(d);\n                    }\n                });\n            },\n            i: function(a, b, c) {\n                c = L(c);\n                if (2 === b) {\n                    var d = wb;\n                    var e = xb;\n                    var f = yb;\n                    var h = ()=>pa;\n                    var k = 1;\n                } else 4 === b && (d = zb, e = Ab, f = Bb, h = ()=>C, k = 2);\n                V(a, {\n                    name: c,\n                    fromWireType: function(m) {\n                        for(var l = C[m >> 2], n = h(), p, r = m + 4, u = 0; u <= l; ++u){\n                            var t = m + 4 + u * b;\n                            if (u == l || 0 == n[t >> k]) r = d(r, t - r), void 0 === p ? p = r : (p += String.fromCharCode(0), p += r), r = t + b;\n                        }\n                        Q(m);\n                        return p;\n                    },\n                    toWireType: function(m, l) {\n                        \"string\" != typeof l && J(\"Cannot pass non-string to C++ string type \" + c);\n                        var n = f(l), p = Lb(4 + n + b);\n                        C[p >> 2] = n >> k;\n                        e(l, p + 4, n + b);\n                        null !== m && m.push(Q, p);\n                        return p;\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: S,\n                    U: function(m) {\n                        Q(m);\n                    }\n                });\n            },\n            k: function(a, b, c, d, e, f) {\n                Za[a] = {\n                    name: L(b),\n                    fa: Z(c, d),\n                    V: Z(e, f),\n                    ia: []\n                };\n            },\n            h: function(a, b, c, d, e, f, h, k, m, l) {\n                Za[a].ia.push({\n                    oa: L(b),\n                    ta: c,\n                    ra: Z(d, e),\n                    sa: f,\n                    za: h,\n                    ya: Z(k, m),\n                    Aa: l\n                });\n            },\n            C: function(a, b) {\n                b = L(b);\n                V(a, {\n                    va: !0,\n                    name: b,\n                    argPackAdvance: 0,\n                    fromWireType: function() {},\n                    toWireType: function() {}\n                });\n            },\n            s: function(a, b, c, d, e) {\n                a = Eb[a];\n                b = K(b);\n                c = Db(c);\n                var f = [];\n                C[d >> 2] = Ia(f);\n                return a(b, c, f, e);\n            },\n            t: function(a, b, c, d) {\n                a = Eb[a];\n                b = K(b);\n                c = Db(c);\n                a(b, c, null, d);\n            },\n            g: tb,\n            l: function(a, b) {\n                var c = Gb(a, b), d = c[0];\n                b = d.name + \"_$\" + c.slice(1).map(function(h) {\n                    return h.name;\n                }).join(\"_\") + \"$\";\n                var e = Hb[b];\n                if (void 0 !== e) return e;\n                var f = Array(a - 1);\n                e = Fb((h, k, m, l)=>{\n                    for(var n = 0, p = 0; p < a - 1; ++p)f[p] = c[p + 1].readValueFromPointer(l + n), n += c[p + 1].argPackAdvance;\n                    h = h[k].apply(h, f);\n                    for(p = 0; p < a - 1; ++p)c[p + 1].ma && c[p + 1].ma(f[p]);\n                    if (!d.va) return d.toWireType(m, h);\n                });\n                return Hb[b] = e;\n            },\n            q: function(a) {\n                4 < a && (H[a].ga += 1);\n            },\n            r: function(a) {\n                var b = K(a);\n                $a(b);\n                tb(a);\n            },\n            e: function() {\n                w(\"\");\n            },\n            x: function(a, b, c) {\n                x.copyWithin(a, b, b + c);\n            },\n            w: function(a) {\n                var b = x.length;\n                a >>>= 0;\n                if (2147483648 < a) return !1;\n                for(var c = 1; 4 >= c; c *= 2){\n                    var d = b * (1 + .2 / c);\n                    d = Math.min(d, a + 100663296);\n                    var e = Math;\n                    d = Math.max(a, d);\n                    e = e.min.call(e, 2147483648, d + (65536 - d % 65536) % 65536);\n                    a: {\n                        try {\n                            ka.grow(e - na.byteLength + 65535 >>> 16);\n                            sa();\n                            var f = 1;\n                            break a;\n                        } catch (h) {}\n                        f = void 0;\n                    }\n                    if (f) return !0;\n                }\n                return !1;\n            },\n            z: function() {\n                return 52;\n            },\n            u: function() {\n                return 70;\n            },\n            y: function(a, b, c, d) {\n                for(var e = 0, f = 0; f < c; f++){\n                    var h = C[b >> 2], k = C[b + 4 >> 2];\n                    b += 8;\n                    for(var m = 0; m < k; m++){\n                        var l = x[h + m], n = Ib[a];\n                        0 === l || 10 === l ? ((1 === a ? ia : v)(ma(n, 0)), n.length = 0) : n.push(l);\n                    }\n                    e += k;\n                }\n                C[d >> 2] = e;\n                return 0;\n            }\n        };\n        (function() {\n            function a(c) {\n                g.asm = c.exports;\n                ka = g.asm.D;\n                sa();\n                ta = g.asm.I;\n                va.unshift(g.asm.E);\n                D--;\n                g.monitorRunDependencies && g.monitorRunDependencies(D);\n                0 == D && (null !== ya && (clearInterval(ya), ya = null), E && (c = E, E = null, c()));\n            }\n            var b = {\n                a: Mb\n            };\n            D++;\n            g.monitorRunDependencies && g.monitorRunDependencies(D);\n            if (g.instantiateWasm) try {\n                return g.instantiateWasm(b, a);\n            } catch (c) {\n                v(\"Module.instantiateWasm callback failed with error: \" + c), q(c);\n            }\n            (function(c) {\n                return Ca().then(function(d) {\n                    return WebAssembly.instantiate(d, b);\n                }).then(function(d) {\n                    return d;\n                }).then(c, function(d) {\n                    v(\"failed to asynchronously prepare wasm: \" + d);\n                    w(d);\n                });\n            })(function(c) {\n                a(c.instance);\n            }).catch(q);\n            return {};\n        })();\n        g.___wasm_call_ctors = function() {\n            return (g.___wasm_call_ctors = g.asm.E).apply(null, arguments);\n        };\n        var Oa = g.___getTypeName = function() {\n            return (Oa = g.___getTypeName = g.asm.F).apply(null, arguments);\n        };\n        g.__embind_initialize_bindings = function() {\n            return (g.__embind_initialize_bindings = g.asm.G).apply(null, arguments);\n        };\n        var Lb = g._malloc = function() {\n            return (Lb = g._malloc = g.asm.H).apply(null, arguments);\n        }, Q = g._free = function() {\n            return (Q = g._free = g.asm.J).apply(null, arguments);\n        };\n        g.dynCall_jiji = function() {\n            return (g.dynCall_jiji = g.asm.K).apply(null, arguments);\n        };\n        var Nb;\n        E = function Ob() {\n            Nb || Pb();\n            Nb || (E = Ob);\n        };\n        function Pb() {\n            function a() {\n                if (!Nb && (Nb = !0, g.calledRun = !0, !la)) {\n                    Da(va);\n                    aa(g);\n                    if (g.onRuntimeInitialized) g.onRuntimeInitialized();\n                    if (g.postRun) for(\"function\" == typeof g.postRun && (g.postRun = [\n                        g.postRun\n                    ]); g.postRun.length;){\n                        var b = g.postRun.shift();\n                        wa.unshift(b);\n                    }\n                    Da(wa);\n                }\n            }\n            if (!(0 < D)) {\n                if (g.preRun) for(\"function\" == typeof g.preRun && (g.preRun = [\n                    g.preRun\n                ]); g.preRun.length;)xa();\n                Da(ua);\n                0 < D || (g.setStatus ? (g.setStatus(\"Running...\"), setTimeout(function() {\n                    setTimeout(function() {\n                        g.setStatus(\"\");\n                    }, 1);\n                    a();\n                }, 1)) : a());\n            }\n        }\n        if (g.preInit) for(\"function\" == typeof g.preInit && (g.preInit = [\n            g.preInit\n        ]); 0 < g.preInit.length;)g.preInit.pop()();\n        Pb();\n        return loadYoga.ready;\n    };\n})();\nif (true) module.exports = loadYoga;\nelse {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/yoga-layout/binaries/wasm-async-node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/yoga-layout/src/entrypoint/wasm-async-node.js":
/*!********************************************************************!*\
  !*** ./node_modules/yoga-layout/src/entrypoint/wasm-async-node.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar _exportNames = {\n    loadYoga: true\n};\nexports.loadYoga = loadYoga;\nvar _wrapAssembly = _interopRequireDefault(__webpack_require__(/*! ../wrapAssembly */ \"(ssr)/./node_modules/yoga-layout/src/wrapAssembly.js\"));\nvar _YGEnums = __webpack_require__(/*! ../generated/YGEnums */ \"(ssr)/./node_modules/yoga-layout/src/generated/YGEnums.js\");\nObject.keys(_YGEnums).forEach(function(key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n    if (key in exports && exports[key] === _YGEnums[key]) return;\n    Object.defineProperty(exports, key, {\n        enumerable: true,\n        get: function() {\n            return _YGEnums[key];\n        }\n    });\n});\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */ const loadAssembly = __webpack_require__(/*! ../../binaries/wasm-async-node */ \"(ssr)/./node_modules/yoga-layout/binaries/wasm-async-node.js\");\nasync function loadYoga() {\n    return (0, _wrapAssembly.default)(await loadAssembly());\n} //# sourceMappingURL=wasm-async-node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveW9nYS1sYXlvdXQvc3JjL2VudHJ5cG9pbnQvd2FzbS1hc3luYy1ub2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGLElBQUlDLGVBQWU7SUFDakJDLFVBQVU7QUFDWjtBQUNBSCxnQkFBZ0IsR0FBR0c7QUFDbkIsSUFBSUMsZ0JBQWdCQyx1QkFBdUJDLG1CQUFPQSxDQUFDLDZFQUFpQjtBQUNwRSxJQUFJQyxXQUFXRCxtQkFBT0EsQ0FBQyx1RkFBc0I7QUFDN0NSLE9BQU9VLElBQUksQ0FBQ0QsVUFBVUUsT0FBTyxDQUFDLFNBQVVDLEdBQUc7SUFDekMsSUFBSUEsUUFBUSxhQUFhQSxRQUFRLGNBQWM7SUFDL0MsSUFBSVosT0FBT2EsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1gsY0FBY1EsTUFBTTtJQUM3RCxJQUFJQSxPQUFPVixXQUFXQSxPQUFPLENBQUNVLElBQUksS0FBS0gsUUFBUSxDQUFDRyxJQUFJLEVBQUU7SUFDdERaLE9BQU9DLGNBQWMsQ0FBQ0MsU0FBU1UsS0FBSztRQUNsQ0ksWUFBWTtRQUNaQyxLQUFLO1lBQ0gsT0FBT1IsUUFBUSxDQUFDRyxJQUFJO1FBQ3RCO0lBQ0Y7QUFDRjtBQUNBLFNBQVNMLHVCQUF1QlcsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFRSxTQUFTRjtJQUFJO0FBQUc7QUFDOUY7Ozs7Ozs7Q0FPQyxHQUVELE1BQU1HLGVBQWViLG1CQUFPQSxDQUFDO0FBQzdCLGVBQWVIO0lBQ2IsT0FBTyxDQUFDLEdBQUdDLGNBQWNjLE9BQU8sRUFBRSxNQUFNQztBQUMxQyxFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlYXJucmVhY3RuZXh0Ly4vbm9kZV9tb2R1bGVzL3lvZ2EtbGF5b3V0L3NyYy9lbnRyeXBvaW50L3dhc20tYXN5bmMtbm9kZS5qcz8zZmVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIF9leHBvcnROYW1lcyA9IHtcbiAgbG9hZFlvZ2E6IHRydWVcbn07XG5leHBvcnRzLmxvYWRZb2dhID0gbG9hZFlvZ2E7XG52YXIgX3dyYXBBc3NlbWJseSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3dyYXBBc3NlbWJseVwiKSk7XG52YXIgX1lHRW51bXMgPSByZXF1aXJlKFwiLi4vZ2VuZXJhdGVkL1lHRW51bXNcIik7XG5PYmplY3Qua2V5cyhfWUdFbnVtcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiIHx8IGtleSA9PT0gXCJfX2VzTW9kdWxlXCIpIHJldHVybjtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfZXhwb3J0TmFtZXMsIGtleSkpIHJldHVybjtcbiAgaWYgKGtleSBpbiBleHBvcnRzICYmIGV4cG9ydHNba2V5XSA9PT0gX1lHRW51bXNba2V5XSkgcmV0dXJuO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfWUdFbnVtc1trZXldO1xuICAgIH1cbiAgfSk7XG59KTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG4vKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICovXG5cbmNvbnN0IGxvYWRBc3NlbWJseSA9IHJlcXVpcmUoJy4uLy4uL2JpbmFyaWVzL3dhc20tYXN5bmMtbm9kZScpO1xuYXN5bmMgZnVuY3Rpb24gbG9hZFlvZ2EoKSB7XG4gIHJldHVybiAoMCwgX3dyYXBBc3NlbWJseS5kZWZhdWx0KShhd2FpdCBsb2FkQXNzZW1ibHkoKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13YXNtLWFzeW5jLW5vZGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2V4cG9ydE5hbWVzIiwibG9hZFlvZ2EiLCJfd3JhcEFzc2VtYmx5IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfWUdFbnVtcyIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibG9hZEFzc2VtYmx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/yoga-layout/src/entrypoint/wasm-async-node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/yoga-layout/src/generated/YGEnums.js":
/*!***********************************************************!*\
  !*** ./node_modules/yoga-layout/src/generated/YGEnums.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.Wrap = exports.Unit = exports.PrintOptions = exports.PositionType = exports.Overflow = exports.NodeType = exports.MeasureMode = exports.LogLevel = exports.Justify = exports.Gutter = exports.FlexDirection = exports.ExperimentalFeature = exports.Errata = exports.Edge = exports.Display = exports.Direction = exports.Dimension = exports.Align = void 0;\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ // @generated by enums.py\nlet Align = /*#__PURE__*/ function(Align) {\n    Align[Align[\"Auto\"] = 0] = \"Auto\";\n    Align[Align[\"FlexStart\"] = 1] = \"FlexStart\";\n    Align[Align[\"Center\"] = 2] = \"Center\";\n    Align[Align[\"FlexEnd\"] = 3] = \"FlexEnd\";\n    Align[Align[\"Stretch\"] = 4] = \"Stretch\";\n    Align[Align[\"Baseline\"] = 5] = \"Baseline\";\n    Align[Align[\"SpaceBetween\"] = 6] = \"SpaceBetween\";\n    Align[Align[\"SpaceAround\"] = 7] = \"SpaceAround\";\n    return Align;\n}({});\nexports.Align = Align;\nlet Dimension = /*#__PURE__*/ function(Dimension) {\n    Dimension[Dimension[\"Width\"] = 0] = \"Width\";\n    Dimension[Dimension[\"Height\"] = 1] = \"Height\";\n    return Dimension;\n}({});\nexports.Dimension = Dimension;\nlet Direction = /*#__PURE__*/ function(Direction) {\n    Direction[Direction[\"Inherit\"] = 0] = \"Inherit\";\n    Direction[Direction[\"LTR\"] = 1] = \"LTR\";\n    Direction[Direction[\"RTL\"] = 2] = \"RTL\";\n    return Direction;\n}({});\nexports.Direction = Direction;\nlet Display = /*#__PURE__*/ function(Display) {\n    Display[Display[\"Flex\"] = 0] = \"Flex\";\n    Display[Display[\"None\"] = 1] = \"None\";\n    return Display;\n}({});\nexports.Display = Display;\nlet Edge = /*#__PURE__*/ function(Edge) {\n    Edge[Edge[\"Left\"] = 0] = \"Left\";\n    Edge[Edge[\"Top\"] = 1] = \"Top\";\n    Edge[Edge[\"Right\"] = 2] = \"Right\";\n    Edge[Edge[\"Bottom\"] = 3] = \"Bottom\";\n    Edge[Edge[\"Start\"] = 4] = \"Start\";\n    Edge[Edge[\"End\"] = 5] = \"End\";\n    Edge[Edge[\"Horizontal\"] = 6] = \"Horizontal\";\n    Edge[Edge[\"Vertical\"] = 7] = \"Vertical\";\n    Edge[Edge[\"All\"] = 8] = \"All\";\n    return Edge;\n}({});\nexports.Edge = Edge;\nlet Errata = /*#__PURE__*/ function(Errata) {\n    Errata[Errata[\"None\"] = 0] = \"None\";\n    Errata[Errata[\"StretchFlexBasis\"] = 1] = \"StretchFlexBasis\";\n    Errata[Errata[\"All\"] = 2147483647] = \"All\";\n    Errata[Errata[\"Classic\"] = 2147483646] = \"Classic\";\n    return Errata;\n}({});\nexports.Errata = Errata;\nlet ExperimentalFeature = /*#__PURE__*/ function(ExperimentalFeature) {\n    ExperimentalFeature[ExperimentalFeature[\"WebFlexBasis\"] = 0] = \"WebFlexBasis\";\n    ExperimentalFeature[ExperimentalFeature[\"AbsolutePercentageAgainstPaddingEdge\"] = 1] = \"AbsolutePercentageAgainstPaddingEdge\";\n    ExperimentalFeature[ExperimentalFeature[\"FixJNILocalRefOverflows\"] = 2] = \"FixJNILocalRefOverflows\";\n    return ExperimentalFeature;\n}({});\nexports.ExperimentalFeature = ExperimentalFeature;\nlet FlexDirection = /*#__PURE__*/ function(FlexDirection) {\n    FlexDirection[FlexDirection[\"Column\"] = 0] = \"Column\";\n    FlexDirection[FlexDirection[\"ColumnReverse\"] = 1] = \"ColumnReverse\";\n    FlexDirection[FlexDirection[\"Row\"] = 2] = \"Row\";\n    FlexDirection[FlexDirection[\"RowReverse\"] = 3] = \"RowReverse\";\n    return FlexDirection;\n}({});\nexports.FlexDirection = FlexDirection;\nlet Gutter = /*#__PURE__*/ function(Gutter) {\n    Gutter[Gutter[\"Column\"] = 0] = \"Column\";\n    Gutter[Gutter[\"Row\"] = 1] = \"Row\";\n    Gutter[Gutter[\"All\"] = 2] = \"All\";\n    return Gutter;\n}({});\nexports.Gutter = Gutter;\nlet Justify = /*#__PURE__*/ function(Justify) {\n    Justify[Justify[\"FlexStart\"] = 0] = \"FlexStart\";\n    Justify[Justify[\"Center\"] = 1] = \"Center\";\n    Justify[Justify[\"FlexEnd\"] = 2] = \"FlexEnd\";\n    Justify[Justify[\"SpaceBetween\"] = 3] = \"SpaceBetween\";\n    Justify[Justify[\"SpaceAround\"] = 4] = \"SpaceAround\";\n    Justify[Justify[\"SpaceEvenly\"] = 5] = \"SpaceEvenly\";\n    return Justify;\n}({});\nexports.Justify = Justify;\nlet LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n    LogLevel[LogLevel[\"Warn\"] = 1] = \"Warn\";\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n    LogLevel[LogLevel[\"Debug\"] = 3] = \"Debug\";\n    LogLevel[LogLevel[\"Verbose\"] = 4] = \"Verbose\";\n    LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\n    return LogLevel;\n}({});\nexports.LogLevel = LogLevel;\nlet MeasureMode = /*#__PURE__*/ function(MeasureMode) {\n    MeasureMode[MeasureMode[\"Undefined\"] = 0] = \"Undefined\";\n    MeasureMode[MeasureMode[\"Exactly\"] = 1] = \"Exactly\";\n    MeasureMode[MeasureMode[\"AtMost\"] = 2] = \"AtMost\";\n    return MeasureMode;\n}({});\nexports.MeasureMode = MeasureMode;\nlet NodeType = /*#__PURE__*/ function(NodeType) {\n    NodeType[NodeType[\"Default\"] = 0] = \"Default\";\n    NodeType[NodeType[\"Text\"] = 1] = \"Text\";\n    return NodeType;\n}({});\nexports.NodeType = NodeType;\nlet Overflow = /*#__PURE__*/ function(Overflow) {\n    Overflow[Overflow[\"Visible\"] = 0] = \"Visible\";\n    Overflow[Overflow[\"Hidden\"] = 1] = \"Hidden\";\n    Overflow[Overflow[\"Scroll\"] = 2] = \"Scroll\";\n    return Overflow;\n}({});\nexports.Overflow = Overflow;\nlet PositionType = /*#__PURE__*/ function(PositionType) {\n    PositionType[PositionType[\"Static\"] = 0] = \"Static\";\n    PositionType[PositionType[\"Relative\"] = 1] = \"Relative\";\n    PositionType[PositionType[\"Absolute\"] = 2] = \"Absolute\";\n    return PositionType;\n}({});\nexports.PositionType = PositionType;\nlet PrintOptions = /*#__PURE__*/ function(PrintOptions) {\n    PrintOptions[PrintOptions[\"Layout\"] = 1] = \"Layout\";\n    PrintOptions[PrintOptions[\"Style\"] = 2] = \"Style\";\n    PrintOptions[PrintOptions[\"Children\"] = 4] = \"Children\";\n    return PrintOptions;\n}({});\nexports.PrintOptions = PrintOptions;\nlet Unit = /*#__PURE__*/ function(Unit) {\n    Unit[Unit[\"Undefined\"] = 0] = \"Undefined\";\n    Unit[Unit[\"Point\"] = 1] = \"Point\";\n    Unit[Unit[\"Percent\"] = 2] = \"Percent\";\n    Unit[Unit[\"Auto\"] = 3] = \"Auto\";\n    return Unit;\n}({});\nexports.Unit = Unit;\nlet Wrap = /*#__PURE__*/ function(Wrap) {\n    Wrap[Wrap[\"NoWrap\"] = 0] = \"NoWrap\";\n    Wrap[Wrap[\"Wrap\"] = 1] = \"Wrap\";\n    Wrap[Wrap[\"WrapReverse\"] = 2] = \"WrapReverse\";\n    return Wrap;\n}({});\nexports.Wrap = Wrap;\nconst constants = {\n    ALIGN_AUTO: Align.Auto,\n    ALIGN_FLEX_START: Align.FlexStart,\n    ALIGN_CENTER: Align.Center,\n    ALIGN_FLEX_END: Align.FlexEnd,\n    ALIGN_STRETCH: Align.Stretch,\n    ALIGN_BASELINE: Align.Baseline,\n    ALIGN_SPACE_BETWEEN: Align.SpaceBetween,\n    ALIGN_SPACE_AROUND: Align.SpaceAround,\n    DIMENSION_WIDTH: Dimension.Width,\n    DIMENSION_HEIGHT: Dimension.Height,\n    DIRECTION_INHERIT: Direction.Inherit,\n    DIRECTION_LTR: Direction.LTR,\n    DIRECTION_RTL: Direction.RTL,\n    DISPLAY_FLEX: Display.Flex,\n    DISPLAY_NONE: Display.None,\n    EDGE_LEFT: Edge.Left,\n    EDGE_TOP: Edge.Top,\n    EDGE_RIGHT: Edge.Right,\n    EDGE_BOTTOM: Edge.Bottom,\n    EDGE_START: Edge.Start,\n    EDGE_END: Edge.End,\n    EDGE_HORIZONTAL: Edge.Horizontal,\n    EDGE_VERTICAL: Edge.Vertical,\n    EDGE_ALL: Edge.All,\n    ERRATA_NONE: Errata.None,\n    ERRATA_STRETCH_FLEX_BASIS: Errata.StretchFlexBasis,\n    ERRATA_ALL: Errata.All,\n    ERRATA_CLASSIC: Errata.Classic,\n    EXPERIMENTAL_FEATURE_WEB_FLEX_BASIS: ExperimentalFeature.WebFlexBasis,\n    EXPERIMENTAL_FEATURE_ABSOLUTE_PERCENTAGE_AGAINST_PADDING_EDGE: ExperimentalFeature.AbsolutePercentageAgainstPaddingEdge,\n    EXPERIMENTAL_FEATURE_FIX_JNILOCAL_REF_OVERFLOWS: ExperimentalFeature.FixJNILocalRefOverflows,\n    FLEX_DIRECTION_COLUMN: FlexDirection.Column,\n    FLEX_DIRECTION_COLUMN_REVERSE: FlexDirection.ColumnReverse,\n    FLEX_DIRECTION_ROW: FlexDirection.Row,\n    FLEX_DIRECTION_ROW_REVERSE: FlexDirection.RowReverse,\n    GUTTER_COLUMN: Gutter.Column,\n    GUTTER_ROW: Gutter.Row,\n    GUTTER_ALL: Gutter.All,\n    JUSTIFY_FLEX_START: Justify.FlexStart,\n    JUSTIFY_CENTER: Justify.Center,\n    JUSTIFY_FLEX_END: Justify.FlexEnd,\n    JUSTIFY_SPACE_BETWEEN: Justify.SpaceBetween,\n    JUSTIFY_SPACE_AROUND: Justify.SpaceAround,\n    JUSTIFY_SPACE_EVENLY: Justify.SpaceEvenly,\n    LOG_LEVEL_ERROR: LogLevel.Error,\n    LOG_LEVEL_WARN: LogLevel.Warn,\n    LOG_LEVEL_INFO: LogLevel.Info,\n    LOG_LEVEL_DEBUG: LogLevel.Debug,\n    LOG_LEVEL_VERBOSE: LogLevel.Verbose,\n    LOG_LEVEL_FATAL: LogLevel.Fatal,\n    MEASURE_MODE_UNDEFINED: MeasureMode.Undefined,\n    MEASURE_MODE_EXACTLY: MeasureMode.Exactly,\n    MEASURE_MODE_AT_MOST: MeasureMode.AtMost,\n    NODE_TYPE_DEFAULT: NodeType.Default,\n    NODE_TYPE_TEXT: NodeType.Text,\n    OVERFLOW_VISIBLE: Overflow.Visible,\n    OVERFLOW_HIDDEN: Overflow.Hidden,\n    OVERFLOW_SCROLL: Overflow.Scroll,\n    POSITION_TYPE_STATIC: PositionType.Static,\n    POSITION_TYPE_RELATIVE: PositionType.Relative,\n    POSITION_TYPE_ABSOLUTE: PositionType.Absolute,\n    PRINT_OPTIONS_LAYOUT: PrintOptions.Layout,\n    PRINT_OPTIONS_STYLE: PrintOptions.Style,\n    PRINT_OPTIONS_CHILDREN: PrintOptions.Children,\n    UNIT_UNDEFINED: Unit.Undefined,\n    UNIT_POINT: Unit.Point,\n    UNIT_PERCENT: Unit.Percent,\n    UNIT_AUTO: Unit.Auto,\n    WRAP_NO_WRAP: Wrap.NoWrap,\n    WRAP_WRAP: Wrap.Wrap,\n    WRAP_WRAP_REVERSE: Wrap.WrapReverse\n};\nvar _default = constants;\nexports[\"default\"] = _default; //# sourceMappingURL=YGEnums.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/yoga-layout/src/generated/YGEnums.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/yoga-layout/src/wrapAssembly.js":
/*!******************************************************!*\
  !*** ./node_modules/yoga-layout/src/wrapAssembly.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = wrapAssembly;\nvar _YGEnums = _interopRequireWildcard(__webpack_require__(/*! ./generated/YGEnums */ \"(ssr)/./node_modules/yoga-layout/src/generated/YGEnums.js\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */ function wrapAssembly(lib) {\n    function patch(prototype, name, fn) {\n        const original = prototype[name];\n        prototype[name] = function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            return fn.call(this, original, ...args);\n        };\n    }\n    for (const fnName of [\n        \"setPosition\",\n        \"setMargin\",\n        \"setFlexBasis\",\n        \"setWidth\",\n        \"setHeight\",\n        \"setMinWidth\",\n        \"setMinHeight\",\n        \"setMaxWidth\",\n        \"setMaxHeight\",\n        \"setPadding\"\n    ]){\n        const methods = {\n            [_YGEnums.Unit.Point]: lib.Node.prototype[fnName],\n            [_YGEnums.Unit.Percent]: lib.Node.prototype[`${fnName}Percent`],\n            [_YGEnums.Unit.Auto]: lib.Node.prototype[`${fnName}Auto`]\n        };\n        patch(lib.Node.prototype, fnName, function(original) {\n            for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                args[_key2 - 1] = arguments[_key2];\n            }\n            // We patch all these functions to add support for the following calls:\n            // .setWidth(100) / .setWidth(\"100%\") / .setWidth(.getWidth()) / .setWidth(\"auto\")\n            const value = args.pop();\n            let unit, asNumber;\n            if (value === \"auto\") {\n                unit = _YGEnums.Unit.Auto;\n                asNumber = undefined;\n            } else if (typeof value === \"object\") {\n                unit = value.unit;\n                asNumber = value.valueOf();\n            } else {\n                unit = typeof value === \"string\" && value.endsWith(\"%\") ? _YGEnums.Unit.Percent : _YGEnums.Unit.Point;\n                asNumber = parseFloat(value);\n                if (!Number.isNaN(value) && Number.isNaN(asNumber)) {\n                    throw new Error(`Invalid value ${value} for ${fnName}`);\n                }\n            }\n            if (!methods[unit]) throw new Error(`Failed to execute \"${fnName}\": Unsupported unit '${value}'`);\n            if (asNumber !== undefined) {\n                return methods[unit].call(this, ...args, asNumber);\n            } else {\n                return methods[unit].call(this, ...args);\n            }\n        });\n    }\n    function wrapMeasureFunction(measureFunction) {\n        return lib.MeasureCallback.implement({\n            measure: function() {\n                const { width, height } = measureFunction(...arguments);\n                return {\n                    width: width ?? NaN,\n                    height: height ?? NaN\n                };\n            }\n        });\n    }\n    patch(lib.Node.prototype, \"setMeasureFunc\", function(original, measureFunc) {\n        // This patch is just a convenience patch, since it helps write more\n        // idiomatic source code (such as .setMeasureFunc(null))\n        if (measureFunc) {\n            return original.call(this, wrapMeasureFunction(measureFunc));\n        } else {\n            return this.unsetMeasureFunc();\n        }\n    });\n    function wrapDirtiedFunc(dirtiedFunction) {\n        return lib.DirtiedCallback.implement({\n            dirtied: dirtiedFunction\n        });\n    }\n    patch(lib.Node.prototype, \"setDirtiedFunc\", function(original, dirtiedFunc) {\n        original.call(this, wrapDirtiedFunc(dirtiedFunc));\n    });\n    patch(lib.Config.prototype, \"free\", function() {\n        // Since we handle the memory allocation ourselves (via lib.Config.create),\n        // we also need to handle the deallocation\n        lib.Config.destroy(this);\n    });\n    patch(lib.Node, \"create\", (_, config)=>{\n        // We decide the constructor we want to call depending on the parameters\n        return config ? lib.Node.createWithConfig(config) : lib.Node.createDefault();\n    });\n    patch(lib.Node.prototype, \"free\", function() {\n        // Since we handle the memory allocation ourselves (via lib.Node.create),\n        // we also need to handle the deallocation\n        lib.Node.destroy(this);\n    });\n    patch(lib.Node.prototype, \"freeRecursive\", function() {\n        for(let t = 0, T = this.getChildCount(); t < T; ++t){\n            this.getChild(0).freeRecursive();\n        }\n        this.free();\n    });\n    patch(lib.Node.prototype, \"calculateLayout\", function(original) {\n        let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NaN;\n        let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NaN;\n        let direction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _YGEnums.Direction.LTR;\n        // Just a small patch to add support for the function default parameters\n        return original.call(this, width, height, direction);\n    });\n    return {\n        Config: lib.Config,\n        Node: lib.Node,\n        ..._YGEnums.default\n    };\n} //# sourceMappingURL=wrapAssembly.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/yoga-layout/src/wrapAssembly.js\n");

/***/ })

};
;